/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { T2xGLLqvOriginRequestAccess } from './t2x-gllqv-origin-request-access';
/**
 * Configuration parameters of connection between cloudflared and origin server.
 * @export
 * @interface T2xGLLqvOriginRequest
 */
export interface T2xGLLqvOriginRequest {
    /**
     * 
     * @type {T2xGLLqvOriginRequestAccess}
     * @memberof T2xGLLqvOriginRequest
     */
    access?: T2xGLLqvOriginRequestAccess;
    /**
     * Path to the certificate authority (CA) for the certificate of your origin. This option should be used only if your certificate is not signed by Cloudflare.
     * @type {string}
     * @memberof T2xGLLqvOriginRequest
     */
    caPool?: string;
    /**
     * Timeout for establishing a new TCP connection to your origin server. This excludes the time taken to establish TLS, which is controlled by tlsTimeout.
     * @type {number}
     * @memberof T2xGLLqvOriginRequest
     */
    connectTimeout?: number;
    /**
     * Disables chunked transfer encoding. Useful if you are running a WSGI server.
     * @type {boolean}
     * @memberof T2xGLLqvOriginRequest
     */
    disableChunkedEncoding?: boolean;
    /**
     * Attempt to connect to origin using HTTP2. Origin must be configured as https.
     * @type {boolean}
     * @memberof T2xGLLqvOriginRequest
     */
    http2Origin?: boolean;
    /**
     * Sets the HTTP Host header on requests sent to the local service.
     * @type {string}
     * @memberof T2xGLLqvOriginRequest
     */
    httpHostHeader?: string;
    /**
     * Maximum number of idle keepalive connections between Tunnel and your origin. This does not restrict the total number of concurrent connections.
     * @type {number}
     * @memberof T2xGLLqvOriginRequest
     */
    keepAliveConnections?: number;
    /**
     * Timeout after which an idle keepalive connection can be discarded.
     * @type {number}
     * @memberof T2xGLLqvOriginRequest
     */
    keepAliveTimeout?: number;
    /**
     * Disable the “happy eyeballs” algorithm for IPv4/IPv6 fallback if your local network has misconfigured one of the protocols.
     * @type {boolean}
     * @memberof T2xGLLqvOriginRequest
     */
    noHappyEyeballs?: boolean;
    /**
     * Disables TLS verification of the certificate presented by your origin. Will allow any certificate from the origin to be accepted.
     * @type {boolean}
     * @memberof T2xGLLqvOriginRequest
     */
    noTLSVerify?: boolean;
    /**
     * Hostname that cloudflared should expect from your origin server certificate.
     * @type {string}
     * @memberof T2xGLLqvOriginRequest
     */
    originServerName?: string;
    /**
     * cloudflared starts a proxy server to translate HTTP traffic into TCP when proxying, for example, SSH or RDP. This configures what type of proxy will be started. Valid options are: \"\" for the regular proxy and \"socks\" for a SOCKS5 proxy. 
     * @type {string}
     * @memberof T2xGLLqvOriginRequest
     */
    proxyType?: string;
    /**
     * The timeout after which a TCP keepalive packet is sent on a connection between Tunnel and the origin server.
     * @type {number}
     * @memberof T2xGLLqvOriginRequest
     */
    tcpKeepAlive?: number;
    /**
     * Timeout for completing a TLS handshake to your origin server, if you have chosen to connect Tunnel to an HTTPS server.
     * @type {number}
     * @memberof T2xGLLqvOriginRequest
     */
    tlsTimeout?: number;
}
