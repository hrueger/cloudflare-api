/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse4XX271 } from '../models';
import { InlineResponse4XX272 } from '../models';
import { InlineResponse4XX273 } from '../models';
import { Model2UOufITZAccountIdentifier } from '../models';
import { Model2UOufITZAcl } from '../models';
import { Model2UOufITZComponentsSchemasIdResponse } from '../models';
import { Model2UOufITZComponentsSchemasIdentifier } from '../models';
import { Model2UOufITZComponentsSchemasResponseCollection } from '../models';
import { Model2UOufITZComponentsSchemasSingleResponse } from '../models';
/**
 * SecondaryDNSACLApi - axios parameter creator
 * @export
 */
export const SecondaryDNSACLApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get ACL.
         * @summary ACL Details
         * @param {Model2UOufITZComponentsSchemasIdentifier} identifier 
         * @param {Model2UOufITZAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secondaryDnsAclAclDetails: async (identifier: Model2UOufITZComponentsSchemasIdentifier, accountIdentifier: Model2UOufITZAccountIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling secondaryDnsAclAclDetails.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling secondaryDnsAclAclDetails.');
            }
            const localVarPath = `/accounts/{account_identifier}/secondary_dns/acls/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create ACL.
         * @summary Create ACL
         * @param {any} body 
         * @param {Model2UOufITZAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secondaryDnsAclCreateAcl: async (body: any, accountIdentifier: Model2UOufITZAccountIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling secondaryDnsAclCreateAcl.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling secondaryDnsAclCreateAcl.');
            }
            const localVarPath = `/accounts/{account_identifier}/secondary_dns/acls`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete ACL.
         * @summary Delete ACL
         * @param {Model2UOufITZComponentsSchemasIdentifier} identifier 
         * @param {Model2UOufITZAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secondaryDnsAclDeleteAcl: async (identifier: Model2UOufITZComponentsSchemasIdentifier, accountIdentifier: Model2UOufITZAccountIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling secondaryDnsAclDeleteAcl.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling secondaryDnsAclDeleteAcl.');
            }
            const localVarPath = `/accounts/{account_identifier}/secondary_dns/acls/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List ACLs.
         * @summary List ACLs
         * @param {Model2UOufITZAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secondaryDnsAclListAcLs: async (accountIdentifier: Model2UOufITZAccountIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling secondaryDnsAclListAcLs.');
            }
            const localVarPath = `/accounts/{account_identifier}/secondary_dns/acls`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify ACL.
         * @summary Update ACL
         * @param {Model2UOufITZAcl} body 
         * @param {Model2UOufITZComponentsSchemasIdentifier} identifier 
         * @param {Model2UOufITZAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secondaryDnsAclUpdateAcl: async (body: Model2UOufITZAcl, identifier: Model2UOufITZComponentsSchemasIdentifier, accountIdentifier: Model2UOufITZAccountIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling secondaryDnsAclUpdateAcl.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling secondaryDnsAclUpdateAcl.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling secondaryDnsAclUpdateAcl.');
            }
            const localVarPath = `/accounts/{account_identifier}/secondary_dns/acls/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SecondaryDNSACLApi - functional programming interface
 * @export
 */
export const SecondaryDNSACLApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get ACL.
         * @summary ACL Details
         * @param {Model2UOufITZComponentsSchemasIdentifier} identifier 
         * @param {Model2UOufITZAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secondaryDnsAclAclDetails(identifier: Model2UOufITZComponentsSchemasIdentifier, accountIdentifier: Model2UOufITZAccountIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model2UOufITZComponentsSchemasSingleResponse>>> {
            const localVarAxiosArgs = await SecondaryDNSACLApiAxiosParamCreator(configuration).secondaryDnsAclAclDetails(identifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create ACL.
         * @summary Create ACL
         * @param {any} body 
         * @param {Model2UOufITZAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secondaryDnsAclCreateAcl(body: any, accountIdentifier: Model2UOufITZAccountIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model2UOufITZComponentsSchemasSingleResponse>>> {
            const localVarAxiosArgs = await SecondaryDNSACLApiAxiosParamCreator(configuration).secondaryDnsAclCreateAcl(body, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete ACL.
         * @summary Delete ACL
         * @param {Model2UOufITZComponentsSchemasIdentifier} identifier 
         * @param {Model2UOufITZAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secondaryDnsAclDeleteAcl(identifier: Model2UOufITZComponentsSchemasIdentifier, accountIdentifier: Model2UOufITZAccountIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model2UOufITZComponentsSchemasIdResponse>>> {
            const localVarAxiosArgs = await SecondaryDNSACLApiAxiosParamCreator(configuration).secondaryDnsAclDeleteAcl(identifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List ACLs.
         * @summary List ACLs
         * @param {Model2UOufITZAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secondaryDnsAclListAcLs(accountIdentifier: Model2UOufITZAccountIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model2UOufITZComponentsSchemasResponseCollection>>> {
            const localVarAxiosArgs = await SecondaryDNSACLApiAxiosParamCreator(configuration).secondaryDnsAclListAcLs(accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Modify ACL.
         * @summary Update ACL
         * @param {Model2UOufITZAcl} body 
         * @param {Model2UOufITZComponentsSchemasIdentifier} identifier 
         * @param {Model2UOufITZAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secondaryDnsAclUpdateAcl(body: Model2UOufITZAcl, identifier: Model2UOufITZComponentsSchemasIdentifier, accountIdentifier: Model2UOufITZAccountIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model2UOufITZComponentsSchemasSingleResponse>>> {
            const localVarAxiosArgs = await SecondaryDNSACLApiAxiosParamCreator(configuration).secondaryDnsAclUpdateAcl(body, identifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SecondaryDNSACLApi - factory interface
 * @export
 */
export const SecondaryDNSACLApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Get ACL.
         * @summary ACL Details
         * @param {Model2UOufITZComponentsSchemasIdentifier} identifier 
         * @param {Model2UOufITZAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secondaryDnsAclAclDetails(identifier: Model2UOufITZComponentsSchemasIdentifier, accountIdentifier: Model2UOufITZAccountIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model2UOufITZComponentsSchemasSingleResponse>> {
            return SecondaryDNSACLApiFp(configuration).secondaryDnsAclAclDetails(identifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Create ACL.
         * @summary Create ACL
         * @param {any} body 
         * @param {Model2UOufITZAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secondaryDnsAclCreateAcl(body: any, accountIdentifier: Model2UOufITZAccountIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model2UOufITZComponentsSchemasSingleResponse>> {
            return SecondaryDNSACLApiFp(configuration).secondaryDnsAclCreateAcl(body, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete ACL.
         * @summary Delete ACL
         * @param {Model2UOufITZComponentsSchemasIdentifier} identifier 
         * @param {Model2UOufITZAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secondaryDnsAclDeleteAcl(identifier: Model2UOufITZComponentsSchemasIdentifier, accountIdentifier: Model2UOufITZAccountIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model2UOufITZComponentsSchemasIdResponse>> {
            return SecondaryDNSACLApiFp(configuration).secondaryDnsAclDeleteAcl(identifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * List ACLs.
         * @summary List ACLs
         * @param {Model2UOufITZAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secondaryDnsAclListAcLs(accountIdentifier: Model2UOufITZAccountIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model2UOufITZComponentsSchemasResponseCollection>> {
            return SecondaryDNSACLApiFp(configuration).secondaryDnsAclListAcLs(accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify ACL.
         * @summary Update ACL
         * @param {Model2UOufITZAcl} body 
         * @param {Model2UOufITZComponentsSchemasIdentifier} identifier 
         * @param {Model2UOufITZAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secondaryDnsAclUpdateAcl(body: Model2UOufITZAcl, identifier: Model2UOufITZComponentsSchemasIdentifier, accountIdentifier: Model2UOufITZAccountIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model2UOufITZComponentsSchemasSingleResponse>> {
            return SecondaryDNSACLApiFp(configuration).secondaryDnsAclUpdateAcl(body, identifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SecondaryDNSACLApi - object-oriented interface
 * @export
 * @class SecondaryDNSACLApi
 * @extends {BaseAPI}
 */
export class SecondaryDNSACLApi extends BaseAPI {
    /**
     * Get ACL.
     * @summary ACL Details
     * @param {Model2UOufITZComponentsSchemasIdentifier} identifier 
     * @param {Model2UOufITZAccountIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecondaryDNSACLApi
     */
    public async secondaryDnsAclAclDetails(identifier: Model2UOufITZComponentsSchemasIdentifier, accountIdentifier: Model2UOufITZAccountIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model2UOufITZComponentsSchemasSingleResponse>> {
        return SecondaryDNSACLApiFp(this.configuration).secondaryDnsAclAclDetails(identifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create ACL.
     * @summary Create ACL
     * @param {any} body 
     * @param {Model2UOufITZAccountIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecondaryDNSACLApi
     */
    public async secondaryDnsAclCreateAcl(body: any, accountIdentifier: Model2UOufITZAccountIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model2UOufITZComponentsSchemasSingleResponse>> {
        return SecondaryDNSACLApiFp(this.configuration).secondaryDnsAclCreateAcl(body, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete ACL.
     * @summary Delete ACL
     * @param {Model2UOufITZComponentsSchemasIdentifier} identifier 
     * @param {Model2UOufITZAccountIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecondaryDNSACLApi
     */
    public async secondaryDnsAclDeleteAcl(identifier: Model2UOufITZComponentsSchemasIdentifier, accountIdentifier: Model2UOufITZAccountIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model2UOufITZComponentsSchemasIdResponse>> {
        return SecondaryDNSACLApiFp(this.configuration).secondaryDnsAclDeleteAcl(identifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List ACLs.
     * @summary List ACLs
     * @param {Model2UOufITZAccountIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecondaryDNSACLApi
     */
    public async secondaryDnsAclListAcLs(accountIdentifier: Model2UOufITZAccountIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model2UOufITZComponentsSchemasResponseCollection>> {
        return SecondaryDNSACLApiFp(this.configuration).secondaryDnsAclListAcLs(accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify ACL.
     * @summary Update ACL
     * @param {Model2UOufITZAcl} body 
     * @param {Model2UOufITZComponentsSchemasIdentifier} identifier 
     * @param {Model2UOufITZAccountIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecondaryDNSACLApi
     */
    public async secondaryDnsAclUpdateAcl(body: Model2UOufITZAcl, identifier: Model2UOufITZComponentsSchemasIdentifier, accountIdentifier: Model2UOufITZAccountIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model2UOufITZComponentsSchemasSingleResponse>> {
        return SecondaryDNSACLApiFp(this.configuration).secondaryDnsAclUpdateAcl(body, identifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
}
