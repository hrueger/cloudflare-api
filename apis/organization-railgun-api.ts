/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { C4f8RoOSCommonComponentsSchemasIdentifier } from '../models';
import { C4f8RoOSRailgunComponentsSchemasIdentifier } from '../models';
import { C4f8RoOSRailgunResponseCollection } from '../models';
import { C4f8RoOSRailgunResponseSingle } from '../models';
import { C4f8RoOSRailgunResponseSingleId } from '../models';
import { InlineResponse20044 } from '../models';
import { InlineResponse4xx5 } from '../models';
import { InlineResponse4xx56 } from '../models';
import { InlineResponse4xx6 } from '../models';
import { InlineResponse4xx7 } from '../models';
import { OrganizationIdentifierRailgunsBody } from '../models';
import { RailgunsIdentifierBody } from '../models';
/**
 * OrganizationRailgunApi - axios parameter creator
 * @export
 */
export const OrganizationRailgunApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Railgun
         * @param {OrganizationIdentifierRailgunsBody} body 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} organizationIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organizationRailgunCreateRailgun: async (body: OrganizationIdentifierRailgunsBody, organizationIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling organizationRailgunCreateRailgun.');
            }
            // verify required parameter 'organizationIdentifier' is not null or undefined
            if (organizationIdentifier === null || organizationIdentifier === undefined) {
                throw new RequiredError('organizationIdentifier','Required parameter organizationIdentifier was null or undefined when calling organizationRailgunCreateRailgun.');
            }
            const localVarPath = `/organizations/{organization_identifier}/railguns`
                .replace(`{${"organization_identifier"}}`, encodeURIComponent(String(organizationIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Disable and delete a Railgun. This will immediately disable the Railgun for any connected zones.
         * @summary Delete Railgun
         * @param {C4f8RoOSRailgunComponentsSchemasIdentifier} identifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} organizationIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organizationRailgunDeleteRailgun: async (identifier: C4f8RoOSRailgunComponentsSchemasIdentifier, organizationIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling organizationRailgunDeleteRailgun.');
            }
            // verify required parameter 'organizationIdentifier' is not null or undefined
            if (organizationIdentifier === null || organizationIdentifier === undefined) {
                throw new RequiredError('organizationIdentifier','Required parameter organizationIdentifier was null or undefined when calling organizationRailgunDeleteRailgun.');
            }
            const localVarPath = `/organizations/{organization_identifier}/railguns/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"organization_identifier"}}`, encodeURIComponent(String(organizationIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Enable or disable a Railgun for all zones connected to it.
         * @summary Enable or disable a Railgun
         * @param {RailgunsIdentifierBody} body 
         * @param {C4f8RoOSRailgunComponentsSchemasIdentifier} identifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} organizationIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organizationRailgunEnableOrDisableARailgun: async (body: RailgunsIdentifierBody, identifier: C4f8RoOSRailgunComponentsSchemasIdentifier, organizationIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling organizationRailgunEnableOrDisableARailgun.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling organizationRailgunEnableOrDisableARailgun.');
            }
            // verify required parameter 'organizationIdentifier' is not null or undefined
            if (organizationIdentifier === null || organizationIdentifier === undefined) {
                throw new RequiredError('organizationIdentifier','Required parameter organizationIdentifier was null or undefined when calling organizationRailgunEnableOrDisableARailgun.');
            }
            const localVarPath = `/organizations/{organization_identifier}/railguns/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"organization_identifier"}}`, encodeURIComponent(String(organizationIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists the zones that are currently using this Railgun.
         * @summary Get Railgun zones
         * @param {C4f8RoOSRailgunComponentsSchemasIdentifier} identifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} organizationIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organizationRailgunGetRailgunZones: async (identifier: C4f8RoOSRailgunComponentsSchemasIdentifier, organizationIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling organizationRailgunGetRailgunZones.');
            }
            // verify required parameter 'organizationIdentifier' is not null or undefined
            if (organizationIdentifier === null || organizationIdentifier === undefined) {
                throw new RequiredError('organizationIdentifier','Required parameter organizationIdentifier was null or undefined when calling organizationRailgunGetRailgunZones.');
            }
            const localVarPath = `/organizations/{organization_identifier}/railguns/{identifier}/zones`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"organization_identifier"}}`, encodeURIComponent(String(organizationIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List, search, sort and filter your Railguns.
         * @summary List Railguns
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} organizationIdentifier 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {string} [direction] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organizationRailgunListRailguns: async (organizationIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, page?: number, perPage?: number, direction?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationIdentifier' is not null or undefined
            if (organizationIdentifier === null || organizationIdentifier === undefined) {
                throw new RequiredError('organizationIdentifier','Required parameter organizationIdentifier was null or undefined when calling organizationRailgunListRailguns.');
            }
            const localVarPath = `/organizations/{organization_identifier}/railguns`
                .replace(`{${"organization_identifier"}}`, encodeURIComponent(String(organizationIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Railgun details
         * @param {C4f8RoOSRailgunComponentsSchemasIdentifier} identifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} organizationIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organizationRailgunRailgunDetails: async (identifier: C4f8RoOSRailgunComponentsSchemasIdentifier, organizationIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling organizationRailgunRailgunDetails.');
            }
            // verify required parameter 'organizationIdentifier' is not null or undefined
            if (organizationIdentifier === null || organizationIdentifier === undefined) {
                throw new RequiredError('organizationIdentifier','Required parameter organizationIdentifier was null or undefined when calling organizationRailgunRailgunDetails.');
            }
            const localVarPath = `/organizations/{organization_identifier}/railguns/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"organization_identifier"}}`, encodeURIComponent(String(organizationIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganizationRailgunApi - functional programming interface
 * @export
 */
export const OrganizationRailgunApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Railgun
         * @param {OrganizationIdentifierRailgunsBody} body 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} organizationIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async organizationRailgunCreateRailgun(body: OrganizationIdentifierRailgunsBody, organizationIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<C4f8RoOSRailgunResponseSingle>>> {
            const localVarAxiosArgs = await OrganizationRailgunApiAxiosParamCreator(configuration).organizationRailgunCreateRailgun(body, organizationIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Disable and delete a Railgun. This will immediately disable the Railgun for any connected zones.
         * @summary Delete Railgun
         * @param {C4f8RoOSRailgunComponentsSchemasIdentifier} identifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} organizationIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async organizationRailgunDeleteRailgun(identifier: C4f8RoOSRailgunComponentsSchemasIdentifier, organizationIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<C4f8RoOSRailgunResponseSingleId>>> {
            const localVarAxiosArgs = await OrganizationRailgunApiAxiosParamCreator(configuration).organizationRailgunDeleteRailgun(identifier, organizationIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Enable or disable a Railgun for all zones connected to it.
         * @summary Enable or disable a Railgun
         * @param {RailgunsIdentifierBody} body 
         * @param {C4f8RoOSRailgunComponentsSchemasIdentifier} identifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} organizationIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async organizationRailgunEnableOrDisableARailgun(body: RailgunsIdentifierBody, identifier: C4f8RoOSRailgunComponentsSchemasIdentifier, organizationIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<C4f8RoOSRailgunResponseSingle>>> {
            const localVarAxiosArgs = await OrganizationRailgunApiAxiosParamCreator(configuration).organizationRailgunEnableOrDisableARailgun(body, identifier, organizationIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Lists the zones that are currently using this Railgun.
         * @summary Get Railgun zones
         * @param {C4f8RoOSRailgunComponentsSchemasIdentifier} identifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} organizationIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async organizationRailgunGetRailgunZones(identifier: C4f8RoOSRailgunComponentsSchemasIdentifier, organizationIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20044>>> {
            const localVarAxiosArgs = await OrganizationRailgunApiAxiosParamCreator(configuration).organizationRailgunGetRailgunZones(identifier, organizationIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List, search, sort and filter your Railguns.
         * @summary List Railguns
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} organizationIdentifier 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {string} [direction] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async organizationRailgunListRailguns(organizationIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, page?: number, perPage?: number, direction?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<C4f8RoOSRailgunResponseCollection>>> {
            const localVarAxiosArgs = await OrganizationRailgunApiAxiosParamCreator(configuration).organizationRailgunListRailguns(organizationIdentifier, page, perPage, direction, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Railgun details
         * @param {C4f8RoOSRailgunComponentsSchemasIdentifier} identifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} organizationIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async organizationRailgunRailgunDetails(identifier: C4f8RoOSRailgunComponentsSchemasIdentifier, organizationIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<C4f8RoOSRailgunResponseSingle>>> {
            const localVarAxiosArgs = await OrganizationRailgunApiAxiosParamCreator(configuration).organizationRailgunRailgunDetails(identifier, organizationIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * OrganizationRailgunApi - factory interface
 * @export
 */
export const OrganizationRailgunApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Create Railgun
         * @param {OrganizationIdentifierRailgunsBody} body 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} organizationIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async organizationRailgunCreateRailgun(body: OrganizationIdentifierRailgunsBody, organizationIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<C4f8RoOSRailgunResponseSingle>> {
            return OrganizationRailgunApiFp(configuration).organizationRailgunCreateRailgun(body, organizationIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Disable and delete a Railgun. This will immediately disable the Railgun for any connected zones.
         * @summary Delete Railgun
         * @param {C4f8RoOSRailgunComponentsSchemasIdentifier} identifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} organizationIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async organizationRailgunDeleteRailgun(identifier: C4f8RoOSRailgunComponentsSchemasIdentifier, organizationIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<C4f8RoOSRailgunResponseSingleId>> {
            return OrganizationRailgunApiFp(configuration).organizationRailgunDeleteRailgun(identifier, organizationIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Enable or disable a Railgun for all zones connected to it.
         * @summary Enable or disable a Railgun
         * @param {RailgunsIdentifierBody} body 
         * @param {C4f8RoOSRailgunComponentsSchemasIdentifier} identifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} organizationIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async organizationRailgunEnableOrDisableARailgun(body: RailgunsIdentifierBody, identifier: C4f8RoOSRailgunComponentsSchemasIdentifier, organizationIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<C4f8RoOSRailgunResponseSingle>> {
            return OrganizationRailgunApiFp(configuration).organizationRailgunEnableOrDisableARailgun(body, identifier, organizationIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists the zones that are currently using this Railgun.
         * @summary Get Railgun zones
         * @param {C4f8RoOSRailgunComponentsSchemasIdentifier} identifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} organizationIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async organizationRailgunGetRailgunZones(identifier: C4f8RoOSRailgunComponentsSchemasIdentifier, organizationIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20044>> {
            return OrganizationRailgunApiFp(configuration).organizationRailgunGetRailgunZones(identifier, organizationIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * List, search, sort and filter your Railguns.
         * @summary List Railguns
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} organizationIdentifier 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {string} [direction] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async organizationRailgunListRailguns(organizationIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, page?: number, perPage?: number, direction?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<C4f8RoOSRailgunResponseCollection>> {
            return OrganizationRailgunApiFp(configuration).organizationRailgunListRailguns(organizationIdentifier, page, perPage, direction, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Railgun details
         * @param {C4f8RoOSRailgunComponentsSchemasIdentifier} identifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} organizationIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async organizationRailgunRailgunDetails(identifier: C4f8RoOSRailgunComponentsSchemasIdentifier, organizationIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<C4f8RoOSRailgunResponseSingle>> {
            return OrganizationRailgunApiFp(configuration).organizationRailgunRailgunDetails(identifier, organizationIdentifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrganizationRailgunApi - object-oriented interface
 * @export
 * @class OrganizationRailgunApi
 * @extends {BaseAPI}
 */
export class OrganizationRailgunApi extends BaseAPI {
    /**
     * 
     * @summary Create Railgun
     * @param {OrganizationIdentifierRailgunsBody} body 
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} organizationIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationRailgunApi
     */
    public async organizationRailgunCreateRailgun(body: OrganizationIdentifierRailgunsBody, organizationIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<C4f8RoOSRailgunResponseSingle>> {
        return OrganizationRailgunApiFp(this.configuration).organizationRailgunCreateRailgun(body, organizationIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Disable and delete a Railgun. This will immediately disable the Railgun for any connected zones.
     * @summary Delete Railgun
     * @param {C4f8RoOSRailgunComponentsSchemasIdentifier} identifier 
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} organizationIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationRailgunApi
     */
    public async organizationRailgunDeleteRailgun(identifier: C4f8RoOSRailgunComponentsSchemasIdentifier, organizationIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<C4f8RoOSRailgunResponseSingleId>> {
        return OrganizationRailgunApiFp(this.configuration).organizationRailgunDeleteRailgun(identifier, organizationIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Enable or disable a Railgun for all zones connected to it.
     * @summary Enable or disable a Railgun
     * @param {RailgunsIdentifierBody} body 
     * @param {C4f8RoOSRailgunComponentsSchemasIdentifier} identifier 
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} organizationIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationRailgunApi
     */
    public async organizationRailgunEnableOrDisableARailgun(body: RailgunsIdentifierBody, identifier: C4f8RoOSRailgunComponentsSchemasIdentifier, organizationIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<C4f8RoOSRailgunResponseSingle>> {
        return OrganizationRailgunApiFp(this.configuration).organizationRailgunEnableOrDisableARailgun(body, identifier, organizationIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists the zones that are currently using this Railgun.
     * @summary Get Railgun zones
     * @param {C4f8RoOSRailgunComponentsSchemasIdentifier} identifier 
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} organizationIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationRailgunApi
     */
    public async organizationRailgunGetRailgunZones(identifier: C4f8RoOSRailgunComponentsSchemasIdentifier, organizationIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20044>> {
        return OrganizationRailgunApiFp(this.configuration).organizationRailgunGetRailgunZones(identifier, organizationIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List, search, sort and filter your Railguns.
     * @summary List Railguns
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} organizationIdentifier 
     * @param {number} [page] 
     * @param {number} [perPage] 
     * @param {string} [direction] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationRailgunApi
     */
    public async organizationRailgunListRailguns(organizationIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, page?: number, perPage?: number, direction?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<C4f8RoOSRailgunResponseCollection>> {
        return OrganizationRailgunApiFp(this.configuration).organizationRailgunListRailguns(organizationIdentifier, page, perPage, direction, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Railgun details
     * @param {C4f8RoOSRailgunComponentsSchemasIdentifier} identifier 
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} organizationIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationRailgunApi
     */
    public async organizationRailgunRailgunDetails(identifier: C4f8RoOSRailgunComponentsSchemasIdentifier, organizationIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<C4f8RoOSRailgunResponseSingle>> {
        return OrganizationRailgunApiFp(this.configuration).organizationRailgunRailgunDetails(identifier, organizationIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
}
