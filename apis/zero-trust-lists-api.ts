/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { GatewayListsBody } from '../models';
import { InlineResponse4XX344 } from '../models';
import { InlineResponse4XX353 } from '../models';
import { InlineResponse4XX354 } from '../models';
import { InlineResponse4XX355 } from '../models';
import { InlineResponse4XX356 } from '../models';
import { Ir4bTFI2EmptyResponse } from '../models';
import { Ir4bTFI2Identifier } from '../models';
import { Ir4bTFI2ListItemResponseCollection } from '../models';
import { Ir4bTFI2ResponseCollection } from '../models';
import { Ir4bTFI2SingleResponse } from '../models';
import { Ir4bTFI2SingleResponseWithListItems } from '../models';
import { Ir4bTFI2Uuid } from '../models';
import { ListsUuidBody } from '../models';
import { ListsUuidBody1 } from '../models';
/**
 * ZeroTrustListsApi - axios parameter creator
 * @export
 */
export const ZeroTrustListsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new Zero Trust list.
         * @summary Create Zero Trust list
         * @param {GatewayListsBody} body 
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zeroTrustListsCreateZeroTrustList: async (body: GatewayListsBody, identifier: Ir4bTFI2Identifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling zeroTrustListsCreateZeroTrustList.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling zeroTrustListsCreateZeroTrustList.');
            }
            const localVarPath = `/accounts/{identifier}/gateway/lists`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a Zero Trust list.
         * @summary Delete Zero Trust list
         * @param {Ir4bTFI2Uuid} uuid 
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zeroTrustListsDeleteZeroTrustList: async (uuid: Ir4bTFI2Uuid, identifier: Ir4bTFI2Identifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling zeroTrustListsDeleteZeroTrustList.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling zeroTrustListsDeleteZeroTrustList.');
            }
            const localVarPath = `/accounts/{identifier}/gateway/lists/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)))
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches all Zero Trust lists for an account.
         * @summary List Zero Trust lists
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zeroTrustListsListZeroTrustLists: async (identifier: Ir4bTFI2Identifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling zeroTrustListsListZeroTrustLists.');
            }
            const localVarPath = `/accounts/{identifier}/gateway/lists`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Appends or removes an item from a configured Zero Trust list.
         * @summary Patch Zero Trust list
         * @param {ListsUuidBody1} body 
         * @param {Ir4bTFI2Uuid} uuid 
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zeroTrustListsPatchZeroTrustList: async (body: ListsUuidBody1, uuid: Ir4bTFI2Uuid, identifier: Ir4bTFI2Identifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling zeroTrustListsPatchZeroTrustList.');
            }
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling zeroTrustListsPatchZeroTrustList.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling zeroTrustListsPatchZeroTrustList.');
            }
            const localVarPath = `/accounts/{identifier}/gateway/lists/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)))
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a configured Zero Trust list.
         * @summary Update Zero Trust list
         * @param {ListsUuidBody} body 
         * @param {Ir4bTFI2Uuid} uuid 
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zeroTrustListsUpdateZeroTrustList: async (body: ListsUuidBody, uuid: Ir4bTFI2Uuid, identifier: Ir4bTFI2Identifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling zeroTrustListsUpdateZeroTrustList.');
            }
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling zeroTrustListsUpdateZeroTrustList.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling zeroTrustListsUpdateZeroTrustList.');
            }
            const localVarPath = `/accounts/{identifier}/gateway/lists/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)))
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches a single Zero Trust list.
         * @summary Get Zero Trust list details
         * @param {Ir4bTFI2Uuid} uuid 
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zeroTrustListsZeroTrustListDetails: async (uuid: Ir4bTFI2Uuid, identifier: Ir4bTFI2Identifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling zeroTrustListsZeroTrustListDetails.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling zeroTrustListsZeroTrustListDetails.');
            }
            const localVarPath = `/accounts/{identifier}/gateway/lists/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)))
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches all items in a single Zero Trust list.
         * @summary Get Zero Trust list items
         * @param {Ir4bTFI2Uuid} uuid 
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zeroTrustListsZeroTrustListItems: async (uuid: Ir4bTFI2Uuid, identifier: Ir4bTFI2Identifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling zeroTrustListsZeroTrustListItems.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling zeroTrustListsZeroTrustListItems.');
            }
            const localVarPath = `/accounts/{identifier}/gateway/lists/{uuid}/items`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)))
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ZeroTrustListsApi - functional programming interface
 * @export
 */
export const ZeroTrustListsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates a new Zero Trust list.
         * @summary Create Zero Trust list
         * @param {GatewayListsBody} body 
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zeroTrustListsCreateZeroTrustList(body: GatewayListsBody, identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Ir4bTFI2SingleResponseWithListItems>>> {
            const localVarAxiosArgs = await ZeroTrustListsApiAxiosParamCreator(configuration).zeroTrustListsCreateZeroTrustList(body, identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes a Zero Trust list.
         * @summary Delete Zero Trust list
         * @param {Ir4bTFI2Uuid} uuid 
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zeroTrustListsDeleteZeroTrustList(uuid: Ir4bTFI2Uuid, identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Ir4bTFI2EmptyResponse>>> {
            const localVarAxiosArgs = await ZeroTrustListsApiAxiosParamCreator(configuration).zeroTrustListsDeleteZeroTrustList(uuid, identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetches all Zero Trust lists for an account.
         * @summary List Zero Trust lists
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zeroTrustListsListZeroTrustLists(identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Ir4bTFI2ResponseCollection>>> {
            const localVarAxiosArgs = await ZeroTrustListsApiAxiosParamCreator(configuration).zeroTrustListsListZeroTrustLists(identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Appends or removes an item from a configured Zero Trust list.
         * @summary Patch Zero Trust list
         * @param {ListsUuidBody1} body 
         * @param {Ir4bTFI2Uuid} uuid 
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zeroTrustListsPatchZeroTrustList(body: ListsUuidBody1, uuid: Ir4bTFI2Uuid, identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Ir4bTFI2SingleResponse>>> {
            const localVarAxiosArgs = await ZeroTrustListsApiAxiosParamCreator(configuration).zeroTrustListsPatchZeroTrustList(body, uuid, identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates a configured Zero Trust list.
         * @summary Update Zero Trust list
         * @param {ListsUuidBody} body 
         * @param {Ir4bTFI2Uuid} uuid 
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zeroTrustListsUpdateZeroTrustList(body: ListsUuidBody, uuid: Ir4bTFI2Uuid, identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Ir4bTFI2SingleResponse>>> {
            const localVarAxiosArgs = await ZeroTrustListsApiAxiosParamCreator(configuration).zeroTrustListsUpdateZeroTrustList(body, uuid, identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetches a single Zero Trust list.
         * @summary Get Zero Trust list details
         * @param {Ir4bTFI2Uuid} uuid 
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zeroTrustListsZeroTrustListDetails(uuid: Ir4bTFI2Uuid, identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Ir4bTFI2SingleResponse>>> {
            const localVarAxiosArgs = await ZeroTrustListsApiAxiosParamCreator(configuration).zeroTrustListsZeroTrustListDetails(uuid, identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetches all items in a single Zero Trust list.
         * @summary Get Zero Trust list items
         * @param {Ir4bTFI2Uuid} uuid 
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zeroTrustListsZeroTrustListItems(uuid: Ir4bTFI2Uuid, identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Ir4bTFI2ListItemResponseCollection>>> {
            const localVarAxiosArgs = await ZeroTrustListsApiAxiosParamCreator(configuration).zeroTrustListsZeroTrustListItems(uuid, identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ZeroTrustListsApi - factory interface
 * @export
 */
export const ZeroTrustListsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Creates a new Zero Trust list.
         * @summary Create Zero Trust list
         * @param {GatewayListsBody} body 
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zeroTrustListsCreateZeroTrustList(body: GatewayListsBody, identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Ir4bTFI2SingleResponseWithListItems>> {
            return ZeroTrustListsApiFp(configuration).zeroTrustListsCreateZeroTrustList(body, identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a Zero Trust list.
         * @summary Delete Zero Trust list
         * @param {Ir4bTFI2Uuid} uuid 
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zeroTrustListsDeleteZeroTrustList(uuid: Ir4bTFI2Uuid, identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Ir4bTFI2EmptyResponse>> {
            return ZeroTrustListsApiFp(configuration).zeroTrustListsDeleteZeroTrustList(uuid, identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches all Zero Trust lists for an account.
         * @summary List Zero Trust lists
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zeroTrustListsListZeroTrustLists(identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Ir4bTFI2ResponseCollection>> {
            return ZeroTrustListsApiFp(configuration).zeroTrustListsListZeroTrustLists(identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Appends or removes an item from a configured Zero Trust list.
         * @summary Patch Zero Trust list
         * @param {ListsUuidBody1} body 
         * @param {Ir4bTFI2Uuid} uuid 
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zeroTrustListsPatchZeroTrustList(body: ListsUuidBody1, uuid: Ir4bTFI2Uuid, identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Ir4bTFI2SingleResponse>> {
            return ZeroTrustListsApiFp(configuration).zeroTrustListsPatchZeroTrustList(body, uuid, identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a configured Zero Trust list.
         * @summary Update Zero Trust list
         * @param {ListsUuidBody} body 
         * @param {Ir4bTFI2Uuid} uuid 
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zeroTrustListsUpdateZeroTrustList(body: ListsUuidBody, uuid: Ir4bTFI2Uuid, identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Ir4bTFI2SingleResponse>> {
            return ZeroTrustListsApiFp(configuration).zeroTrustListsUpdateZeroTrustList(body, uuid, identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches a single Zero Trust list.
         * @summary Get Zero Trust list details
         * @param {Ir4bTFI2Uuid} uuid 
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zeroTrustListsZeroTrustListDetails(uuid: Ir4bTFI2Uuid, identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Ir4bTFI2SingleResponse>> {
            return ZeroTrustListsApiFp(configuration).zeroTrustListsZeroTrustListDetails(uuid, identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches all items in a single Zero Trust list.
         * @summary Get Zero Trust list items
         * @param {Ir4bTFI2Uuid} uuid 
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zeroTrustListsZeroTrustListItems(uuid: Ir4bTFI2Uuid, identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Ir4bTFI2ListItemResponseCollection>> {
            return ZeroTrustListsApiFp(configuration).zeroTrustListsZeroTrustListItems(uuid, identifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ZeroTrustListsApi - object-oriented interface
 * @export
 * @class ZeroTrustListsApi
 * @extends {BaseAPI}
 */
export class ZeroTrustListsApi extends BaseAPI {
    /**
     * Creates a new Zero Trust list.
     * @summary Create Zero Trust list
     * @param {GatewayListsBody} body 
     * @param {Ir4bTFI2Identifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZeroTrustListsApi
     */
    public async zeroTrustListsCreateZeroTrustList(body: GatewayListsBody, identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Ir4bTFI2SingleResponseWithListItems>> {
        return ZeroTrustListsApiFp(this.configuration).zeroTrustListsCreateZeroTrustList(body, identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes a Zero Trust list.
     * @summary Delete Zero Trust list
     * @param {Ir4bTFI2Uuid} uuid 
     * @param {Ir4bTFI2Identifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZeroTrustListsApi
     */
    public async zeroTrustListsDeleteZeroTrustList(uuid: Ir4bTFI2Uuid, identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Ir4bTFI2EmptyResponse>> {
        return ZeroTrustListsApiFp(this.configuration).zeroTrustListsDeleteZeroTrustList(uuid, identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches all Zero Trust lists for an account.
     * @summary List Zero Trust lists
     * @param {Ir4bTFI2Identifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZeroTrustListsApi
     */
    public async zeroTrustListsListZeroTrustLists(identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Ir4bTFI2ResponseCollection>> {
        return ZeroTrustListsApiFp(this.configuration).zeroTrustListsListZeroTrustLists(identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Appends or removes an item from a configured Zero Trust list.
     * @summary Patch Zero Trust list
     * @param {ListsUuidBody1} body 
     * @param {Ir4bTFI2Uuid} uuid 
     * @param {Ir4bTFI2Identifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZeroTrustListsApi
     */
    public async zeroTrustListsPatchZeroTrustList(body: ListsUuidBody1, uuid: Ir4bTFI2Uuid, identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Ir4bTFI2SingleResponse>> {
        return ZeroTrustListsApiFp(this.configuration).zeroTrustListsPatchZeroTrustList(body, uuid, identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates a configured Zero Trust list.
     * @summary Update Zero Trust list
     * @param {ListsUuidBody} body 
     * @param {Ir4bTFI2Uuid} uuid 
     * @param {Ir4bTFI2Identifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZeroTrustListsApi
     */
    public async zeroTrustListsUpdateZeroTrustList(body: ListsUuidBody, uuid: Ir4bTFI2Uuid, identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Ir4bTFI2SingleResponse>> {
        return ZeroTrustListsApiFp(this.configuration).zeroTrustListsUpdateZeroTrustList(body, uuid, identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches a single Zero Trust list.
     * @summary Get Zero Trust list details
     * @param {Ir4bTFI2Uuid} uuid 
     * @param {Ir4bTFI2Identifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZeroTrustListsApi
     */
    public async zeroTrustListsZeroTrustListDetails(uuid: Ir4bTFI2Uuid, identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Ir4bTFI2SingleResponse>> {
        return ZeroTrustListsApiFp(this.configuration).zeroTrustListsZeroTrustListDetails(uuid, identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches all items in a single Zero Trust list.
     * @summary Get Zero Trust list items
     * @param {Ir4bTFI2Uuid} uuid 
     * @param {Ir4bTFI2Identifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZeroTrustListsApi
     */
    public async zeroTrustListsZeroTrustListItems(uuid: Ir4bTFI2Uuid, identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Ir4bTFI2ListItemResponseCollection>> {
        return ZeroTrustListsApiFp(this.configuration).zeroTrustListsZeroTrustListItems(uuid, identifier, options).then((request) => request(this.axios, this.basePath));
    }
}
