/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse4XX176 } from '../models';
import { InlineResponse4XX177 } from '../models';
import { VXFDQCwXComponentsSchemasIdentifier } from '../models';
import { VXFDQCwXComponentsSchemasSingleResponse } from '../models';
import { VXFDQCwXRegionCode } from '../models';
import { VXFDQCwXRegionComponentsSchemasResponseCollection } from '../models';
import { VXFDQCwXSubdivisionCodeA2 } from '../models';
/**
 * LoadBalancerRegionsApi - axios parameter creator
 * @export
 */
export const LoadBalancerRegionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get a single region mapping.
         * @summary Get Region
         * @param {VXFDQCwXRegionCode} regionCode 
         * @param {VXFDQCwXComponentsSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadBalancerRegionsGetRegion: async (regionCode: VXFDQCwXRegionCode, accountIdentifier: VXFDQCwXComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'regionCode' is not null or undefined
            if (regionCode === null || regionCode === undefined) {
                throw new RequiredError('regionCode','Required parameter regionCode was null or undefined when calling loadBalancerRegionsGetRegion.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling loadBalancerRegionsGetRegion.');
            }
            const localVarPath = `/accounts/{account_identifier}/load_balancers/regions/{region_code}`
                .replace(`{${"region_code"}}`, encodeURIComponent(String(regionCode)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List all region mappings.
         * @summary List Regions
         * @param {VXFDQCwXComponentsSchemasIdentifier} accountIdentifier 
         * @param {VXFDQCwXSubdivisionCodeA2} [subdivisionCode] 
         * @param {VXFDQCwXSubdivisionCodeA2} [subdivisionCodeA2] 
         * @param {string} [countryCodeA2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadBalancerRegionsListRegions: async (accountIdentifier: VXFDQCwXComponentsSchemasIdentifier, subdivisionCode?: VXFDQCwXSubdivisionCodeA2, subdivisionCodeA2?: VXFDQCwXSubdivisionCodeA2, countryCodeA2?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling loadBalancerRegionsListRegions.');
            }
            const localVarPath = `/accounts/{account_identifier}/load_balancers/regions`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            if (subdivisionCode !== undefined) {
                localVarQueryParameter['subdivision_code'] = subdivisionCode;
            }

            if (subdivisionCodeA2 !== undefined) {
                localVarQueryParameter['subdivision_code_a2'] = subdivisionCodeA2;
            }

            if (countryCodeA2 !== undefined) {
                localVarQueryParameter['country_code_a2'] = countryCodeA2;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LoadBalancerRegionsApi - functional programming interface
 * @export
 */
export const LoadBalancerRegionsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get a single region mapping.
         * @summary Get Region
         * @param {VXFDQCwXRegionCode} regionCode 
         * @param {VXFDQCwXComponentsSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loadBalancerRegionsGetRegion(regionCode: VXFDQCwXRegionCode, accountIdentifier: VXFDQCwXComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<VXFDQCwXComponentsSchemasSingleResponse>>> {
            const localVarAxiosArgs = await LoadBalancerRegionsApiAxiosParamCreator(configuration).loadBalancerRegionsGetRegion(regionCode, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List all region mappings.
         * @summary List Regions
         * @param {VXFDQCwXComponentsSchemasIdentifier} accountIdentifier 
         * @param {VXFDQCwXSubdivisionCodeA2} [subdivisionCode] 
         * @param {VXFDQCwXSubdivisionCodeA2} [subdivisionCodeA2] 
         * @param {string} [countryCodeA2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loadBalancerRegionsListRegions(accountIdentifier: VXFDQCwXComponentsSchemasIdentifier, subdivisionCode?: VXFDQCwXSubdivisionCodeA2, subdivisionCodeA2?: VXFDQCwXSubdivisionCodeA2, countryCodeA2?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<VXFDQCwXRegionComponentsSchemasResponseCollection>>> {
            const localVarAxiosArgs = await LoadBalancerRegionsApiAxiosParamCreator(configuration).loadBalancerRegionsListRegions(accountIdentifier, subdivisionCode, subdivisionCodeA2, countryCodeA2, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * LoadBalancerRegionsApi - factory interface
 * @export
 */
export const LoadBalancerRegionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Get a single region mapping.
         * @summary Get Region
         * @param {VXFDQCwXRegionCode} regionCode 
         * @param {VXFDQCwXComponentsSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loadBalancerRegionsGetRegion(regionCode: VXFDQCwXRegionCode, accountIdentifier: VXFDQCwXComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<VXFDQCwXComponentsSchemasSingleResponse>> {
            return LoadBalancerRegionsApiFp(configuration).loadBalancerRegionsGetRegion(regionCode, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * List all region mappings.
         * @summary List Regions
         * @param {VXFDQCwXComponentsSchemasIdentifier} accountIdentifier 
         * @param {VXFDQCwXSubdivisionCodeA2} [subdivisionCode] 
         * @param {VXFDQCwXSubdivisionCodeA2} [subdivisionCodeA2] 
         * @param {string} [countryCodeA2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loadBalancerRegionsListRegions(accountIdentifier: VXFDQCwXComponentsSchemasIdentifier, subdivisionCode?: VXFDQCwXSubdivisionCodeA2, subdivisionCodeA2?: VXFDQCwXSubdivisionCodeA2, countryCodeA2?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<VXFDQCwXRegionComponentsSchemasResponseCollection>> {
            return LoadBalancerRegionsApiFp(configuration).loadBalancerRegionsListRegions(accountIdentifier, subdivisionCode, subdivisionCodeA2, countryCodeA2, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LoadBalancerRegionsApi - object-oriented interface
 * @export
 * @class LoadBalancerRegionsApi
 * @extends {BaseAPI}
 */
export class LoadBalancerRegionsApi extends BaseAPI {
    /**
     * Get a single region mapping.
     * @summary Get Region
     * @param {VXFDQCwXRegionCode} regionCode 
     * @param {VXFDQCwXComponentsSchemasIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoadBalancerRegionsApi
     */
    public async loadBalancerRegionsGetRegion(regionCode: VXFDQCwXRegionCode, accountIdentifier: VXFDQCwXComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<VXFDQCwXComponentsSchemasSingleResponse>> {
        return LoadBalancerRegionsApiFp(this.configuration).loadBalancerRegionsGetRegion(regionCode, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List all region mappings.
     * @summary List Regions
     * @param {VXFDQCwXComponentsSchemasIdentifier} accountIdentifier 
     * @param {VXFDQCwXSubdivisionCodeA2} [subdivisionCode] 
     * @param {VXFDQCwXSubdivisionCodeA2} [subdivisionCodeA2] 
     * @param {string} [countryCodeA2] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoadBalancerRegionsApi
     */
    public async loadBalancerRegionsListRegions(accountIdentifier: VXFDQCwXComponentsSchemasIdentifier, subdivisionCode?: VXFDQCwXSubdivisionCodeA2, subdivisionCodeA2?: VXFDQCwXSubdivisionCodeA2, countryCodeA2?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<VXFDQCwXRegionComponentsSchemasResponseCollection>> {
        return LoadBalancerRegionsApiFp(this.configuration).loadBalancerRegionsListRegions(accountIdentifier, subdivisionCode, subdivisionCodeA2, countryCodeA2, options).then((request) => request(this.axios, this.basePath));
    }
}
