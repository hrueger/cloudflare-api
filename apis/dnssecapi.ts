/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse4XX127 } from '../models';
import { InlineResponse4XX128 } from '../models';
import { UBYmnNDrDeleteDnssecResponseSingle } from '../models';
import { UBYmnNDrDnssecResponseSingle } from '../models';
import { UBYmnNDrIdentifier } from '../models';
import { ZoneIdentifierDnssecBody } from '../models';
/**
 * DNSSECApi - axios parameter creator
 * @export
 */
export const DNSSECApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete DNSSEC.
         * @summary Delete DNSSEC records
         * @param {UBYmnNDrIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dnssecDeleteDnssecRecords: async (zoneIdentifier: UBYmnNDrIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling dnssecDeleteDnssecRecords.');
            }
            const localVarPath = `/zones/{zone_identifier}/dnssec`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Details about DNSSEC status and configuration.
         * @summary DNSSEC Details
         * @param {UBYmnNDrIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dnssecDnssecDetails: async (zoneIdentifier: UBYmnNDrIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling dnssecDnssecDetails.');
            }
            const localVarPath = `/zones/{zone_identifier}/dnssec`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Enable or disable DNSSEC.
         * @summary Edit DNSSEC Status
         * @param {ZoneIdentifierDnssecBody} body 
         * @param {UBYmnNDrIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dnssecEditDnssecStatus: async (body: ZoneIdentifierDnssecBody, zoneIdentifier: UBYmnNDrIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling dnssecEditDnssecStatus.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling dnssecEditDnssecStatus.');
            }
            const localVarPath = `/zones/{zone_identifier}/dnssec`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DNSSECApi - functional programming interface
 * @export
 */
export const DNSSECApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Delete DNSSEC.
         * @summary Delete DNSSEC records
         * @param {UBYmnNDrIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dnssecDeleteDnssecRecords(zoneIdentifier: UBYmnNDrIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<UBYmnNDrDeleteDnssecResponseSingle>>> {
            const localVarAxiosArgs = await DNSSECApiAxiosParamCreator(configuration).dnssecDeleteDnssecRecords(zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Details about DNSSEC status and configuration.
         * @summary DNSSEC Details
         * @param {UBYmnNDrIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dnssecDnssecDetails(zoneIdentifier: UBYmnNDrIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<UBYmnNDrDnssecResponseSingle>>> {
            const localVarAxiosArgs = await DNSSECApiAxiosParamCreator(configuration).dnssecDnssecDetails(zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Enable or disable DNSSEC.
         * @summary Edit DNSSEC Status
         * @param {ZoneIdentifierDnssecBody} body 
         * @param {UBYmnNDrIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dnssecEditDnssecStatus(body: ZoneIdentifierDnssecBody, zoneIdentifier: UBYmnNDrIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<UBYmnNDrDnssecResponseSingle>>> {
            const localVarAxiosArgs = await DNSSECApiAxiosParamCreator(configuration).dnssecEditDnssecStatus(body, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DNSSECApi - factory interface
 * @export
 */
export const DNSSECApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Delete DNSSEC.
         * @summary Delete DNSSEC records
         * @param {UBYmnNDrIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dnssecDeleteDnssecRecords(zoneIdentifier: UBYmnNDrIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<UBYmnNDrDeleteDnssecResponseSingle>> {
            return DNSSECApiFp(configuration).dnssecDeleteDnssecRecords(zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Details about DNSSEC status and configuration.
         * @summary DNSSEC Details
         * @param {UBYmnNDrIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dnssecDnssecDetails(zoneIdentifier: UBYmnNDrIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<UBYmnNDrDnssecResponseSingle>> {
            return DNSSECApiFp(configuration).dnssecDnssecDetails(zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Enable or disable DNSSEC.
         * @summary Edit DNSSEC Status
         * @param {ZoneIdentifierDnssecBody} body 
         * @param {UBYmnNDrIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dnssecEditDnssecStatus(body: ZoneIdentifierDnssecBody, zoneIdentifier: UBYmnNDrIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<UBYmnNDrDnssecResponseSingle>> {
            return DNSSECApiFp(configuration).dnssecEditDnssecStatus(body, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DNSSECApi - object-oriented interface
 * @export
 * @class DNSSECApi
 * @extends {BaseAPI}
 */
export class DNSSECApi extends BaseAPI {
    /**
     * Delete DNSSEC.
     * @summary Delete DNSSEC records
     * @param {UBYmnNDrIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DNSSECApi
     */
    public async dnssecDeleteDnssecRecords(zoneIdentifier: UBYmnNDrIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<UBYmnNDrDeleteDnssecResponseSingle>> {
        return DNSSECApiFp(this.configuration).dnssecDeleteDnssecRecords(zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Details about DNSSEC status and configuration.
     * @summary DNSSEC Details
     * @param {UBYmnNDrIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DNSSECApi
     */
    public async dnssecDnssecDetails(zoneIdentifier: UBYmnNDrIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<UBYmnNDrDnssecResponseSingle>> {
        return DNSSECApiFp(this.configuration).dnssecDnssecDetails(zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Enable or disable DNSSEC.
     * @summary Edit DNSSEC Status
     * @param {ZoneIdentifierDnssecBody} body 
     * @param {UBYmnNDrIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DNSSECApi
     */
    public async dnssecEditDnssecStatus(body: ZoneIdentifierDnssecBody, zoneIdentifier: UBYmnNDrIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<UBYmnNDrDnssecResponseSingle>> {
        return DNSSECApiFp(this.configuration).dnssecEditDnssecStatus(body, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
}
