/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Model3ogb3aohDnsSettingsResponseCollection } from '../models';
import { Model3ogb3aohEmailSettingsResponseSingle } from '../models';
import { Model3ogb3aohIdentifier } from '../models';
/**
 * EmailRoutingSettingsApi - axios parameter creator
 * @export
 */
export const EmailRoutingSettingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Disable your Email Routing zone. Also removes additional MX records previously required for Email Routing to work.
         * @summary Disable Email Routing
         * @param {Model3ogb3aohIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailRoutingSettingsDisableEmailRouting: async (zoneIdentifier: Model3ogb3aohIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling emailRoutingSettingsDisableEmailRouting.');
            }
            const localVarPath = `/zones/{zone_identifier}/email/routing/disable`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Show the DNS records needed to configure your Email Routing zone.
         * @summary Email Routing - DNS settings
         * @param {Model3ogb3aohIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailRoutingSettingsEmailRoutingDnsSettings: async (zoneIdentifier: Model3ogb3aohIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling emailRoutingSettingsEmailRoutingDnsSettings.');
            }
            const localVarPath = `/zones/{zone_identifier}/email/routing/dns`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Enable you Email Routing zone. Add and lock the necessary MX and SPF records.
         * @summary Enable Email Routing
         * @param {Model3ogb3aohIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailRoutingSettingsEnableEmailRouting: async (zoneIdentifier: Model3ogb3aohIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling emailRoutingSettingsEnableEmailRouting.');
            }
            const localVarPath = `/zones/{zone_identifier}/email/routing/enable`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about the settings for your Email Routing zone.
         * @summary Get Email Routing settings
         * @param {Model3ogb3aohIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailRoutingSettingsGetEmailRoutingSettings: async (zoneIdentifier: Model3ogb3aohIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling emailRoutingSettingsGetEmailRoutingSettings.');
            }
            const localVarPath = `/zones/{zone_identifier}/email/routing`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmailRoutingSettingsApi - functional programming interface
 * @export
 */
export const EmailRoutingSettingsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Disable your Email Routing zone. Also removes additional MX records previously required for Email Routing to work.
         * @summary Disable Email Routing
         * @param {Model3ogb3aohIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async emailRoutingSettingsDisableEmailRouting(zoneIdentifier: Model3ogb3aohIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model3ogb3aohEmailSettingsResponseSingle>>> {
            const localVarAxiosArgs = await EmailRoutingSettingsApiAxiosParamCreator(configuration).emailRoutingSettingsDisableEmailRouting(zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Show the DNS records needed to configure your Email Routing zone.
         * @summary Email Routing - DNS settings
         * @param {Model3ogb3aohIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async emailRoutingSettingsEmailRoutingDnsSettings(zoneIdentifier: Model3ogb3aohIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model3ogb3aohDnsSettingsResponseCollection>>> {
            const localVarAxiosArgs = await EmailRoutingSettingsApiAxiosParamCreator(configuration).emailRoutingSettingsEmailRoutingDnsSettings(zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Enable you Email Routing zone. Add and lock the necessary MX and SPF records.
         * @summary Enable Email Routing
         * @param {Model3ogb3aohIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async emailRoutingSettingsEnableEmailRouting(zoneIdentifier: Model3ogb3aohIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model3ogb3aohEmailSettingsResponseSingle>>> {
            const localVarAxiosArgs = await EmailRoutingSettingsApiAxiosParamCreator(configuration).emailRoutingSettingsEnableEmailRouting(zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get information about the settings for your Email Routing zone.
         * @summary Get Email Routing settings
         * @param {Model3ogb3aohIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async emailRoutingSettingsGetEmailRoutingSettings(zoneIdentifier: Model3ogb3aohIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model3ogb3aohEmailSettingsResponseSingle>>> {
            const localVarAxiosArgs = await EmailRoutingSettingsApiAxiosParamCreator(configuration).emailRoutingSettingsGetEmailRoutingSettings(zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * EmailRoutingSettingsApi - factory interface
 * @export
 */
export const EmailRoutingSettingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Disable your Email Routing zone. Also removes additional MX records previously required for Email Routing to work.
         * @summary Disable Email Routing
         * @param {Model3ogb3aohIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async emailRoutingSettingsDisableEmailRouting(zoneIdentifier: Model3ogb3aohIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model3ogb3aohEmailSettingsResponseSingle>> {
            return EmailRoutingSettingsApiFp(configuration).emailRoutingSettingsDisableEmailRouting(zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Show the DNS records needed to configure your Email Routing zone.
         * @summary Email Routing - DNS settings
         * @param {Model3ogb3aohIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async emailRoutingSettingsEmailRoutingDnsSettings(zoneIdentifier: Model3ogb3aohIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model3ogb3aohDnsSettingsResponseCollection>> {
            return EmailRoutingSettingsApiFp(configuration).emailRoutingSettingsEmailRoutingDnsSettings(zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Enable you Email Routing zone. Add and lock the necessary MX and SPF records.
         * @summary Enable Email Routing
         * @param {Model3ogb3aohIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async emailRoutingSettingsEnableEmailRouting(zoneIdentifier: Model3ogb3aohIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model3ogb3aohEmailSettingsResponseSingle>> {
            return EmailRoutingSettingsApiFp(configuration).emailRoutingSettingsEnableEmailRouting(zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about the settings for your Email Routing zone.
         * @summary Get Email Routing settings
         * @param {Model3ogb3aohIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async emailRoutingSettingsGetEmailRoutingSettings(zoneIdentifier: Model3ogb3aohIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model3ogb3aohEmailSettingsResponseSingle>> {
            return EmailRoutingSettingsApiFp(configuration).emailRoutingSettingsGetEmailRoutingSettings(zoneIdentifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EmailRoutingSettingsApi - object-oriented interface
 * @export
 * @class EmailRoutingSettingsApi
 * @extends {BaseAPI}
 */
export class EmailRoutingSettingsApi extends BaseAPI {
    /**
     * Disable your Email Routing zone. Also removes additional MX records previously required for Email Routing to work.
     * @summary Disable Email Routing
     * @param {Model3ogb3aohIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailRoutingSettingsApi
     */
    public async emailRoutingSettingsDisableEmailRouting(zoneIdentifier: Model3ogb3aohIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model3ogb3aohEmailSettingsResponseSingle>> {
        return EmailRoutingSettingsApiFp(this.configuration).emailRoutingSettingsDisableEmailRouting(zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Show the DNS records needed to configure your Email Routing zone.
     * @summary Email Routing - DNS settings
     * @param {Model3ogb3aohIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailRoutingSettingsApi
     */
    public async emailRoutingSettingsEmailRoutingDnsSettings(zoneIdentifier: Model3ogb3aohIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model3ogb3aohDnsSettingsResponseCollection>> {
        return EmailRoutingSettingsApiFp(this.configuration).emailRoutingSettingsEmailRoutingDnsSettings(zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Enable you Email Routing zone. Add and lock the necessary MX and SPF records.
     * @summary Enable Email Routing
     * @param {Model3ogb3aohIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailRoutingSettingsApi
     */
    public async emailRoutingSettingsEnableEmailRouting(zoneIdentifier: Model3ogb3aohIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model3ogb3aohEmailSettingsResponseSingle>> {
        return EmailRoutingSettingsApiFp(this.configuration).emailRoutingSettingsEnableEmailRouting(zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get information about the settings for your Email Routing zone.
     * @summary Get Email Routing settings
     * @param {Model3ogb3aohIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailRoutingSettingsApi
     */
    public async emailRoutingSettingsGetEmailRoutingSettings(zoneIdentifier: Model3ogb3aohIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model3ogb3aohEmailSettingsResponseSingle>> {
        return EmailRoutingSettingsApiFp(this.configuration).emailRoutingSettingsGetEmailRoutingSettings(zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
}
