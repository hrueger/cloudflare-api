/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse4XX23 } from '../models';
import { InlineResponse4XX24 } from '../models';
import { Tm1HTKEcApiResponseSingleId } from '../models';
import { Tm1HTKEcIdentifier } from '../models';
import { Tm1HTKEcIdentityProviders } from '../models';
import { Tm1HTKEcResponseCollection } from '../models';
import { Tm1HTKEcSchemasSingleResponse } from '../models';
import { Tm1HTKEcUuid } from '../models';
/**
 * AccessIdentityProvidersApi - axios parameter creator
 * @export
 */
export const AccessIdentityProvidersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds a new identity provider to Access.
         * @summary Add an Access identity provider
         * @param {Tm1HTKEcIdentityProviders} body 
         * @param {Tm1HTKEcIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accessIdentityProvidersAddAnAccessIdentityProvider: async (body: Tm1HTKEcIdentityProviders, identifier: Tm1HTKEcIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling accessIdentityProvidersAddAnAccessIdentityProvider.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling accessIdentityProvidersAddAnAccessIdentityProvider.');
            }
            const localVarPath = `/accounts/{identifier}/access/identity_providers`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an identity provider from Access.
         * @summary Delete an Access identity provider
         * @param {Tm1HTKEcUuid} uuid 
         * @param {Tm1HTKEcIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accessIdentityProvidersDeleteAnAccessIdentityProvider: async (uuid: Tm1HTKEcUuid, identifier: Tm1HTKEcIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling accessIdentityProvidersDeleteAnAccessIdentityProvider.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling accessIdentityProvidersDeleteAnAccessIdentityProvider.');
            }
            const localVarPath = `/accounts/{identifier}/access/identity_providers/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)))
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches a configured identity provider.
         * @summary Get an Access identity provider
         * @param {Tm1HTKEcUuid} uuid 
         * @param {Tm1HTKEcIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accessIdentityProvidersGetAnAccessIdentityProvider: async (uuid: Tm1HTKEcUuid, identifier: Tm1HTKEcIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling accessIdentityProvidersGetAnAccessIdentityProvider.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling accessIdentityProvidersGetAnAccessIdentityProvider.');
            }
            const localVarPath = `/accounts/{identifier}/access/identity_providers/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)))
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all configured identity providers.
         * @summary List Access identity providers
         * @param {Tm1HTKEcIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accessIdentityProvidersListAccessIdentityProviders: async (identifier: Tm1HTKEcIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling accessIdentityProvidersListAccessIdentityProviders.');
            }
            const localVarPath = `/accounts/{identifier}/access/identity_providers`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a configured identity provider.
         * @summary Update an Access identity provider
         * @param {Tm1HTKEcIdentityProviders} body 
         * @param {Tm1HTKEcUuid} uuid 
         * @param {Tm1HTKEcIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accessIdentityProvidersUpdateAnAccessIdentityProvider: async (body: Tm1HTKEcIdentityProviders, uuid: Tm1HTKEcUuid, identifier: Tm1HTKEcIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling accessIdentityProvidersUpdateAnAccessIdentityProvider.');
            }
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling accessIdentityProvidersUpdateAnAccessIdentityProvider.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling accessIdentityProvidersUpdateAnAccessIdentityProvider.');
            }
            const localVarPath = `/accounts/{identifier}/access/identity_providers/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)))
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccessIdentityProvidersApi - functional programming interface
 * @export
 */
export const AccessIdentityProvidersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Adds a new identity provider to Access.
         * @summary Add an Access identity provider
         * @param {Tm1HTKEcIdentityProviders} body 
         * @param {Tm1HTKEcIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accessIdentityProvidersAddAnAccessIdentityProvider(body: Tm1HTKEcIdentityProviders, identifier: Tm1HTKEcIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Tm1HTKEcSchemasSingleResponse>>> {
            const localVarAxiosArgs = await AccessIdentityProvidersApiAxiosParamCreator(configuration).accessIdentityProvidersAddAnAccessIdentityProvider(body, identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes an identity provider from Access.
         * @summary Delete an Access identity provider
         * @param {Tm1HTKEcUuid} uuid 
         * @param {Tm1HTKEcIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accessIdentityProvidersDeleteAnAccessIdentityProvider(uuid: Tm1HTKEcUuid, identifier: Tm1HTKEcIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Tm1HTKEcApiResponseSingleId>>> {
            const localVarAxiosArgs = await AccessIdentityProvidersApiAxiosParamCreator(configuration).accessIdentityProvidersDeleteAnAccessIdentityProvider(uuid, identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetches a configured identity provider.
         * @summary Get an Access identity provider
         * @param {Tm1HTKEcUuid} uuid 
         * @param {Tm1HTKEcIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accessIdentityProvidersGetAnAccessIdentityProvider(uuid: Tm1HTKEcUuid, identifier: Tm1HTKEcIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Tm1HTKEcSchemasSingleResponse>>> {
            const localVarAxiosArgs = await AccessIdentityProvidersApiAxiosParamCreator(configuration).accessIdentityProvidersGetAnAccessIdentityProvider(uuid, identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Lists all configured identity providers.
         * @summary List Access identity providers
         * @param {Tm1HTKEcIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accessIdentityProvidersListAccessIdentityProviders(identifier: Tm1HTKEcIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Tm1HTKEcResponseCollection>>> {
            const localVarAxiosArgs = await AccessIdentityProvidersApiAxiosParamCreator(configuration).accessIdentityProvidersListAccessIdentityProviders(identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates a configured identity provider.
         * @summary Update an Access identity provider
         * @param {Tm1HTKEcIdentityProviders} body 
         * @param {Tm1HTKEcUuid} uuid 
         * @param {Tm1HTKEcIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accessIdentityProvidersUpdateAnAccessIdentityProvider(body: Tm1HTKEcIdentityProviders, uuid: Tm1HTKEcUuid, identifier: Tm1HTKEcIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Tm1HTKEcSchemasSingleResponse>>> {
            const localVarAxiosArgs = await AccessIdentityProvidersApiAxiosParamCreator(configuration).accessIdentityProvidersUpdateAnAccessIdentityProvider(body, uuid, identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AccessIdentityProvidersApi - factory interface
 * @export
 */
export const AccessIdentityProvidersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Adds a new identity provider to Access.
         * @summary Add an Access identity provider
         * @param {Tm1HTKEcIdentityProviders} body 
         * @param {Tm1HTKEcIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accessIdentityProvidersAddAnAccessIdentityProvider(body: Tm1HTKEcIdentityProviders, identifier: Tm1HTKEcIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Tm1HTKEcSchemasSingleResponse>> {
            return AccessIdentityProvidersApiFp(configuration).accessIdentityProvidersAddAnAccessIdentityProvider(body, identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes an identity provider from Access.
         * @summary Delete an Access identity provider
         * @param {Tm1HTKEcUuid} uuid 
         * @param {Tm1HTKEcIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accessIdentityProvidersDeleteAnAccessIdentityProvider(uuid: Tm1HTKEcUuid, identifier: Tm1HTKEcIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Tm1HTKEcApiResponseSingleId>> {
            return AccessIdentityProvidersApiFp(configuration).accessIdentityProvidersDeleteAnAccessIdentityProvider(uuid, identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches a configured identity provider.
         * @summary Get an Access identity provider
         * @param {Tm1HTKEcUuid} uuid 
         * @param {Tm1HTKEcIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accessIdentityProvidersGetAnAccessIdentityProvider(uuid: Tm1HTKEcUuid, identifier: Tm1HTKEcIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Tm1HTKEcSchemasSingleResponse>> {
            return AccessIdentityProvidersApiFp(configuration).accessIdentityProvidersGetAnAccessIdentityProvider(uuid, identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists all configured identity providers.
         * @summary List Access identity providers
         * @param {Tm1HTKEcIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accessIdentityProvidersListAccessIdentityProviders(identifier: Tm1HTKEcIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Tm1HTKEcResponseCollection>> {
            return AccessIdentityProvidersApiFp(configuration).accessIdentityProvidersListAccessIdentityProviders(identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a configured identity provider.
         * @summary Update an Access identity provider
         * @param {Tm1HTKEcIdentityProviders} body 
         * @param {Tm1HTKEcUuid} uuid 
         * @param {Tm1HTKEcIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accessIdentityProvidersUpdateAnAccessIdentityProvider(body: Tm1HTKEcIdentityProviders, uuid: Tm1HTKEcUuid, identifier: Tm1HTKEcIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Tm1HTKEcSchemasSingleResponse>> {
            return AccessIdentityProvidersApiFp(configuration).accessIdentityProvidersUpdateAnAccessIdentityProvider(body, uuid, identifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccessIdentityProvidersApi - object-oriented interface
 * @export
 * @class AccessIdentityProvidersApi
 * @extends {BaseAPI}
 */
export class AccessIdentityProvidersApi extends BaseAPI {
    /**
     * Adds a new identity provider to Access.
     * @summary Add an Access identity provider
     * @param {Tm1HTKEcIdentityProviders} body 
     * @param {Tm1HTKEcIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessIdentityProvidersApi
     */
    public async accessIdentityProvidersAddAnAccessIdentityProvider(body: Tm1HTKEcIdentityProviders, identifier: Tm1HTKEcIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Tm1HTKEcSchemasSingleResponse>> {
        return AccessIdentityProvidersApiFp(this.configuration).accessIdentityProvidersAddAnAccessIdentityProvider(body, identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes an identity provider from Access.
     * @summary Delete an Access identity provider
     * @param {Tm1HTKEcUuid} uuid 
     * @param {Tm1HTKEcIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessIdentityProvidersApi
     */
    public async accessIdentityProvidersDeleteAnAccessIdentityProvider(uuid: Tm1HTKEcUuid, identifier: Tm1HTKEcIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Tm1HTKEcApiResponseSingleId>> {
        return AccessIdentityProvidersApiFp(this.configuration).accessIdentityProvidersDeleteAnAccessIdentityProvider(uuid, identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches a configured identity provider.
     * @summary Get an Access identity provider
     * @param {Tm1HTKEcUuid} uuid 
     * @param {Tm1HTKEcIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessIdentityProvidersApi
     */
    public async accessIdentityProvidersGetAnAccessIdentityProvider(uuid: Tm1HTKEcUuid, identifier: Tm1HTKEcIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Tm1HTKEcSchemasSingleResponse>> {
        return AccessIdentityProvidersApiFp(this.configuration).accessIdentityProvidersGetAnAccessIdentityProvider(uuid, identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists all configured identity providers.
     * @summary List Access identity providers
     * @param {Tm1HTKEcIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessIdentityProvidersApi
     */
    public async accessIdentityProvidersListAccessIdentityProviders(identifier: Tm1HTKEcIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Tm1HTKEcResponseCollection>> {
        return AccessIdentityProvidersApiFp(this.configuration).accessIdentityProvidersListAccessIdentityProviders(identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates a configured identity provider.
     * @summary Update an Access identity provider
     * @param {Tm1HTKEcIdentityProviders} body 
     * @param {Tm1HTKEcUuid} uuid 
     * @param {Tm1HTKEcIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessIdentityProvidersApi
     */
    public async accessIdentityProvidersUpdateAnAccessIdentityProvider(body: Tm1HTKEcIdentityProviders, uuid: Tm1HTKEcUuid, identifier: Tm1HTKEcIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Tm1HTKEcSchemasSingleResponse>> {
        return AccessIdentityProvidersApiFp(this.configuration).accessIdentityProvidersUpdateAnAccessIdentityProvider(body, uuid, identifier, options).then((request) => request(this.axios, this.basePath));
    }
}
