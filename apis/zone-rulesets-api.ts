/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse20010 } from '../models';
import { InlineResponse2009 } from '../models';
import { RTW3sz4nCreateOrUpdateRuleRequest } from '../models';
import { RTW3sz4nCreateRulesetRequest } from '../models';
import { RTW3sz4nFailureResponse } from '../models';
import { RTW3sz4nRuleId } from '../models';
import { RTW3sz4nRulesetId } from '../models';
import { RTW3sz4nRulesetPhase } from '../models';
import { RTW3sz4nRulesetVersion } from '../models';
import { RTW3sz4nUpdateRulesetRequest } from '../models';
import { RTW3sz4nZoneId } from '../models';
/**
 * ZoneRulesetsApi - axios parameter creator
 * @export
 */
export const ZoneRulesetsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a ruleset at the zone level.
         * @summary Create a zone ruleset
         * @param {RTW3sz4nCreateRulesetRequest} body 
         * @param {RTW3sz4nZoneId} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createZoneRuleset: async (body: RTW3sz4nCreateRulesetRequest, zoneId: RTW3sz4nZoneId, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createZoneRuleset.');
            }
            // verify required parameter 'zoneId' is not null or undefined
            if (zoneId === null || zoneId === undefined) {
                throw new RequiredError('zoneId','Required parameter zoneId was null or undefined when calling createZoneRuleset.');
            }
            const localVarPath = `/zones/{zone_id}/rulesets`
                .replace(`{${"zone_id"}}`, encodeURIComponent(String(zoneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a new rule to a zone ruleset. The rule will be added to the end of the existing list of rules in the ruleset by default.
         * @summary Create a zone ruleset rule
         * @param {RTW3sz4nCreateOrUpdateRuleRequest} body 
         * @param {RTW3sz4nRulesetId} rulesetId 
         * @param {RTW3sz4nZoneId} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createZoneRulesetRule: async (body: RTW3sz4nCreateOrUpdateRuleRequest, rulesetId: RTW3sz4nRulesetId, zoneId: RTW3sz4nZoneId, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createZoneRulesetRule.');
            }
            // verify required parameter 'rulesetId' is not null or undefined
            if (rulesetId === null || rulesetId === undefined) {
                throw new RequiredError('rulesetId','Required parameter rulesetId was null or undefined when calling createZoneRulesetRule.');
            }
            // verify required parameter 'zoneId' is not null or undefined
            if (zoneId === null || zoneId === undefined) {
                throw new RequiredError('zoneId','Required parameter zoneId was null or undefined when calling createZoneRulesetRule.');
            }
            const localVarPath = `/zones/{zone_id}/rulesets/{ruleset_id}/rules`
                .replace(`{${"ruleset_id"}}`, encodeURIComponent(String(rulesetId)))
                .replace(`{${"zone_id"}}`, encodeURIComponent(String(zoneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes all versions of an existing zone ruleset.
         * @summary Delete a zone ruleset
         * @param {RTW3sz4nRulesetId} rulesetId 
         * @param {RTW3sz4nZoneId} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteZoneRuleset: async (rulesetId: RTW3sz4nRulesetId, zoneId: RTW3sz4nZoneId, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'rulesetId' is not null or undefined
            if (rulesetId === null || rulesetId === undefined) {
                throw new RequiredError('rulesetId','Required parameter rulesetId was null or undefined when calling deleteZoneRuleset.');
            }
            // verify required parameter 'zoneId' is not null or undefined
            if (zoneId === null || zoneId === undefined) {
                throw new RequiredError('zoneId','Required parameter zoneId was null or undefined when calling deleteZoneRuleset.');
            }
            const localVarPath = `/zones/{zone_id}/rulesets/{ruleset_id}`
                .replace(`{${"ruleset_id"}}`, encodeURIComponent(String(rulesetId)))
                .replace(`{${"zone_id"}}`, encodeURIComponent(String(zoneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an existing rule from a zone ruleset.
         * @summary Delete a zone ruleset rule
         * @param {RTW3sz4nRuleId} ruleId 
         * @param {RTW3sz4nRulesetId} rulesetId 
         * @param {RTW3sz4nZoneId} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteZoneRulesetRule: async (ruleId: RTW3sz4nRuleId, rulesetId: RTW3sz4nRulesetId, zoneId: RTW3sz4nZoneId, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ruleId' is not null or undefined
            if (ruleId === null || ruleId === undefined) {
                throw new RequiredError('ruleId','Required parameter ruleId was null or undefined when calling deleteZoneRulesetRule.');
            }
            // verify required parameter 'rulesetId' is not null or undefined
            if (rulesetId === null || rulesetId === undefined) {
                throw new RequiredError('rulesetId','Required parameter rulesetId was null or undefined when calling deleteZoneRulesetRule.');
            }
            // verify required parameter 'zoneId' is not null or undefined
            if (zoneId === null || zoneId === undefined) {
                throw new RequiredError('zoneId','Required parameter zoneId was null or undefined when calling deleteZoneRulesetRule.');
            }
            const localVarPath = `/zones/{zone_id}/rulesets/{ruleset_id}/rules/{rule_id}`
                .replace(`{${"rule_id"}}`, encodeURIComponent(String(ruleId)))
                .replace(`{${"ruleset_id"}}`, encodeURIComponent(String(rulesetId)))
                .replace(`{${"zone_id"}}`, encodeURIComponent(String(zoneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an existing version of a zone ruleset.
         * @summary Delete a zone ruleset version
         * @param {RTW3sz4nRulesetVersion} rulesetVersion 
         * @param {RTW3sz4nRulesetId} rulesetId 
         * @param {RTW3sz4nZoneId} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteZoneRulesetVersion: async (rulesetVersion: RTW3sz4nRulesetVersion, rulesetId: RTW3sz4nRulesetId, zoneId: RTW3sz4nZoneId, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'rulesetVersion' is not null or undefined
            if (rulesetVersion === null || rulesetVersion === undefined) {
                throw new RequiredError('rulesetVersion','Required parameter rulesetVersion was null or undefined when calling deleteZoneRulesetVersion.');
            }
            // verify required parameter 'rulesetId' is not null or undefined
            if (rulesetId === null || rulesetId === undefined) {
                throw new RequiredError('rulesetId','Required parameter rulesetId was null or undefined when calling deleteZoneRulesetVersion.');
            }
            // verify required parameter 'zoneId' is not null or undefined
            if (zoneId === null || zoneId === undefined) {
                throw new RequiredError('zoneId','Required parameter zoneId was null or undefined when calling deleteZoneRulesetVersion.');
            }
            const localVarPath = `/zones/{zone_id}/rulesets/{ruleset_id}/versions/{ruleset_version}`
                .replace(`{${"ruleset_version"}}`, encodeURIComponent(String(rulesetVersion)))
                .replace(`{${"ruleset_id"}}`, encodeURIComponent(String(rulesetId)))
                .replace(`{${"zone_id"}}`, encodeURIComponent(String(zoneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches the latest version of the zone entry point ruleset for a given phase.
         * @summary Get a zone entry point ruleset
         * @param {RTW3sz4nRulesetPhase} rulesetPhase 
         * @param {RTW3sz4nZoneId} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getZoneEntrypointRuleset: async (rulesetPhase: RTW3sz4nRulesetPhase, zoneId: RTW3sz4nZoneId, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'rulesetPhase' is not null or undefined
            if (rulesetPhase === null || rulesetPhase === undefined) {
                throw new RequiredError('rulesetPhase','Required parameter rulesetPhase was null or undefined when calling getZoneEntrypointRuleset.');
            }
            // verify required parameter 'zoneId' is not null or undefined
            if (zoneId === null || zoneId === undefined) {
                throw new RequiredError('zoneId','Required parameter zoneId was null or undefined when calling getZoneEntrypointRuleset.');
            }
            const localVarPath = `/zones/{zone_id}/rulesets/phases/{ruleset_phase}/entrypoint`
                .replace(`{${"ruleset_phase"}}`, encodeURIComponent(String(rulesetPhase)))
                .replace(`{${"zone_id"}}`, encodeURIComponent(String(zoneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches a specific version of a zone entry point ruleset.
         * @summary Get a zone entry point ruleset version
         * @param {RTW3sz4nRulesetVersion} rulesetVersion 
         * @param {RTW3sz4nRulesetPhase} rulesetPhase 
         * @param {RTW3sz4nZoneId} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getZoneEntrypointRulesetVersion: async (rulesetVersion: RTW3sz4nRulesetVersion, rulesetPhase: RTW3sz4nRulesetPhase, zoneId: RTW3sz4nZoneId, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'rulesetVersion' is not null or undefined
            if (rulesetVersion === null || rulesetVersion === undefined) {
                throw new RequiredError('rulesetVersion','Required parameter rulesetVersion was null or undefined when calling getZoneEntrypointRulesetVersion.');
            }
            // verify required parameter 'rulesetPhase' is not null or undefined
            if (rulesetPhase === null || rulesetPhase === undefined) {
                throw new RequiredError('rulesetPhase','Required parameter rulesetPhase was null or undefined when calling getZoneEntrypointRulesetVersion.');
            }
            // verify required parameter 'zoneId' is not null or undefined
            if (zoneId === null || zoneId === undefined) {
                throw new RequiredError('zoneId','Required parameter zoneId was null or undefined when calling getZoneEntrypointRulesetVersion.');
            }
            const localVarPath = `/zones/{zone_id}/rulesets/phases/{ruleset_phase}/entrypoint/versions/{ruleset_version}`
                .replace(`{${"ruleset_version"}}`, encodeURIComponent(String(rulesetVersion)))
                .replace(`{${"ruleset_phase"}}`, encodeURIComponent(String(rulesetPhase)))
                .replace(`{${"zone_id"}}`, encodeURIComponent(String(zoneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches the latest version of a zone ruleset.
         * @summary Get a zone ruleset
         * @param {RTW3sz4nRulesetId} rulesetId 
         * @param {RTW3sz4nZoneId} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getZoneRuleset: async (rulesetId: RTW3sz4nRulesetId, zoneId: RTW3sz4nZoneId, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'rulesetId' is not null or undefined
            if (rulesetId === null || rulesetId === undefined) {
                throw new RequiredError('rulesetId','Required parameter rulesetId was null or undefined when calling getZoneRuleset.');
            }
            // verify required parameter 'zoneId' is not null or undefined
            if (zoneId === null || zoneId === undefined) {
                throw new RequiredError('zoneId','Required parameter zoneId was null or undefined when calling getZoneRuleset.');
            }
            const localVarPath = `/zones/{zone_id}/rulesets/{ruleset_id}`
                .replace(`{${"ruleset_id"}}`, encodeURIComponent(String(rulesetId)))
                .replace(`{${"zone_id"}}`, encodeURIComponent(String(zoneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches a specific version of a zone ruleset.
         * @summary Get a zone ruleset version
         * @param {RTW3sz4nRulesetVersion} rulesetVersion 
         * @param {RTW3sz4nRulesetId} rulesetId 
         * @param {RTW3sz4nZoneId} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getZoneRulesetVersion: async (rulesetVersion: RTW3sz4nRulesetVersion, rulesetId: RTW3sz4nRulesetId, zoneId: RTW3sz4nZoneId, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'rulesetVersion' is not null or undefined
            if (rulesetVersion === null || rulesetVersion === undefined) {
                throw new RequiredError('rulesetVersion','Required parameter rulesetVersion was null or undefined when calling getZoneRulesetVersion.');
            }
            // verify required parameter 'rulesetId' is not null or undefined
            if (rulesetId === null || rulesetId === undefined) {
                throw new RequiredError('rulesetId','Required parameter rulesetId was null or undefined when calling getZoneRulesetVersion.');
            }
            // verify required parameter 'zoneId' is not null or undefined
            if (zoneId === null || zoneId === undefined) {
                throw new RequiredError('zoneId','Required parameter zoneId was null or undefined when calling getZoneRulesetVersion.');
            }
            const localVarPath = `/zones/{zone_id}/rulesets/{ruleset_id}/versions/{ruleset_version}`
                .replace(`{${"ruleset_version"}}`, encodeURIComponent(String(rulesetVersion)))
                .replace(`{${"ruleset_id"}}`, encodeURIComponent(String(rulesetId)))
                .replace(`{${"zone_id"}}`, encodeURIComponent(String(zoneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches the versions of a zone entry point ruleset.
         * @summary List a zone entry point ruleset's versions
         * @param {RTW3sz4nRulesetPhase} rulesetPhase 
         * @param {RTW3sz4nZoneId} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listZoneEntrypointRulesetVersions: async (rulesetPhase: RTW3sz4nRulesetPhase, zoneId: RTW3sz4nZoneId, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'rulesetPhase' is not null or undefined
            if (rulesetPhase === null || rulesetPhase === undefined) {
                throw new RequiredError('rulesetPhase','Required parameter rulesetPhase was null or undefined when calling listZoneEntrypointRulesetVersions.');
            }
            // verify required parameter 'zoneId' is not null or undefined
            if (zoneId === null || zoneId === undefined) {
                throw new RequiredError('zoneId','Required parameter zoneId was null or undefined when calling listZoneEntrypointRulesetVersions.');
            }
            const localVarPath = `/zones/{zone_id}/rulesets/phases/{ruleset_phase}/entrypoint/versions`
                .replace(`{${"ruleset_phase"}}`, encodeURIComponent(String(rulesetPhase)))
                .replace(`{${"zone_id"}}`, encodeURIComponent(String(zoneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches the versions of a zone ruleset.
         * @summary List a zone ruleset's versions
         * @param {RTW3sz4nRulesetId} rulesetId 
         * @param {RTW3sz4nZoneId} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listZoneRulesetVersions: async (rulesetId: RTW3sz4nRulesetId, zoneId: RTW3sz4nZoneId, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'rulesetId' is not null or undefined
            if (rulesetId === null || rulesetId === undefined) {
                throw new RequiredError('rulesetId','Required parameter rulesetId was null or undefined when calling listZoneRulesetVersions.');
            }
            // verify required parameter 'zoneId' is not null or undefined
            if (zoneId === null || zoneId === undefined) {
                throw new RequiredError('zoneId','Required parameter zoneId was null or undefined when calling listZoneRulesetVersions.');
            }
            const localVarPath = `/zones/{zone_id}/rulesets/{ruleset_id}/versions`
                .replace(`{${"ruleset_id"}}`, encodeURIComponent(String(rulesetId)))
                .replace(`{${"zone_id"}}`, encodeURIComponent(String(zoneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches all rulesets at the zone level.
         * @summary List zone rulesets
         * @param {RTW3sz4nZoneId} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listZoneRulesets: async (zoneId: RTW3sz4nZoneId, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneId' is not null or undefined
            if (zoneId === null || zoneId === undefined) {
                throw new RequiredError('zoneId','Required parameter zoneId was null or undefined when calling listZoneRulesets.');
            }
            const localVarPath = `/zones/{zone_id}/rulesets`
                .replace(`{${"zone_id"}}`, encodeURIComponent(String(zoneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a zone entry point ruleset, creating a new version.
         * @summary Update a zone entry point ruleset
         * @param {RTW3sz4nUpdateRulesetRequest} body 
         * @param {RTW3sz4nRulesetPhase} rulesetPhase 
         * @param {RTW3sz4nZoneId} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateZoneEntrypointRuleset: async (body: RTW3sz4nUpdateRulesetRequest, rulesetPhase: RTW3sz4nRulesetPhase, zoneId: RTW3sz4nZoneId, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateZoneEntrypointRuleset.');
            }
            // verify required parameter 'rulesetPhase' is not null or undefined
            if (rulesetPhase === null || rulesetPhase === undefined) {
                throw new RequiredError('rulesetPhase','Required parameter rulesetPhase was null or undefined when calling updateZoneEntrypointRuleset.');
            }
            // verify required parameter 'zoneId' is not null or undefined
            if (zoneId === null || zoneId === undefined) {
                throw new RequiredError('zoneId','Required parameter zoneId was null or undefined when calling updateZoneEntrypointRuleset.');
            }
            const localVarPath = `/zones/{zone_id}/rulesets/phases/{ruleset_phase}/entrypoint`
                .replace(`{${"ruleset_phase"}}`, encodeURIComponent(String(rulesetPhase)))
                .replace(`{${"zone_id"}}`, encodeURIComponent(String(zoneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a zone ruleset, creating a new version.
         * @summary Update a zone ruleset
         * @param {RTW3sz4nUpdateRulesetRequest} body 
         * @param {RTW3sz4nRulesetId} rulesetId 
         * @param {RTW3sz4nZoneId} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateZoneRuleset: async (body: RTW3sz4nUpdateRulesetRequest, rulesetId: RTW3sz4nRulesetId, zoneId: RTW3sz4nZoneId, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateZoneRuleset.');
            }
            // verify required parameter 'rulesetId' is not null or undefined
            if (rulesetId === null || rulesetId === undefined) {
                throw new RequiredError('rulesetId','Required parameter rulesetId was null or undefined when calling updateZoneRuleset.');
            }
            // verify required parameter 'zoneId' is not null or undefined
            if (zoneId === null || zoneId === undefined) {
                throw new RequiredError('zoneId','Required parameter zoneId was null or undefined when calling updateZoneRuleset.');
            }
            const localVarPath = `/zones/{zone_id}/rulesets/{ruleset_id}`
                .replace(`{${"ruleset_id"}}`, encodeURIComponent(String(rulesetId)))
                .replace(`{${"zone_id"}}`, encodeURIComponent(String(zoneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an existing rule in a zone ruleset.
         * @summary Update a zone ruleset rule
         * @param {RTW3sz4nCreateOrUpdateRuleRequest} body 
         * @param {RTW3sz4nRuleId} ruleId 
         * @param {RTW3sz4nRulesetId} rulesetId 
         * @param {RTW3sz4nZoneId} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateZoneRulesetRule: async (body: RTW3sz4nCreateOrUpdateRuleRequest, ruleId: RTW3sz4nRuleId, rulesetId: RTW3sz4nRulesetId, zoneId: RTW3sz4nZoneId, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateZoneRulesetRule.');
            }
            // verify required parameter 'ruleId' is not null or undefined
            if (ruleId === null || ruleId === undefined) {
                throw new RequiredError('ruleId','Required parameter ruleId was null or undefined when calling updateZoneRulesetRule.');
            }
            // verify required parameter 'rulesetId' is not null or undefined
            if (rulesetId === null || rulesetId === undefined) {
                throw new RequiredError('rulesetId','Required parameter rulesetId was null or undefined when calling updateZoneRulesetRule.');
            }
            // verify required parameter 'zoneId' is not null or undefined
            if (zoneId === null || zoneId === undefined) {
                throw new RequiredError('zoneId','Required parameter zoneId was null or undefined when calling updateZoneRulesetRule.');
            }
            const localVarPath = `/zones/{zone_id}/rulesets/{ruleset_id}/rules/{rule_id}`
                .replace(`{${"rule_id"}}`, encodeURIComponent(String(ruleId)))
                .replace(`{${"ruleset_id"}}`, encodeURIComponent(String(rulesetId)))
                .replace(`{${"zone_id"}}`, encodeURIComponent(String(zoneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ZoneRulesetsApi - functional programming interface
 * @export
 */
export const ZoneRulesetsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates a ruleset at the zone level.
         * @summary Create a zone ruleset
         * @param {RTW3sz4nCreateRulesetRequest} body 
         * @param {RTW3sz4nZoneId} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createZoneRuleset(body: RTW3sz4nCreateRulesetRequest, zoneId: RTW3sz4nZoneId, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20010>>> {
            const localVarAxiosArgs = await ZoneRulesetsApiAxiosParamCreator(configuration).createZoneRuleset(body, zoneId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Adds a new rule to a zone ruleset. The rule will be added to the end of the existing list of rules in the ruleset by default.
         * @summary Create a zone ruleset rule
         * @param {RTW3sz4nCreateOrUpdateRuleRequest} body 
         * @param {RTW3sz4nRulesetId} rulesetId 
         * @param {RTW3sz4nZoneId} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createZoneRulesetRule(body: RTW3sz4nCreateOrUpdateRuleRequest, rulesetId: RTW3sz4nRulesetId, zoneId: RTW3sz4nZoneId, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20010>>> {
            const localVarAxiosArgs = await ZoneRulesetsApiAxiosParamCreator(configuration).createZoneRulesetRule(body, rulesetId, zoneId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes all versions of an existing zone ruleset.
         * @summary Delete a zone ruleset
         * @param {RTW3sz4nRulesetId} rulesetId 
         * @param {RTW3sz4nZoneId} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteZoneRuleset(rulesetId: RTW3sz4nRulesetId, zoneId: RTW3sz4nZoneId, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ZoneRulesetsApiAxiosParamCreator(configuration).deleteZoneRuleset(rulesetId, zoneId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes an existing rule from a zone ruleset.
         * @summary Delete a zone ruleset rule
         * @param {RTW3sz4nRuleId} ruleId 
         * @param {RTW3sz4nRulesetId} rulesetId 
         * @param {RTW3sz4nZoneId} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteZoneRulesetRule(ruleId: RTW3sz4nRuleId, rulesetId: RTW3sz4nRulesetId, zoneId: RTW3sz4nZoneId, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20010>>> {
            const localVarAxiosArgs = await ZoneRulesetsApiAxiosParamCreator(configuration).deleteZoneRulesetRule(ruleId, rulesetId, zoneId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes an existing version of a zone ruleset.
         * @summary Delete a zone ruleset version
         * @param {RTW3sz4nRulesetVersion} rulesetVersion 
         * @param {RTW3sz4nRulesetId} rulesetId 
         * @param {RTW3sz4nZoneId} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteZoneRulesetVersion(rulesetVersion: RTW3sz4nRulesetVersion, rulesetId: RTW3sz4nRulesetId, zoneId: RTW3sz4nZoneId, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ZoneRulesetsApiAxiosParamCreator(configuration).deleteZoneRulesetVersion(rulesetVersion, rulesetId, zoneId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetches the latest version of the zone entry point ruleset for a given phase.
         * @summary Get a zone entry point ruleset
         * @param {RTW3sz4nRulesetPhase} rulesetPhase 
         * @param {RTW3sz4nZoneId} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getZoneEntrypointRuleset(rulesetPhase: RTW3sz4nRulesetPhase, zoneId: RTW3sz4nZoneId, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20010>>> {
            const localVarAxiosArgs = await ZoneRulesetsApiAxiosParamCreator(configuration).getZoneEntrypointRuleset(rulesetPhase, zoneId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetches a specific version of a zone entry point ruleset.
         * @summary Get a zone entry point ruleset version
         * @param {RTW3sz4nRulesetVersion} rulesetVersion 
         * @param {RTW3sz4nRulesetPhase} rulesetPhase 
         * @param {RTW3sz4nZoneId} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getZoneEntrypointRulesetVersion(rulesetVersion: RTW3sz4nRulesetVersion, rulesetPhase: RTW3sz4nRulesetPhase, zoneId: RTW3sz4nZoneId, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20010>>> {
            const localVarAxiosArgs = await ZoneRulesetsApiAxiosParamCreator(configuration).getZoneEntrypointRulesetVersion(rulesetVersion, rulesetPhase, zoneId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetches the latest version of a zone ruleset.
         * @summary Get a zone ruleset
         * @param {RTW3sz4nRulesetId} rulesetId 
         * @param {RTW3sz4nZoneId} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getZoneRuleset(rulesetId: RTW3sz4nRulesetId, zoneId: RTW3sz4nZoneId, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20010>>> {
            const localVarAxiosArgs = await ZoneRulesetsApiAxiosParamCreator(configuration).getZoneRuleset(rulesetId, zoneId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetches a specific version of a zone ruleset.
         * @summary Get a zone ruleset version
         * @param {RTW3sz4nRulesetVersion} rulesetVersion 
         * @param {RTW3sz4nRulesetId} rulesetId 
         * @param {RTW3sz4nZoneId} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getZoneRulesetVersion(rulesetVersion: RTW3sz4nRulesetVersion, rulesetId: RTW3sz4nRulesetId, zoneId: RTW3sz4nZoneId, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20010>>> {
            const localVarAxiosArgs = await ZoneRulesetsApiAxiosParamCreator(configuration).getZoneRulesetVersion(rulesetVersion, rulesetId, zoneId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetches the versions of a zone entry point ruleset.
         * @summary List a zone entry point ruleset's versions
         * @param {RTW3sz4nRulesetPhase} rulesetPhase 
         * @param {RTW3sz4nZoneId} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listZoneEntrypointRulesetVersions(rulesetPhase: RTW3sz4nRulesetPhase, zoneId: RTW3sz4nZoneId, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2009>>> {
            const localVarAxiosArgs = await ZoneRulesetsApiAxiosParamCreator(configuration).listZoneEntrypointRulesetVersions(rulesetPhase, zoneId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetches the versions of a zone ruleset.
         * @summary List a zone ruleset's versions
         * @param {RTW3sz4nRulesetId} rulesetId 
         * @param {RTW3sz4nZoneId} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listZoneRulesetVersions(rulesetId: RTW3sz4nRulesetId, zoneId: RTW3sz4nZoneId, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2009>>> {
            const localVarAxiosArgs = await ZoneRulesetsApiAxiosParamCreator(configuration).listZoneRulesetVersions(rulesetId, zoneId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetches all rulesets at the zone level.
         * @summary List zone rulesets
         * @param {RTW3sz4nZoneId} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listZoneRulesets(zoneId: RTW3sz4nZoneId, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2009>>> {
            const localVarAxiosArgs = await ZoneRulesetsApiAxiosParamCreator(configuration).listZoneRulesets(zoneId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates a zone entry point ruleset, creating a new version.
         * @summary Update a zone entry point ruleset
         * @param {RTW3sz4nUpdateRulesetRequest} body 
         * @param {RTW3sz4nRulesetPhase} rulesetPhase 
         * @param {RTW3sz4nZoneId} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateZoneEntrypointRuleset(body: RTW3sz4nUpdateRulesetRequest, rulesetPhase: RTW3sz4nRulesetPhase, zoneId: RTW3sz4nZoneId, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20010>>> {
            const localVarAxiosArgs = await ZoneRulesetsApiAxiosParamCreator(configuration).updateZoneEntrypointRuleset(body, rulesetPhase, zoneId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates a zone ruleset, creating a new version.
         * @summary Update a zone ruleset
         * @param {RTW3sz4nUpdateRulesetRequest} body 
         * @param {RTW3sz4nRulesetId} rulesetId 
         * @param {RTW3sz4nZoneId} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateZoneRuleset(body: RTW3sz4nUpdateRulesetRequest, rulesetId: RTW3sz4nRulesetId, zoneId: RTW3sz4nZoneId, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20010>>> {
            const localVarAxiosArgs = await ZoneRulesetsApiAxiosParamCreator(configuration).updateZoneRuleset(body, rulesetId, zoneId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates an existing rule in a zone ruleset.
         * @summary Update a zone ruleset rule
         * @param {RTW3sz4nCreateOrUpdateRuleRequest} body 
         * @param {RTW3sz4nRuleId} ruleId 
         * @param {RTW3sz4nRulesetId} rulesetId 
         * @param {RTW3sz4nZoneId} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateZoneRulesetRule(body: RTW3sz4nCreateOrUpdateRuleRequest, ruleId: RTW3sz4nRuleId, rulesetId: RTW3sz4nRulesetId, zoneId: RTW3sz4nZoneId, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20010>>> {
            const localVarAxiosArgs = await ZoneRulesetsApiAxiosParamCreator(configuration).updateZoneRulesetRule(body, ruleId, rulesetId, zoneId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ZoneRulesetsApi - factory interface
 * @export
 */
export const ZoneRulesetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Creates a ruleset at the zone level.
         * @summary Create a zone ruleset
         * @param {RTW3sz4nCreateRulesetRequest} body 
         * @param {RTW3sz4nZoneId} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createZoneRuleset(body: RTW3sz4nCreateRulesetRequest, zoneId: RTW3sz4nZoneId, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20010>> {
            return ZoneRulesetsApiFp(configuration).createZoneRuleset(body, zoneId, options).then((request) => request(axios, basePath));
        },
        /**
         * Adds a new rule to a zone ruleset. The rule will be added to the end of the existing list of rules in the ruleset by default.
         * @summary Create a zone ruleset rule
         * @param {RTW3sz4nCreateOrUpdateRuleRequest} body 
         * @param {RTW3sz4nRulesetId} rulesetId 
         * @param {RTW3sz4nZoneId} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createZoneRulesetRule(body: RTW3sz4nCreateOrUpdateRuleRequest, rulesetId: RTW3sz4nRulesetId, zoneId: RTW3sz4nZoneId, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20010>> {
            return ZoneRulesetsApiFp(configuration).createZoneRulesetRule(body, rulesetId, zoneId, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes all versions of an existing zone ruleset.
         * @summary Delete a zone ruleset
         * @param {RTW3sz4nRulesetId} rulesetId 
         * @param {RTW3sz4nZoneId} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteZoneRuleset(rulesetId: RTW3sz4nRulesetId, zoneId: RTW3sz4nZoneId, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ZoneRulesetsApiFp(configuration).deleteZoneRuleset(rulesetId, zoneId, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes an existing rule from a zone ruleset.
         * @summary Delete a zone ruleset rule
         * @param {RTW3sz4nRuleId} ruleId 
         * @param {RTW3sz4nRulesetId} rulesetId 
         * @param {RTW3sz4nZoneId} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteZoneRulesetRule(ruleId: RTW3sz4nRuleId, rulesetId: RTW3sz4nRulesetId, zoneId: RTW3sz4nZoneId, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20010>> {
            return ZoneRulesetsApiFp(configuration).deleteZoneRulesetRule(ruleId, rulesetId, zoneId, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes an existing version of a zone ruleset.
         * @summary Delete a zone ruleset version
         * @param {RTW3sz4nRulesetVersion} rulesetVersion 
         * @param {RTW3sz4nRulesetId} rulesetId 
         * @param {RTW3sz4nZoneId} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteZoneRulesetVersion(rulesetVersion: RTW3sz4nRulesetVersion, rulesetId: RTW3sz4nRulesetId, zoneId: RTW3sz4nZoneId, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ZoneRulesetsApiFp(configuration).deleteZoneRulesetVersion(rulesetVersion, rulesetId, zoneId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches the latest version of the zone entry point ruleset for a given phase.
         * @summary Get a zone entry point ruleset
         * @param {RTW3sz4nRulesetPhase} rulesetPhase 
         * @param {RTW3sz4nZoneId} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getZoneEntrypointRuleset(rulesetPhase: RTW3sz4nRulesetPhase, zoneId: RTW3sz4nZoneId, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20010>> {
            return ZoneRulesetsApiFp(configuration).getZoneEntrypointRuleset(rulesetPhase, zoneId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches a specific version of a zone entry point ruleset.
         * @summary Get a zone entry point ruleset version
         * @param {RTW3sz4nRulesetVersion} rulesetVersion 
         * @param {RTW3sz4nRulesetPhase} rulesetPhase 
         * @param {RTW3sz4nZoneId} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getZoneEntrypointRulesetVersion(rulesetVersion: RTW3sz4nRulesetVersion, rulesetPhase: RTW3sz4nRulesetPhase, zoneId: RTW3sz4nZoneId, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20010>> {
            return ZoneRulesetsApiFp(configuration).getZoneEntrypointRulesetVersion(rulesetVersion, rulesetPhase, zoneId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches the latest version of a zone ruleset.
         * @summary Get a zone ruleset
         * @param {RTW3sz4nRulesetId} rulesetId 
         * @param {RTW3sz4nZoneId} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getZoneRuleset(rulesetId: RTW3sz4nRulesetId, zoneId: RTW3sz4nZoneId, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20010>> {
            return ZoneRulesetsApiFp(configuration).getZoneRuleset(rulesetId, zoneId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches a specific version of a zone ruleset.
         * @summary Get a zone ruleset version
         * @param {RTW3sz4nRulesetVersion} rulesetVersion 
         * @param {RTW3sz4nRulesetId} rulesetId 
         * @param {RTW3sz4nZoneId} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getZoneRulesetVersion(rulesetVersion: RTW3sz4nRulesetVersion, rulesetId: RTW3sz4nRulesetId, zoneId: RTW3sz4nZoneId, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20010>> {
            return ZoneRulesetsApiFp(configuration).getZoneRulesetVersion(rulesetVersion, rulesetId, zoneId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches the versions of a zone entry point ruleset.
         * @summary List a zone entry point ruleset's versions
         * @param {RTW3sz4nRulesetPhase} rulesetPhase 
         * @param {RTW3sz4nZoneId} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listZoneEntrypointRulesetVersions(rulesetPhase: RTW3sz4nRulesetPhase, zoneId: RTW3sz4nZoneId, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2009>> {
            return ZoneRulesetsApiFp(configuration).listZoneEntrypointRulesetVersions(rulesetPhase, zoneId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches the versions of a zone ruleset.
         * @summary List a zone ruleset's versions
         * @param {RTW3sz4nRulesetId} rulesetId 
         * @param {RTW3sz4nZoneId} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listZoneRulesetVersions(rulesetId: RTW3sz4nRulesetId, zoneId: RTW3sz4nZoneId, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2009>> {
            return ZoneRulesetsApiFp(configuration).listZoneRulesetVersions(rulesetId, zoneId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches all rulesets at the zone level.
         * @summary List zone rulesets
         * @param {RTW3sz4nZoneId} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listZoneRulesets(zoneId: RTW3sz4nZoneId, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2009>> {
            return ZoneRulesetsApiFp(configuration).listZoneRulesets(zoneId, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a zone entry point ruleset, creating a new version.
         * @summary Update a zone entry point ruleset
         * @param {RTW3sz4nUpdateRulesetRequest} body 
         * @param {RTW3sz4nRulesetPhase} rulesetPhase 
         * @param {RTW3sz4nZoneId} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateZoneEntrypointRuleset(body: RTW3sz4nUpdateRulesetRequest, rulesetPhase: RTW3sz4nRulesetPhase, zoneId: RTW3sz4nZoneId, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20010>> {
            return ZoneRulesetsApiFp(configuration).updateZoneEntrypointRuleset(body, rulesetPhase, zoneId, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a zone ruleset, creating a new version.
         * @summary Update a zone ruleset
         * @param {RTW3sz4nUpdateRulesetRequest} body 
         * @param {RTW3sz4nRulesetId} rulesetId 
         * @param {RTW3sz4nZoneId} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateZoneRuleset(body: RTW3sz4nUpdateRulesetRequest, rulesetId: RTW3sz4nRulesetId, zoneId: RTW3sz4nZoneId, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20010>> {
            return ZoneRulesetsApiFp(configuration).updateZoneRuleset(body, rulesetId, zoneId, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an existing rule in a zone ruleset.
         * @summary Update a zone ruleset rule
         * @param {RTW3sz4nCreateOrUpdateRuleRequest} body 
         * @param {RTW3sz4nRuleId} ruleId 
         * @param {RTW3sz4nRulesetId} rulesetId 
         * @param {RTW3sz4nZoneId} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateZoneRulesetRule(body: RTW3sz4nCreateOrUpdateRuleRequest, ruleId: RTW3sz4nRuleId, rulesetId: RTW3sz4nRulesetId, zoneId: RTW3sz4nZoneId, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20010>> {
            return ZoneRulesetsApiFp(configuration).updateZoneRulesetRule(body, ruleId, rulesetId, zoneId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ZoneRulesetsApi - object-oriented interface
 * @export
 * @class ZoneRulesetsApi
 * @extends {BaseAPI}
 */
export class ZoneRulesetsApi extends BaseAPI {
    /**
     * Creates a ruleset at the zone level.
     * @summary Create a zone ruleset
     * @param {RTW3sz4nCreateRulesetRequest} body 
     * @param {RTW3sz4nZoneId} zoneId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZoneRulesetsApi
     */
    public async createZoneRuleset(body: RTW3sz4nCreateRulesetRequest, zoneId: RTW3sz4nZoneId, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20010>> {
        return ZoneRulesetsApiFp(this.configuration).createZoneRuleset(body, zoneId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Adds a new rule to a zone ruleset. The rule will be added to the end of the existing list of rules in the ruleset by default.
     * @summary Create a zone ruleset rule
     * @param {RTW3sz4nCreateOrUpdateRuleRequest} body 
     * @param {RTW3sz4nRulesetId} rulesetId 
     * @param {RTW3sz4nZoneId} zoneId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZoneRulesetsApi
     */
    public async createZoneRulesetRule(body: RTW3sz4nCreateOrUpdateRuleRequest, rulesetId: RTW3sz4nRulesetId, zoneId: RTW3sz4nZoneId, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20010>> {
        return ZoneRulesetsApiFp(this.configuration).createZoneRulesetRule(body, rulesetId, zoneId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes all versions of an existing zone ruleset.
     * @summary Delete a zone ruleset
     * @param {RTW3sz4nRulesetId} rulesetId 
     * @param {RTW3sz4nZoneId} zoneId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZoneRulesetsApi
     */
    public async deleteZoneRuleset(rulesetId: RTW3sz4nRulesetId, zoneId: RTW3sz4nZoneId, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ZoneRulesetsApiFp(this.configuration).deleteZoneRuleset(rulesetId, zoneId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes an existing rule from a zone ruleset.
     * @summary Delete a zone ruleset rule
     * @param {RTW3sz4nRuleId} ruleId 
     * @param {RTW3sz4nRulesetId} rulesetId 
     * @param {RTW3sz4nZoneId} zoneId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZoneRulesetsApi
     */
    public async deleteZoneRulesetRule(ruleId: RTW3sz4nRuleId, rulesetId: RTW3sz4nRulesetId, zoneId: RTW3sz4nZoneId, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20010>> {
        return ZoneRulesetsApiFp(this.configuration).deleteZoneRulesetRule(ruleId, rulesetId, zoneId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes an existing version of a zone ruleset.
     * @summary Delete a zone ruleset version
     * @param {RTW3sz4nRulesetVersion} rulesetVersion 
     * @param {RTW3sz4nRulesetId} rulesetId 
     * @param {RTW3sz4nZoneId} zoneId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZoneRulesetsApi
     */
    public async deleteZoneRulesetVersion(rulesetVersion: RTW3sz4nRulesetVersion, rulesetId: RTW3sz4nRulesetId, zoneId: RTW3sz4nZoneId, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ZoneRulesetsApiFp(this.configuration).deleteZoneRulesetVersion(rulesetVersion, rulesetId, zoneId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches the latest version of the zone entry point ruleset for a given phase.
     * @summary Get a zone entry point ruleset
     * @param {RTW3sz4nRulesetPhase} rulesetPhase 
     * @param {RTW3sz4nZoneId} zoneId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZoneRulesetsApi
     */
    public async getZoneEntrypointRuleset(rulesetPhase: RTW3sz4nRulesetPhase, zoneId: RTW3sz4nZoneId, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20010>> {
        return ZoneRulesetsApiFp(this.configuration).getZoneEntrypointRuleset(rulesetPhase, zoneId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches a specific version of a zone entry point ruleset.
     * @summary Get a zone entry point ruleset version
     * @param {RTW3sz4nRulesetVersion} rulesetVersion 
     * @param {RTW3sz4nRulesetPhase} rulesetPhase 
     * @param {RTW3sz4nZoneId} zoneId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZoneRulesetsApi
     */
    public async getZoneEntrypointRulesetVersion(rulesetVersion: RTW3sz4nRulesetVersion, rulesetPhase: RTW3sz4nRulesetPhase, zoneId: RTW3sz4nZoneId, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20010>> {
        return ZoneRulesetsApiFp(this.configuration).getZoneEntrypointRulesetVersion(rulesetVersion, rulesetPhase, zoneId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches the latest version of a zone ruleset.
     * @summary Get a zone ruleset
     * @param {RTW3sz4nRulesetId} rulesetId 
     * @param {RTW3sz4nZoneId} zoneId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZoneRulesetsApi
     */
    public async getZoneRuleset(rulesetId: RTW3sz4nRulesetId, zoneId: RTW3sz4nZoneId, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20010>> {
        return ZoneRulesetsApiFp(this.configuration).getZoneRuleset(rulesetId, zoneId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches a specific version of a zone ruleset.
     * @summary Get a zone ruleset version
     * @param {RTW3sz4nRulesetVersion} rulesetVersion 
     * @param {RTW3sz4nRulesetId} rulesetId 
     * @param {RTW3sz4nZoneId} zoneId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZoneRulesetsApi
     */
    public async getZoneRulesetVersion(rulesetVersion: RTW3sz4nRulesetVersion, rulesetId: RTW3sz4nRulesetId, zoneId: RTW3sz4nZoneId, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20010>> {
        return ZoneRulesetsApiFp(this.configuration).getZoneRulesetVersion(rulesetVersion, rulesetId, zoneId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches the versions of a zone entry point ruleset.
     * @summary List a zone entry point ruleset's versions
     * @param {RTW3sz4nRulesetPhase} rulesetPhase 
     * @param {RTW3sz4nZoneId} zoneId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZoneRulesetsApi
     */
    public async listZoneEntrypointRulesetVersions(rulesetPhase: RTW3sz4nRulesetPhase, zoneId: RTW3sz4nZoneId, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2009>> {
        return ZoneRulesetsApiFp(this.configuration).listZoneEntrypointRulesetVersions(rulesetPhase, zoneId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches the versions of a zone ruleset.
     * @summary List a zone ruleset's versions
     * @param {RTW3sz4nRulesetId} rulesetId 
     * @param {RTW3sz4nZoneId} zoneId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZoneRulesetsApi
     */
    public async listZoneRulesetVersions(rulesetId: RTW3sz4nRulesetId, zoneId: RTW3sz4nZoneId, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2009>> {
        return ZoneRulesetsApiFp(this.configuration).listZoneRulesetVersions(rulesetId, zoneId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches all rulesets at the zone level.
     * @summary List zone rulesets
     * @param {RTW3sz4nZoneId} zoneId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZoneRulesetsApi
     */
    public async listZoneRulesets(zoneId: RTW3sz4nZoneId, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2009>> {
        return ZoneRulesetsApiFp(this.configuration).listZoneRulesets(zoneId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates a zone entry point ruleset, creating a new version.
     * @summary Update a zone entry point ruleset
     * @param {RTW3sz4nUpdateRulesetRequest} body 
     * @param {RTW3sz4nRulesetPhase} rulesetPhase 
     * @param {RTW3sz4nZoneId} zoneId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZoneRulesetsApi
     */
    public async updateZoneEntrypointRuleset(body: RTW3sz4nUpdateRulesetRequest, rulesetPhase: RTW3sz4nRulesetPhase, zoneId: RTW3sz4nZoneId, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20010>> {
        return ZoneRulesetsApiFp(this.configuration).updateZoneEntrypointRuleset(body, rulesetPhase, zoneId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates a zone ruleset, creating a new version.
     * @summary Update a zone ruleset
     * @param {RTW3sz4nUpdateRulesetRequest} body 
     * @param {RTW3sz4nRulesetId} rulesetId 
     * @param {RTW3sz4nZoneId} zoneId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZoneRulesetsApi
     */
    public async updateZoneRuleset(body: RTW3sz4nUpdateRulesetRequest, rulesetId: RTW3sz4nRulesetId, zoneId: RTW3sz4nZoneId, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20010>> {
        return ZoneRulesetsApiFp(this.configuration).updateZoneRuleset(body, rulesetId, zoneId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates an existing rule in a zone ruleset.
     * @summary Update a zone ruleset rule
     * @param {RTW3sz4nCreateOrUpdateRuleRequest} body 
     * @param {RTW3sz4nRuleId} ruleId 
     * @param {RTW3sz4nRulesetId} rulesetId 
     * @param {RTW3sz4nZoneId} zoneId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZoneRulesetsApi
     */
    public async updateZoneRulesetRule(body: RTW3sz4nCreateOrUpdateRuleRequest, ruleId: RTW3sz4nRuleId, rulesetId: RTW3sz4nRulesetId, zoneId: RTW3sz4nZoneId, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20010>> {
        return ZoneRulesetsApiFp(this.configuration).updateZoneRulesetRule(body, ruleId, rulesetId, zoneId, options).then((request) => request(this.axios, this.basePath));
    }
}
