/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse20042 } from '../models';
import { InlineResponse4xx51 } from '../models';
import { InlineResponse4xx52 } from '../models';
import { InlineResponse4xx53 } from '../models';
import { InvitesIdentifierBody } from '../models';
import { Model6KaSmMdRCollectionInviteResponse } from '../models';
import { Model6KaSmMdRCommonComponentsSchemasIdentifier } from '../models';
import { Model6KaSmMdRInviteComponentsSchemasIdentifier } from '../models';
import { Model6KaSmMdRSingleInviteResponse } from '../models';
import { OrganizationIdentifierInvitesBody } from '../models';
/**
 * OrganizationInvitesApi - axios parameter creator
 * @export
 */
export const OrganizationInvitesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Cancel an existing invitation.
         * @summary Cancel Invitation
         * @param {Model6KaSmMdRInviteComponentsSchemasIdentifier} identifier 
         * @param {Model6KaSmMdRCommonComponentsSchemasIdentifier} organizationIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organizationInvitesCancelInvitation: async (identifier: Model6KaSmMdRInviteComponentsSchemasIdentifier, organizationIdentifier: Model6KaSmMdRCommonComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling organizationInvitesCancelInvitation.');
            }
            // verify required parameter 'organizationIdentifier' is not null or undefined
            if (organizationIdentifier === null || organizationIdentifier === undefined) {
                throw new RequiredError('organizationIdentifier','Required parameter organizationIdentifier was null or undefined when calling organizationInvitesCancelInvitation.');
            }
            const localVarPath = `/organizations/{organization_identifier}/invites/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"organization_identifier"}}`, encodeURIComponent(String(organizationIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Invite a User to become a Member of an Organization.
         * @summary Create Invitation
         * @param {OrganizationIdentifierInvitesBody} body 
         * @param {Model6KaSmMdRCommonComponentsSchemasIdentifier} organizationIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organizationInvitesCreateInvitation: async (body: OrganizationIdentifierInvitesBody, organizationIdentifier: Model6KaSmMdRCommonComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling organizationInvitesCreateInvitation.');
            }
            // verify required parameter 'organizationIdentifier' is not null or undefined
            if (organizationIdentifier === null || organizationIdentifier === undefined) {
                throw new RequiredError('organizationIdentifier','Required parameter organizationIdentifier was null or undefined when calling organizationInvitesCreateInvitation.');
            }
            const localVarPath = `/organizations/{organization_identifier}/invites`
                .replace(`{${"organization_identifier"}}`, encodeURIComponent(String(organizationIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Change the Roles of a Pending Invite.
         * @summary Edit Invitation Roles
         * @param {InvitesIdentifierBody} body 
         * @param {Model6KaSmMdRInviteComponentsSchemasIdentifier} identifier 
         * @param {Model6KaSmMdRCommonComponentsSchemasIdentifier} organizationIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organizationInvitesEditInvitationRoles: async (body: InvitesIdentifierBody, identifier: Model6KaSmMdRInviteComponentsSchemasIdentifier, organizationIdentifier: Model6KaSmMdRCommonComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling organizationInvitesEditInvitationRoles.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling organizationInvitesEditInvitationRoles.');
            }
            // verify required parameter 'organizationIdentifier' is not null or undefined
            if (organizationIdentifier === null || organizationIdentifier === undefined) {
                throw new RequiredError('organizationIdentifier','Required parameter organizationIdentifier was null or undefined when calling organizationInvitesEditInvitationRoles.');
            }
            const localVarPath = `/organizations/{organization_identifier}/invites/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"organization_identifier"}}`, encodeURIComponent(String(organizationIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the details of an invitation.
         * @summary Invitation Details
         * @param {Model6KaSmMdRInviteComponentsSchemasIdentifier} identifier 
         * @param {Model6KaSmMdRCommonComponentsSchemasIdentifier} organizationIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organizationInvitesInvitationDetails: async (identifier: Model6KaSmMdRInviteComponentsSchemasIdentifier, organizationIdentifier: Model6KaSmMdRCommonComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling organizationInvitesInvitationDetails.');
            }
            // verify required parameter 'organizationIdentifier' is not null or undefined
            if (organizationIdentifier === null || organizationIdentifier === undefined) {
                throw new RequiredError('organizationIdentifier','Required parameter organizationIdentifier was null or undefined when calling organizationInvitesInvitationDetails.');
            }
            const localVarPath = `/organizations/{organization_identifier}/invites/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"organization_identifier"}}`, encodeURIComponent(String(organizationIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List all invitations associated with an organization.
         * @summary List Invitations
         * @param {Model6KaSmMdRCommonComponentsSchemasIdentifier} organizationIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organizationInvitesListInvitations: async (organizationIdentifier: Model6KaSmMdRCommonComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationIdentifier' is not null or undefined
            if (organizationIdentifier === null || organizationIdentifier === undefined) {
                throw new RequiredError('organizationIdentifier','Required parameter organizationIdentifier was null or undefined when calling organizationInvitesListInvitations.');
            }
            const localVarPath = `/organizations/{organization_identifier}/invites`
                .replace(`{${"organization_identifier"}}`, encodeURIComponent(String(organizationIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganizationInvitesApi - functional programming interface
 * @export
 */
export const OrganizationInvitesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Cancel an existing invitation.
         * @summary Cancel Invitation
         * @param {Model6KaSmMdRInviteComponentsSchemasIdentifier} identifier 
         * @param {Model6KaSmMdRCommonComponentsSchemasIdentifier} organizationIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async organizationInvitesCancelInvitation(identifier: Model6KaSmMdRInviteComponentsSchemasIdentifier, organizationIdentifier: Model6KaSmMdRCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20042>>> {
            const localVarAxiosArgs = await OrganizationInvitesApiAxiosParamCreator(configuration).organizationInvitesCancelInvitation(identifier, organizationIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invite a User to become a Member of an Organization.
         * @summary Create Invitation
         * @param {OrganizationIdentifierInvitesBody} body 
         * @param {Model6KaSmMdRCommonComponentsSchemasIdentifier} organizationIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async organizationInvitesCreateInvitation(body: OrganizationIdentifierInvitesBody, organizationIdentifier: Model6KaSmMdRCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model6KaSmMdRSingleInviteResponse>>> {
            const localVarAxiosArgs = await OrganizationInvitesApiAxiosParamCreator(configuration).organizationInvitesCreateInvitation(body, organizationIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Change the Roles of a Pending Invite.
         * @summary Edit Invitation Roles
         * @param {InvitesIdentifierBody} body 
         * @param {Model6KaSmMdRInviteComponentsSchemasIdentifier} identifier 
         * @param {Model6KaSmMdRCommonComponentsSchemasIdentifier} organizationIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async organizationInvitesEditInvitationRoles(body: InvitesIdentifierBody, identifier: Model6KaSmMdRInviteComponentsSchemasIdentifier, organizationIdentifier: Model6KaSmMdRCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model6KaSmMdRSingleInviteResponse>>> {
            const localVarAxiosArgs = await OrganizationInvitesApiAxiosParamCreator(configuration).organizationInvitesEditInvitationRoles(body, identifier, organizationIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the details of an invitation.
         * @summary Invitation Details
         * @param {Model6KaSmMdRInviteComponentsSchemasIdentifier} identifier 
         * @param {Model6KaSmMdRCommonComponentsSchemasIdentifier} organizationIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async organizationInvitesInvitationDetails(identifier: Model6KaSmMdRInviteComponentsSchemasIdentifier, organizationIdentifier: Model6KaSmMdRCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model6KaSmMdRSingleInviteResponse>>> {
            const localVarAxiosArgs = await OrganizationInvitesApiAxiosParamCreator(configuration).organizationInvitesInvitationDetails(identifier, organizationIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List all invitations associated with an organization.
         * @summary List Invitations
         * @param {Model6KaSmMdRCommonComponentsSchemasIdentifier} organizationIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async organizationInvitesListInvitations(organizationIdentifier: Model6KaSmMdRCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model6KaSmMdRCollectionInviteResponse>>> {
            const localVarAxiosArgs = await OrganizationInvitesApiAxiosParamCreator(configuration).organizationInvitesListInvitations(organizationIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * OrganizationInvitesApi - factory interface
 * @export
 */
export const OrganizationInvitesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Cancel an existing invitation.
         * @summary Cancel Invitation
         * @param {Model6KaSmMdRInviteComponentsSchemasIdentifier} identifier 
         * @param {Model6KaSmMdRCommonComponentsSchemasIdentifier} organizationIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async organizationInvitesCancelInvitation(identifier: Model6KaSmMdRInviteComponentsSchemasIdentifier, organizationIdentifier: Model6KaSmMdRCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20042>> {
            return OrganizationInvitesApiFp(configuration).organizationInvitesCancelInvitation(identifier, organizationIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Invite a User to become a Member of an Organization.
         * @summary Create Invitation
         * @param {OrganizationIdentifierInvitesBody} body 
         * @param {Model6KaSmMdRCommonComponentsSchemasIdentifier} organizationIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async organizationInvitesCreateInvitation(body: OrganizationIdentifierInvitesBody, organizationIdentifier: Model6KaSmMdRCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model6KaSmMdRSingleInviteResponse>> {
            return OrganizationInvitesApiFp(configuration).organizationInvitesCreateInvitation(body, organizationIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Change the Roles of a Pending Invite.
         * @summary Edit Invitation Roles
         * @param {InvitesIdentifierBody} body 
         * @param {Model6KaSmMdRInviteComponentsSchemasIdentifier} identifier 
         * @param {Model6KaSmMdRCommonComponentsSchemasIdentifier} organizationIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async organizationInvitesEditInvitationRoles(body: InvitesIdentifierBody, identifier: Model6KaSmMdRInviteComponentsSchemasIdentifier, organizationIdentifier: Model6KaSmMdRCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model6KaSmMdRSingleInviteResponse>> {
            return OrganizationInvitesApiFp(configuration).organizationInvitesEditInvitationRoles(body, identifier, organizationIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the details of an invitation.
         * @summary Invitation Details
         * @param {Model6KaSmMdRInviteComponentsSchemasIdentifier} identifier 
         * @param {Model6KaSmMdRCommonComponentsSchemasIdentifier} organizationIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async organizationInvitesInvitationDetails(identifier: Model6KaSmMdRInviteComponentsSchemasIdentifier, organizationIdentifier: Model6KaSmMdRCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model6KaSmMdRSingleInviteResponse>> {
            return OrganizationInvitesApiFp(configuration).organizationInvitesInvitationDetails(identifier, organizationIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * List all invitations associated with an organization.
         * @summary List Invitations
         * @param {Model6KaSmMdRCommonComponentsSchemasIdentifier} organizationIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async organizationInvitesListInvitations(organizationIdentifier: Model6KaSmMdRCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model6KaSmMdRCollectionInviteResponse>> {
            return OrganizationInvitesApiFp(configuration).organizationInvitesListInvitations(organizationIdentifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrganizationInvitesApi - object-oriented interface
 * @export
 * @class OrganizationInvitesApi
 * @extends {BaseAPI}
 */
export class OrganizationInvitesApi extends BaseAPI {
    /**
     * Cancel an existing invitation.
     * @summary Cancel Invitation
     * @param {Model6KaSmMdRInviteComponentsSchemasIdentifier} identifier 
     * @param {Model6KaSmMdRCommonComponentsSchemasIdentifier} organizationIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationInvitesApi
     */
    public async organizationInvitesCancelInvitation(identifier: Model6KaSmMdRInviteComponentsSchemasIdentifier, organizationIdentifier: Model6KaSmMdRCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20042>> {
        return OrganizationInvitesApiFp(this.configuration).organizationInvitesCancelInvitation(identifier, organizationIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Invite a User to become a Member of an Organization.
     * @summary Create Invitation
     * @param {OrganizationIdentifierInvitesBody} body 
     * @param {Model6KaSmMdRCommonComponentsSchemasIdentifier} organizationIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationInvitesApi
     */
    public async organizationInvitesCreateInvitation(body: OrganizationIdentifierInvitesBody, organizationIdentifier: Model6KaSmMdRCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model6KaSmMdRSingleInviteResponse>> {
        return OrganizationInvitesApiFp(this.configuration).organizationInvitesCreateInvitation(body, organizationIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Change the Roles of a Pending Invite.
     * @summary Edit Invitation Roles
     * @param {InvitesIdentifierBody} body 
     * @param {Model6KaSmMdRInviteComponentsSchemasIdentifier} identifier 
     * @param {Model6KaSmMdRCommonComponentsSchemasIdentifier} organizationIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationInvitesApi
     */
    public async organizationInvitesEditInvitationRoles(body: InvitesIdentifierBody, identifier: Model6KaSmMdRInviteComponentsSchemasIdentifier, organizationIdentifier: Model6KaSmMdRCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model6KaSmMdRSingleInviteResponse>> {
        return OrganizationInvitesApiFp(this.configuration).organizationInvitesEditInvitationRoles(body, identifier, organizationIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the details of an invitation.
     * @summary Invitation Details
     * @param {Model6KaSmMdRInviteComponentsSchemasIdentifier} identifier 
     * @param {Model6KaSmMdRCommonComponentsSchemasIdentifier} organizationIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationInvitesApi
     */
    public async organizationInvitesInvitationDetails(identifier: Model6KaSmMdRInviteComponentsSchemasIdentifier, organizationIdentifier: Model6KaSmMdRCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model6KaSmMdRSingleInviteResponse>> {
        return OrganizationInvitesApiFp(this.configuration).organizationInvitesInvitationDetails(identifier, organizationIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List all invitations associated with an organization.
     * @summary List Invitations
     * @param {Model6KaSmMdRCommonComponentsSchemasIdentifier} organizationIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationInvitesApi
     */
    public async organizationInvitesListInvitations(organizationIdentifier: Model6KaSmMdRCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model6KaSmMdRCollectionInviteResponse>> {
        return OrganizationInvitesApiFp(this.configuration).organizationInvitesListInvitations(organizationIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
}
