/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { JOh1h9zQAccountIdentifier } from '../models';
import { JOh1h9zQApiResponseCommonFailure } from '../models';
import { JOh1h9zQAsc } from '../models';
import { JOh1h9zQCreator } from '../models';
import { JOh1h9zQDirectUploadRequest } from '../models';
import { JOh1h9zQDirectUploadResponse } from '../models';
import { JOh1h9zQEnd } from '../models';
import { JOh1h9zQIdentifier } from '../models';
import { JOh1h9zQIncludeCounts } from '../models';
import { JOh1h9zQMediaState } from '../models';
import { JOh1h9zQSearch } from '../models';
import { JOh1h9zQSignedTokenRequest } from '../models';
import { JOh1h9zQSignedTokenResponse } from '../models';
import { JOh1h9zQStart } from '../models';
import { JOh1h9zQStorageUseResponse } from '../models';
import { JOh1h9zQTusResumable } from '../models';
import { JOh1h9zQType } from '../models';
import { JOh1h9zQUploadLength } from '../models';
import { JOh1h9zQUploadMetadata } from '../models';
import { JOh1h9zQVideoCopyRequest } from '../models';
import { JOh1h9zQVideoResponseCollection } from '../models';
import { JOh1h9zQVideoResponseSingle } from '../models';
import { JOh1h9zQVideoUpdate } from '../models';
/**
 * StreamVideosApi - axios parameter creator
 * @export
 */
export const StreamVideosApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a signed URL token for a video. If a body is not provided in the request, a token is created with default values.
         * @summary Create signed URL tokens for videos
         * @param {JOh1h9zQSignedTokenRequest} body 
         * @param {JOh1h9zQIdentifier} identifier 
         * @param {JOh1h9zQAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamVideosCreateSignedUrlTokensForVideos: async (body: JOh1h9zQSignedTokenRequest, identifier: JOh1h9zQIdentifier, accountIdentifier: JOh1h9zQAccountIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling streamVideosCreateSignedUrlTokensForVideos.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling streamVideosCreateSignedUrlTokensForVideos.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling streamVideosCreateSignedUrlTokensForVideos.');
            }
            const localVarPath = `/accounts/{account_identifier}/stream/{identifier}/token`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a video and its copies from Cloudflare Stream.
         * @summary Delete video
         * @param {JOh1h9zQIdentifier} identifier 
         * @param {JOh1h9zQAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamVideosDeleteVideo: async (identifier: JOh1h9zQIdentifier, accountIdentifier: JOh1h9zQAccountIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling streamVideosDeleteVideo.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling streamVideosDeleteVideo.');
            }
            const localVarPath = `/accounts/{account_identifier}/stream/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Initiates a video upload using the TUS protocol. On success, the server responds with a status code 201 (created) and includes a `location` header to indicate where the content should be uploaded. Refer to https://tus.io for protocol details.
         * @summary Initiate video uploads using TUS
         * @param {JOh1h9zQTusResumable} tusResumable 
         * @param {JOh1h9zQUploadLength} uploadLength 
         * @param {JOh1h9zQAccountIdentifier} accountIdentifier 
         * @param {JOh1h9zQCreator} [uploadCreator] 
         * @param {JOh1h9zQUploadMetadata} [uploadMetadata] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamVideosInitiateVideoUploadsUsingTus: async (tusResumable: JOh1h9zQTusResumable, uploadLength: JOh1h9zQUploadLength, accountIdentifier: JOh1h9zQAccountIdentifier, uploadCreator?: JOh1h9zQCreator, uploadMetadata?: JOh1h9zQUploadMetadata, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tusResumable' is not null or undefined
            if (tusResumable === null || tusResumable === undefined) {
                throw new RequiredError('tusResumable','Required parameter tusResumable was null or undefined when calling streamVideosInitiateVideoUploadsUsingTus.');
            }
            // verify required parameter 'uploadLength' is not null or undefined
            if (uploadLength === null || uploadLength === undefined) {
                throw new RequiredError('uploadLength','Required parameter uploadLength was null or undefined when calling streamVideosInitiateVideoUploadsUsingTus.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling streamVideosInitiateVideoUploadsUsingTus.');
            }
            const localVarPath = `/accounts/{account_identifier}/stream`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            if (tusResumable !== undefined && tusResumable !== null) {
                localVarHeaderParameter['Tus-Resumable'] = String(JSON.stringify(tusResumable));
            }

            if (uploadCreator !== undefined && uploadCreator !== null) {
                localVarHeaderParameter['Upload-Creator'] = String(JSON.stringify(uploadCreator));
            }

            if (uploadLength !== undefined && uploadLength !== null) {
                localVarHeaderParameter['Upload-Length'] = String(JSON.stringify(uploadLength));
            }

            if (uploadMetadata !== undefined && uploadMetadata !== null) {
                localVarHeaderParameter['Upload-Metadata'] = String(JSON.stringify(uploadMetadata));
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists up to 1000 videos from a single request. For a specific range, refer to the optional parameters.
         * @summary List videos
         * @param {JOh1h9zQAccountIdentifier} accountIdentifier 
         * @param {JOh1h9zQMediaState} [status] 
         * @param {JOh1h9zQCreator} [creator] 
         * @param {JOh1h9zQType} [type] 
         * @param {JOh1h9zQAsc} [asc] 
         * @param {JOh1h9zQSearch} [search] 
         * @param {JOh1h9zQStart} [start] 
         * @param {JOh1h9zQEnd} [end] 
         * @param {JOh1h9zQIncludeCounts} [includeCounts] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamVideosListVideos: async (accountIdentifier: JOh1h9zQAccountIdentifier, status?: JOh1h9zQMediaState, creator?: JOh1h9zQCreator, type?: JOh1h9zQType, asc?: JOh1h9zQAsc, search?: JOh1h9zQSearch, start?: JOh1h9zQStart, end?: JOh1h9zQEnd, includeCounts?: JOh1h9zQIncludeCounts, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling streamVideosListVideos.');
            }
            const localVarPath = `/accounts/{account_identifier}/stream`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (creator !== undefined) {
                localVarQueryParameter['creator'] = creator;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (asc !== undefined) {
                localVarQueryParameter['asc'] = asc;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = end;
            }

            if (includeCounts !== undefined) {
                localVarQueryParameter['include_counts'] = includeCounts;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches an HTML code snippet to embed a video in a web page delivered through Cloudflare. On success, returns an HTML fragment for use on web pages to display a video. On failure, returns a JSON response body.
         * @summary Retrieve embed Code HTML
         * @param {JOh1h9zQIdentifier} identifier 
         * @param {JOh1h9zQAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamVideosRetreieveEmbedCodeHtml: async (identifier: JOh1h9zQIdentifier, accountIdentifier: JOh1h9zQAccountIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling streamVideosRetreieveEmbedCodeHtml.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling streamVideosRetreieveEmbedCodeHtml.');
            }
            const localVarPath = `/accounts/{account_identifier}/stream/{identifier}/embed`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches details for a single video.
         * @summary Retrieve video details
         * @param {JOh1h9zQIdentifier} identifier 
         * @param {JOh1h9zQAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamVideosRetrieveVideoDetails: async (identifier: JOh1h9zQIdentifier, accountIdentifier: JOh1h9zQAccountIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling streamVideosRetrieveVideoDetails.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling streamVideosRetrieveVideoDetails.');
            }
            const localVarPath = `/accounts/{account_identifier}/stream/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns information about an account's storage use.
         * @summary Storage use
         * @param {JOh1h9zQAccountIdentifier} accountIdentifier 
         * @param {JOh1h9zQCreator} [creator] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamVideosStorageUsage: async (accountIdentifier: JOh1h9zQAccountIdentifier, creator?: JOh1h9zQCreator, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling streamVideosStorageUsage.');
            }
            const localVarPath = `/accounts/{account_identifier}/stream/storage-usage`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            if (creator !== undefined) {
                localVarQueryParameter['creator'] = creator;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Edit details for a single video.
         * @summary Edit video details
         * @param {JOh1h9zQVideoUpdate} body 
         * @param {JOh1h9zQIdentifier} identifier 
         * @param {JOh1h9zQAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamVideosUpdateVideoDetails: async (body: JOh1h9zQVideoUpdate, identifier: JOh1h9zQIdentifier, accountIdentifier: JOh1h9zQAccountIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling streamVideosUpdateVideoDetails.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling streamVideosUpdateVideoDetails.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling streamVideosUpdateVideoDetails.');
            }
            const localVarPath = `/accounts/{account_identifier}/stream/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Uploads a video to Stream from a provided URL.
         * @summary Upload videos from a URL
         * @param {JOh1h9zQVideoCopyRequest} body 
         * @param {JOh1h9zQAccountIdentifier} accountIdentifier 
         * @param {JOh1h9zQCreator} [uploadCreator] 
         * @param {JOh1h9zQUploadMetadata} [uploadMetadata] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamVideosUploadVideosFromAUrl: async (body: JOh1h9zQVideoCopyRequest, accountIdentifier: JOh1h9zQAccountIdentifier, uploadCreator?: JOh1h9zQCreator, uploadMetadata?: JOh1h9zQUploadMetadata, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling streamVideosUploadVideosFromAUrl.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling streamVideosUploadVideosFromAUrl.');
            }
            const localVarPath = `/accounts/{account_identifier}/stream/copy`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            if (uploadCreator !== undefined && uploadCreator !== null) {
                localVarHeaderParameter['Upload-Creator'] = String(JSON.stringify(uploadCreator));
            }

            if (uploadMetadata !== undefined && uploadMetadata !== null) {
                localVarHeaderParameter['Upload-Metadata'] = String(JSON.stringify(uploadMetadata));
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a direct upload that allows video uploads without an API key.
         * @summary Upload videos via direct upload URLs
         * @param {JOh1h9zQDirectUploadRequest} body 
         * @param {JOh1h9zQAccountIdentifier} accountIdentifier 
         * @param {JOh1h9zQCreator} [uploadCreator] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamVideosUploadVideosViaDirectUploadUrLs: async (body: JOh1h9zQDirectUploadRequest, accountIdentifier: JOh1h9zQAccountIdentifier, uploadCreator?: JOh1h9zQCreator, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling streamVideosUploadVideosViaDirectUploadUrLs.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling streamVideosUploadVideosViaDirectUploadUrLs.');
            }
            const localVarPath = `/accounts/{account_identifier}/stream/direct_upload`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            if (uploadCreator !== undefined && uploadCreator !== null) {
                localVarHeaderParameter['Upload-Creator'] = String(JSON.stringify(uploadCreator));
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StreamVideosApi - functional programming interface
 * @export
 */
export const StreamVideosApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates a signed URL token for a video. If a body is not provided in the request, a token is created with default values.
         * @summary Create signed URL tokens for videos
         * @param {JOh1h9zQSignedTokenRequest} body 
         * @param {JOh1h9zQIdentifier} identifier 
         * @param {JOh1h9zQAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamVideosCreateSignedUrlTokensForVideos(body: JOh1h9zQSignedTokenRequest, identifier: JOh1h9zQIdentifier, accountIdentifier: JOh1h9zQAccountIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<JOh1h9zQSignedTokenResponse>>> {
            const localVarAxiosArgs = await StreamVideosApiAxiosParamCreator(configuration).streamVideosCreateSignedUrlTokensForVideos(body, identifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes a video and its copies from Cloudflare Stream.
         * @summary Delete video
         * @param {JOh1h9zQIdentifier} identifier 
         * @param {JOh1h9zQAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamVideosDeleteVideo(identifier: JOh1h9zQIdentifier, accountIdentifier: JOh1h9zQAccountIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await StreamVideosApiAxiosParamCreator(configuration).streamVideosDeleteVideo(identifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Initiates a video upload using the TUS protocol. On success, the server responds with a status code 201 (created) and includes a `location` header to indicate where the content should be uploaded. Refer to https://tus.io for protocol details.
         * @summary Initiate video uploads using TUS
         * @param {JOh1h9zQTusResumable} tusResumable 
         * @param {JOh1h9zQUploadLength} uploadLength 
         * @param {JOh1h9zQAccountIdentifier} accountIdentifier 
         * @param {JOh1h9zQCreator} [uploadCreator] 
         * @param {JOh1h9zQUploadMetadata} [uploadMetadata] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamVideosInitiateVideoUploadsUsingTus(tusResumable: JOh1h9zQTusResumable, uploadLength: JOh1h9zQUploadLength, accountIdentifier: JOh1h9zQAccountIdentifier, uploadCreator?: JOh1h9zQCreator, uploadMetadata?: JOh1h9zQUploadMetadata, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await StreamVideosApiAxiosParamCreator(configuration).streamVideosInitiateVideoUploadsUsingTus(tusResumable, uploadLength, accountIdentifier, uploadCreator, uploadMetadata, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Lists up to 1000 videos from a single request. For a specific range, refer to the optional parameters.
         * @summary List videos
         * @param {JOh1h9zQAccountIdentifier} accountIdentifier 
         * @param {JOh1h9zQMediaState} [status] 
         * @param {JOh1h9zQCreator} [creator] 
         * @param {JOh1h9zQType} [type] 
         * @param {JOh1h9zQAsc} [asc] 
         * @param {JOh1h9zQSearch} [search] 
         * @param {JOh1h9zQStart} [start] 
         * @param {JOh1h9zQEnd} [end] 
         * @param {JOh1h9zQIncludeCounts} [includeCounts] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamVideosListVideos(accountIdentifier: JOh1h9zQAccountIdentifier, status?: JOh1h9zQMediaState, creator?: JOh1h9zQCreator, type?: JOh1h9zQType, asc?: JOh1h9zQAsc, search?: JOh1h9zQSearch, start?: JOh1h9zQStart, end?: JOh1h9zQEnd, includeCounts?: JOh1h9zQIncludeCounts, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<JOh1h9zQVideoResponseCollection>>> {
            const localVarAxiosArgs = await StreamVideosApiAxiosParamCreator(configuration).streamVideosListVideos(accountIdentifier, status, creator, type, asc, search, start, end, includeCounts, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetches an HTML code snippet to embed a video in a web page delivered through Cloudflare. On success, returns an HTML fragment for use on web pages to display a video. On failure, returns a JSON response body.
         * @summary Retrieve embed Code HTML
         * @param {JOh1h9zQIdentifier} identifier 
         * @param {JOh1h9zQAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamVideosRetreieveEmbedCodeHtml(identifier: JOh1h9zQIdentifier, accountIdentifier: JOh1h9zQAccountIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await StreamVideosApiAxiosParamCreator(configuration).streamVideosRetreieveEmbedCodeHtml(identifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetches details for a single video.
         * @summary Retrieve video details
         * @param {JOh1h9zQIdentifier} identifier 
         * @param {JOh1h9zQAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamVideosRetrieveVideoDetails(identifier: JOh1h9zQIdentifier, accountIdentifier: JOh1h9zQAccountIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<JOh1h9zQVideoResponseSingle>>> {
            const localVarAxiosArgs = await StreamVideosApiAxiosParamCreator(configuration).streamVideosRetrieveVideoDetails(identifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns information about an account's storage use.
         * @summary Storage use
         * @param {JOh1h9zQAccountIdentifier} accountIdentifier 
         * @param {JOh1h9zQCreator} [creator] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamVideosStorageUsage(accountIdentifier: JOh1h9zQAccountIdentifier, creator?: JOh1h9zQCreator, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<JOh1h9zQStorageUseResponse>>> {
            const localVarAxiosArgs = await StreamVideosApiAxiosParamCreator(configuration).streamVideosStorageUsage(accountIdentifier, creator, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Edit details for a single video.
         * @summary Edit video details
         * @param {JOh1h9zQVideoUpdate} body 
         * @param {JOh1h9zQIdentifier} identifier 
         * @param {JOh1h9zQAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamVideosUpdateVideoDetails(body: JOh1h9zQVideoUpdate, identifier: JOh1h9zQIdentifier, accountIdentifier: JOh1h9zQAccountIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<JOh1h9zQVideoResponseSingle>>> {
            const localVarAxiosArgs = await StreamVideosApiAxiosParamCreator(configuration).streamVideosUpdateVideoDetails(body, identifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Uploads a video to Stream from a provided URL.
         * @summary Upload videos from a URL
         * @param {JOh1h9zQVideoCopyRequest} body 
         * @param {JOh1h9zQAccountIdentifier} accountIdentifier 
         * @param {JOh1h9zQCreator} [uploadCreator] 
         * @param {JOh1h9zQUploadMetadata} [uploadMetadata] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamVideosUploadVideosFromAUrl(body: JOh1h9zQVideoCopyRequest, accountIdentifier: JOh1h9zQAccountIdentifier, uploadCreator?: JOh1h9zQCreator, uploadMetadata?: JOh1h9zQUploadMetadata, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<JOh1h9zQVideoResponseSingle>>> {
            const localVarAxiosArgs = await StreamVideosApiAxiosParamCreator(configuration).streamVideosUploadVideosFromAUrl(body, accountIdentifier, uploadCreator, uploadMetadata, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a direct upload that allows video uploads without an API key.
         * @summary Upload videos via direct upload URLs
         * @param {JOh1h9zQDirectUploadRequest} body 
         * @param {JOh1h9zQAccountIdentifier} accountIdentifier 
         * @param {JOh1h9zQCreator} [uploadCreator] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamVideosUploadVideosViaDirectUploadUrLs(body: JOh1h9zQDirectUploadRequest, accountIdentifier: JOh1h9zQAccountIdentifier, uploadCreator?: JOh1h9zQCreator, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<JOh1h9zQDirectUploadResponse>>> {
            const localVarAxiosArgs = await StreamVideosApiAxiosParamCreator(configuration).streamVideosUploadVideosViaDirectUploadUrLs(body, accountIdentifier, uploadCreator, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * StreamVideosApi - factory interface
 * @export
 */
export const StreamVideosApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Creates a signed URL token for a video. If a body is not provided in the request, a token is created with default values.
         * @summary Create signed URL tokens for videos
         * @param {JOh1h9zQSignedTokenRequest} body 
         * @param {JOh1h9zQIdentifier} identifier 
         * @param {JOh1h9zQAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamVideosCreateSignedUrlTokensForVideos(body: JOh1h9zQSignedTokenRequest, identifier: JOh1h9zQIdentifier, accountIdentifier: JOh1h9zQAccountIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<JOh1h9zQSignedTokenResponse>> {
            return StreamVideosApiFp(configuration).streamVideosCreateSignedUrlTokensForVideos(body, identifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a video and its copies from Cloudflare Stream.
         * @summary Delete video
         * @param {JOh1h9zQIdentifier} identifier 
         * @param {JOh1h9zQAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamVideosDeleteVideo(identifier: JOh1h9zQIdentifier, accountIdentifier: JOh1h9zQAccountIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return StreamVideosApiFp(configuration).streamVideosDeleteVideo(identifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Initiates a video upload using the TUS protocol. On success, the server responds with a status code 201 (created) and includes a `location` header to indicate where the content should be uploaded. Refer to https://tus.io for protocol details.
         * @summary Initiate video uploads using TUS
         * @param {JOh1h9zQTusResumable} tusResumable 
         * @param {JOh1h9zQUploadLength} uploadLength 
         * @param {JOh1h9zQAccountIdentifier} accountIdentifier 
         * @param {JOh1h9zQCreator} [uploadCreator] 
         * @param {JOh1h9zQUploadMetadata} [uploadMetadata] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamVideosInitiateVideoUploadsUsingTus(tusResumable: JOh1h9zQTusResumable, uploadLength: JOh1h9zQUploadLength, accountIdentifier: JOh1h9zQAccountIdentifier, uploadCreator?: JOh1h9zQCreator, uploadMetadata?: JOh1h9zQUploadMetadata, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return StreamVideosApiFp(configuration).streamVideosInitiateVideoUploadsUsingTus(tusResumable, uploadLength, accountIdentifier, uploadCreator, uploadMetadata, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists up to 1000 videos from a single request. For a specific range, refer to the optional parameters.
         * @summary List videos
         * @param {JOh1h9zQAccountIdentifier} accountIdentifier 
         * @param {JOh1h9zQMediaState} [status] 
         * @param {JOh1h9zQCreator} [creator] 
         * @param {JOh1h9zQType} [type] 
         * @param {JOh1h9zQAsc} [asc] 
         * @param {JOh1h9zQSearch} [search] 
         * @param {JOh1h9zQStart} [start] 
         * @param {JOh1h9zQEnd} [end] 
         * @param {JOh1h9zQIncludeCounts} [includeCounts] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamVideosListVideos(accountIdentifier: JOh1h9zQAccountIdentifier, status?: JOh1h9zQMediaState, creator?: JOh1h9zQCreator, type?: JOh1h9zQType, asc?: JOh1h9zQAsc, search?: JOh1h9zQSearch, start?: JOh1h9zQStart, end?: JOh1h9zQEnd, includeCounts?: JOh1h9zQIncludeCounts, options?: AxiosRequestConfig): Promise<AxiosResponse<JOh1h9zQVideoResponseCollection>> {
            return StreamVideosApiFp(configuration).streamVideosListVideos(accountIdentifier, status, creator, type, asc, search, start, end, includeCounts, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches an HTML code snippet to embed a video in a web page delivered through Cloudflare. On success, returns an HTML fragment for use on web pages to display a video. On failure, returns a JSON response body.
         * @summary Retrieve embed Code HTML
         * @param {JOh1h9zQIdentifier} identifier 
         * @param {JOh1h9zQAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamVideosRetreieveEmbedCodeHtml(identifier: JOh1h9zQIdentifier, accountIdentifier: JOh1h9zQAccountIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return StreamVideosApiFp(configuration).streamVideosRetreieveEmbedCodeHtml(identifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches details for a single video.
         * @summary Retrieve video details
         * @param {JOh1h9zQIdentifier} identifier 
         * @param {JOh1h9zQAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamVideosRetrieveVideoDetails(identifier: JOh1h9zQIdentifier, accountIdentifier: JOh1h9zQAccountIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<JOh1h9zQVideoResponseSingle>> {
            return StreamVideosApiFp(configuration).streamVideosRetrieveVideoDetails(identifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns information about an account's storage use.
         * @summary Storage use
         * @param {JOh1h9zQAccountIdentifier} accountIdentifier 
         * @param {JOh1h9zQCreator} [creator] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamVideosStorageUsage(accountIdentifier: JOh1h9zQAccountIdentifier, creator?: JOh1h9zQCreator, options?: AxiosRequestConfig): Promise<AxiosResponse<JOh1h9zQStorageUseResponse>> {
            return StreamVideosApiFp(configuration).streamVideosStorageUsage(accountIdentifier, creator, options).then((request) => request(axios, basePath));
        },
        /**
         * Edit details for a single video.
         * @summary Edit video details
         * @param {JOh1h9zQVideoUpdate} body 
         * @param {JOh1h9zQIdentifier} identifier 
         * @param {JOh1h9zQAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamVideosUpdateVideoDetails(body: JOh1h9zQVideoUpdate, identifier: JOh1h9zQIdentifier, accountIdentifier: JOh1h9zQAccountIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<JOh1h9zQVideoResponseSingle>> {
            return StreamVideosApiFp(configuration).streamVideosUpdateVideoDetails(body, identifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Uploads a video to Stream from a provided URL.
         * @summary Upload videos from a URL
         * @param {JOh1h9zQVideoCopyRequest} body 
         * @param {JOh1h9zQAccountIdentifier} accountIdentifier 
         * @param {JOh1h9zQCreator} [uploadCreator] 
         * @param {JOh1h9zQUploadMetadata} [uploadMetadata] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamVideosUploadVideosFromAUrl(body: JOh1h9zQVideoCopyRequest, accountIdentifier: JOh1h9zQAccountIdentifier, uploadCreator?: JOh1h9zQCreator, uploadMetadata?: JOh1h9zQUploadMetadata, options?: AxiosRequestConfig): Promise<AxiosResponse<JOh1h9zQVideoResponseSingle>> {
            return StreamVideosApiFp(configuration).streamVideosUploadVideosFromAUrl(body, accountIdentifier, uploadCreator, uploadMetadata, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a direct upload that allows video uploads without an API key.
         * @summary Upload videos via direct upload URLs
         * @param {JOh1h9zQDirectUploadRequest} body 
         * @param {JOh1h9zQAccountIdentifier} accountIdentifier 
         * @param {JOh1h9zQCreator} [uploadCreator] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamVideosUploadVideosViaDirectUploadUrLs(body: JOh1h9zQDirectUploadRequest, accountIdentifier: JOh1h9zQAccountIdentifier, uploadCreator?: JOh1h9zQCreator, options?: AxiosRequestConfig): Promise<AxiosResponse<JOh1h9zQDirectUploadResponse>> {
            return StreamVideosApiFp(configuration).streamVideosUploadVideosViaDirectUploadUrLs(body, accountIdentifier, uploadCreator, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StreamVideosApi - object-oriented interface
 * @export
 * @class StreamVideosApi
 * @extends {BaseAPI}
 */
export class StreamVideosApi extends BaseAPI {
    /**
     * Creates a signed URL token for a video. If a body is not provided in the request, a token is created with default values.
     * @summary Create signed URL tokens for videos
     * @param {JOh1h9zQSignedTokenRequest} body 
     * @param {JOh1h9zQIdentifier} identifier 
     * @param {JOh1h9zQAccountIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamVideosApi
     */
    public async streamVideosCreateSignedUrlTokensForVideos(body: JOh1h9zQSignedTokenRequest, identifier: JOh1h9zQIdentifier, accountIdentifier: JOh1h9zQAccountIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<JOh1h9zQSignedTokenResponse>> {
        return StreamVideosApiFp(this.configuration).streamVideosCreateSignedUrlTokensForVideos(body, identifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes a video and its copies from Cloudflare Stream.
     * @summary Delete video
     * @param {JOh1h9zQIdentifier} identifier 
     * @param {JOh1h9zQAccountIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamVideosApi
     */
    public async streamVideosDeleteVideo(identifier: JOh1h9zQIdentifier, accountIdentifier: JOh1h9zQAccountIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return StreamVideosApiFp(this.configuration).streamVideosDeleteVideo(identifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Initiates a video upload using the TUS protocol. On success, the server responds with a status code 201 (created) and includes a `location` header to indicate where the content should be uploaded. Refer to https://tus.io for protocol details.
     * @summary Initiate video uploads using TUS
     * @param {JOh1h9zQTusResumable} tusResumable 
     * @param {JOh1h9zQUploadLength} uploadLength 
     * @param {JOh1h9zQAccountIdentifier} accountIdentifier 
     * @param {JOh1h9zQCreator} [uploadCreator] 
     * @param {JOh1h9zQUploadMetadata} [uploadMetadata] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamVideosApi
     */
    public async streamVideosInitiateVideoUploadsUsingTus(tusResumable: JOh1h9zQTusResumable, uploadLength: JOh1h9zQUploadLength, accountIdentifier: JOh1h9zQAccountIdentifier, uploadCreator?: JOh1h9zQCreator, uploadMetadata?: JOh1h9zQUploadMetadata, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return StreamVideosApiFp(this.configuration).streamVideosInitiateVideoUploadsUsingTus(tusResumable, uploadLength, accountIdentifier, uploadCreator, uploadMetadata, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists up to 1000 videos from a single request. For a specific range, refer to the optional parameters.
     * @summary List videos
     * @param {JOh1h9zQAccountIdentifier} accountIdentifier 
     * @param {JOh1h9zQMediaState} [status] 
     * @param {JOh1h9zQCreator} [creator] 
     * @param {JOh1h9zQType} [type] 
     * @param {JOh1h9zQAsc} [asc] 
     * @param {JOh1h9zQSearch} [search] 
     * @param {JOh1h9zQStart} [start] 
     * @param {JOh1h9zQEnd} [end] 
     * @param {JOh1h9zQIncludeCounts} [includeCounts] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamVideosApi
     */
    public async streamVideosListVideos(accountIdentifier: JOh1h9zQAccountIdentifier, status?: JOh1h9zQMediaState, creator?: JOh1h9zQCreator, type?: JOh1h9zQType, asc?: JOh1h9zQAsc, search?: JOh1h9zQSearch, start?: JOh1h9zQStart, end?: JOh1h9zQEnd, includeCounts?: JOh1h9zQIncludeCounts, options?: AxiosRequestConfig) : Promise<AxiosResponse<JOh1h9zQVideoResponseCollection>> {
        return StreamVideosApiFp(this.configuration).streamVideosListVideos(accountIdentifier, status, creator, type, asc, search, start, end, includeCounts, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches an HTML code snippet to embed a video in a web page delivered through Cloudflare. On success, returns an HTML fragment for use on web pages to display a video. On failure, returns a JSON response body.
     * @summary Retrieve embed Code HTML
     * @param {JOh1h9zQIdentifier} identifier 
     * @param {JOh1h9zQAccountIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamVideosApi
     */
    public async streamVideosRetreieveEmbedCodeHtml(identifier: JOh1h9zQIdentifier, accountIdentifier: JOh1h9zQAccountIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return StreamVideosApiFp(this.configuration).streamVideosRetreieveEmbedCodeHtml(identifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches details for a single video.
     * @summary Retrieve video details
     * @param {JOh1h9zQIdentifier} identifier 
     * @param {JOh1h9zQAccountIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamVideosApi
     */
    public async streamVideosRetrieveVideoDetails(identifier: JOh1h9zQIdentifier, accountIdentifier: JOh1h9zQAccountIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<JOh1h9zQVideoResponseSingle>> {
        return StreamVideosApiFp(this.configuration).streamVideosRetrieveVideoDetails(identifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns information about an account's storage use.
     * @summary Storage use
     * @param {JOh1h9zQAccountIdentifier} accountIdentifier 
     * @param {JOh1h9zQCreator} [creator] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamVideosApi
     */
    public async streamVideosStorageUsage(accountIdentifier: JOh1h9zQAccountIdentifier, creator?: JOh1h9zQCreator, options?: AxiosRequestConfig) : Promise<AxiosResponse<JOh1h9zQStorageUseResponse>> {
        return StreamVideosApiFp(this.configuration).streamVideosStorageUsage(accountIdentifier, creator, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Edit details for a single video.
     * @summary Edit video details
     * @param {JOh1h9zQVideoUpdate} body 
     * @param {JOh1h9zQIdentifier} identifier 
     * @param {JOh1h9zQAccountIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamVideosApi
     */
    public async streamVideosUpdateVideoDetails(body: JOh1h9zQVideoUpdate, identifier: JOh1h9zQIdentifier, accountIdentifier: JOh1h9zQAccountIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<JOh1h9zQVideoResponseSingle>> {
        return StreamVideosApiFp(this.configuration).streamVideosUpdateVideoDetails(body, identifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Uploads a video to Stream from a provided URL.
     * @summary Upload videos from a URL
     * @param {JOh1h9zQVideoCopyRequest} body 
     * @param {JOh1h9zQAccountIdentifier} accountIdentifier 
     * @param {JOh1h9zQCreator} [uploadCreator] 
     * @param {JOh1h9zQUploadMetadata} [uploadMetadata] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamVideosApi
     */
    public async streamVideosUploadVideosFromAUrl(body: JOh1h9zQVideoCopyRequest, accountIdentifier: JOh1h9zQAccountIdentifier, uploadCreator?: JOh1h9zQCreator, uploadMetadata?: JOh1h9zQUploadMetadata, options?: AxiosRequestConfig) : Promise<AxiosResponse<JOh1h9zQVideoResponseSingle>> {
        return StreamVideosApiFp(this.configuration).streamVideosUploadVideosFromAUrl(body, accountIdentifier, uploadCreator, uploadMetadata, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates a direct upload that allows video uploads without an API key.
     * @summary Upload videos via direct upload URLs
     * @param {JOh1h9zQDirectUploadRequest} body 
     * @param {JOh1h9zQAccountIdentifier} accountIdentifier 
     * @param {JOh1h9zQCreator} [uploadCreator] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamVideosApi
     */
    public async streamVideosUploadVideosViaDirectUploadUrLs(body: JOh1h9zQDirectUploadRequest, accountIdentifier: JOh1h9zQAccountIdentifier, uploadCreator?: JOh1h9zQCreator, options?: AxiosRequestConfig) : Promise<AxiosResponse<JOh1h9zQDirectUploadResponse>> {
        return StreamVideosApiFp(this.configuration).streamVideosUploadVideosViaDirectUploadUrLs(body, accountIdentifier, uploadCreator, options).then((request) => request(this.axios, this.basePath));
    }
}
