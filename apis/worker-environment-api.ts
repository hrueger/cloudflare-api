/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AccountsaccountIdentifierworkersservicesserviceNameenvironmentsenvironmentNamecontentMetadata } from '../models';
import { MepUEAgcApiResponseCommon } from '../models';
import { MepUEAgcApiResponseCommonFailure } from '../models';
import { MepUEAgcEnvironment } from '../models';
import { MepUEAgcIdentifier } from '../models';
import { MepUEAgcScriptResponse } from '../models';
import { MepUEAgcScriptSettingsResponse } from '../models';
import { MepUEAgcService } from '../models';
/**
 * WorkerEnvironmentApi - axios parameter creator
 * @export
 */
export const WorkerEnvironmentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get script content from a worker with an environment
         * @summary Get script content
         * @param {MepUEAgcIdentifier} accountIdentifier 
         * @param {MepUEAgcService} serviceName 
         * @param {MepUEAgcEnvironment} environmentName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workerEnvironmentGetScriptContent: async (accountIdentifier: MepUEAgcIdentifier, serviceName: MepUEAgcService, environmentName: MepUEAgcEnvironment, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling workerEnvironmentGetScriptContent.');
            }
            // verify required parameter 'serviceName' is not null or undefined
            if (serviceName === null || serviceName === undefined) {
                throw new RequiredError('serviceName','Required parameter serviceName was null or undefined when calling workerEnvironmentGetScriptContent.');
            }
            // verify required parameter 'environmentName' is not null or undefined
            if (environmentName === null || environmentName === undefined) {
                throw new RequiredError('environmentName','Required parameter environmentName was null or undefined when calling workerEnvironmentGetScriptContent.');
            }
            const localVarPath = `/accounts/{account_identifier}/workers/services/{service_name}/environments/{environment_name}/content`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)))
                .replace(`{${"service_name"}}`, encodeURIComponent(String(serviceName)))
                .replace(`{${"environment_name"}}`, encodeURIComponent(String(environmentName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Put script content from a worker with an environment
         * @summary Put script content
         * @param {Array<Blob>} anyPartName 
         * @param {AccountsaccountIdentifierworkersservicesserviceNameenvironmentsenvironmentNamecontentMetadata} metadata 
         * @param {MepUEAgcIdentifier} accountIdentifier 
         * @param {MepUEAgcService} serviceName 
         * @param {MepUEAgcEnvironment} environmentName 
         * @param {string} [CF_WORKER_BODY_PART] The multipart name of a script upload part containing script content in service worker format. Alternative to including in a metadata part.
         * @param {string} [CF_WORKER_MAIN_MODULE_PART] The multipart name of a script upload part containing script content in es module format. Alternative to including in a metadata part.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workerEnvironmentPutScriptContentForm: async (anyPartName: Array<Blob>, metadata: AccountsaccountIdentifierworkersservicesserviceNameenvironmentsenvironmentNamecontentMetadata, accountIdentifier: MepUEAgcIdentifier, serviceName: MepUEAgcService, environmentName: MepUEAgcEnvironment, CF_WORKER_BODY_PART?: string, CF_WORKER_MAIN_MODULE_PART?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'anyPartName' is not null or undefined
            if (anyPartName === null || anyPartName === undefined) {
                throw new RequiredError('anyPartName','Required parameter anyPartName was null or undefined when calling workerEnvironmentPutScriptContentForm.');
            }
            // verify required parameter 'metadata' is not null or undefined
            if (metadata === null || metadata === undefined) {
                throw new RequiredError('metadata','Required parameter metadata was null or undefined when calling workerEnvironmentPutScriptContentForm.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling workerEnvironmentPutScriptContentForm.');
            }
            // verify required parameter 'serviceName' is not null or undefined
            if (serviceName === null || serviceName === undefined) {
                throw new RequiredError('serviceName','Required parameter serviceName was null or undefined when calling workerEnvironmentPutScriptContentForm.');
            }
            // verify required parameter 'environmentName' is not null or undefined
            if (environmentName === null || environmentName === undefined) {
                throw new RequiredError('environmentName','Required parameter environmentName was null or undefined when calling workerEnvironmentPutScriptContentForm.');
            }
            const localVarPath = `/accounts/{account_identifier}/workers/services/{service_name}/environments/{environment_name}/content`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)))
                .replace(`{${"service_name"}}`, encodeURIComponent(String(serviceName)))
                .replace(`{${"environment_name"}}`, encodeURIComponent(String(environmentName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (CF_WORKER_BODY_PART !== undefined && CF_WORKER_BODY_PART !== null) {
                localVarHeaderParameter['CF-WORKER-BODY-PART'] = String(CF_WORKER_BODY_PART);
            }

            if (CF_WORKER_MAIN_MODULE_PART !== undefined && CF_WORKER_MAIN_MODULE_PART !== null) {
                localVarHeaderParameter['CF-WORKER-MAIN-MODULE-PART'] = String(CF_WORKER_MAIN_MODULE_PART);
            }

            if (anyPartName) {
                anyPartName.forEach((element) => {
                    localVarFormParams.append('&lt;any part name&gt;', element as any);
                })
            }

            if (metadata !== undefined) { 
                localVarFormParams.append('metadata', metadata as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get script settings from a worker with an environment
         * @summary Get Script Settings
         * @param {MepUEAgcIdentifier} accountIdentifier 
         * @param {MepUEAgcService} serviceName 
         * @param {MepUEAgcEnvironment} environmentName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workerScriptEnvironmentGetSettings: async (accountIdentifier: MepUEAgcIdentifier, serviceName: MepUEAgcService, environmentName: MepUEAgcEnvironment, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling workerScriptEnvironmentGetSettings.');
            }
            // verify required parameter 'serviceName' is not null or undefined
            if (serviceName === null || serviceName === undefined) {
                throw new RequiredError('serviceName','Required parameter serviceName was null or undefined when calling workerScriptEnvironmentGetSettings.');
            }
            // verify required parameter 'environmentName' is not null or undefined
            if (environmentName === null || environmentName === undefined) {
                throw new RequiredError('environmentName','Required parameter environmentName was null or undefined when calling workerScriptEnvironmentGetSettings.');
            }
            const localVarPath = `/accounts/{account_identifier}/workers/services/{service_name}/environments/{environment_name}/settings`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)))
                .replace(`{${"service_name"}}`, encodeURIComponent(String(serviceName)))
                .replace(`{${"environment_name"}}`, encodeURIComponent(String(environmentName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Patch script metadata, such as bindings
         * @summary Patch Script Settings
         * @param {MepUEAgcScriptSettingsResponse} body 
         * @param {MepUEAgcIdentifier} accountIdentifier 
         * @param {MepUEAgcService} serviceName 
         * @param {MepUEAgcEnvironment} environmentName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workerScriptEnvironmentPatchSettings: async (body: MepUEAgcScriptSettingsResponse, accountIdentifier: MepUEAgcIdentifier, serviceName: MepUEAgcService, environmentName: MepUEAgcEnvironment, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling workerScriptEnvironmentPatchSettings.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling workerScriptEnvironmentPatchSettings.');
            }
            // verify required parameter 'serviceName' is not null or undefined
            if (serviceName === null || serviceName === undefined) {
                throw new RequiredError('serviceName','Required parameter serviceName was null or undefined when calling workerScriptEnvironmentPatchSettings.');
            }
            // verify required parameter 'environmentName' is not null or undefined
            if (environmentName === null || environmentName === undefined) {
                throw new RequiredError('environmentName','Required parameter environmentName was null or undefined when calling workerScriptEnvironmentPatchSettings.');
            }
            const localVarPath = `/accounts/{account_identifier}/workers/services/{service_name}/environments/{environment_name}/settings`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)))
                .replace(`{${"service_name"}}`, encodeURIComponent(String(serviceName)))
                .replace(`{${"environment_name"}}`, encodeURIComponent(String(environmentName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkerEnvironmentApi - functional programming interface
 * @export
 */
export const WorkerEnvironmentApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get script content from a worker with an environment
         * @summary Get script content
         * @param {MepUEAgcIdentifier} accountIdentifier 
         * @param {MepUEAgcService} serviceName 
         * @param {MepUEAgcEnvironment} environmentName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workerEnvironmentGetScriptContent(accountIdentifier: MepUEAgcIdentifier, serviceName: MepUEAgcService, environmentName: MepUEAgcEnvironment, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await WorkerEnvironmentApiAxiosParamCreator(configuration).workerEnvironmentGetScriptContent(accountIdentifier, serviceName, environmentName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Put script content from a worker with an environment
         * @summary Put script content
         * @param {Array<Blob>} anyPartName 
         * @param {AccountsaccountIdentifierworkersservicesserviceNameenvironmentsenvironmentNamecontentMetadata} metadata 
         * @param {MepUEAgcIdentifier} accountIdentifier 
         * @param {MepUEAgcService} serviceName 
         * @param {MepUEAgcEnvironment} environmentName 
         * @param {string} [CF_WORKER_BODY_PART] The multipart name of a script upload part containing script content in service worker format. Alternative to including in a metadata part.
         * @param {string} [CF_WORKER_MAIN_MODULE_PART] The multipart name of a script upload part containing script content in es module format. Alternative to including in a metadata part.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workerEnvironmentPutScriptContentForm(anyPartName: Array<Blob>, metadata: AccountsaccountIdentifierworkersservicesserviceNameenvironmentsenvironmentNamecontentMetadata, accountIdentifier: MepUEAgcIdentifier, serviceName: MepUEAgcService, environmentName: MepUEAgcEnvironment, CF_WORKER_BODY_PART?: string, CF_WORKER_MAIN_MODULE_PART?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<MepUEAgcScriptResponse>>> {
            const localVarAxiosArgs = await WorkerEnvironmentApiAxiosParamCreator(configuration).workerEnvironmentPutScriptContentForm(anyPartName, metadata, accountIdentifier, serviceName, environmentName, CF_WORKER_BODY_PART, CF_WORKER_MAIN_MODULE_PART, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get script settings from a worker with an environment
         * @summary Get Script Settings
         * @param {MepUEAgcIdentifier} accountIdentifier 
         * @param {MepUEAgcService} serviceName 
         * @param {MepUEAgcEnvironment} environmentName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workerScriptEnvironmentGetSettings(accountIdentifier: MepUEAgcIdentifier, serviceName: MepUEAgcService, environmentName: MepUEAgcEnvironment, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<MepUEAgcScriptSettingsResponse>>> {
            const localVarAxiosArgs = await WorkerEnvironmentApiAxiosParamCreator(configuration).workerScriptEnvironmentGetSettings(accountIdentifier, serviceName, environmentName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Patch script metadata, such as bindings
         * @summary Patch Script Settings
         * @param {MepUEAgcScriptSettingsResponse} body 
         * @param {MepUEAgcIdentifier} accountIdentifier 
         * @param {MepUEAgcService} serviceName 
         * @param {MepUEAgcEnvironment} environmentName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workerScriptEnvironmentPatchSettings(body: MepUEAgcScriptSettingsResponse, accountIdentifier: MepUEAgcIdentifier, serviceName: MepUEAgcService, environmentName: MepUEAgcEnvironment, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<MepUEAgcScriptSettingsResponse>>> {
            const localVarAxiosArgs = await WorkerEnvironmentApiAxiosParamCreator(configuration).workerScriptEnvironmentPatchSettings(body, accountIdentifier, serviceName, environmentName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * WorkerEnvironmentApi - factory interface
 * @export
 */
export const WorkerEnvironmentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Get script content from a worker with an environment
         * @summary Get script content
         * @param {MepUEAgcIdentifier} accountIdentifier 
         * @param {MepUEAgcService} serviceName 
         * @param {MepUEAgcEnvironment} environmentName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workerEnvironmentGetScriptContent(accountIdentifier: MepUEAgcIdentifier, serviceName: MepUEAgcService, environmentName: MepUEAgcEnvironment, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return WorkerEnvironmentApiFp(configuration).workerEnvironmentGetScriptContent(accountIdentifier, serviceName, environmentName, options).then((request) => request(axios, basePath));
        },
        /**
         * Put script content from a worker with an environment
         * @summary Put script content
         * @param {Array<Blob>} anyPartName 
         * @param {AccountsaccountIdentifierworkersservicesserviceNameenvironmentsenvironmentNamecontentMetadata} metadata 
         * @param {MepUEAgcIdentifier} accountIdentifier 
         * @param {MepUEAgcService} serviceName 
         * @param {MepUEAgcEnvironment} environmentName 
         * @param {string} [CF_WORKER_BODY_PART] The multipart name of a script upload part containing script content in service worker format. Alternative to including in a metadata part.
         * @param {string} [CF_WORKER_MAIN_MODULE_PART] The multipart name of a script upload part containing script content in es module format. Alternative to including in a metadata part.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workerEnvironmentPutScriptContentForm(anyPartName: Array<Blob>, metadata: AccountsaccountIdentifierworkersservicesserviceNameenvironmentsenvironmentNamecontentMetadata, accountIdentifier: MepUEAgcIdentifier, serviceName: MepUEAgcService, environmentName: MepUEAgcEnvironment, CF_WORKER_BODY_PART?: string, CF_WORKER_MAIN_MODULE_PART?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<MepUEAgcScriptResponse>> {
            return WorkerEnvironmentApiFp(configuration).workerEnvironmentPutScriptContentForm(anyPartName, metadata, accountIdentifier, serviceName, environmentName, CF_WORKER_BODY_PART, CF_WORKER_MAIN_MODULE_PART, options).then((request) => request(axios, basePath));
        },
        /**
         * Get script settings from a worker with an environment
         * @summary Get Script Settings
         * @param {MepUEAgcIdentifier} accountIdentifier 
         * @param {MepUEAgcService} serviceName 
         * @param {MepUEAgcEnvironment} environmentName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workerScriptEnvironmentGetSettings(accountIdentifier: MepUEAgcIdentifier, serviceName: MepUEAgcService, environmentName: MepUEAgcEnvironment, options?: AxiosRequestConfig): Promise<AxiosResponse<MepUEAgcScriptSettingsResponse>> {
            return WorkerEnvironmentApiFp(configuration).workerScriptEnvironmentGetSettings(accountIdentifier, serviceName, environmentName, options).then((request) => request(axios, basePath));
        },
        /**
         * Patch script metadata, such as bindings
         * @summary Patch Script Settings
         * @param {MepUEAgcScriptSettingsResponse} body 
         * @param {MepUEAgcIdentifier} accountIdentifier 
         * @param {MepUEAgcService} serviceName 
         * @param {MepUEAgcEnvironment} environmentName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workerScriptEnvironmentPatchSettings(body: MepUEAgcScriptSettingsResponse, accountIdentifier: MepUEAgcIdentifier, serviceName: MepUEAgcService, environmentName: MepUEAgcEnvironment, options?: AxiosRequestConfig): Promise<AxiosResponse<MepUEAgcScriptSettingsResponse>> {
            return WorkerEnvironmentApiFp(configuration).workerScriptEnvironmentPatchSettings(body, accountIdentifier, serviceName, environmentName, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WorkerEnvironmentApi - object-oriented interface
 * @export
 * @class WorkerEnvironmentApi
 * @extends {BaseAPI}
 */
export class WorkerEnvironmentApi extends BaseAPI {
    /**
     * Get script content from a worker with an environment
     * @summary Get script content
     * @param {MepUEAgcIdentifier} accountIdentifier 
     * @param {MepUEAgcService} serviceName 
     * @param {MepUEAgcEnvironment} environmentName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerEnvironmentApi
     */
    public async workerEnvironmentGetScriptContent(accountIdentifier: MepUEAgcIdentifier, serviceName: MepUEAgcService, environmentName: MepUEAgcEnvironment, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return WorkerEnvironmentApiFp(this.configuration).workerEnvironmentGetScriptContent(accountIdentifier, serviceName, environmentName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Put script content from a worker with an environment
     * @summary Put script content
     * @param {Array<Blob>} anyPartName 
     * @param {AccountsaccountIdentifierworkersservicesserviceNameenvironmentsenvironmentNamecontentMetadata} metadata 
     * @param {MepUEAgcIdentifier} accountIdentifier 
     * @param {MepUEAgcService} serviceName 
     * @param {MepUEAgcEnvironment} environmentName 
     * @param {string} [CF_WORKER_BODY_PART] The multipart name of a script upload part containing script content in service worker format. Alternative to including in a metadata part.
     * @param {string} [CF_WORKER_MAIN_MODULE_PART] The multipart name of a script upload part containing script content in es module format. Alternative to including in a metadata part.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerEnvironmentApi
     */
    public async workerEnvironmentPutScriptContentForm(anyPartName: Array<Blob>, metadata: AccountsaccountIdentifierworkersservicesserviceNameenvironmentsenvironmentNamecontentMetadata, accountIdentifier: MepUEAgcIdentifier, serviceName: MepUEAgcService, environmentName: MepUEAgcEnvironment, CF_WORKER_BODY_PART?: string, CF_WORKER_MAIN_MODULE_PART?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<MepUEAgcScriptResponse>> {
        return WorkerEnvironmentApiFp(this.configuration).workerEnvironmentPutScriptContentForm(anyPartName, metadata, accountIdentifier, serviceName, environmentName, CF_WORKER_BODY_PART, CF_WORKER_MAIN_MODULE_PART, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get script settings from a worker with an environment
     * @summary Get Script Settings
     * @param {MepUEAgcIdentifier} accountIdentifier 
     * @param {MepUEAgcService} serviceName 
     * @param {MepUEAgcEnvironment} environmentName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerEnvironmentApi
     */
    public async workerScriptEnvironmentGetSettings(accountIdentifier: MepUEAgcIdentifier, serviceName: MepUEAgcService, environmentName: MepUEAgcEnvironment, options?: AxiosRequestConfig) : Promise<AxiosResponse<MepUEAgcScriptSettingsResponse>> {
        return WorkerEnvironmentApiFp(this.configuration).workerScriptEnvironmentGetSettings(accountIdentifier, serviceName, environmentName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Patch script metadata, such as bindings
     * @summary Patch Script Settings
     * @param {MepUEAgcScriptSettingsResponse} body 
     * @param {MepUEAgcIdentifier} accountIdentifier 
     * @param {MepUEAgcService} serviceName 
     * @param {MepUEAgcEnvironment} environmentName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerEnvironmentApi
     */
    public async workerScriptEnvironmentPatchSettings(body: MepUEAgcScriptSettingsResponse, accountIdentifier: MepUEAgcIdentifier, serviceName: MepUEAgcService, environmentName: MepUEAgcEnvironment, options?: AxiosRequestConfig) : Promise<AxiosResponse<MepUEAgcScriptSettingsResponse>> {
        return WorkerEnvironmentApiFp(this.configuration).workerScriptEnvironmentPatchSettings(body, accountIdentifier, serviceName, environmentName, options).then((request) => request(this.axios, this.basePath));
    }
}
