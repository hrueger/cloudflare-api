/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse20010 } from '../models';
import { InlineResponse2009 } from '../models';
import { RTW3sz4nAccountId } from '../models';
import { RTW3sz4nCreateOrUpdateRuleRequest } from '../models';
import { RTW3sz4nCreateRulesetRequest } from '../models';
import { RTW3sz4nFailureResponse } from '../models';
import { RTW3sz4nRuleCategory } from '../models';
import { RTW3sz4nRuleId } from '../models';
import { RTW3sz4nRulesetId } from '../models';
import { RTW3sz4nRulesetPhase } from '../models';
import { RTW3sz4nRulesetVersion } from '../models';
import { RTW3sz4nUpdateRulesetRequest } from '../models';
/**
 * AccountRulesetsApi - axios parameter creator
 * @export
 */
export const AccountRulesetsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a ruleset at the account level.
         * @summary Create an account ruleset
         * @param {RTW3sz4nCreateRulesetRequest} body 
         * @param {RTW3sz4nAccountId} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccountRuleset: async (body: RTW3sz4nCreateRulesetRequest, accountId: RTW3sz4nAccountId, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createAccountRuleset.');
            }
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling createAccountRuleset.');
            }
            const localVarPath = `/accounts/{account_id}/rulesets`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a new rule to an account ruleset. The rule will be added to the end of the existing list of rules in the ruleset by default.
         * @summary Create an account ruleset rule
         * @param {RTW3sz4nCreateOrUpdateRuleRequest} body 
         * @param {RTW3sz4nRulesetId} rulesetId 
         * @param {RTW3sz4nAccountId} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccountRulesetRule: async (body: RTW3sz4nCreateOrUpdateRuleRequest, rulesetId: RTW3sz4nRulesetId, accountId: RTW3sz4nAccountId, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createAccountRulesetRule.');
            }
            // verify required parameter 'rulesetId' is not null or undefined
            if (rulesetId === null || rulesetId === undefined) {
                throw new RequiredError('rulesetId','Required parameter rulesetId was null or undefined when calling createAccountRulesetRule.');
            }
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling createAccountRulesetRule.');
            }
            const localVarPath = `/accounts/{account_id}/rulesets/{ruleset_id}/rules`
                .replace(`{${"ruleset_id"}}`, encodeURIComponent(String(rulesetId)))
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes all versions of an existing account ruleset.
         * @summary Delete an account ruleset
         * @param {RTW3sz4nRulesetId} rulesetId 
         * @param {RTW3sz4nAccountId} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccountRuleset: async (rulesetId: RTW3sz4nRulesetId, accountId: RTW3sz4nAccountId, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'rulesetId' is not null or undefined
            if (rulesetId === null || rulesetId === undefined) {
                throw new RequiredError('rulesetId','Required parameter rulesetId was null or undefined when calling deleteAccountRuleset.');
            }
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling deleteAccountRuleset.');
            }
            const localVarPath = `/accounts/{account_id}/rulesets/{ruleset_id}`
                .replace(`{${"ruleset_id"}}`, encodeURIComponent(String(rulesetId)))
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an existing rule from an account ruleset.
         * @summary Delete an account ruleset rule
         * @param {RTW3sz4nRuleId} ruleId 
         * @param {RTW3sz4nRulesetId} rulesetId 
         * @param {RTW3sz4nAccountId} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccountRulesetRule: async (ruleId: RTW3sz4nRuleId, rulesetId: RTW3sz4nRulesetId, accountId: RTW3sz4nAccountId, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ruleId' is not null or undefined
            if (ruleId === null || ruleId === undefined) {
                throw new RequiredError('ruleId','Required parameter ruleId was null or undefined when calling deleteAccountRulesetRule.');
            }
            // verify required parameter 'rulesetId' is not null or undefined
            if (rulesetId === null || rulesetId === undefined) {
                throw new RequiredError('rulesetId','Required parameter rulesetId was null or undefined when calling deleteAccountRulesetRule.');
            }
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling deleteAccountRulesetRule.');
            }
            const localVarPath = `/accounts/{account_id}/rulesets/{ruleset_id}/rules/{rule_id}`
                .replace(`{${"rule_id"}}`, encodeURIComponent(String(ruleId)))
                .replace(`{${"ruleset_id"}}`, encodeURIComponent(String(rulesetId)))
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an existing version of an account ruleset.
         * @summary Delete an account ruleset version
         * @param {RTW3sz4nRulesetVersion} rulesetVersion 
         * @param {RTW3sz4nRulesetId} rulesetId 
         * @param {RTW3sz4nAccountId} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccountRulesetVersion: async (rulesetVersion: RTW3sz4nRulesetVersion, rulesetId: RTW3sz4nRulesetId, accountId: RTW3sz4nAccountId, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'rulesetVersion' is not null or undefined
            if (rulesetVersion === null || rulesetVersion === undefined) {
                throw new RequiredError('rulesetVersion','Required parameter rulesetVersion was null or undefined when calling deleteAccountRulesetVersion.');
            }
            // verify required parameter 'rulesetId' is not null or undefined
            if (rulesetId === null || rulesetId === undefined) {
                throw new RequiredError('rulesetId','Required parameter rulesetId was null or undefined when calling deleteAccountRulesetVersion.');
            }
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling deleteAccountRulesetVersion.');
            }
            const localVarPath = `/accounts/{account_id}/rulesets/{ruleset_id}/versions/{ruleset_version}`
                .replace(`{${"ruleset_version"}}`, encodeURIComponent(String(rulesetVersion)))
                .replace(`{${"ruleset_id"}}`, encodeURIComponent(String(rulesetId)))
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches the latest version of the account entry point ruleset for a given phase.
         * @summary Get an account entry point ruleset
         * @param {RTW3sz4nRulesetPhase} rulesetPhase 
         * @param {RTW3sz4nAccountId} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountEntrypointRuleset: async (rulesetPhase: RTW3sz4nRulesetPhase, accountId: RTW3sz4nAccountId, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'rulesetPhase' is not null or undefined
            if (rulesetPhase === null || rulesetPhase === undefined) {
                throw new RequiredError('rulesetPhase','Required parameter rulesetPhase was null or undefined when calling getAccountEntrypointRuleset.');
            }
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling getAccountEntrypointRuleset.');
            }
            const localVarPath = `/accounts/{account_id}/rulesets/phases/{ruleset_phase}/entrypoint`
                .replace(`{${"ruleset_phase"}}`, encodeURIComponent(String(rulesetPhase)))
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches a specific version of an account entry point ruleset.
         * @summary Get an account entry point ruleset version
         * @param {RTW3sz4nRulesetVersion} rulesetVersion 
         * @param {RTW3sz4nRulesetPhase} rulesetPhase 
         * @param {RTW3sz4nAccountId} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountEntrypointRulesetVersion: async (rulesetVersion: RTW3sz4nRulesetVersion, rulesetPhase: RTW3sz4nRulesetPhase, accountId: RTW3sz4nAccountId, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'rulesetVersion' is not null or undefined
            if (rulesetVersion === null || rulesetVersion === undefined) {
                throw new RequiredError('rulesetVersion','Required parameter rulesetVersion was null or undefined when calling getAccountEntrypointRulesetVersion.');
            }
            // verify required parameter 'rulesetPhase' is not null or undefined
            if (rulesetPhase === null || rulesetPhase === undefined) {
                throw new RequiredError('rulesetPhase','Required parameter rulesetPhase was null or undefined when calling getAccountEntrypointRulesetVersion.');
            }
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling getAccountEntrypointRulesetVersion.');
            }
            const localVarPath = `/accounts/{account_id}/rulesets/phases/{ruleset_phase}/entrypoint/versions/{ruleset_version}`
                .replace(`{${"ruleset_version"}}`, encodeURIComponent(String(rulesetVersion)))
                .replace(`{${"ruleset_phase"}}`, encodeURIComponent(String(rulesetPhase)))
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches the latest version of an account ruleset.
         * @summary Get an account ruleset
         * @param {RTW3sz4nRulesetId} rulesetId 
         * @param {RTW3sz4nAccountId} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountRuleset: async (rulesetId: RTW3sz4nRulesetId, accountId: RTW3sz4nAccountId, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'rulesetId' is not null or undefined
            if (rulesetId === null || rulesetId === undefined) {
                throw new RequiredError('rulesetId','Required parameter rulesetId was null or undefined when calling getAccountRuleset.');
            }
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling getAccountRuleset.');
            }
            const localVarPath = `/accounts/{account_id}/rulesets/{ruleset_id}`
                .replace(`{${"ruleset_id"}}`, encodeURIComponent(String(rulesetId)))
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches a specific version of an account ruleset.
         * @summary Get an account ruleset version
         * @param {RTW3sz4nRulesetVersion} rulesetVersion 
         * @param {RTW3sz4nRulesetId} rulesetId 
         * @param {RTW3sz4nAccountId} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountRulesetVersion: async (rulesetVersion: RTW3sz4nRulesetVersion, rulesetId: RTW3sz4nRulesetId, accountId: RTW3sz4nAccountId, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'rulesetVersion' is not null or undefined
            if (rulesetVersion === null || rulesetVersion === undefined) {
                throw new RequiredError('rulesetVersion','Required parameter rulesetVersion was null or undefined when calling getAccountRulesetVersion.');
            }
            // verify required parameter 'rulesetId' is not null or undefined
            if (rulesetId === null || rulesetId === undefined) {
                throw new RequiredError('rulesetId','Required parameter rulesetId was null or undefined when calling getAccountRulesetVersion.');
            }
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling getAccountRulesetVersion.');
            }
            const localVarPath = `/accounts/{account_id}/rulesets/{ruleset_id}/versions/{ruleset_version}`
                .replace(`{${"ruleset_version"}}`, encodeURIComponent(String(rulesetVersion)))
                .replace(`{${"ruleset_id"}}`, encodeURIComponent(String(rulesetId)))
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches the versions of an account entry point ruleset.
         * @summary List an account entry point ruleset's versions
         * @param {RTW3sz4nRulesetPhase} rulesetPhase 
         * @param {RTW3sz4nAccountId} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccountEntrypointRulesetVersions: async (rulesetPhase: RTW3sz4nRulesetPhase, accountId: RTW3sz4nAccountId, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'rulesetPhase' is not null or undefined
            if (rulesetPhase === null || rulesetPhase === undefined) {
                throw new RequiredError('rulesetPhase','Required parameter rulesetPhase was null or undefined when calling listAccountEntrypointRulesetVersions.');
            }
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling listAccountEntrypointRulesetVersions.');
            }
            const localVarPath = `/accounts/{account_id}/rulesets/phases/{ruleset_phase}/entrypoint/versions`
                .replace(`{${"ruleset_phase"}}`, encodeURIComponent(String(rulesetPhase)))
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches the rules of a managed account ruleset version for a given tag.
         * @summary List an account ruleset version's rules by tag
         * @param {RTW3sz4nRuleCategory} ruleTag 
         * @param {RTW3sz4nRulesetVersion} rulesetVersion 
         * @param {RTW3sz4nRulesetId} rulesetId 
         * @param {RTW3sz4nAccountId} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccountRulesetVersionRulesByTag: async (ruleTag: RTW3sz4nRuleCategory, rulesetVersion: RTW3sz4nRulesetVersion, rulesetId: RTW3sz4nRulesetId, accountId: RTW3sz4nAccountId, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ruleTag' is not null or undefined
            if (ruleTag === null || ruleTag === undefined) {
                throw new RequiredError('ruleTag','Required parameter ruleTag was null or undefined when calling listAccountRulesetVersionRulesByTag.');
            }
            // verify required parameter 'rulesetVersion' is not null or undefined
            if (rulesetVersion === null || rulesetVersion === undefined) {
                throw new RequiredError('rulesetVersion','Required parameter rulesetVersion was null or undefined when calling listAccountRulesetVersionRulesByTag.');
            }
            // verify required parameter 'rulesetId' is not null or undefined
            if (rulesetId === null || rulesetId === undefined) {
                throw new RequiredError('rulesetId','Required parameter rulesetId was null or undefined when calling listAccountRulesetVersionRulesByTag.');
            }
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling listAccountRulesetVersionRulesByTag.');
            }
            const localVarPath = `/accounts/{account_id}/rulesets/{ruleset_id}/versions/{ruleset_version}/by_tag/{rule_tag}`
                .replace(`{${"rule_tag"}}`, encodeURIComponent(String(ruleTag)))
                .replace(`{${"ruleset_version"}}`, encodeURIComponent(String(rulesetVersion)))
                .replace(`{${"ruleset_id"}}`, encodeURIComponent(String(rulesetId)))
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches the versions of an account ruleset.
         * @summary List an account ruleset's versions
         * @param {RTW3sz4nRulesetId} rulesetId 
         * @param {RTW3sz4nAccountId} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccountRulesetVersions: async (rulesetId: RTW3sz4nRulesetId, accountId: RTW3sz4nAccountId, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'rulesetId' is not null or undefined
            if (rulesetId === null || rulesetId === undefined) {
                throw new RequiredError('rulesetId','Required parameter rulesetId was null or undefined when calling listAccountRulesetVersions.');
            }
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling listAccountRulesetVersions.');
            }
            const localVarPath = `/accounts/{account_id}/rulesets/{ruleset_id}/versions`
                .replace(`{${"ruleset_id"}}`, encodeURIComponent(String(rulesetId)))
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches all rulesets at the account level.
         * @summary List account rulesets
         * @param {RTW3sz4nAccountId} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccountRulesets: async (accountId: RTW3sz4nAccountId, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling listAccountRulesets.');
            }
            const localVarPath = `/accounts/{account_id}/rulesets`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an account entry point ruleset, creating a new version.
         * @summary Update an account entry point ruleset
         * @param {RTW3sz4nUpdateRulesetRequest} body 
         * @param {RTW3sz4nRulesetPhase} rulesetPhase 
         * @param {RTW3sz4nAccountId} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAccountEntrypointRuleset: async (body: RTW3sz4nUpdateRulesetRequest, rulesetPhase: RTW3sz4nRulesetPhase, accountId: RTW3sz4nAccountId, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateAccountEntrypointRuleset.');
            }
            // verify required parameter 'rulesetPhase' is not null or undefined
            if (rulesetPhase === null || rulesetPhase === undefined) {
                throw new RequiredError('rulesetPhase','Required parameter rulesetPhase was null or undefined when calling updateAccountEntrypointRuleset.');
            }
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling updateAccountEntrypointRuleset.');
            }
            const localVarPath = `/accounts/{account_id}/rulesets/phases/{ruleset_phase}/entrypoint`
                .replace(`{${"ruleset_phase"}}`, encodeURIComponent(String(rulesetPhase)))
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an account ruleset, creating a new version.
         * @summary Update an account ruleset
         * @param {RTW3sz4nUpdateRulesetRequest} body 
         * @param {RTW3sz4nRulesetId} rulesetId 
         * @param {RTW3sz4nAccountId} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAccountRuleset: async (body: RTW3sz4nUpdateRulesetRequest, rulesetId: RTW3sz4nRulesetId, accountId: RTW3sz4nAccountId, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateAccountRuleset.');
            }
            // verify required parameter 'rulesetId' is not null or undefined
            if (rulesetId === null || rulesetId === undefined) {
                throw new RequiredError('rulesetId','Required parameter rulesetId was null or undefined when calling updateAccountRuleset.');
            }
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling updateAccountRuleset.');
            }
            const localVarPath = `/accounts/{account_id}/rulesets/{ruleset_id}`
                .replace(`{${"ruleset_id"}}`, encodeURIComponent(String(rulesetId)))
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an existing rule in an account ruleset.
         * @summary Update an account ruleset rule
         * @param {RTW3sz4nCreateOrUpdateRuleRequest} body 
         * @param {RTW3sz4nRuleId} ruleId 
         * @param {RTW3sz4nRulesetId} rulesetId 
         * @param {RTW3sz4nAccountId} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAccountRulesetRule: async (body: RTW3sz4nCreateOrUpdateRuleRequest, ruleId: RTW3sz4nRuleId, rulesetId: RTW3sz4nRulesetId, accountId: RTW3sz4nAccountId, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateAccountRulesetRule.');
            }
            // verify required parameter 'ruleId' is not null or undefined
            if (ruleId === null || ruleId === undefined) {
                throw new RequiredError('ruleId','Required parameter ruleId was null or undefined when calling updateAccountRulesetRule.');
            }
            // verify required parameter 'rulesetId' is not null or undefined
            if (rulesetId === null || rulesetId === undefined) {
                throw new RequiredError('rulesetId','Required parameter rulesetId was null or undefined when calling updateAccountRulesetRule.');
            }
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling updateAccountRulesetRule.');
            }
            const localVarPath = `/accounts/{account_id}/rulesets/{ruleset_id}/rules/{rule_id}`
                .replace(`{${"rule_id"}}`, encodeURIComponent(String(ruleId)))
                .replace(`{${"ruleset_id"}}`, encodeURIComponent(String(rulesetId)))
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountRulesetsApi - functional programming interface
 * @export
 */
export const AccountRulesetsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates a ruleset at the account level.
         * @summary Create an account ruleset
         * @param {RTW3sz4nCreateRulesetRequest} body 
         * @param {RTW3sz4nAccountId} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAccountRuleset(body: RTW3sz4nCreateRulesetRequest, accountId: RTW3sz4nAccountId, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20010>>> {
            const localVarAxiosArgs = await AccountRulesetsApiAxiosParamCreator(configuration).createAccountRuleset(body, accountId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Adds a new rule to an account ruleset. The rule will be added to the end of the existing list of rules in the ruleset by default.
         * @summary Create an account ruleset rule
         * @param {RTW3sz4nCreateOrUpdateRuleRequest} body 
         * @param {RTW3sz4nRulesetId} rulesetId 
         * @param {RTW3sz4nAccountId} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAccountRulesetRule(body: RTW3sz4nCreateOrUpdateRuleRequest, rulesetId: RTW3sz4nRulesetId, accountId: RTW3sz4nAccountId, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20010>>> {
            const localVarAxiosArgs = await AccountRulesetsApiAxiosParamCreator(configuration).createAccountRulesetRule(body, rulesetId, accountId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes all versions of an existing account ruleset.
         * @summary Delete an account ruleset
         * @param {RTW3sz4nRulesetId} rulesetId 
         * @param {RTW3sz4nAccountId} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAccountRuleset(rulesetId: RTW3sz4nRulesetId, accountId: RTW3sz4nAccountId, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await AccountRulesetsApiAxiosParamCreator(configuration).deleteAccountRuleset(rulesetId, accountId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes an existing rule from an account ruleset.
         * @summary Delete an account ruleset rule
         * @param {RTW3sz4nRuleId} ruleId 
         * @param {RTW3sz4nRulesetId} rulesetId 
         * @param {RTW3sz4nAccountId} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAccountRulesetRule(ruleId: RTW3sz4nRuleId, rulesetId: RTW3sz4nRulesetId, accountId: RTW3sz4nAccountId, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20010>>> {
            const localVarAxiosArgs = await AccountRulesetsApiAxiosParamCreator(configuration).deleteAccountRulesetRule(ruleId, rulesetId, accountId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes an existing version of an account ruleset.
         * @summary Delete an account ruleset version
         * @param {RTW3sz4nRulesetVersion} rulesetVersion 
         * @param {RTW3sz4nRulesetId} rulesetId 
         * @param {RTW3sz4nAccountId} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAccountRulesetVersion(rulesetVersion: RTW3sz4nRulesetVersion, rulesetId: RTW3sz4nRulesetId, accountId: RTW3sz4nAccountId, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await AccountRulesetsApiAxiosParamCreator(configuration).deleteAccountRulesetVersion(rulesetVersion, rulesetId, accountId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetches the latest version of the account entry point ruleset for a given phase.
         * @summary Get an account entry point ruleset
         * @param {RTW3sz4nRulesetPhase} rulesetPhase 
         * @param {RTW3sz4nAccountId} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountEntrypointRuleset(rulesetPhase: RTW3sz4nRulesetPhase, accountId: RTW3sz4nAccountId, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20010>>> {
            const localVarAxiosArgs = await AccountRulesetsApiAxiosParamCreator(configuration).getAccountEntrypointRuleset(rulesetPhase, accountId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetches a specific version of an account entry point ruleset.
         * @summary Get an account entry point ruleset version
         * @param {RTW3sz4nRulesetVersion} rulesetVersion 
         * @param {RTW3sz4nRulesetPhase} rulesetPhase 
         * @param {RTW3sz4nAccountId} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountEntrypointRulesetVersion(rulesetVersion: RTW3sz4nRulesetVersion, rulesetPhase: RTW3sz4nRulesetPhase, accountId: RTW3sz4nAccountId, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20010>>> {
            const localVarAxiosArgs = await AccountRulesetsApiAxiosParamCreator(configuration).getAccountEntrypointRulesetVersion(rulesetVersion, rulesetPhase, accountId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetches the latest version of an account ruleset.
         * @summary Get an account ruleset
         * @param {RTW3sz4nRulesetId} rulesetId 
         * @param {RTW3sz4nAccountId} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountRuleset(rulesetId: RTW3sz4nRulesetId, accountId: RTW3sz4nAccountId, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20010>>> {
            const localVarAxiosArgs = await AccountRulesetsApiAxiosParamCreator(configuration).getAccountRuleset(rulesetId, accountId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetches a specific version of an account ruleset.
         * @summary Get an account ruleset version
         * @param {RTW3sz4nRulesetVersion} rulesetVersion 
         * @param {RTW3sz4nRulesetId} rulesetId 
         * @param {RTW3sz4nAccountId} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountRulesetVersion(rulesetVersion: RTW3sz4nRulesetVersion, rulesetId: RTW3sz4nRulesetId, accountId: RTW3sz4nAccountId, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20010>>> {
            const localVarAxiosArgs = await AccountRulesetsApiAxiosParamCreator(configuration).getAccountRulesetVersion(rulesetVersion, rulesetId, accountId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetches the versions of an account entry point ruleset.
         * @summary List an account entry point ruleset's versions
         * @param {RTW3sz4nRulesetPhase} rulesetPhase 
         * @param {RTW3sz4nAccountId} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAccountEntrypointRulesetVersions(rulesetPhase: RTW3sz4nRulesetPhase, accountId: RTW3sz4nAccountId, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2009>>> {
            const localVarAxiosArgs = await AccountRulesetsApiAxiosParamCreator(configuration).listAccountEntrypointRulesetVersions(rulesetPhase, accountId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetches the rules of a managed account ruleset version for a given tag.
         * @summary List an account ruleset version's rules by tag
         * @param {RTW3sz4nRuleCategory} ruleTag 
         * @param {RTW3sz4nRulesetVersion} rulesetVersion 
         * @param {RTW3sz4nRulesetId} rulesetId 
         * @param {RTW3sz4nAccountId} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAccountRulesetVersionRulesByTag(ruleTag: RTW3sz4nRuleCategory, rulesetVersion: RTW3sz4nRulesetVersion, rulesetId: RTW3sz4nRulesetId, accountId: RTW3sz4nAccountId, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20010>>> {
            const localVarAxiosArgs = await AccountRulesetsApiAxiosParamCreator(configuration).listAccountRulesetVersionRulesByTag(ruleTag, rulesetVersion, rulesetId, accountId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetches the versions of an account ruleset.
         * @summary List an account ruleset's versions
         * @param {RTW3sz4nRulesetId} rulesetId 
         * @param {RTW3sz4nAccountId} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAccountRulesetVersions(rulesetId: RTW3sz4nRulesetId, accountId: RTW3sz4nAccountId, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2009>>> {
            const localVarAxiosArgs = await AccountRulesetsApiAxiosParamCreator(configuration).listAccountRulesetVersions(rulesetId, accountId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetches all rulesets at the account level.
         * @summary List account rulesets
         * @param {RTW3sz4nAccountId} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAccountRulesets(accountId: RTW3sz4nAccountId, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2009>>> {
            const localVarAxiosArgs = await AccountRulesetsApiAxiosParamCreator(configuration).listAccountRulesets(accountId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates an account entry point ruleset, creating a new version.
         * @summary Update an account entry point ruleset
         * @param {RTW3sz4nUpdateRulesetRequest} body 
         * @param {RTW3sz4nRulesetPhase} rulesetPhase 
         * @param {RTW3sz4nAccountId} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAccountEntrypointRuleset(body: RTW3sz4nUpdateRulesetRequest, rulesetPhase: RTW3sz4nRulesetPhase, accountId: RTW3sz4nAccountId, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20010>>> {
            const localVarAxiosArgs = await AccountRulesetsApiAxiosParamCreator(configuration).updateAccountEntrypointRuleset(body, rulesetPhase, accountId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates an account ruleset, creating a new version.
         * @summary Update an account ruleset
         * @param {RTW3sz4nUpdateRulesetRequest} body 
         * @param {RTW3sz4nRulesetId} rulesetId 
         * @param {RTW3sz4nAccountId} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAccountRuleset(body: RTW3sz4nUpdateRulesetRequest, rulesetId: RTW3sz4nRulesetId, accountId: RTW3sz4nAccountId, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20010>>> {
            const localVarAxiosArgs = await AccountRulesetsApiAxiosParamCreator(configuration).updateAccountRuleset(body, rulesetId, accountId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates an existing rule in an account ruleset.
         * @summary Update an account ruleset rule
         * @param {RTW3sz4nCreateOrUpdateRuleRequest} body 
         * @param {RTW3sz4nRuleId} ruleId 
         * @param {RTW3sz4nRulesetId} rulesetId 
         * @param {RTW3sz4nAccountId} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAccountRulesetRule(body: RTW3sz4nCreateOrUpdateRuleRequest, ruleId: RTW3sz4nRuleId, rulesetId: RTW3sz4nRulesetId, accountId: RTW3sz4nAccountId, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20010>>> {
            const localVarAxiosArgs = await AccountRulesetsApiAxiosParamCreator(configuration).updateAccountRulesetRule(body, ruleId, rulesetId, accountId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AccountRulesetsApi - factory interface
 * @export
 */
export const AccountRulesetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Creates a ruleset at the account level.
         * @summary Create an account ruleset
         * @param {RTW3sz4nCreateRulesetRequest} body 
         * @param {RTW3sz4nAccountId} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAccountRuleset(body: RTW3sz4nCreateRulesetRequest, accountId: RTW3sz4nAccountId, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20010>> {
            return AccountRulesetsApiFp(configuration).createAccountRuleset(body, accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * Adds a new rule to an account ruleset. The rule will be added to the end of the existing list of rules in the ruleset by default.
         * @summary Create an account ruleset rule
         * @param {RTW3sz4nCreateOrUpdateRuleRequest} body 
         * @param {RTW3sz4nRulesetId} rulesetId 
         * @param {RTW3sz4nAccountId} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAccountRulesetRule(body: RTW3sz4nCreateOrUpdateRuleRequest, rulesetId: RTW3sz4nRulesetId, accountId: RTW3sz4nAccountId, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20010>> {
            return AccountRulesetsApiFp(configuration).createAccountRulesetRule(body, rulesetId, accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes all versions of an existing account ruleset.
         * @summary Delete an account ruleset
         * @param {RTW3sz4nRulesetId} rulesetId 
         * @param {RTW3sz4nAccountId} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAccountRuleset(rulesetId: RTW3sz4nRulesetId, accountId: RTW3sz4nAccountId, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return AccountRulesetsApiFp(configuration).deleteAccountRuleset(rulesetId, accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes an existing rule from an account ruleset.
         * @summary Delete an account ruleset rule
         * @param {RTW3sz4nRuleId} ruleId 
         * @param {RTW3sz4nRulesetId} rulesetId 
         * @param {RTW3sz4nAccountId} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAccountRulesetRule(ruleId: RTW3sz4nRuleId, rulesetId: RTW3sz4nRulesetId, accountId: RTW3sz4nAccountId, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20010>> {
            return AccountRulesetsApiFp(configuration).deleteAccountRulesetRule(ruleId, rulesetId, accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes an existing version of an account ruleset.
         * @summary Delete an account ruleset version
         * @param {RTW3sz4nRulesetVersion} rulesetVersion 
         * @param {RTW3sz4nRulesetId} rulesetId 
         * @param {RTW3sz4nAccountId} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAccountRulesetVersion(rulesetVersion: RTW3sz4nRulesetVersion, rulesetId: RTW3sz4nRulesetId, accountId: RTW3sz4nAccountId, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return AccountRulesetsApiFp(configuration).deleteAccountRulesetVersion(rulesetVersion, rulesetId, accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches the latest version of the account entry point ruleset for a given phase.
         * @summary Get an account entry point ruleset
         * @param {RTW3sz4nRulesetPhase} rulesetPhase 
         * @param {RTW3sz4nAccountId} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountEntrypointRuleset(rulesetPhase: RTW3sz4nRulesetPhase, accountId: RTW3sz4nAccountId, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20010>> {
            return AccountRulesetsApiFp(configuration).getAccountEntrypointRuleset(rulesetPhase, accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches a specific version of an account entry point ruleset.
         * @summary Get an account entry point ruleset version
         * @param {RTW3sz4nRulesetVersion} rulesetVersion 
         * @param {RTW3sz4nRulesetPhase} rulesetPhase 
         * @param {RTW3sz4nAccountId} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountEntrypointRulesetVersion(rulesetVersion: RTW3sz4nRulesetVersion, rulesetPhase: RTW3sz4nRulesetPhase, accountId: RTW3sz4nAccountId, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20010>> {
            return AccountRulesetsApiFp(configuration).getAccountEntrypointRulesetVersion(rulesetVersion, rulesetPhase, accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches the latest version of an account ruleset.
         * @summary Get an account ruleset
         * @param {RTW3sz4nRulesetId} rulesetId 
         * @param {RTW3sz4nAccountId} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountRuleset(rulesetId: RTW3sz4nRulesetId, accountId: RTW3sz4nAccountId, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20010>> {
            return AccountRulesetsApiFp(configuration).getAccountRuleset(rulesetId, accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches a specific version of an account ruleset.
         * @summary Get an account ruleset version
         * @param {RTW3sz4nRulesetVersion} rulesetVersion 
         * @param {RTW3sz4nRulesetId} rulesetId 
         * @param {RTW3sz4nAccountId} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountRulesetVersion(rulesetVersion: RTW3sz4nRulesetVersion, rulesetId: RTW3sz4nRulesetId, accountId: RTW3sz4nAccountId, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20010>> {
            return AccountRulesetsApiFp(configuration).getAccountRulesetVersion(rulesetVersion, rulesetId, accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches the versions of an account entry point ruleset.
         * @summary List an account entry point ruleset's versions
         * @param {RTW3sz4nRulesetPhase} rulesetPhase 
         * @param {RTW3sz4nAccountId} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAccountEntrypointRulesetVersions(rulesetPhase: RTW3sz4nRulesetPhase, accountId: RTW3sz4nAccountId, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2009>> {
            return AccountRulesetsApiFp(configuration).listAccountEntrypointRulesetVersions(rulesetPhase, accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches the rules of a managed account ruleset version for a given tag.
         * @summary List an account ruleset version's rules by tag
         * @param {RTW3sz4nRuleCategory} ruleTag 
         * @param {RTW3sz4nRulesetVersion} rulesetVersion 
         * @param {RTW3sz4nRulesetId} rulesetId 
         * @param {RTW3sz4nAccountId} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAccountRulesetVersionRulesByTag(ruleTag: RTW3sz4nRuleCategory, rulesetVersion: RTW3sz4nRulesetVersion, rulesetId: RTW3sz4nRulesetId, accountId: RTW3sz4nAccountId, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20010>> {
            return AccountRulesetsApiFp(configuration).listAccountRulesetVersionRulesByTag(ruleTag, rulesetVersion, rulesetId, accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches the versions of an account ruleset.
         * @summary List an account ruleset's versions
         * @param {RTW3sz4nRulesetId} rulesetId 
         * @param {RTW3sz4nAccountId} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAccountRulesetVersions(rulesetId: RTW3sz4nRulesetId, accountId: RTW3sz4nAccountId, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2009>> {
            return AccountRulesetsApiFp(configuration).listAccountRulesetVersions(rulesetId, accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches all rulesets at the account level.
         * @summary List account rulesets
         * @param {RTW3sz4nAccountId} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAccountRulesets(accountId: RTW3sz4nAccountId, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2009>> {
            return AccountRulesetsApiFp(configuration).listAccountRulesets(accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an account entry point ruleset, creating a new version.
         * @summary Update an account entry point ruleset
         * @param {RTW3sz4nUpdateRulesetRequest} body 
         * @param {RTW3sz4nRulesetPhase} rulesetPhase 
         * @param {RTW3sz4nAccountId} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAccountEntrypointRuleset(body: RTW3sz4nUpdateRulesetRequest, rulesetPhase: RTW3sz4nRulesetPhase, accountId: RTW3sz4nAccountId, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20010>> {
            return AccountRulesetsApiFp(configuration).updateAccountEntrypointRuleset(body, rulesetPhase, accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an account ruleset, creating a new version.
         * @summary Update an account ruleset
         * @param {RTW3sz4nUpdateRulesetRequest} body 
         * @param {RTW3sz4nRulesetId} rulesetId 
         * @param {RTW3sz4nAccountId} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAccountRuleset(body: RTW3sz4nUpdateRulesetRequest, rulesetId: RTW3sz4nRulesetId, accountId: RTW3sz4nAccountId, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20010>> {
            return AccountRulesetsApiFp(configuration).updateAccountRuleset(body, rulesetId, accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an existing rule in an account ruleset.
         * @summary Update an account ruleset rule
         * @param {RTW3sz4nCreateOrUpdateRuleRequest} body 
         * @param {RTW3sz4nRuleId} ruleId 
         * @param {RTW3sz4nRulesetId} rulesetId 
         * @param {RTW3sz4nAccountId} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAccountRulesetRule(body: RTW3sz4nCreateOrUpdateRuleRequest, ruleId: RTW3sz4nRuleId, rulesetId: RTW3sz4nRulesetId, accountId: RTW3sz4nAccountId, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20010>> {
            return AccountRulesetsApiFp(configuration).updateAccountRulesetRule(body, ruleId, rulesetId, accountId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountRulesetsApi - object-oriented interface
 * @export
 * @class AccountRulesetsApi
 * @extends {BaseAPI}
 */
export class AccountRulesetsApi extends BaseAPI {
    /**
     * Creates a ruleset at the account level.
     * @summary Create an account ruleset
     * @param {RTW3sz4nCreateRulesetRequest} body 
     * @param {RTW3sz4nAccountId} accountId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountRulesetsApi
     */
    public async createAccountRuleset(body: RTW3sz4nCreateRulesetRequest, accountId: RTW3sz4nAccountId, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20010>> {
        return AccountRulesetsApiFp(this.configuration).createAccountRuleset(body, accountId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Adds a new rule to an account ruleset. The rule will be added to the end of the existing list of rules in the ruleset by default.
     * @summary Create an account ruleset rule
     * @param {RTW3sz4nCreateOrUpdateRuleRequest} body 
     * @param {RTW3sz4nRulesetId} rulesetId 
     * @param {RTW3sz4nAccountId} accountId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountRulesetsApi
     */
    public async createAccountRulesetRule(body: RTW3sz4nCreateOrUpdateRuleRequest, rulesetId: RTW3sz4nRulesetId, accountId: RTW3sz4nAccountId, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20010>> {
        return AccountRulesetsApiFp(this.configuration).createAccountRulesetRule(body, rulesetId, accountId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes all versions of an existing account ruleset.
     * @summary Delete an account ruleset
     * @param {RTW3sz4nRulesetId} rulesetId 
     * @param {RTW3sz4nAccountId} accountId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountRulesetsApi
     */
    public async deleteAccountRuleset(rulesetId: RTW3sz4nRulesetId, accountId: RTW3sz4nAccountId, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return AccountRulesetsApiFp(this.configuration).deleteAccountRuleset(rulesetId, accountId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes an existing rule from an account ruleset.
     * @summary Delete an account ruleset rule
     * @param {RTW3sz4nRuleId} ruleId 
     * @param {RTW3sz4nRulesetId} rulesetId 
     * @param {RTW3sz4nAccountId} accountId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountRulesetsApi
     */
    public async deleteAccountRulesetRule(ruleId: RTW3sz4nRuleId, rulesetId: RTW3sz4nRulesetId, accountId: RTW3sz4nAccountId, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20010>> {
        return AccountRulesetsApiFp(this.configuration).deleteAccountRulesetRule(ruleId, rulesetId, accountId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes an existing version of an account ruleset.
     * @summary Delete an account ruleset version
     * @param {RTW3sz4nRulesetVersion} rulesetVersion 
     * @param {RTW3sz4nRulesetId} rulesetId 
     * @param {RTW3sz4nAccountId} accountId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountRulesetsApi
     */
    public async deleteAccountRulesetVersion(rulesetVersion: RTW3sz4nRulesetVersion, rulesetId: RTW3sz4nRulesetId, accountId: RTW3sz4nAccountId, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return AccountRulesetsApiFp(this.configuration).deleteAccountRulesetVersion(rulesetVersion, rulesetId, accountId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches the latest version of the account entry point ruleset for a given phase.
     * @summary Get an account entry point ruleset
     * @param {RTW3sz4nRulesetPhase} rulesetPhase 
     * @param {RTW3sz4nAccountId} accountId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountRulesetsApi
     */
    public async getAccountEntrypointRuleset(rulesetPhase: RTW3sz4nRulesetPhase, accountId: RTW3sz4nAccountId, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20010>> {
        return AccountRulesetsApiFp(this.configuration).getAccountEntrypointRuleset(rulesetPhase, accountId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches a specific version of an account entry point ruleset.
     * @summary Get an account entry point ruleset version
     * @param {RTW3sz4nRulesetVersion} rulesetVersion 
     * @param {RTW3sz4nRulesetPhase} rulesetPhase 
     * @param {RTW3sz4nAccountId} accountId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountRulesetsApi
     */
    public async getAccountEntrypointRulesetVersion(rulesetVersion: RTW3sz4nRulesetVersion, rulesetPhase: RTW3sz4nRulesetPhase, accountId: RTW3sz4nAccountId, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20010>> {
        return AccountRulesetsApiFp(this.configuration).getAccountEntrypointRulesetVersion(rulesetVersion, rulesetPhase, accountId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches the latest version of an account ruleset.
     * @summary Get an account ruleset
     * @param {RTW3sz4nRulesetId} rulesetId 
     * @param {RTW3sz4nAccountId} accountId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountRulesetsApi
     */
    public async getAccountRuleset(rulesetId: RTW3sz4nRulesetId, accountId: RTW3sz4nAccountId, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20010>> {
        return AccountRulesetsApiFp(this.configuration).getAccountRuleset(rulesetId, accountId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches a specific version of an account ruleset.
     * @summary Get an account ruleset version
     * @param {RTW3sz4nRulesetVersion} rulesetVersion 
     * @param {RTW3sz4nRulesetId} rulesetId 
     * @param {RTW3sz4nAccountId} accountId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountRulesetsApi
     */
    public async getAccountRulesetVersion(rulesetVersion: RTW3sz4nRulesetVersion, rulesetId: RTW3sz4nRulesetId, accountId: RTW3sz4nAccountId, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20010>> {
        return AccountRulesetsApiFp(this.configuration).getAccountRulesetVersion(rulesetVersion, rulesetId, accountId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches the versions of an account entry point ruleset.
     * @summary List an account entry point ruleset's versions
     * @param {RTW3sz4nRulesetPhase} rulesetPhase 
     * @param {RTW3sz4nAccountId} accountId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountRulesetsApi
     */
    public async listAccountEntrypointRulesetVersions(rulesetPhase: RTW3sz4nRulesetPhase, accountId: RTW3sz4nAccountId, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2009>> {
        return AccountRulesetsApiFp(this.configuration).listAccountEntrypointRulesetVersions(rulesetPhase, accountId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches the rules of a managed account ruleset version for a given tag.
     * @summary List an account ruleset version's rules by tag
     * @param {RTW3sz4nRuleCategory} ruleTag 
     * @param {RTW3sz4nRulesetVersion} rulesetVersion 
     * @param {RTW3sz4nRulesetId} rulesetId 
     * @param {RTW3sz4nAccountId} accountId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountRulesetsApi
     */
    public async listAccountRulesetVersionRulesByTag(ruleTag: RTW3sz4nRuleCategory, rulesetVersion: RTW3sz4nRulesetVersion, rulesetId: RTW3sz4nRulesetId, accountId: RTW3sz4nAccountId, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20010>> {
        return AccountRulesetsApiFp(this.configuration).listAccountRulesetVersionRulesByTag(ruleTag, rulesetVersion, rulesetId, accountId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches the versions of an account ruleset.
     * @summary List an account ruleset's versions
     * @param {RTW3sz4nRulesetId} rulesetId 
     * @param {RTW3sz4nAccountId} accountId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountRulesetsApi
     */
    public async listAccountRulesetVersions(rulesetId: RTW3sz4nRulesetId, accountId: RTW3sz4nAccountId, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2009>> {
        return AccountRulesetsApiFp(this.configuration).listAccountRulesetVersions(rulesetId, accountId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches all rulesets at the account level.
     * @summary List account rulesets
     * @param {RTW3sz4nAccountId} accountId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountRulesetsApi
     */
    public async listAccountRulesets(accountId: RTW3sz4nAccountId, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2009>> {
        return AccountRulesetsApiFp(this.configuration).listAccountRulesets(accountId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates an account entry point ruleset, creating a new version.
     * @summary Update an account entry point ruleset
     * @param {RTW3sz4nUpdateRulesetRequest} body 
     * @param {RTW3sz4nRulesetPhase} rulesetPhase 
     * @param {RTW3sz4nAccountId} accountId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountRulesetsApi
     */
    public async updateAccountEntrypointRuleset(body: RTW3sz4nUpdateRulesetRequest, rulesetPhase: RTW3sz4nRulesetPhase, accountId: RTW3sz4nAccountId, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20010>> {
        return AccountRulesetsApiFp(this.configuration).updateAccountEntrypointRuleset(body, rulesetPhase, accountId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates an account ruleset, creating a new version.
     * @summary Update an account ruleset
     * @param {RTW3sz4nUpdateRulesetRequest} body 
     * @param {RTW3sz4nRulesetId} rulesetId 
     * @param {RTW3sz4nAccountId} accountId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountRulesetsApi
     */
    public async updateAccountRuleset(body: RTW3sz4nUpdateRulesetRequest, rulesetId: RTW3sz4nRulesetId, accountId: RTW3sz4nAccountId, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20010>> {
        return AccountRulesetsApiFp(this.configuration).updateAccountRuleset(body, rulesetId, accountId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates an existing rule in an account ruleset.
     * @summary Update an account ruleset rule
     * @param {RTW3sz4nCreateOrUpdateRuleRequest} body 
     * @param {RTW3sz4nRuleId} ruleId 
     * @param {RTW3sz4nRulesetId} rulesetId 
     * @param {RTW3sz4nAccountId} accountId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountRulesetsApi
     */
    public async updateAccountRulesetRule(body: RTW3sz4nCreateOrUpdateRuleRequest, ruleId: RTW3sz4nRuleId, rulesetId: RTW3sz4nRulesetId, accountId: RTW3sz4nAccountId, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20010>> {
        return AccountRulesetsApiFp(this.configuration).updateAccountRulesetRule(body, ruleId, rulesetId, accountId, options).then((request) => request(this.axios, this.basePath));
    }
}
