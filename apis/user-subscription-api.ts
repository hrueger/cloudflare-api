/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { BillSubsApiSchemasIdentifier } from '../models';
import { BillSubsApiSubscriptionV2 } from '../models';
import { BillSubsApiUserSubscriptionResponseCollection } from '../models';
import { BillSubsApiUserSubscriptionResponseSingle } from '../models';
import { InlineResponse200171 } from '../models';
import { InlineResponse4XX300 } from '../models';
import { InlineResponse4XX301 } from '../models';
import { InlineResponse4XX302 } from '../models';
/**
 * UserSubscriptionApi - axios parameter creator
 * @export
 */
export const UserSubscriptionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deletes a user's subscription.
         * @summary Delete User Subscription
         * @param {BillSubsApiSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userSubscriptionDeleteUserSubscription: async (identifier: BillSubsApiSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling userSubscriptionDeleteUserSubscription.');
            }
            const localVarPath = `/user/subscriptions/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all of a user's subscriptions.
         * @summary Get User Subscriptions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userSubscriptionGetUserSubscriptions: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/subscriptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a user's subscriptions.
         * @summary Update User Subscription
         * @param {BillSubsApiSubscriptionV2} body 
         * @param {BillSubsApiSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userSubscriptionUpdateUserSubscription: async (body: BillSubsApiSubscriptionV2, identifier: BillSubsApiSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling userSubscriptionUpdateUserSubscription.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling userSubscriptionUpdateUserSubscription.');
            }
            const localVarPath = `/user/subscriptions/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserSubscriptionApi - functional programming interface
 * @export
 */
export const UserSubscriptionApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Deletes a user's subscription.
         * @summary Delete User Subscription
         * @param {BillSubsApiSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userSubscriptionDeleteUserSubscription(identifier: BillSubsApiSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200171>>> {
            const localVarAxiosArgs = await UserSubscriptionApiAxiosParamCreator(configuration).userSubscriptionDeleteUserSubscription(identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Lists all of a user's subscriptions.
         * @summary Get User Subscriptions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userSubscriptionGetUserSubscriptions(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<BillSubsApiUserSubscriptionResponseCollection>>> {
            const localVarAxiosArgs = await UserSubscriptionApiAxiosParamCreator(configuration).userSubscriptionGetUserSubscriptions(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates a user's subscriptions.
         * @summary Update User Subscription
         * @param {BillSubsApiSubscriptionV2} body 
         * @param {BillSubsApiSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userSubscriptionUpdateUserSubscription(body: BillSubsApiSubscriptionV2, identifier: BillSubsApiSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<BillSubsApiUserSubscriptionResponseSingle>>> {
            const localVarAxiosArgs = await UserSubscriptionApiAxiosParamCreator(configuration).userSubscriptionUpdateUserSubscription(body, identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UserSubscriptionApi - factory interface
 * @export
 */
export const UserSubscriptionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Deletes a user's subscription.
         * @summary Delete User Subscription
         * @param {BillSubsApiSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userSubscriptionDeleteUserSubscription(identifier: BillSubsApiSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200171>> {
            return UserSubscriptionApiFp(configuration).userSubscriptionDeleteUserSubscription(identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists all of a user's subscriptions.
         * @summary Get User Subscriptions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userSubscriptionGetUserSubscriptions(options?: AxiosRequestConfig): Promise<AxiosResponse<BillSubsApiUserSubscriptionResponseCollection>> {
            return UserSubscriptionApiFp(configuration).userSubscriptionGetUserSubscriptions(options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a user's subscriptions.
         * @summary Update User Subscription
         * @param {BillSubsApiSubscriptionV2} body 
         * @param {BillSubsApiSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userSubscriptionUpdateUserSubscription(body: BillSubsApiSubscriptionV2, identifier: BillSubsApiSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<BillSubsApiUserSubscriptionResponseSingle>> {
            return UserSubscriptionApiFp(configuration).userSubscriptionUpdateUserSubscription(body, identifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserSubscriptionApi - object-oriented interface
 * @export
 * @class UserSubscriptionApi
 * @extends {BaseAPI}
 */
export class UserSubscriptionApi extends BaseAPI {
    /**
     * Deletes a user's subscription.
     * @summary Delete User Subscription
     * @param {BillSubsApiSchemasIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserSubscriptionApi
     */
    public async userSubscriptionDeleteUserSubscription(identifier: BillSubsApiSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200171>> {
        return UserSubscriptionApiFp(this.configuration).userSubscriptionDeleteUserSubscription(identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists all of a user's subscriptions.
     * @summary Get User Subscriptions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserSubscriptionApi
     */
    public async userSubscriptionGetUserSubscriptions(options?: AxiosRequestConfig) : Promise<AxiosResponse<BillSubsApiUserSubscriptionResponseCollection>> {
        return UserSubscriptionApiFp(this.configuration).userSubscriptionGetUserSubscriptions(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates a user's subscriptions.
     * @summary Update User Subscription
     * @param {BillSubsApiSubscriptionV2} body 
     * @param {BillSubsApiSchemasIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserSubscriptionApi
     */
    public async userSubscriptionUpdateUserSubscription(body: BillSubsApiSubscriptionV2, identifier: BillSubsApiSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<BillSubsApiUserSubscriptionResponseSingle>> {
        return UserSubscriptionApiFp(this.configuration).userSubscriptionUpdateUserSubscription(body, identifier, options).then((request) => request(this.axios, this.basePath));
    }
}
