/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse4XX133 } from '../models';
import { InlineResponse4XX134 } from '../models';
import { InlineResponse4XX135 } from '../models';
import { IntegrationUuidBody } from '../models';
import { PostureIntegrationBody } from '../models';
import { ZzQH0lDwIdentifier } from '../models';
import { ZzQH0lDwSchemasIdResponse } from '../models';
import { ZzQH0lDwSchemasResponseCollection } from '../models';
import { ZzQH0lDwSchemasSingleResponse } from '../models';
import { ZzQH0lDwUuid } from '../models';
/**
 * DevicePostureIntegrationsApi - axios parameter creator
 * @export
 */
export const DevicePostureIntegrationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new device posture integration.
         * @summary Create a device posture integration
         * @param {PostureIntegrationBody} body 
         * @param {ZzQH0lDwIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicePostureIntegrationsCreateDevicePostureIntegration: async (body: PostureIntegrationBody, identifier: ZzQH0lDwIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling devicePostureIntegrationsCreateDevicePostureIntegration.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling devicePostureIntegrationsCreateDevicePostureIntegration.');
            }
            const localVarPath = `/accounts/{identifier}/devices/posture/integration`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a configured device posture integration.
         * @summary Delete a device posture integration
         * @param {ZzQH0lDwUuid} uuid 
         * @param {ZzQH0lDwIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicePostureIntegrationsDeleteDevicePostureIntegration: async (uuid: ZzQH0lDwUuid, identifier: ZzQH0lDwIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling devicePostureIntegrationsDeleteDevicePostureIntegration.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling devicePostureIntegrationsDeleteDevicePostureIntegration.');
            }
            const localVarPath = `/accounts/{identifier}/devices/posture/integration/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)))
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches details for a single device posture integration.
         * @summary Get device posture integration details
         * @param {ZzQH0lDwUuid} uuid 
         * @param {ZzQH0lDwIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicePostureIntegrationsDevicePostureIntegrationDetails: async (uuid: ZzQH0lDwUuid, identifier: ZzQH0lDwIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling devicePostureIntegrationsDevicePostureIntegrationDetails.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling devicePostureIntegrationsDevicePostureIntegrationDetails.');
            }
            const localVarPath = `/accounts/{identifier}/devices/posture/integration/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)))
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches the list of device posture integrations for an account.
         * @summary List your device posture integrations
         * @param {ZzQH0lDwIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicePostureIntegrationsListDevicePostureIntegrations: async (identifier: ZzQH0lDwIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling devicePostureIntegrationsListDevicePostureIntegrations.');
            }
            const localVarPath = `/accounts/{identifier}/devices/posture/integration`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a configured device posture integration.
         * @summary Update a device posture integration
         * @param {IntegrationUuidBody} body 
         * @param {ZzQH0lDwUuid} uuid 
         * @param {ZzQH0lDwIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicePostureIntegrationsUpdateDevicePostureIntegration: async (body: IntegrationUuidBody, uuid: ZzQH0lDwUuid, identifier: ZzQH0lDwIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling devicePostureIntegrationsUpdateDevicePostureIntegration.');
            }
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling devicePostureIntegrationsUpdateDevicePostureIntegration.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling devicePostureIntegrationsUpdateDevicePostureIntegration.');
            }
            const localVarPath = `/accounts/{identifier}/devices/posture/integration/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)))
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DevicePostureIntegrationsApi - functional programming interface
 * @export
 */
export const DevicePostureIntegrationsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create a new device posture integration.
         * @summary Create a device posture integration
         * @param {PostureIntegrationBody} body 
         * @param {ZzQH0lDwIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async devicePostureIntegrationsCreateDevicePostureIntegration(body: PostureIntegrationBody, identifier: ZzQH0lDwIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ZzQH0lDwSchemasSingleResponse>>> {
            const localVarAxiosArgs = await DevicePostureIntegrationsApiAxiosParamCreator(configuration).devicePostureIntegrationsCreateDevicePostureIntegration(body, identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a configured device posture integration.
         * @summary Delete a device posture integration
         * @param {ZzQH0lDwUuid} uuid 
         * @param {ZzQH0lDwIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async devicePostureIntegrationsDeleteDevicePostureIntegration(uuid: ZzQH0lDwUuid, identifier: ZzQH0lDwIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ZzQH0lDwSchemasIdResponse>>> {
            const localVarAxiosArgs = await DevicePostureIntegrationsApiAxiosParamCreator(configuration).devicePostureIntegrationsDeleteDevicePostureIntegration(uuid, identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetches details for a single device posture integration.
         * @summary Get device posture integration details
         * @param {ZzQH0lDwUuid} uuid 
         * @param {ZzQH0lDwIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async devicePostureIntegrationsDevicePostureIntegrationDetails(uuid: ZzQH0lDwUuid, identifier: ZzQH0lDwIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ZzQH0lDwSchemasSingleResponse>>> {
            const localVarAxiosArgs = await DevicePostureIntegrationsApiAxiosParamCreator(configuration).devicePostureIntegrationsDevicePostureIntegrationDetails(uuid, identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetches the list of device posture integrations for an account.
         * @summary List your device posture integrations
         * @param {ZzQH0lDwIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async devicePostureIntegrationsListDevicePostureIntegrations(identifier: ZzQH0lDwIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ZzQH0lDwSchemasResponseCollection>>> {
            const localVarAxiosArgs = await DevicePostureIntegrationsApiAxiosParamCreator(configuration).devicePostureIntegrationsListDevicePostureIntegrations(identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates a configured device posture integration.
         * @summary Update a device posture integration
         * @param {IntegrationUuidBody} body 
         * @param {ZzQH0lDwUuid} uuid 
         * @param {ZzQH0lDwIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async devicePostureIntegrationsUpdateDevicePostureIntegration(body: IntegrationUuidBody, uuid: ZzQH0lDwUuid, identifier: ZzQH0lDwIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ZzQH0lDwSchemasSingleResponse>>> {
            const localVarAxiosArgs = await DevicePostureIntegrationsApiAxiosParamCreator(configuration).devicePostureIntegrationsUpdateDevicePostureIntegration(body, uuid, identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DevicePostureIntegrationsApi - factory interface
 * @export
 */
export const DevicePostureIntegrationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create a new device posture integration.
         * @summary Create a device posture integration
         * @param {PostureIntegrationBody} body 
         * @param {ZzQH0lDwIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async devicePostureIntegrationsCreateDevicePostureIntegration(body: PostureIntegrationBody, identifier: ZzQH0lDwIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<ZzQH0lDwSchemasSingleResponse>> {
            return DevicePostureIntegrationsApiFp(configuration).devicePostureIntegrationsCreateDevicePostureIntegration(body, identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a configured device posture integration.
         * @summary Delete a device posture integration
         * @param {ZzQH0lDwUuid} uuid 
         * @param {ZzQH0lDwIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async devicePostureIntegrationsDeleteDevicePostureIntegration(uuid: ZzQH0lDwUuid, identifier: ZzQH0lDwIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<ZzQH0lDwSchemasIdResponse>> {
            return DevicePostureIntegrationsApiFp(configuration).devicePostureIntegrationsDeleteDevicePostureIntegration(uuid, identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches details for a single device posture integration.
         * @summary Get device posture integration details
         * @param {ZzQH0lDwUuid} uuid 
         * @param {ZzQH0lDwIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async devicePostureIntegrationsDevicePostureIntegrationDetails(uuid: ZzQH0lDwUuid, identifier: ZzQH0lDwIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<ZzQH0lDwSchemasSingleResponse>> {
            return DevicePostureIntegrationsApiFp(configuration).devicePostureIntegrationsDevicePostureIntegrationDetails(uuid, identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches the list of device posture integrations for an account.
         * @summary List your device posture integrations
         * @param {ZzQH0lDwIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async devicePostureIntegrationsListDevicePostureIntegrations(identifier: ZzQH0lDwIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<ZzQH0lDwSchemasResponseCollection>> {
            return DevicePostureIntegrationsApiFp(configuration).devicePostureIntegrationsListDevicePostureIntegrations(identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a configured device posture integration.
         * @summary Update a device posture integration
         * @param {IntegrationUuidBody} body 
         * @param {ZzQH0lDwUuid} uuid 
         * @param {ZzQH0lDwIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async devicePostureIntegrationsUpdateDevicePostureIntegration(body: IntegrationUuidBody, uuid: ZzQH0lDwUuid, identifier: ZzQH0lDwIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<ZzQH0lDwSchemasSingleResponse>> {
            return DevicePostureIntegrationsApiFp(configuration).devicePostureIntegrationsUpdateDevicePostureIntegration(body, uuid, identifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DevicePostureIntegrationsApi - object-oriented interface
 * @export
 * @class DevicePostureIntegrationsApi
 * @extends {BaseAPI}
 */
export class DevicePostureIntegrationsApi extends BaseAPI {
    /**
     * Create a new device posture integration.
     * @summary Create a device posture integration
     * @param {PostureIntegrationBody} body 
     * @param {ZzQH0lDwIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicePostureIntegrationsApi
     */
    public async devicePostureIntegrationsCreateDevicePostureIntegration(body: PostureIntegrationBody, identifier: ZzQH0lDwIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<ZzQH0lDwSchemasSingleResponse>> {
        return DevicePostureIntegrationsApiFp(this.configuration).devicePostureIntegrationsCreateDevicePostureIntegration(body, identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a configured device posture integration.
     * @summary Delete a device posture integration
     * @param {ZzQH0lDwUuid} uuid 
     * @param {ZzQH0lDwIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicePostureIntegrationsApi
     */
    public async devicePostureIntegrationsDeleteDevicePostureIntegration(uuid: ZzQH0lDwUuid, identifier: ZzQH0lDwIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<ZzQH0lDwSchemasIdResponse>> {
        return DevicePostureIntegrationsApiFp(this.configuration).devicePostureIntegrationsDeleteDevicePostureIntegration(uuid, identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches details for a single device posture integration.
     * @summary Get device posture integration details
     * @param {ZzQH0lDwUuid} uuid 
     * @param {ZzQH0lDwIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicePostureIntegrationsApi
     */
    public async devicePostureIntegrationsDevicePostureIntegrationDetails(uuid: ZzQH0lDwUuid, identifier: ZzQH0lDwIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<ZzQH0lDwSchemasSingleResponse>> {
        return DevicePostureIntegrationsApiFp(this.configuration).devicePostureIntegrationsDevicePostureIntegrationDetails(uuid, identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches the list of device posture integrations for an account.
     * @summary List your device posture integrations
     * @param {ZzQH0lDwIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicePostureIntegrationsApi
     */
    public async devicePostureIntegrationsListDevicePostureIntegrations(identifier: ZzQH0lDwIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<ZzQH0lDwSchemasResponseCollection>> {
        return DevicePostureIntegrationsApiFp(this.configuration).devicePostureIntegrationsListDevicePostureIntegrations(identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates a configured device posture integration.
     * @summary Update a device posture integration
     * @param {IntegrationUuidBody} body 
     * @param {ZzQH0lDwUuid} uuid 
     * @param {ZzQH0lDwIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicePostureIntegrationsApi
     */
    public async devicePostureIntegrationsUpdateDevicePostureIntegration(body: IntegrationUuidBody, uuid: ZzQH0lDwUuid, identifier: ZzQH0lDwIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<ZzQH0lDwSchemasSingleResponse>> {
        return DevicePostureIntegrationsApiFp(this.configuration).devicePostureIntegrationsUpdateDevicePostureIntegration(body, uuid, identifier, options).then((request) => request(this.axios, this.basePath));
    }
}
