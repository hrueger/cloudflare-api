/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AccessRulesRulesBody2 } from '../models';
import { C4f8RoOSAccountIdentifier } from '../models';
import { C4f8RoOSApiResponseSingleId } from '../models';
import { C4f8RoOSEgsPagination } from '../models';
import { C4f8RoOSResponseCollection } from '../models';
import { C4f8RoOSResponseSingle } from '../models';
import { C4f8RoOSSchemasFilters } from '../models';
import { C4f8RoOSSchemasIdentifier } from '../models';
import { C4f8RoOSSchemasRule } from '../models';
import { InlineResponse4xx33 } from '../models';
import { InlineResponse4xx34 } from '../models';
import { InlineResponse4xx35 } from '../models';
/**
 * IPAccessRulesForAnAccountApi - axios parameter creator
 * @export
 */
export const IPAccessRulesForAnAccountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new IP Access rule for an account. The rule will apply to all zones in the account.  Note: To create an IP Access rule that applies to a single zone, refer to the [IP Access rules for a zone](#ip-access-rules-for-a-zone) endpoints.
         * @summary Create an IP Access rule
         * @param {AccessRulesRulesBody2} body 
         * @param {C4f8RoOSAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipAccessRulesForAnAccountCreateAnIpAccessRule: async (body: AccessRulesRulesBody2, accountIdentifier: C4f8RoOSAccountIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling ipAccessRulesForAnAccountCreateAnIpAccessRule.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling ipAccessRulesForAnAccountCreateAnIpAccessRule.');
            }
            const localVarPath = `/accounts/{account_identifier}/firewall/access_rules/rules`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an existing IP Access rule defined at the account level.  Note: This operation will affect all zones in the account.
         * @summary Delete an IP Access rule
         * @param {C4f8RoOSSchemasIdentifier} identifier 
         * @param {C4f8RoOSAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipAccessRulesForAnAccountDeleteAnIpAccessRule: async (identifier: C4f8RoOSSchemasIdentifier, accountIdentifier: C4f8RoOSAccountIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling ipAccessRulesForAnAccountDeleteAnIpAccessRule.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling ipAccessRulesForAnAccountDeleteAnIpAccessRule.');
            }
            const localVarPath = `/accounts/{account_identifier}/firewall/access_rules/rules/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches the details of an IP Access rule defined at the account level.
         * @summary Get an IP Access rule
         * @param {C4f8RoOSSchemasIdentifier} identifier 
         * @param {C4f8RoOSAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipAccessRulesForAnAccountGetAnIpAccessRule: async (identifier: C4f8RoOSSchemasIdentifier, accountIdentifier: C4f8RoOSAccountIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling ipAccessRulesForAnAccountGetAnIpAccessRule.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling ipAccessRulesForAnAccountGetAnIpAccessRule.');
            }
            const localVarPath = `/accounts/{account_identifier}/firewall/access_rules/rules/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches IP Access rules of an account. These rules apply to all the zones in the account. You can filter the results using several optional parameters.
         * @summary List IP Access rules
         * @param {C4f8RoOSAccountIdentifier} accountIdentifier 
         * @param {C4f8RoOSSchemasFilters} [filters] 
         * @param {C4f8RoOSEgsPagination} [egsPaginationJson] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {string} [order] 
         * @param {string} [direction] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipAccessRulesForAnAccountListIpAccessRules: async (accountIdentifier: C4f8RoOSAccountIdentifier, filters?: C4f8RoOSSchemasFilters, egsPaginationJson?: C4f8RoOSEgsPagination, page?: number, perPage?: number, order?: string, direction?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling ipAccessRulesForAnAccountListIpAccessRules.');
            }
            const localVarPath = `/accounts/{account_identifier}/firewall/access_rules/rules`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (egsPaginationJson !== undefined) {
                localVarQueryParameter['egs-pagination.json'] = egsPaginationJson;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an IP Access rule defined at the account level.  Note: This operation will affect all zones in the account.
         * @summary Update an IP Access rule
         * @param {C4f8RoOSSchemasRule} body 
         * @param {C4f8RoOSSchemasIdentifier} identifier 
         * @param {C4f8RoOSAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipAccessRulesForAnAccountUpdateAnIpAccessRule: async (body: C4f8RoOSSchemasRule, identifier: C4f8RoOSSchemasIdentifier, accountIdentifier: C4f8RoOSAccountIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling ipAccessRulesForAnAccountUpdateAnIpAccessRule.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling ipAccessRulesForAnAccountUpdateAnIpAccessRule.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling ipAccessRulesForAnAccountUpdateAnIpAccessRule.');
            }
            const localVarPath = `/accounts/{account_identifier}/firewall/access_rules/rules/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IPAccessRulesForAnAccountApi - functional programming interface
 * @export
 */
export const IPAccessRulesForAnAccountApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates a new IP Access rule for an account. The rule will apply to all zones in the account.  Note: To create an IP Access rule that applies to a single zone, refer to the [IP Access rules for a zone](#ip-access-rules-for-a-zone) endpoints.
         * @summary Create an IP Access rule
         * @param {AccessRulesRulesBody2} body 
         * @param {C4f8RoOSAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAccessRulesForAnAccountCreateAnIpAccessRule(body: AccessRulesRulesBody2, accountIdentifier: C4f8RoOSAccountIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<C4f8RoOSResponseSingle>>> {
            const localVarAxiosArgs = await IPAccessRulesForAnAccountApiAxiosParamCreator(configuration).ipAccessRulesForAnAccountCreateAnIpAccessRule(body, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes an existing IP Access rule defined at the account level.  Note: This operation will affect all zones in the account.
         * @summary Delete an IP Access rule
         * @param {C4f8RoOSSchemasIdentifier} identifier 
         * @param {C4f8RoOSAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAccessRulesForAnAccountDeleteAnIpAccessRule(identifier: C4f8RoOSSchemasIdentifier, accountIdentifier: C4f8RoOSAccountIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<C4f8RoOSApiResponseSingleId>>> {
            const localVarAxiosArgs = await IPAccessRulesForAnAccountApiAxiosParamCreator(configuration).ipAccessRulesForAnAccountDeleteAnIpAccessRule(identifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetches the details of an IP Access rule defined at the account level.
         * @summary Get an IP Access rule
         * @param {C4f8RoOSSchemasIdentifier} identifier 
         * @param {C4f8RoOSAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAccessRulesForAnAccountGetAnIpAccessRule(identifier: C4f8RoOSSchemasIdentifier, accountIdentifier: C4f8RoOSAccountIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<C4f8RoOSResponseSingle>>> {
            const localVarAxiosArgs = await IPAccessRulesForAnAccountApiAxiosParamCreator(configuration).ipAccessRulesForAnAccountGetAnIpAccessRule(identifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetches IP Access rules of an account. These rules apply to all the zones in the account. You can filter the results using several optional parameters.
         * @summary List IP Access rules
         * @param {C4f8RoOSAccountIdentifier} accountIdentifier 
         * @param {C4f8RoOSSchemasFilters} [filters] 
         * @param {C4f8RoOSEgsPagination} [egsPaginationJson] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {string} [order] 
         * @param {string} [direction] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAccessRulesForAnAccountListIpAccessRules(accountIdentifier: C4f8RoOSAccountIdentifier, filters?: C4f8RoOSSchemasFilters, egsPaginationJson?: C4f8RoOSEgsPagination, page?: number, perPage?: number, order?: string, direction?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<C4f8RoOSResponseCollection>>> {
            const localVarAxiosArgs = await IPAccessRulesForAnAccountApiAxiosParamCreator(configuration).ipAccessRulesForAnAccountListIpAccessRules(accountIdentifier, filters, egsPaginationJson, page, perPage, order, direction, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates an IP Access rule defined at the account level.  Note: This operation will affect all zones in the account.
         * @summary Update an IP Access rule
         * @param {C4f8RoOSSchemasRule} body 
         * @param {C4f8RoOSSchemasIdentifier} identifier 
         * @param {C4f8RoOSAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAccessRulesForAnAccountUpdateAnIpAccessRule(body: C4f8RoOSSchemasRule, identifier: C4f8RoOSSchemasIdentifier, accountIdentifier: C4f8RoOSAccountIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<C4f8RoOSResponseSingle>>> {
            const localVarAxiosArgs = await IPAccessRulesForAnAccountApiAxiosParamCreator(configuration).ipAccessRulesForAnAccountUpdateAnIpAccessRule(body, identifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * IPAccessRulesForAnAccountApi - factory interface
 * @export
 */
export const IPAccessRulesForAnAccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Creates a new IP Access rule for an account. The rule will apply to all zones in the account.  Note: To create an IP Access rule that applies to a single zone, refer to the [IP Access rules for a zone](#ip-access-rules-for-a-zone) endpoints.
         * @summary Create an IP Access rule
         * @param {AccessRulesRulesBody2} body 
         * @param {C4f8RoOSAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAccessRulesForAnAccountCreateAnIpAccessRule(body: AccessRulesRulesBody2, accountIdentifier: C4f8RoOSAccountIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<C4f8RoOSResponseSingle>> {
            return IPAccessRulesForAnAccountApiFp(configuration).ipAccessRulesForAnAccountCreateAnIpAccessRule(body, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes an existing IP Access rule defined at the account level.  Note: This operation will affect all zones in the account.
         * @summary Delete an IP Access rule
         * @param {C4f8RoOSSchemasIdentifier} identifier 
         * @param {C4f8RoOSAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAccessRulesForAnAccountDeleteAnIpAccessRule(identifier: C4f8RoOSSchemasIdentifier, accountIdentifier: C4f8RoOSAccountIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<C4f8RoOSApiResponseSingleId>> {
            return IPAccessRulesForAnAccountApiFp(configuration).ipAccessRulesForAnAccountDeleteAnIpAccessRule(identifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches the details of an IP Access rule defined at the account level.
         * @summary Get an IP Access rule
         * @param {C4f8RoOSSchemasIdentifier} identifier 
         * @param {C4f8RoOSAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAccessRulesForAnAccountGetAnIpAccessRule(identifier: C4f8RoOSSchemasIdentifier, accountIdentifier: C4f8RoOSAccountIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<C4f8RoOSResponseSingle>> {
            return IPAccessRulesForAnAccountApiFp(configuration).ipAccessRulesForAnAccountGetAnIpAccessRule(identifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches IP Access rules of an account. These rules apply to all the zones in the account. You can filter the results using several optional parameters.
         * @summary List IP Access rules
         * @param {C4f8RoOSAccountIdentifier} accountIdentifier 
         * @param {C4f8RoOSSchemasFilters} [filters] 
         * @param {C4f8RoOSEgsPagination} [egsPaginationJson] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {string} [order] 
         * @param {string} [direction] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAccessRulesForAnAccountListIpAccessRules(accountIdentifier: C4f8RoOSAccountIdentifier, filters?: C4f8RoOSSchemasFilters, egsPaginationJson?: C4f8RoOSEgsPagination, page?: number, perPage?: number, order?: string, direction?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<C4f8RoOSResponseCollection>> {
            return IPAccessRulesForAnAccountApiFp(configuration).ipAccessRulesForAnAccountListIpAccessRules(accountIdentifier, filters, egsPaginationJson, page, perPage, order, direction, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an IP Access rule defined at the account level.  Note: This operation will affect all zones in the account.
         * @summary Update an IP Access rule
         * @param {C4f8RoOSSchemasRule} body 
         * @param {C4f8RoOSSchemasIdentifier} identifier 
         * @param {C4f8RoOSAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAccessRulesForAnAccountUpdateAnIpAccessRule(body: C4f8RoOSSchemasRule, identifier: C4f8RoOSSchemasIdentifier, accountIdentifier: C4f8RoOSAccountIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<C4f8RoOSResponseSingle>> {
            return IPAccessRulesForAnAccountApiFp(configuration).ipAccessRulesForAnAccountUpdateAnIpAccessRule(body, identifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IPAccessRulesForAnAccountApi - object-oriented interface
 * @export
 * @class IPAccessRulesForAnAccountApi
 * @extends {BaseAPI}
 */
export class IPAccessRulesForAnAccountApi extends BaseAPI {
    /**
     * Creates a new IP Access rule for an account. The rule will apply to all zones in the account.  Note: To create an IP Access rule that applies to a single zone, refer to the [IP Access rules for a zone](#ip-access-rules-for-a-zone) endpoints.
     * @summary Create an IP Access rule
     * @param {AccessRulesRulesBody2} body 
     * @param {C4f8RoOSAccountIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IPAccessRulesForAnAccountApi
     */
    public async ipAccessRulesForAnAccountCreateAnIpAccessRule(body: AccessRulesRulesBody2, accountIdentifier: C4f8RoOSAccountIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<C4f8RoOSResponseSingle>> {
        return IPAccessRulesForAnAccountApiFp(this.configuration).ipAccessRulesForAnAccountCreateAnIpAccessRule(body, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes an existing IP Access rule defined at the account level.  Note: This operation will affect all zones in the account.
     * @summary Delete an IP Access rule
     * @param {C4f8RoOSSchemasIdentifier} identifier 
     * @param {C4f8RoOSAccountIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IPAccessRulesForAnAccountApi
     */
    public async ipAccessRulesForAnAccountDeleteAnIpAccessRule(identifier: C4f8RoOSSchemasIdentifier, accountIdentifier: C4f8RoOSAccountIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<C4f8RoOSApiResponseSingleId>> {
        return IPAccessRulesForAnAccountApiFp(this.configuration).ipAccessRulesForAnAccountDeleteAnIpAccessRule(identifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches the details of an IP Access rule defined at the account level.
     * @summary Get an IP Access rule
     * @param {C4f8RoOSSchemasIdentifier} identifier 
     * @param {C4f8RoOSAccountIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IPAccessRulesForAnAccountApi
     */
    public async ipAccessRulesForAnAccountGetAnIpAccessRule(identifier: C4f8RoOSSchemasIdentifier, accountIdentifier: C4f8RoOSAccountIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<C4f8RoOSResponseSingle>> {
        return IPAccessRulesForAnAccountApiFp(this.configuration).ipAccessRulesForAnAccountGetAnIpAccessRule(identifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches IP Access rules of an account. These rules apply to all the zones in the account. You can filter the results using several optional parameters.
     * @summary List IP Access rules
     * @param {C4f8RoOSAccountIdentifier} accountIdentifier 
     * @param {C4f8RoOSSchemasFilters} [filters] 
     * @param {C4f8RoOSEgsPagination} [egsPaginationJson] 
     * @param {number} [page] 
     * @param {number} [perPage] 
     * @param {string} [order] 
     * @param {string} [direction] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IPAccessRulesForAnAccountApi
     */
    public async ipAccessRulesForAnAccountListIpAccessRules(accountIdentifier: C4f8RoOSAccountIdentifier, filters?: C4f8RoOSSchemasFilters, egsPaginationJson?: C4f8RoOSEgsPagination, page?: number, perPage?: number, order?: string, direction?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<C4f8RoOSResponseCollection>> {
        return IPAccessRulesForAnAccountApiFp(this.configuration).ipAccessRulesForAnAccountListIpAccessRules(accountIdentifier, filters, egsPaginationJson, page, perPage, order, direction, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates an IP Access rule defined at the account level.  Note: This operation will affect all zones in the account.
     * @summary Update an IP Access rule
     * @param {C4f8RoOSSchemasRule} body 
     * @param {C4f8RoOSSchemasIdentifier} identifier 
     * @param {C4f8RoOSAccountIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IPAccessRulesForAnAccountApi
     */
    public async ipAccessRulesForAnAccountUpdateAnIpAccessRule(body: C4f8RoOSSchemasRule, identifier: C4f8RoOSSchemasIdentifier, accountIdentifier: C4f8RoOSAccountIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<C4f8RoOSResponseSingle>> {
        return IPAccessRulesForAnAccountApiFp(this.configuration).ipAccessRulesForAnAccountUpdateAnIpAccessRule(body, identifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
}
