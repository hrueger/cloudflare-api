/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse4XX234 } from '../models';
import { InlineResponse4XX235 } from '../models';
import { InlineResponse4XX236 } from '../models';
import { Model4tKvLQ4cPageruleResponseCollection } from '../models';
import { Model4tKvLQ4cPageruleResponseSingle } from '../models';
import { Model4tKvLQ4cSchemasApiResponseSingleId } from '../models';
import { Model4tKvLQ4cSchemasIdentifier } from '../models';
import { PagerulesIdentifierBody } from '../models';
import { PagerulesIdentifierBody1 } from '../models';
import { ZoneIdentifierPagerulesBody } from '../models';
/**
 * PageRulesApi - axios parameter creator
 * @export
 */
export const PageRulesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new Page Rule.
         * @summary Create a Page Rule
         * @param {ZoneIdentifierPagerulesBody} body 
         * @param {Model4tKvLQ4cSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pageRulesCreateAPageRule: async (body: ZoneIdentifierPagerulesBody, zoneIdentifier: Model4tKvLQ4cSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling pageRulesCreateAPageRule.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling pageRulesCreateAPageRule.');
            }
            const localVarPath = `/zones/{zone_identifier}/pagerules`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an existing Page Rule.
         * @summary Delete a Page Rule
         * @param {Model4tKvLQ4cSchemasIdentifier} identifier 
         * @param {Model4tKvLQ4cSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pageRulesDeleteAPageRule: async (identifier: Model4tKvLQ4cSchemasIdentifier, zoneIdentifier: Model4tKvLQ4cSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling pageRulesDeleteAPageRule.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling pageRulesDeleteAPageRule.');
            }
            const localVarPath = `/zones/{zone_identifier}/pagerules/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates one or more fields of an existing Page Rule.
         * @summary Edit a Page Rule
         * @param {PagerulesIdentifierBody1} body 
         * @param {Model4tKvLQ4cSchemasIdentifier} identifier 
         * @param {Model4tKvLQ4cSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pageRulesEditAPageRule: async (body: PagerulesIdentifierBody1, identifier: Model4tKvLQ4cSchemasIdentifier, zoneIdentifier: Model4tKvLQ4cSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling pageRulesEditAPageRule.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling pageRulesEditAPageRule.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling pageRulesEditAPageRule.');
            }
            const localVarPath = `/zones/{zone_identifier}/pagerules/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches the details of a Page Rule.
         * @summary Get a Page Rule
         * @param {Model4tKvLQ4cSchemasIdentifier} identifier 
         * @param {Model4tKvLQ4cSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pageRulesGetAPageRule: async (identifier: Model4tKvLQ4cSchemasIdentifier, zoneIdentifier: Model4tKvLQ4cSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling pageRulesGetAPageRule.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling pageRulesGetAPageRule.');
            }
            const localVarPath = `/zones/{zone_identifier}/pagerules/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches Page Rules in a zone.
         * @summary List Page Rules
         * @param {Model4tKvLQ4cSchemasIdentifier} zoneIdentifier 
         * @param {string} [order] 
         * @param {string} [direction] 
         * @param {string} [match] 
         * @param {string} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pageRulesListPageRules: async (zoneIdentifier: Model4tKvLQ4cSchemasIdentifier, order?: string, direction?: string, match?: string, status?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling pageRulesListPageRules.');
            }
            const localVarPath = `/zones/{zone_identifier}/pagerules`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (match !== undefined) {
                localVarQueryParameter['match'] = match;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the configuration of an existing Page Rule. The configuration of the updated Page Rule will exactly match the data passed in the API request.
         * @summary Update a Page Rule
         * @param {PagerulesIdentifierBody} body 
         * @param {Model4tKvLQ4cSchemasIdentifier} identifier 
         * @param {Model4tKvLQ4cSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pageRulesUpdateAPageRule: async (body: PagerulesIdentifierBody, identifier: Model4tKvLQ4cSchemasIdentifier, zoneIdentifier: Model4tKvLQ4cSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling pageRulesUpdateAPageRule.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling pageRulesUpdateAPageRule.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling pageRulesUpdateAPageRule.');
            }
            const localVarPath = `/zones/{zone_identifier}/pagerules/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PageRulesApi - functional programming interface
 * @export
 */
export const PageRulesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates a new Page Rule.
         * @summary Create a Page Rule
         * @param {ZoneIdentifierPagerulesBody} body 
         * @param {Model4tKvLQ4cSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pageRulesCreateAPageRule(body: ZoneIdentifierPagerulesBody, zoneIdentifier: Model4tKvLQ4cSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model4tKvLQ4cPageruleResponseSingle>>> {
            const localVarAxiosArgs = await PageRulesApiAxiosParamCreator(configuration).pageRulesCreateAPageRule(body, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes an existing Page Rule.
         * @summary Delete a Page Rule
         * @param {Model4tKvLQ4cSchemasIdentifier} identifier 
         * @param {Model4tKvLQ4cSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pageRulesDeleteAPageRule(identifier: Model4tKvLQ4cSchemasIdentifier, zoneIdentifier: Model4tKvLQ4cSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model4tKvLQ4cSchemasApiResponseSingleId>>> {
            const localVarAxiosArgs = await PageRulesApiAxiosParamCreator(configuration).pageRulesDeleteAPageRule(identifier, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates one or more fields of an existing Page Rule.
         * @summary Edit a Page Rule
         * @param {PagerulesIdentifierBody1} body 
         * @param {Model4tKvLQ4cSchemasIdentifier} identifier 
         * @param {Model4tKvLQ4cSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pageRulesEditAPageRule(body: PagerulesIdentifierBody1, identifier: Model4tKvLQ4cSchemasIdentifier, zoneIdentifier: Model4tKvLQ4cSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model4tKvLQ4cPageruleResponseSingle>>> {
            const localVarAxiosArgs = await PageRulesApiAxiosParamCreator(configuration).pageRulesEditAPageRule(body, identifier, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetches the details of a Page Rule.
         * @summary Get a Page Rule
         * @param {Model4tKvLQ4cSchemasIdentifier} identifier 
         * @param {Model4tKvLQ4cSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pageRulesGetAPageRule(identifier: Model4tKvLQ4cSchemasIdentifier, zoneIdentifier: Model4tKvLQ4cSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model4tKvLQ4cPageruleResponseSingle>>> {
            const localVarAxiosArgs = await PageRulesApiAxiosParamCreator(configuration).pageRulesGetAPageRule(identifier, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetches Page Rules in a zone.
         * @summary List Page Rules
         * @param {Model4tKvLQ4cSchemasIdentifier} zoneIdentifier 
         * @param {string} [order] 
         * @param {string} [direction] 
         * @param {string} [match] 
         * @param {string} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pageRulesListPageRules(zoneIdentifier: Model4tKvLQ4cSchemasIdentifier, order?: string, direction?: string, match?: string, status?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model4tKvLQ4cPageruleResponseCollection>>> {
            const localVarAxiosArgs = await PageRulesApiAxiosParamCreator(configuration).pageRulesListPageRules(zoneIdentifier, order, direction, match, status, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Replaces the configuration of an existing Page Rule. The configuration of the updated Page Rule will exactly match the data passed in the API request.
         * @summary Update a Page Rule
         * @param {PagerulesIdentifierBody} body 
         * @param {Model4tKvLQ4cSchemasIdentifier} identifier 
         * @param {Model4tKvLQ4cSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pageRulesUpdateAPageRule(body: PagerulesIdentifierBody, identifier: Model4tKvLQ4cSchemasIdentifier, zoneIdentifier: Model4tKvLQ4cSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model4tKvLQ4cPageruleResponseSingle>>> {
            const localVarAxiosArgs = await PageRulesApiAxiosParamCreator(configuration).pageRulesUpdateAPageRule(body, identifier, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PageRulesApi - factory interface
 * @export
 */
export const PageRulesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Creates a new Page Rule.
         * @summary Create a Page Rule
         * @param {ZoneIdentifierPagerulesBody} body 
         * @param {Model4tKvLQ4cSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pageRulesCreateAPageRule(body: ZoneIdentifierPagerulesBody, zoneIdentifier: Model4tKvLQ4cSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model4tKvLQ4cPageruleResponseSingle>> {
            return PageRulesApiFp(configuration).pageRulesCreateAPageRule(body, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes an existing Page Rule.
         * @summary Delete a Page Rule
         * @param {Model4tKvLQ4cSchemasIdentifier} identifier 
         * @param {Model4tKvLQ4cSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pageRulesDeleteAPageRule(identifier: Model4tKvLQ4cSchemasIdentifier, zoneIdentifier: Model4tKvLQ4cSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model4tKvLQ4cSchemasApiResponseSingleId>> {
            return PageRulesApiFp(configuration).pageRulesDeleteAPageRule(identifier, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates one or more fields of an existing Page Rule.
         * @summary Edit a Page Rule
         * @param {PagerulesIdentifierBody1} body 
         * @param {Model4tKvLQ4cSchemasIdentifier} identifier 
         * @param {Model4tKvLQ4cSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pageRulesEditAPageRule(body: PagerulesIdentifierBody1, identifier: Model4tKvLQ4cSchemasIdentifier, zoneIdentifier: Model4tKvLQ4cSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model4tKvLQ4cPageruleResponseSingle>> {
            return PageRulesApiFp(configuration).pageRulesEditAPageRule(body, identifier, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches the details of a Page Rule.
         * @summary Get a Page Rule
         * @param {Model4tKvLQ4cSchemasIdentifier} identifier 
         * @param {Model4tKvLQ4cSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pageRulesGetAPageRule(identifier: Model4tKvLQ4cSchemasIdentifier, zoneIdentifier: Model4tKvLQ4cSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model4tKvLQ4cPageruleResponseSingle>> {
            return PageRulesApiFp(configuration).pageRulesGetAPageRule(identifier, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches Page Rules in a zone.
         * @summary List Page Rules
         * @param {Model4tKvLQ4cSchemasIdentifier} zoneIdentifier 
         * @param {string} [order] 
         * @param {string} [direction] 
         * @param {string} [match] 
         * @param {string} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pageRulesListPageRules(zoneIdentifier: Model4tKvLQ4cSchemasIdentifier, order?: string, direction?: string, match?: string, status?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Model4tKvLQ4cPageruleResponseCollection>> {
            return PageRulesApiFp(configuration).pageRulesListPageRules(zoneIdentifier, order, direction, match, status, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the configuration of an existing Page Rule. The configuration of the updated Page Rule will exactly match the data passed in the API request.
         * @summary Update a Page Rule
         * @param {PagerulesIdentifierBody} body 
         * @param {Model4tKvLQ4cSchemasIdentifier} identifier 
         * @param {Model4tKvLQ4cSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pageRulesUpdateAPageRule(body: PagerulesIdentifierBody, identifier: Model4tKvLQ4cSchemasIdentifier, zoneIdentifier: Model4tKvLQ4cSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model4tKvLQ4cPageruleResponseSingle>> {
            return PageRulesApiFp(configuration).pageRulesUpdateAPageRule(body, identifier, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PageRulesApi - object-oriented interface
 * @export
 * @class PageRulesApi
 * @extends {BaseAPI}
 */
export class PageRulesApi extends BaseAPI {
    /**
     * Creates a new Page Rule.
     * @summary Create a Page Rule
     * @param {ZoneIdentifierPagerulesBody} body 
     * @param {Model4tKvLQ4cSchemasIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageRulesApi
     */
    public async pageRulesCreateAPageRule(body: ZoneIdentifierPagerulesBody, zoneIdentifier: Model4tKvLQ4cSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model4tKvLQ4cPageruleResponseSingle>> {
        return PageRulesApiFp(this.configuration).pageRulesCreateAPageRule(body, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes an existing Page Rule.
     * @summary Delete a Page Rule
     * @param {Model4tKvLQ4cSchemasIdentifier} identifier 
     * @param {Model4tKvLQ4cSchemasIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageRulesApi
     */
    public async pageRulesDeleteAPageRule(identifier: Model4tKvLQ4cSchemasIdentifier, zoneIdentifier: Model4tKvLQ4cSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model4tKvLQ4cSchemasApiResponseSingleId>> {
        return PageRulesApiFp(this.configuration).pageRulesDeleteAPageRule(identifier, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates one or more fields of an existing Page Rule.
     * @summary Edit a Page Rule
     * @param {PagerulesIdentifierBody1} body 
     * @param {Model4tKvLQ4cSchemasIdentifier} identifier 
     * @param {Model4tKvLQ4cSchemasIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageRulesApi
     */
    public async pageRulesEditAPageRule(body: PagerulesIdentifierBody1, identifier: Model4tKvLQ4cSchemasIdentifier, zoneIdentifier: Model4tKvLQ4cSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model4tKvLQ4cPageruleResponseSingle>> {
        return PageRulesApiFp(this.configuration).pageRulesEditAPageRule(body, identifier, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches the details of a Page Rule.
     * @summary Get a Page Rule
     * @param {Model4tKvLQ4cSchemasIdentifier} identifier 
     * @param {Model4tKvLQ4cSchemasIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageRulesApi
     */
    public async pageRulesGetAPageRule(identifier: Model4tKvLQ4cSchemasIdentifier, zoneIdentifier: Model4tKvLQ4cSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model4tKvLQ4cPageruleResponseSingle>> {
        return PageRulesApiFp(this.configuration).pageRulesGetAPageRule(identifier, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches Page Rules in a zone.
     * @summary List Page Rules
     * @param {Model4tKvLQ4cSchemasIdentifier} zoneIdentifier 
     * @param {string} [order] 
     * @param {string} [direction] 
     * @param {string} [match] 
     * @param {string} [status] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageRulesApi
     */
    public async pageRulesListPageRules(zoneIdentifier: Model4tKvLQ4cSchemasIdentifier, order?: string, direction?: string, match?: string, status?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model4tKvLQ4cPageruleResponseCollection>> {
        return PageRulesApiFp(this.configuration).pageRulesListPageRules(zoneIdentifier, order, direction, match, status, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Replaces the configuration of an existing Page Rule. The configuration of the updated Page Rule will exactly match the data passed in the API request.
     * @summary Update a Page Rule
     * @param {PagerulesIdentifierBody} body 
     * @param {Model4tKvLQ4cSchemasIdentifier} identifier 
     * @param {Model4tKvLQ4cSchemasIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageRulesApi
     */
    public async pageRulesUpdateAPageRule(body: PagerulesIdentifierBody, identifier: Model4tKvLQ4cSchemasIdentifier, zoneIdentifier: Model4tKvLQ4cSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model4tKvLQ4cPageruleResponseSingle>> {
        return PageRulesApiFp(this.configuration).pageRulesUpdateAPageRule(body, identifier, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
}
