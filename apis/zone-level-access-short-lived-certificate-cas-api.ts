/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse4XX36 } from '../models';
import { InlineResponse4XX37 } from '../models';
import { InlineResponse4XX38 } from '../models';
import { Tm1HTKEcCaComponentsSchemasResponseCollection } from '../models';
import { Tm1HTKEcCaComponentsSchemasSingleResponse } from '../models';
import { Tm1HTKEcSchemasIdResponse } from '../models';
import { Tm1HTKEcSchemasIdentifier } from '../models';
import { Tm1HTKEcUuid } from '../models';
/**
 * ZoneLevelAccessShortLivedCertificateCAsApi - axios parameter creator
 * @export
 */
export const ZoneLevelAccessShortLivedCertificateCAsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Generates a new short-lived certificate CA and public key.
         * @summary Create a short-lived certificate CA
         * @param {Tm1HTKEcUuid} uuid 
         * @param {Tm1HTKEcSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zoneLevelAccessShortLivedCertificateCAsCreateAShortLivedCertificateCa: async (uuid: Tm1HTKEcUuid, identifier: Tm1HTKEcSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling zoneLevelAccessShortLivedCertificateCAsCreateAShortLivedCertificateCa.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling zoneLevelAccessShortLivedCertificateCAsCreateAShortLivedCertificateCa.');
            }
            const localVarPath = `/zones/{identifier}/access/apps/{uuid}/ca`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)))
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a short-lived certificate CA.
         * @summary Delete a short-lived certificate CA
         * @param {Tm1HTKEcUuid} uuid 
         * @param {Tm1HTKEcSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zoneLevelAccessShortLivedCertificateCAsDeleteAShortLivedCertificateCa: async (uuid: Tm1HTKEcUuid, identifier: Tm1HTKEcSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling zoneLevelAccessShortLivedCertificateCAsDeleteAShortLivedCertificateCa.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling zoneLevelAccessShortLivedCertificateCAsDeleteAShortLivedCertificateCa.');
            }
            const localVarPath = `/zones/{identifier}/access/apps/{uuid}/ca`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)))
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches a short-lived certificate CA and its public key.
         * @summary Get a short-lived certificate CA
         * @param {Tm1HTKEcUuid} uuid 
         * @param {Tm1HTKEcSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zoneLevelAccessShortLivedCertificateCAsGetAShortLivedCertificateCa: async (uuid: Tm1HTKEcUuid, identifier: Tm1HTKEcSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling zoneLevelAccessShortLivedCertificateCAsGetAShortLivedCertificateCa.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling zoneLevelAccessShortLivedCertificateCAsGetAShortLivedCertificateCa.');
            }
            const localVarPath = `/zones/{identifier}/access/apps/{uuid}/ca`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)))
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists short-lived certificate CAs and their public keys.
         * @summary List short-lived certificate CAs
         * @param {Tm1HTKEcSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zoneLevelAccessShortLivedCertificateCAsListShortLivedCertificateCAs: async (identifier: Tm1HTKEcSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling zoneLevelAccessShortLivedCertificateCAsListShortLivedCertificateCAs.');
            }
            const localVarPath = `/zones/{identifier}/access/apps/ca`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ZoneLevelAccessShortLivedCertificateCAsApi - functional programming interface
 * @export
 */
export const ZoneLevelAccessShortLivedCertificateCAsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Generates a new short-lived certificate CA and public key.
         * @summary Create a short-lived certificate CA
         * @param {Tm1HTKEcUuid} uuid 
         * @param {Tm1HTKEcSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zoneLevelAccessShortLivedCertificateCAsCreateAShortLivedCertificateCa(uuid: Tm1HTKEcUuid, identifier: Tm1HTKEcSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Tm1HTKEcCaComponentsSchemasSingleResponse>>> {
            const localVarAxiosArgs = await ZoneLevelAccessShortLivedCertificateCAsApiAxiosParamCreator(configuration).zoneLevelAccessShortLivedCertificateCAsCreateAShortLivedCertificateCa(uuid, identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes a short-lived certificate CA.
         * @summary Delete a short-lived certificate CA
         * @param {Tm1HTKEcUuid} uuid 
         * @param {Tm1HTKEcSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zoneLevelAccessShortLivedCertificateCAsDeleteAShortLivedCertificateCa(uuid: Tm1HTKEcUuid, identifier: Tm1HTKEcSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Tm1HTKEcSchemasIdResponse>>> {
            const localVarAxiosArgs = await ZoneLevelAccessShortLivedCertificateCAsApiAxiosParamCreator(configuration).zoneLevelAccessShortLivedCertificateCAsDeleteAShortLivedCertificateCa(uuid, identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetches a short-lived certificate CA and its public key.
         * @summary Get a short-lived certificate CA
         * @param {Tm1HTKEcUuid} uuid 
         * @param {Tm1HTKEcSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zoneLevelAccessShortLivedCertificateCAsGetAShortLivedCertificateCa(uuid: Tm1HTKEcUuid, identifier: Tm1HTKEcSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Tm1HTKEcCaComponentsSchemasSingleResponse>>> {
            const localVarAxiosArgs = await ZoneLevelAccessShortLivedCertificateCAsApiAxiosParamCreator(configuration).zoneLevelAccessShortLivedCertificateCAsGetAShortLivedCertificateCa(uuid, identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Lists short-lived certificate CAs and their public keys.
         * @summary List short-lived certificate CAs
         * @param {Tm1HTKEcSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zoneLevelAccessShortLivedCertificateCAsListShortLivedCertificateCAs(identifier: Tm1HTKEcSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Tm1HTKEcCaComponentsSchemasResponseCollection>>> {
            const localVarAxiosArgs = await ZoneLevelAccessShortLivedCertificateCAsApiAxiosParamCreator(configuration).zoneLevelAccessShortLivedCertificateCAsListShortLivedCertificateCAs(identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ZoneLevelAccessShortLivedCertificateCAsApi - factory interface
 * @export
 */
export const ZoneLevelAccessShortLivedCertificateCAsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Generates a new short-lived certificate CA and public key.
         * @summary Create a short-lived certificate CA
         * @param {Tm1HTKEcUuid} uuid 
         * @param {Tm1HTKEcSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zoneLevelAccessShortLivedCertificateCAsCreateAShortLivedCertificateCa(uuid: Tm1HTKEcUuid, identifier: Tm1HTKEcSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Tm1HTKEcCaComponentsSchemasSingleResponse>> {
            return ZoneLevelAccessShortLivedCertificateCAsApiFp(configuration).zoneLevelAccessShortLivedCertificateCAsCreateAShortLivedCertificateCa(uuid, identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a short-lived certificate CA.
         * @summary Delete a short-lived certificate CA
         * @param {Tm1HTKEcUuid} uuid 
         * @param {Tm1HTKEcSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zoneLevelAccessShortLivedCertificateCAsDeleteAShortLivedCertificateCa(uuid: Tm1HTKEcUuid, identifier: Tm1HTKEcSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Tm1HTKEcSchemasIdResponse>> {
            return ZoneLevelAccessShortLivedCertificateCAsApiFp(configuration).zoneLevelAccessShortLivedCertificateCAsDeleteAShortLivedCertificateCa(uuid, identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches a short-lived certificate CA and its public key.
         * @summary Get a short-lived certificate CA
         * @param {Tm1HTKEcUuid} uuid 
         * @param {Tm1HTKEcSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zoneLevelAccessShortLivedCertificateCAsGetAShortLivedCertificateCa(uuid: Tm1HTKEcUuid, identifier: Tm1HTKEcSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Tm1HTKEcCaComponentsSchemasSingleResponse>> {
            return ZoneLevelAccessShortLivedCertificateCAsApiFp(configuration).zoneLevelAccessShortLivedCertificateCAsGetAShortLivedCertificateCa(uuid, identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists short-lived certificate CAs and their public keys.
         * @summary List short-lived certificate CAs
         * @param {Tm1HTKEcSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zoneLevelAccessShortLivedCertificateCAsListShortLivedCertificateCAs(identifier: Tm1HTKEcSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Tm1HTKEcCaComponentsSchemasResponseCollection>> {
            return ZoneLevelAccessShortLivedCertificateCAsApiFp(configuration).zoneLevelAccessShortLivedCertificateCAsListShortLivedCertificateCAs(identifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ZoneLevelAccessShortLivedCertificateCAsApi - object-oriented interface
 * @export
 * @class ZoneLevelAccessShortLivedCertificateCAsApi
 * @extends {BaseAPI}
 */
export class ZoneLevelAccessShortLivedCertificateCAsApi extends BaseAPI {
    /**
     * Generates a new short-lived certificate CA and public key.
     * @summary Create a short-lived certificate CA
     * @param {Tm1HTKEcUuid} uuid 
     * @param {Tm1HTKEcSchemasIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZoneLevelAccessShortLivedCertificateCAsApi
     */
    public async zoneLevelAccessShortLivedCertificateCAsCreateAShortLivedCertificateCa(uuid: Tm1HTKEcUuid, identifier: Tm1HTKEcSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Tm1HTKEcCaComponentsSchemasSingleResponse>> {
        return ZoneLevelAccessShortLivedCertificateCAsApiFp(this.configuration).zoneLevelAccessShortLivedCertificateCAsCreateAShortLivedCertificateCa(uuid, identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes a short-lived certificate CA.
     * @summary Delete a short-lived certificate CA
     * @param {Tm1HTKEcUuid} uuid 
     * @param {Tm1HTKEcSchemasIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZoneLevelAccessShortLivedCertificateCAsApi
     */
    public async zoneLevelAccessShortLivedCertificateCAsDeleteAShortLivedCertificateCa(uuid: Tm1HTKEcUuid, identifier: Tm1HTKEcSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Tm1HTKEcSchemasIdResponse>> {
        return ZoneLevelAccessShortLivedCertificateCAsApiFp(this.configuration).zoneLevelAccessShortLivedCertificateCAsDeleteAShortLivedCertificateCa(uuid, identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches a short-lived certificate CA and its public key.
     * @summary Get a short-lived certificate CA
     * @param {Tm1HTKEcUuid} uuid 
     * @param {Tm1HTKEcSchemasIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZoneLevelAccessShortLivedCertificateCAsApi
     */
    public async zoneLevelAccessShortLivedCertificateCAsGetAShortLivedCertificateCa(uuid: Tm1HTKEcUuid, identifier: Tm1HTKEcSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Tm1HTKEcCaComponentsSchemasSingleResponse>> {
        return ZoneLevelAccessShortLivedCertificateCAsApiFp(this.configuration).zoneLevelAccessShortLivedCertificateCAsGetAShortLivedCertificateCa(uuid, identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists short-lived certificate CAs and their public keys.
     * @summary List short-lived certificate CAs
     * @param {Tm1HTKEcSchemasIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZoneLevelAccessShortLivedCertificateCAsApi
     */
    public async zoneLevelAccessShortLivedCertificateCAsListShortLivedCertificateCAs(identifier: Tm1HTKEcSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Tm1HTKEcCaComponentsSchemasResponseCollection>> {
        return ZoneLevelAccessShortLivedCertificateCAsApiFp(this.configuration).zoneLevelAccessShortLivedCertificateCAsListShortLivedCertificateCAs(identifier, options).then((request) => request(this.axios, this.basePath));
    }
}
