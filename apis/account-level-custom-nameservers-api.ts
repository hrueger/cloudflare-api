/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse4xx10 } from '../models';
import { InlineResponse4xx11 } from '../models';
import { InlineResponse4xx8 } from '../models';
import { InlineResponse4xx9 } from '../models';
import { Rc72JKPiAcnsResponseCollection } from '../models';
import { Rc72JKPiAcnsResponseSingle } from '../models';
import { Rc72JKPiAvailabilityResponse } from '../models';
import { Rc72JKPiCustomNSInput } from '../models';
import { Rc72JKPiEmptyResponse } from '../models';
import { Rc72JKPiIdentifier } from '../models';
import { Rc72JKPiNsName } from '../models';
/**
 * AccountLevelCustomNameserversApi - axios parameter creator
 * @export
 */
export const AccountLevelCustomNameserversApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add Account Custom Nameserver
         * @param {Rc72JKPiCustomNSInput} body 
         * @param {Rc72JKPiIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountLevelCustomNameserversAddAccountCustomNameserver: async (body: Rc72JKPiCustomNSInput, identifier: Rc72JKPiIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling accountLevelCustomNameserversAddAccountCustomNameserver.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling accountLevelCustomNameserversAddAccountCustomNameserver.');
            }
            const localVarPath = `/accounts/{identifier}/custom_ns`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Account Custom Nameserver
         * @param {Rc72JKPiNsName} nsName 
         * @param {Rc72JKPiIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountLevelCustomNameserversDeleteAccountCustomNameserver: async (nsName: Rc72JKPiNsName, identifier: Rc72JKPiIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'nsName' is not null or undefined
            if (nsName === null || nsName === undefined) {
                throw new RequiredError('nsName','Required parameter nsName was null or undefined when calling accountLevelCustomNameserversDeleteAccountCustomNameserver.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling accountLevelCustomNameserversDeleteAccountCustomNameserver.');
            }
            const localVarPath = `/accounts/{identifier}/custom_ns/{ns_name}`
                .replace(`{${"ns_name"}}`, encodeURIComponent(String(nsName)))
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Eligible Zones for Account Custom Nameservers
         * @param {Rc72JKPiIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountLevelCustomNameserversGetEligibleZonesForAccountCustomNameservers: async (identifier: Rc72JKPiIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling accountLevelCustomNameserversGetEligibleZonesForAccountCustomNameservers.');
            }
            const localVarPath = `/accounts/{identifier}/custom_ns/availability`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List an account's custom nameservers.
         * @summary List Account Custom Nameservers
         * @param {Rc72JKPiIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountLevelCustomNameserversListAccountCustomNameservers: async (identifier: Rc72JKPiIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling accountLevelCustomNameserversListAccountCustomNameservers.');
            }
            const localVarPath = `/accounts/{identifier}/custom_ns`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Verify Account Custom Nameserver Glue Records
         * @param {Rc72JKPiIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountLevelCustomNameserversVerifyAccountCustomNameserverGlueRecords: async (identifier: Rc72JKPiIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling accountLevelCustomNameserversVerifyAccountCustomNameserverGlueRecords.');
            }
            const localVarPath = `/accounts/{identifier}/custom_ns/verify`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountLevelCustomNameserversApi - functional programming interface
 * @export
 */
export const AccountLevelCustomNameserversApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add Account Custom Nameserver
         * @param {Rc72JKPiCustomNSInput} body 
         * @param {Rc72JKPiIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountLevelCustomNameserversAddAccountCustomNameserver(body: Rc72JKPiCustomNSInput, identifier: Rc72JKPiIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Rc72JKPiAcnsResponseSingle>>> {
            const localVarAxiosArgs = await AccountLevelCustomNameserversApiAxiosParamCreator(configuration).accountLevelCustomNameserversAddAccountCustomNameserver(body, identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete Account Custom Nameserver
         * @param {Rc72JKPiNsName} nsName 
         * @param {Rc72JKPiIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountLevelCustomNameserversDeleteAccountCustomNameserver(nsName: Rc72JKPiNsName, identifier: Rc72JKPiIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Rc72JKPiEmptyResponse>>> {
            const localVarAxiosArgs = await AccountLevelCustomNameserversApiAxiosParamCreator(configuration).accountLevelCustomNameserversDeleteAccountCustomNameserver(nsName, identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get Eligible Zones for Account Custom Nameservers
         * @param {Rc72JKPiIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountLevelCustomNameserversGetEligibleZonesForAccountCustomNameservers(identifier: Rc72JKPiIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Rc72JKPiAvailabilityResponse>>> {
            const localVarAxiosArgs = await AccountLevelCustomNameserversApiAxiosParamCreator(configuration).accountLevelCustomNameserversGetEligibleZonesForAccountCustomNameservers(identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List an account's custom nameservers.
         * @summary List Account Custom Nameservers
         * @param {Rc72JKPiIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountLevelCustomNameserversListAccountCustomNameservers(identifier: Rc72JKPiIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Rc72JKPiAcnsResponseCollection>>> {
            const localVarAxiosArgs = await AccountLevelCustomNameserversApiAxiosParamCreator(configuration).accountLevelCustomNameserversListAccountCustomNameservers(identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Verify Account Custom Nameserver Glue Records
         * @param {Rc72JKPiIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountLevelCustomNameserversVerifyAccountCustomNameserverGlueRecords(identifier: Rc72JKPiIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Rc72JKPiAcnsResponseCollection>>> {
            const localVarAxiosArgs = await AccountLevelCustomNameserversApiAxiosParamCreator(configuration).accountLevelCustomNameserversVerifyAccountCustomNameserverGlueRecords(identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AccountLevelCustomNameserversApi - factory interface
 * @export
 */
export const AccountLevelCustomNameserversApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Add Account Custom Nameserver
         * @param {Rc72JKPiCustomNSInput} body 
         * @param {Rc72JKPiIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountLevelCustomNameserversAddAccountCustomNameserver(body: Rc72JKPiCustomNSInput, identifier: Rc72JKPiIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Rc72JKPiAcnsResponseSingle>> {
            return AccountLevelCustomNameserversApiFp(configuration).accountLevelCustomNameserversAddAccountCustomNameserver(body, identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Account Custom Nameserver
         * @param {Rc72JKPiNsName} nsName 
         * @param {Rc72JKPiIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountLevelCustomNameserversDeleteAccountCustomNameserver(nsName: Rc72JKPiNsName, identifier: Rc72JKPiIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Rc72JKPiEmptyResponse>> {
            return AccountLevelCustomNameserversApiFp(configuration).accountLevelCustomNameserversDeleteAccountCustomNameserver(nsName, identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Eligible Zones for Account Custom Nameservers
         * @param {Rc72JKPiIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountLevelCustomNameserversGetEligibleZonesForAccountCustomNameservers(identifier: Rc72JKPiIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Rc72JKPiAvailabilityResponse>> {
            return AccountLevelCustomNameserversApiFp(configuration).accountLevelCustomNameserversGetEligibleZonesForAccountCustomNameservers(identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * List an account's custom nameservers.
         * @summary List Account Custom Nameservers
         * @param {Rc72JKPiIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountLevelCustomNameserversListAccountCustomNameservers(identifier: Rc72JKPiIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Rc72JKPiAcnsResponseCollection>> {
            return AccountLevelCustomNameserversApiFp(configuration).accountLevelCustomNameserversListAccountCustomNameservers(identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Verify Account Custom Nameserver Glue Records
         * @param {Rc72JKPiIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountLevelCustomNameserversVerifyAccountCustomNameserverGlueRecords(identifier: Rc72JKPiIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Rc72JKPiAcnsResponseCollection>> {
            return AccountLevelCustomNameserversApiFp(configuration).accountLevelCustomNameserversVerifyAccountCustomNameserverGlueRecords(identifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountLevelCustomNameserversApi - object-oriented interface
 * @export
 * @class AccountLevelCustomNameserversApi
 * @extends {BaseAPI}
 */
export class AccountLevelCustomNameserversApi extends BaseAPI {
    /**
     * 
     * @summary Add Account Custom Nameserver
     * @param {Rc72JKPiCustomNSInput} body 
     * @param {Rc72JKPiIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountLevelCustomNameserversApi
     */
    public async accountLevelCustomNameserversAddAccountCustomNameserver(body: Rc72JKPiCustomNSInput, identifier: Rc72JKPiIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Rc72JKPiAcnsResponseSingle>> {
        return AccountLevelCustomNameserversApiFp(this.configuration).accountLevelCustomNameserversAddAccountCustomNameserver(body, identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Delete Account Custom Nameserver
     * @param {Rc72JKPiNsName} nsName 
     * @param {Rc72JKPiIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountLevelCustomNameserversApi
     */
    public async accountLevelCustomNameserversDeleteAccountCustomNameserver(nsName: Rc72JKPiNsName, identifier: Rc72JKPiIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Rc72JKPiEmptyResponse>> {
        return AccountLevelCustomNameserversApiFp(this.configuration).accountLevelCustomNameserversDeleteAccountCustomNameserver(nsName, identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get Eligible Zones for Account Custom Nameservers
     * @param {Rc72JKPiIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountLevelCustomNameserversApi
     */
    public async accountLevelCustomNameserversGetEligibleZonesForAccountCustomNameservers(identifier: Rc72JKPiIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Rc72JKPiAvailabilityResponse>> {
        return AccountLevelCustomNameserversApiFp(this.configuration).accountLevelCustomNameserversGetEligibleZonesForAccountCustomNameservers(identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List an account's custom nameservers.
     * @summary List Account Custom Nameservers
     * @param {Rc72JKPiIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountLevelCustomNameserversApi
     */
    public async accountLevelCustomNameserversListAccountCustomNameservers(identifier: Rc72JKPiIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Rc72JKPiAcnsResponseCollection>> {
        return AccountLevelCustomNameserversApiFp(this.configuration).accountLevelCustomNameserversListAccountCustomNameservers(identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Verify Account Custom Nameserver Glue Records
     * @param {Rc72JKPiIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountLevelCustomNameserversApi
     */
    public async accountLevelCustomNameserversVerifyAccountCustomNameserverGlueRecords(identifier: Rc72JKPiIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Rc72JKPiAcnsResponseCollection>> {
        return AccountLevelCustomNameserversApiFp(this.configuration).accountLevelCustomNameserversVerifyAccountCustomNameserverGlueRecords(identifier, options).then((request) => request(this.axios, this.basePath));
    }
}
