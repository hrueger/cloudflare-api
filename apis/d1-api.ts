/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { D1AccountIdentifier } from '../models';
import { D1DatabaseBody } from '../models';
import { D1DatabaseIdentifier } from '../models';
import { DatabaseidentifierQueryBody } from '../models';
import { InlineResponse20015 } from '../models';
import { InlineResponse20016 } from '../models';
import { InlineResponse20017 } from '../models';
import { InlineResponse20018 } from '../models';
import { InlineResponse20019 } from '../models';
import { InlineResponse4XX101 } from '../models';
/**
 * D1Api - axios parameter creator
 * @export
 */
export const D1ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the created D1 database.
         * @summary Create D1 Database
         * @param {D1DatabaseBody} body 
         * @param {D1AccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudflareD1CreateDatabase: async (body: D1DatabaseBody, accountIdentifier: D1AccountIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling cloudflareD1CreateDatabase.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling cloudflareD1CreateDatabase.');
            }
            const localVarPath = `/accounts/{account-identifier}/d1/database`
                .replace(`{${"account-identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes the specified D1 database.
         * @summary Delete D1 Database
         * @param {D1AccountIdentifier} accountIdentifier 
         * @param {D1DatabaseIdentifier} databaseIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudflareD1DeleteDatabase: async (accountIdentifier: D1AccountIdentifier, databaseIdentifier: D1DatabaseIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling cloudflareD1DeleteDatabase.');
            }
            // verify required parameter 'databaseIdentifier' is not null or undefined
            if (databaseIdentifier === null || databaseIdentifier === undefined) {
                throw new RequiredError('databaseIdentifier','Required parameter databaseIdentifier was null or undefined when calling cloudflareD1DeleteDatabase.');
            }
            const localVarPath = `/accounts/{account-identifier}/d1/database/{database-identifier}`
                .replace(`{${"account-identifier"}}`, encodeURIComponent(String(accountIdentifier)))
                .replace(`{${"database-identifier"}}`, encodeURIComponent(String(databaseIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the specified D1 database.
         * @summary Get D1 Database
         * @param {D1AccountIdentifier} accountIdentifier 
         * @param {D1DatabaseIdentifier} databaseIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudflareD1GetDatabase: async (accountIdentifier: D1AccountIdentifier, databaseIdentifier: D1DatabaseIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling cloudflareD1GetDatabase.');
            }
            // verify required parameter 'databaseIdentifier' is not null or undefined
            if (databaseIdentifier === null || databaseIdentifier === undefined) {
                throw new RequiredError('databaseIdentifier','Required parameter databaseIdentifier was null or undefined when calling cloudflareD1GetDatabase.');
            }
            const localVarPath = `/accounts/{account-identifier}/d1/database/{database-identifier}`
                .replace(`{${"account-identifier"}}`, encodeURIComponent(String(accountIdentifier)))
                .replace(`{${"database-identifier"}}`, encodeURIComponent(String(databaseIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of D1 databases.
         * @summary List D1 Databases
         * @param {D1AccountIdentifier} accountIdentifier 
         * @param {string} [name] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudflareD1ListDatabases: async (accountIdentifier: D1AccountIdentifier, name?: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling cloudflareD1ListDatabases.');
            }
            const localVarPath = `/accounts/{account-identifier}/d1/database`
                .replace(`{${"account-identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the query result.
         * @summary Query D1 Database
         * @param {DatabaseidentifierQueryBody} body 
         * @param {D1AccountIdentifier} accountIdentifier 
         * @param {D1DatabaseIdentifier} databaseIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudflareD1QueryDatabase: async (body: DatabaseidentifierQueryBody, accountIdentifier: D1AccountIdentifier, databaseIdentifier: D1DatabaseIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling cloudflareD1QueryDatabase.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling cloudflareD1QueryDatabase.');
            }
            // verify required parameter 'databaseIdentifier' is not null or undefined
            if (databaseIdentifier === null || databaseIdentifier === undefined) {
                throw new RequiredError('databaseIdentifier','Required parameter databaseIdentifier was null or undefined when calling cloudflareD1QueryDatabase.');
            }
            const localVarPath = `/accounts/{account-identifier}/d1/database/{database-identifier}/query`
                .replace(`{${"account-identifier"}}`, encodeURIComponent(String(accountIdentifier)))
                .replace(`{${"database-identifier"}}`, encodeURIComponent(String(databaseIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * D1Api - functional programming interface
 * @export
 */
export const D1ApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Returns the created D1 database.
         * @summary Create D1 Database
         * @param {D1DatabaseBody} body 
         * @param {D1AccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudflareD1CreateDatabase(body: D1DatabaseBody, accountIdentifier: D1AccountIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20016>>> {
            const localVarAxiosArgs = await D1ApiAxiosParamCreator(configuration).cloudflareD1CreateDatabase(body, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes the specified D1 database.
         * @summary Delete D1 Database
         * @param {D1AccountIdentifier} accountIdentifier 
         * @param {D1DatabaseIdentifier} databaseIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudflareD1DeleteDatabase(accountIdentifier: D1AccountIdentifier, databaseIdentifier: D1DatabaseIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20018>>> {
            const localVarAxiosArgs = await D1ApiAxiosParamCreator(configuration).cloudflareD1DeleteDatabase(accountIdentifier, databaseIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the specified D1 database.
         * @summary Get D1 Database
         * @param {D1AccountIdentifier} accountIdentifier 
         * @param {D1DatabaseIdentifier} databaseIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudflareD1GetDatabase(accountIdentifier: D1AccountIdentifier, databaseIdentifier: D1DatabaseIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20017>>> {
            const localVarAxiosArgs = await D1ApiAxiosParamCreator(configuration).cloudflareD1GetDatabase(accountIdentifier, databaseIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a list of D1 databases.
         * @summary List D1 Databases
         * @param {D1AccountIdentifier} accountIdentifier 
         * @param {string} [name] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudflareD1ListDatabases(accountIdentifier: D1AccountIdentifier, name?: string, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20015>>> {
            const localVarAxiosArgs = await D1ApiAxiosParamCreator(configuration).cloudflareD1ListDatabases(accountIdentifier, name, page, perPage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the query result.
         * @summary Query D1 Database
         * @param {DatabaseidentifierQueryBody} body 
         * @param {D1AccountIdentifier} accountIdentifier 
         * @param {D1DatabaseIdentifier} databaseIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudflareD1QueryDatabase(body: DatabaseidentifierQueryBody, accountIdentifier: D1AccountIdentifier, databaseIdentifier: D1DatabaseIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20019>>> {
            const localVarAxiosArgs = await D1ApiAxiosParamCreator(configuration).cloudflareD1QueryDatabase(body, accountIdentifier, databaseIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * D1Api - factory interface
 * @export
 */
export const D1ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Returns the created D1 database.
         * @summary Create D1 Database
         * @param {D1DatabaseBody} body 
         * @param {D1AccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudflareD1CreateDatabase(body: D1DatabaseBody, accountIdentifier: D1AccountIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20016>> {
            return D1ApiFp(configuration).cloudflareD1CreateDatabase(body, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes the specified D1 database.
         * @summary Delete D1 Database
         * @param {D1AccountIdentifier} accountIdentifier 
         * @param {D1DatabaseIdentifier} databaseIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudflareD1DeleteDatabase(accountIdentifier: D1AccountIdentifier, databaseIdentifier: D1DatabaseIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20018>> {
            return D1ApiFp(configuration).cloudflareD1DeleteDatabase(accountIdentifier, databaseIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the specified D1 database.
         * @summary Get D1 Database
         * @param {D1AccountIdentifier} accountIdentifier 
         * @param {D1DatabaseIdentifier} databaseIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudflareD1GetDatabase(accountIdentifier: D1AccountIdentifier, databaseIdentifier: D1DatabaseIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20017>> {
            return D1ApiFp(configuration).cloudflareD1GetDatabase(accountIdentifier, databaseIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of D1 databases.
         * @summary List D1 Databases
         * @param {D1AccountIdentifier} accountIdentifier 
         * @param {string} [name] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudflareD1ListDatabases(accountIdentifier: D1AccountIdentifier, name?: string, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20015>> {
            return D1ApiFp(configuration).cloudflareD1ListDatabases(accountIdentifier, name, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the query result.
         * @summary Query D1 Database
         * @param {DatabaseidentifierQueryBody} body 
         * @param {D1AccountIdentifier} accountIdentifier 
         * @param {D1DatabaseIdentifier} databaseIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudflareD1QueryDatabase(body: DatabaseidentifierQueryBody, accountIdentifier: D1AccountIdentifier, databaseIdentifier: D1DatabaseIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20019>> {
            return D1ApiFp(configuration).cloudflareD1QueryDatabase(body, accountIdentifier, databaseIdentifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * D1Api - object-oriented interface
 * @export
 * @class D1Api
 * @extends {BaseAPI}
 */
export class D1Api extends BaseAPI {
    /**
     * Returns the created D1 database.
     * @summary Create D1 Database
     * @param {D1DatabaseBody} body 
     * @param {D1AccountIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof D1Api
     */
    public async cloudflareD1CreateDatabase(body: D1DatabaseBody, accountIdentifier: D1AccountIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20016>> {
        return D1ApiFp(this.configuration).cloudflareD1CreateDatabase(body, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes the specified D1 database.
     * @summary Delete D1 Database
     * @param {D1AccountIdentifier} accountIdentifier 
     * @param {D1DatabaseIdentifier} databaseIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof D1Api
     */
    public async cloudflareD1DeleteDatabase(accountIdentifier: D1AccountIdentifier, databaseIdentifier: D1DatabaseIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20018>> {
        return D1ApiFp(this.configuration).cloudflareD1DeleteDatabase(accountIdentifier, databaseIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns the specified D1 database.
     * @summary Get D1 Database
     * @param {D1AccountIdentifier} accountIdentifier 
     * @param {D1DatabaseIdentifier} databaseIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof D1Api
     */
    public async cloudflareD1GetDatabase(accountIdentifier: D1AccountIdentifier, databaseIdentifier: D1DatabaseIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20017>> {
        return D1ApiFp(this.configuration).cloudflareD1GetDatabase(accountIdentifier, databaseIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a list of D1 databases.
     * @summary List D1 Databases
     * @param {D1AccountIdentifier} accountIdentifier 
     * @param {string} [name] 
     * @param {number} [page] 
     * @param {number} [perPage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof D1Api
     */
    public async cloudflareD1ListDatabases(accountIdentifier: D1AccountIdentifier, name?: string, page?: number, perPage?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20015>> {
        return D1ApiFp(this.configuration).cloudflareD1ListDatabases(accountIdentifier, name, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns the query result.
     * @summary Query D1 Database
     * @param {DatabaseidentifierQueryBody} body 
     * @param {D1AccountIdentifier} accountIdentifier 
     * @param {D1DatabaseIdentifier} databaseIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof D1Api
     */
    public async cloudflareD1QueryDatabase(body: DatabaseidentifierQueryBody, accountIdentifier: D1AccountIdentifier, databaseIdentifier: D1DatabaseIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20019>> {
        return D1ApiFp(this.configuration).cloudflareD1QueryDatabase(body, accountIdentifier, databaseIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
}
