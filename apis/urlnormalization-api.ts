/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse4XX293 } from '../models';
import { RTW3sz4nIdentifier } from '../models';
import { RTW3sz4nSchemasRequestModel } from '../models';
import { RTW3sz4nSchemasResponseModel } from '../models';
/**
 * URLNormalizationApi - axios parameter creator
 * @export
 */
export const URLNormalizationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Fetches the current URL normalization settings.
         * @summary Get URL normalization settings
         * @param {RTW3sz4nIdentifier} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        urlNormalizationGetUrlNormalizationSettings: async (zoneId: RTW3sz4nIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneId' is not null or undefined
            if (zoneId === null || zoneId === undefined) {
                throw new RequiredError('zoneId','Required parameter zoneId was null or undefined when calling urlNormalizationGetUrlNormalizationSettings.');
            }
            const localVarPath = `/zones/{zone_id}/url_normalization`
                .replace(`{${"zone_id"}}`, encodeURIComponent(String(zoneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the URL normalization settings.
         * @summary Update URL normalization settings
         * @param {RTW3sz4nSchemasRequestModel} body 
         * @param {RTW3sz4nIdentifier} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        urlNormalizationUpdateUrlNormalizationSettings: async (body: RTW3sz4nSchemasRequestModel, zoneId: RTW3sz4nIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling urlNormalizationUpdateUrlNormalizationSettings.');
            }
            // verify required parameter 'zoneId' is not null or undefined
            if (zoneId === null || zoneId === undefined) {
                throw new RequiredError('zoneId','Required parameter zoneId was null or undefined when calling urlNormalizationUpdateUrlNormalizationSettings.');
            }
            const localVarPath = `/zones/{zone_id}/url_normalization`
                .replace(`{${"zone_id"}}`, encodeURIComponent(String(zoneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * URLNormalizationApi - functional programming interface
 * @export
 */
export const URLNormalizationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Fetches the current URL normalization settings.
         * @summary Get URL normalization settings
         * @param {RTW3sz4nIdentifier} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async urlNormalizationGetUrlNormalizationSettings(zoneId: RTW3sz4nIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RTW3sz4nSchemasResponseModel>>> {
            const localVarAxiosArgs = await URLNormalizationApiAxiosParamCreator(configuration).urlNormalizationGetUrlNormalizationSettings(zoneId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates the URL normalization settings.
         * @summary Update URL normalization settings
         * @param {RTW3sz4nSchemasRequestModel} body 
         * @param {RTW3sz4nIdentifier} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async urlNormalizationUpdateUrlNormalizationSettings(body: RTW3sz4nSchemasRequestModel, zoneId: RTW3sz4nIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RTW3sz4nSchemasResponseModel>>> {
            const localVarAxiosArgs = await URLNormalizationApiAxiosParamCreator(configuration).urlNormalizationUpdateUrlNormalizationSettings(body, zoneId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * URLNormalizationApi - factory interface
 * @export
 */
export const URLNormalizationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Fetches the current URL normalization settings.
         * @summary Get URL normalization settings
         * @param {RTW3sz4nIdentifier} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async urlNormalizationGetUrlNormalizationSettings(zoneId: RTW3sz4nIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<RTW3sz4nSchemasResponseModel>> {
            return URLNormalizationApiFp(configuration).urlNormalizationGetUrlNormalizationSettings(zoneId, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the URL normalization settings.
         * @summary Update URL normalization settings
         * @param {RTW3sz4nSchemasRequestModel} body 
         * @param {RTW3sz4nIdentifier} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async urlNormalizationUpdateUrlNormalizationSettings(body: RTW3sz4nSchemasRequestModel, zoneId: RTW3sz4nIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<RTW3sz4nSchemasResponseModel>> {
            return URLNormalizationApiFp(configuration).urlNormalizationUpdateUrlNormalizationSettings(body, zoneId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * URLNormalizationApi - object-oriented interface
 * @export
 * @class URLNormalizationApi
 * @extends {BaseAPI}
 */
export class URLNormalizationApi extends BaseAPI {
    /**
     * Fetches the current URL normalization settings.
     * @summary Get URL normalization settings
     * @param {RTW3sz4nIdentifier} zoneId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof URLNormalizationApi
     */
    public async urlNormalizationGetUrlNormalizationSettings(zoneId: RTW3sz4nIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<RTW3sz4nSchemasResponseModel>> {
        return URLNormalizationApiFp(this.configuration).urlNormalizationGetUrlNormalizationSettings(zoneId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates the URL normalization settings.
     * @summary Update URL normalization settings
     * @param {RTW3sz4nSchemasRequestModel} body 
     * @param {RTW3sz4nIdentifier} zoneId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof URLNormalizationApi
     */
    public async urlNormalizationUpdateUrlNormalizationSettings(body: RTW3sz4nSchemasRequestModel, zoneId: RTW3sz4nIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<RTW3sz4nSchemasResponseModel>> {
        return URLNormalizationApiFp(this.configuration).urlNormalizationUpdateUrlNormalizationSettings(body, zoneId, options).then((request) => request(this.axios, this.basePath));
    }
}
