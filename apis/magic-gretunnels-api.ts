/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse4XX194 } from '../models';
import { InlineResponse4XX195 } from '../models';
import { InlineResponse4XX196 } from '../models';
import { InlineResponse4XX197 } from '../models';
import { InlineResponse4XX198 } from '../models';
import { Mpo6O2coIdentifier } from '../models';
import { Mpo6O2coModifiedTunnelsCollectionResponse } from '../models';
import { Mpo6O2coTunnelDeletedResponse } from '../models';
import { Mpo6O2coTunnelModifiedResponse } from '../models';
import { Mpo6O2coTunnelSingleResponse } from '../models';
import { Mpo6O2coTunnelUpdateRequest } from '../models';
import { Mpo6O2coTunnelsCollectionResponse } from '../models';
/**
 * MagicGRETunnelsApi - axios parameter creator
 * @export
 */
export const MagicGRETunnelsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates new GRE tunnels. Use `?validate_only=true` as an optional query parameter to only run validation without persisting changes.
         * @summary Create GRE tunnels
         * @param {any} body 
         * @param {Mpo6O2coIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        magicGreTunnelsCreateGreTunnels: async (body: any, accountIdentifier: Mpo6O2coIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling magicGreTunnelsCreateGreTunnels.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling magicGreTunnelsCreateGreTunnels.');
            }
            const localVarPath = `/accounts/{account_identifier}/magic/gre_tunnels`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Disables and removes a specific static GRE tunnel. Use `?validate_only=true` as an optional query parameter to only run validation without persisting changes.
         * @summary Delete GRE Tunnel
         * @param {Mpo6O2coIdentifier} tunnelIdentifier 
         * @param {Mpo6O2coIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        magicGreTunnelsDeleteGreTunnel: async (tunnelIdentifier: Mpo6O2coIdentifier, accountIdentifier: Mpo6O2coIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tunnelIdentifier' is not null or undefined
            if (tunnelIdentifier === null || tunnelIdentifier === undefined) {
                throw new RequiredError('tunnelIdentifier','Required parameter tunnelIdentifier was null or undefined when calling magicGreTunnelsDeleteGreTunnel.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling magicGreTunnelsDeleteGreTunnel.');
            }
            const localVarPath = `/accounts/{account_identifier}/magic/gre_tunnels/{tunnel_identifier}`
                .replace(`{${"tunnel_identifier"}}`, encodeURIComponent(String(tunnelIdentifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists informtion for a specific GRE tunnel.
         * @summary List GRE Tunnel Details
         * @param {Mpo6O2coIdentifier} tunnelIdentifier 
         * @param {Mpo6O2coIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        magicGreTunnelsListGreTunnelDetails: async (tunnelIdentifier: Mpo6O2coIdentifier, accountIdentifier: Mpo6O2coIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tunnelIdentifier' is not null or undefined
            if (tunnelIdentifier === null || tunnelIdentifier === undefined) {
                throw new RequiredError('tunnelIdentifier','Required parameter tunnelIdentifier was null or undefined when calling magicGreTunnelsListGreTunnelDetails.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling magicGreTunnelsListGreTunnelDetails.');
            }
            const localVarPath = `/accounts/{account_identifier}/magic/gre_tunnels/{tunnel_identifier}`
                .replace(`{${"tunnel_identifier"}}`, encodeURIComponent(String(tunnelIdentifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists GRE tunnels associated with an account.
         * @summary List GRE tunnels
         * @param {Mpo6O2coIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        magicGreTunnelsListGreTunnels: async (accountIdentifier: Mpo6O2coIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling magicGreTunnelsListGreTunnels.');
            }
            const localVarPath = `/accounts/{account_identifier}/magic/gre_tunnels`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a specific GRE tunnel. Use `?validate_only=true` as an optional query parameter to only run validation without persisting changes.
         * @summary Update GRE Tunnel
         * @param {Mpo6O2coTunnelUpdateRequest} body 
         * @param {Mpo6O2coIdentifier} tunnelIdentifier 
         * @param {Mpo6O2coIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        magicGreTunnelsUpdateGreTunnel: async (body: Mpo6O2coTunnelUpdateRequest, tunnelIdentifier: Mpo6O2coIdentifier, accountIdentifier: Mpo6O2coIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling magicGreTunnelsUpdateGreTunnel.');
            }
            // verify required parameter 'tunnelIdentifier' is not null or undefined
            if (tunnelIdentifier === null || tunnelIdentifier === undefined) {
                throw new RequiredError('tunnelIdentifier','Required parameter tunnelIdentifier was null or undefined when calling magicGreTunnelsUpdateGreTunnel.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling magicGreTunnelsUpdateGreTunnel.');
            }
            const localVarPath = `/accounts/{account_identifier}/magic/gre_tunnels/{tunnel_identifier}`
                .replace(`{${"tunnel_identifier"}}`, encodeURIComponent(String(tunnelIdentifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates multiple GRE tunnels. Use `?validate_only=true` as an optional query parameter to only run validation without persisting changes.
         * @summary Update multiple GRE tunnels
         * @param {any} body 
         * @param {Mpo6O2coIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        magicGreTunnelsUpdateMultipleGreTunnels: async (body: any, accountIdentifier: Mpo6O2coIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling magicGreTunnelsUpdateMultipleGreTunnels.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling magicGreTunnelsUpdateMultipleGreTunnels.');
            }
            const localVarPath = `/accounts/{account_identifier}/magic/gre_tunnels`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MagicGRETunnelsApi - functional programming interface
 * @export
 */
export const MagicGRETunnelsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates new GRE tunnels. Use `?validate_only=true` as an optional query parameter to only run validation without persisting changes.
         * @summary Create GRE tunnels
         * @param {any} body 
         * @param {Mpo6O2coIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicGreTunnelsCreateGreTunnels(body: any, accountIdentifier: Mpo6O2coIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Mpo6O2coTunnelsCollectionResponse>>> {
            const localVarAxiosArgs = await MagicGRETunnelsApiAxiosParamCreator(configuration).magicGreTunnelsCreateGreTunnels(body, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Disables and removes a specific static GRE tunnel. Use `?validate_only=true` as an optional query parameter to only run validation without persisting changes.
         * @summary Delete GRE Tunnel
         * @param {Mpo6O2coIdentifier} tunnelIdentifier 
         * @param {Mpo6O2coIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicGreTunnelsDeleteGreTunnel(tunnelIdentifier: Mpo6O2coIdentifier, accountIdentifier: Mpo6O2coIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Mpo6O2coTunnelDeletedResponse>>> {
            const localVarAxiosArgs = await MagicGRETunnelsApiAxiosParamCreator(configuration).magicGreTunnelsDeleteGreTunnel(tunnelIdentifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Lists informtion for a specific GRE tunnel.
         * @summary List GRE Tunnel Details
         * @param {Mpo6O2coIdentifier} tunnelIdentifier 
         * @param {Mpo6O2coIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicGreTunnelsListGreTunnelDetails(tunnelIdentifier: Mpo6O2coIdentifier, accountIdentifier: Mpo6O2coIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Mpo6O2coTunnelSingleResponse>>> {
            const localVarAxiosArgs = await MagicGRETunnelsApiAxiosParamCreator(configuration).magicGreTunnelsListGreTunnelDetails(tunnelIdentifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Lists GRE tunnels associated with an account.
         * @summary List GRE tunnels
         * @param {Mpo6O2coIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicGreTunnelsListGreTunnels(accountIdentifier: Mpo6O2coIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Mpo6O2coTunnelsCollectionResponse>>> {
            const localVarAxiosArgs = await MagicGRETunnelsApiAxiosParamCreator(configuration).magicGreTunnelsListGreTunnels(accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates a specific GRE tunnel. Use `?validate_only=true` as an optional query parameter to only run validation without persisting changes.
         * @summary Update GRE Tunnel
         * @param {Mpo6O2coTunnelUpdateRequest} body 
         * @param {Mpo6O2coIdentifier} tunnelIdentifier 
         * @param {Mpo6O2coIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicGreTunnelsUpdateGreTunnel(body: Mpo6O2coTunnelUpdateRequest, tunnelIdentifier: Mpo6O2coIdentifier, accountIdentifier: Mpo6O2coIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Mpo6O2coTunnelModifiedResponse>>> {
            const localVarAxiosArgs = await MagicGRETunnelsApiAxiosParamCreator(configuration).magicGreTunnelsUpdateGreTunnel(body, tunnelIdentifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates multiple GRE tunnels. Use `?validate_only=true` as an optional query parameter to only run validation without persisting changes.
         * @summary Update multiple GRE tunnels
         * @param {any} body 
         * @param {Mpo6O2coIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicGreTunnelsUpdateMultipleGreTunnels(body: any, accountIdentifier: Mpo6O2coIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Mpo6O2coModifiedTunnelsCollectionResponse>>> {
            const localVarAxiosArgs = await MagicGRETunnelsApiAxiosParamCreator(configuration).magicGreTunnelsUpdateMultipleGreTunnels(body, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * MagicGRETunnelsApi - factory interface
 * @export
 */
export const MagicGRETunnelsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Creates new GRE tunnels. Use `?validate_only=true` as an optional query parameter to only run validation without persisting changes.
         * @summary Create GRE tunnels
         * @param {any} body 
         * @param {Mpo6O2coIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicGreTunnelsCreateGreTunnels(body: any, accountIdentifier: Mpo6O2coIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Mpo6O2coTunnelsCollectionResponse>> {
            return MagicGRETunnelsApiFp(configuration).magicGreTunnelsCreateGreTunnels(body, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Disables and removes a specific static GRE tunnel. Use `?validate_only=true` as an optional query parameter to only run validation without persisting changes.
         * @summary Delete GRE Tunnel
         * @param {Mpo6O2coIdentifier} tunnelIdentifier 
         * @param {Mpo6O2coIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicGreTunnelsDeleteGreTunnel(tunnelIdentifier: Mpo6O2coIdentifier, accountIdentifier: Mpo6O2coIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Mpo6O2coTunnelDeletedResponse>> {
            return MagicGRETunnelsApiFp(configuration).magicGreTunnelsDeleteGreTunnel(tunnelIdentifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists informtion for a specific GRE tunnel.
         * @summary List GRE Tunnel Details
         * @param {Mpo6O2coIdentifier} tunnelIdentifier 
         * @param {Mpo6O2coIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicGreTunnelsListGreTunnelDetails(tunnelIdentifier: Mpo6O2coIdentifier, accountIdentifier: Mpo6O2coIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Mpo6O2coTunnelSingleResponse>> {
            return MagicGRETunnelsApiFp(configuration).magicGreTunnelsListGreTunnelDetails(tunnelIdentifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists GRE tunnels associated with an account.
         * @summary List GRE tunnels
         * @param {Mpo6O2coIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicGreTunnelsListGreTunnels(accountIdentifier: Mpo6O2coIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Mpo6O2coTunnelsCollectionResponse>> {
            return MagicGRETunnelsApiFp(configuration).magicGreTunnelsListGreTunnels(accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a specific GRE tunnel. Use `?validate_only=true` as an optional query parameter to only run validation without persisting changes.
         * @summary Update GRE Tunnel
         * @param {Mpo6O2coTunnelUpdateRequest} body 
         * @param {Mpo6O2coIdentifier} tunnelIdentifier 
         * @param {Mpo6O2coIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicGreTunnelsUpdateGreTunnel(body: Mpo6O2coTunnelUpdateRequest, tunnelIdentifier: Mpo6O2coIdentifier, accountIdentifier: Mpo6O2coIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Mpo6O2coTunnelModifiedResponse>> {
            return MagicGRETunnelsApiFp(configuration).magicGreTunnelsUpdateGreTunnel(body, tunnelIdentifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates multiple GRE tunnels. Use `?validate_only=true` as an optional query parameter to only run validation without persisting changes.
         * @summary Update multiple GRE tunnels
         * @param {any} body 
         * @param {Mpo6O2coIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicGreTunnelsUpdateMultipleGreTunnels(body: any, accountIdentifier: Mpo6O2coIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Mpo6O2coModifiedTunnelsCollectionResponse>> {
            return MagicGRETunnelsApiFp(configuration).magicGreTunnelsUpdateMultipleGreTunnels(body, accountIdentifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MagicGRETunnelsApi - object-oriented interface
 * @export
 * @class MagicGRETunnelsApi
 * @extends {BaseAPI}
 */
export class MagicGRETunnelsApi extends BaseAPI {
    /**
     * Creates new GRE tunnels. Use `?validate_only=true` as an optional query parameter to only run validation without persisting changes.
     * @summary Create GRE tunnels
     * @param {any} body 
     * @param {Mpo6O2coIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MagicGRETunnelsApi
     */
    public async magicGreTunnelsCreateGreTunnels(body: any, accountIdentifier: Mpo6O2coIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Mpo6O2coTunnelsCollectionResponse>> {
        return MagicGRETunnelsApiFp(this.configuration).magicGreTunnelsCreateGreTunnels(body, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Disables and removes a specific static GRE tunnel. Use `?validate_only=true` as an optional query parameter to only run validation without persisting changes.
     * @summary Delete GRE Tunnel
     * @param {Mpo6O2coIdentifier} tunnelIdentifier 
     * @param {Mpo6O2coIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MagicGRETunnelsApi
     */
    public async magicGreTunnelsDeleteGreTunnel(tunnelIdentifier: Mpo6O2coIdentifier, accountIdentifier: Mpo6O2coIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Mpo6O2coTunnelDeletedResponse>> {
        return MagicGRETunnelsApiFp(this.configuration).magicGreTunnelsDeleteGreTunnel(tunnelIdentifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists informtion for a specific GRE tunnel.
     * @summary List GRE Tunnel Details
     * @param {Mpo6O2coIdentifier} tunnelIdentifier 
     * @param {Mpo6O2coIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MagicGRETunnelsApi
     */
    public async magicGreTunnelsListGreTunnelDetails(tunnelIdentifier: Mpo6O2coIdentifier, accountIdentifier: Mpo6O2coIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Mpo6O2coTunnelSingleResponse>> {
        return MagicGRETunnelsApiFp(this.configuration).magicGreTunnelsListGreTunnelDetails(tunnelIdentifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists GRE tunnels associated with an account.
     * @summary List GRE tunnels
     * @param {Mpo6O2coIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MagicGRETunnelsApi
     */
    public async magicGreTunnelsListGreTunnels(accountIdentifier: Mpo6O2coIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Mpo6O2coTunnelsCollectionResponse>> {
        return MagicGRETunnelsApiFp(this.configuration).magicGreTunnelsListGreTunnels(accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates a specific GRE tunnel. Use `?validate_only=true` as an optional query parameter to only run validation without persisting changes.
     * @summary Update GRE Tunnel
     * @param {Mpo6O2coTunnelUpdateRequest} body 
     * @param {Mpo6O2coIdentifier} tunnelIdentifier 
     * @param {Mpo6O2coIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MagicGRETunnelsApi
     */
    public async magicGreTunnelsUpdateGreTunnel(body: Mpo6O2coTunnelUpdateRequest, tunnelIdentifier: Mpo6O2coIdentifier, accountIdentifier: Mpo6O2coIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Mpo6O2coTunnelModifiedResponse>> {
        return MagicGRETunnelsApiFp(this.configuration).magicGreTunnelsUpdateGreTunnel(body, tunnelIdentifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates multiple GRE tunnels. Use `?validate_only=true` as an optional query parameter to only run validation without persisting changes.
     * @summary Update multiple GRE tunnels
     * @param {any} body 
     * @param {Mpo6O2coIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MagicGRETunnelsApi
     */
    public async magicGreTunnelsUpdateMultipleGreTunnels(body: any, accountIdentifier: Mpo6O2coIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Mpo6O2coModifiedTunnelsCollectionResponse>> {
        return MagicGRETunnelsApiFp(this.configuration).magicGreTunnelsUpdateMultipleGreTunnels(body, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
}
