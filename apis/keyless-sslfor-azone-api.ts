/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse4XX165 } from '../models';
import { InlineResponse4XX166 } from '../models';
import { InlineResponse4XX167 } from '../models';
import { KNYM3FIhIdentifier } from '../models';
import { KNYM3FIhKeylessResponseCollection } from '../models';
import { KNYM3FIhKeylessResponseSingle } from '../models';
import { KNYM3FIhKeylessResponseSingleId } from '../models';
import { KeylessCertificatesIdentifierBody } from '../models';
import { ZoneIdentifierKeylessCertificatesBody } from '../models';
/**
 * KeylessSSLForAZoneApi - axios parameter creator
 * @export
 */
export const KeylessSSLForAZoneApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Keyless SSL Configuration
         * @param {ZoneIdentifierKeylessCertificatesBody} body 
         * @param {KNYM3FIhIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keylessSslForAZoneCreateKeylessSslConfiguration: async (body: ZoneIdentifierKeylessCertificatesBody, zoneIdentifier: KNYM3FIhIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling keylessSslForAZoneCreateKeylessSslConfiguration.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling keylessSslForAZoneCreateKeylessSslConfiguration.');
            }
            const localVarPath = `/zones/{zone_identifier}/keyless_certificates`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Keyless SSL Configuration
         * @param {KNYM3FIhIdentifier} identifier 
         * @param {KNYM3FIhIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keylessSslForAZoneDeleteKeylessSslConfiguration: async (identifier: KNYM3FIhIdentifier, zoneIdentifier: KNYM3FIhIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling keylessSslForAZoneDeleteKeylessSslConfiguration.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling keylessSslForAZoneDeleteKeylessSslConfiguration.');
            }
            const localVarPath = `/zones/{zone_identifier}/keyless_certificates/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This will update attributes of a Keyless SSL. Consists of one or more of the following:  host,name,port.
         * @summary Edit Keyless SSL Configuration
         * @param {KeylessCertificatesIdentifierBody} body 
         * @param {KNYM3FIhIdentifier} identifier 
         * @param {KNYM3FIhIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keylessSslForAZoneEditKeylessSslConfiguration: async (body: KeylessCertificatesIdentifierBody, identifier: KNYM3FIhIdentifier, zoneIdentifier: KNYM3FIhIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling keylessSslForAZoneEditKeylessSslConfiguration.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling keylessSslForAZoneEditKeylessSslConfiguration.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling keylessSslForAZoneEditKeylessSslConfiguration.');
            }
            const localVarPath = `/zones/{zone_identifier}/keyless_certificates/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get details for one Keyless SSL configuration.
         * @summary Get Keyless SSL Configuration
         * @param {KNYM3FIhIdentifier} identifier 
         * @param {KNYM3FIhIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keylessSslForAZoneGetKeylessSslConfiguration: async (identifier: KNYM3FIhIdentifier, zoneIdentifier: KNYM3FIhIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling keylessSslForAZoneGetKeylessSslConfiguration.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling keylessSslForAZoneGetKeylessSslConfiguration.');
            }
            const localVarPath = `/zones/{zone_identifier}/keyless_certificates/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List all Keyless SSL configurations for a given zone.
         * @summary List Keyless SSL Configurations
         * @param {KNYM3FIhIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keylessSslForAZoneListKeylessSslConfigurations: async (zoneIdentifier: KNYM3FIhIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling keylessSslForAZoneListKeylessSslConfigurations.');
            }
            const localVarPath = `/zones/{zone_identifier}/keyless_certificates`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * KeylessSSLForAZoneApi - functional programming interface
 * @export
 */
export const KeylessSSLForAZoneApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Keyless SSL Configuration
         * @param {ZoneIdentifierKeylessCertificatesBody} body 
         * @param {KNYM3FIhIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async keylessSslForAZoneCreateKeylessSslConfiguration(body: ZoneIdentifierKeylessCertificatesBody, zoneIdentifier: KNYM3FIhIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<KNYM3FIhKeylessResponseSingle>>> {
            const localVarAxiosArgs = await KeylessSSLForAZoneApiAxiosParamCreator(configuration).keylessSslForAZoneCreateKeylessSslConfiguration(body, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete Keyless SSL Configuration
         * @param {KNYM3FIhIdentifier} identifier 
         * @param {KNYM3FIhIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async keylessSslForAZoneDeleteKeylessSslConfiguration(identifier: KNYM3FIhIdentifier, zoneIdentifier: KNYM3FIhIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<KNYM3FIhKeylessResponseSingleId>>> {
            const localVarAxiosArgs = await KeylessSSLForAZoneApiAxiosParamCreator(configuration).keylessSslForAZoneDeleteKeylessSslConfiguration(identifier, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This will update attributes of a Keyless SSL. Consists of one or more of the following:  host,name,port.
         * @summary Edit Keyless SSL Configuration
         * @param {KeylessCertificatesIdentifierBody} body 
         * @param {KNYM3FIhIdentifier} identifier 
         * @param {KNYM3FIhIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async keylessSslForAZoneEditKeylessSslConfiguration(body: KeylessCertificatesIdentifierBody, identifier: KNYM3FIhIdentifier, zoneIdentifier: KNYM3FIhIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<KNYM3FIhKeylessResponseSingle>>> {
            const localVarAxiosArgs = await KeylessSSLForAZoneApiAxiosParamCreator(configuration).keylessSslForAZoneEditKeylessSslConfiguration(body, identifier, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get details for one Keyless SSL configuration.
         * @summary Get Keyless SSL Configuration
         * @param {KNYM3FIhIdentifier} identifier 
         * @param {KNYM3FIhIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async keylessSslForAZoneGetKeylessSslConfiguration(identifier: KNYM3FIhIdentifier, zoneIdentifier: KNYM3FIhIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<KNYM3FIhKeylessResponseSingle>>> {
            const localVarAxiosArgs = await KeylessSSLForAZoneApiAxiosParamCreator(configuration).keylessSslForAZoneGetKeylessSslConfiguration(identifier, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List all Keyless SSL configurations for a given zone.
         * @summary List Keyless SSL Configurations
         * @param {KNYM3FIhIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async keylessSslForAZoneListKeylessSslConfigurations(zoneIdentifier: KNYM3FIhIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<KNYM3FIhKeylessResponseCollection>>> {
            const localVarAxiosArgs = await KeylessSSLForAZoneApiAxiosParamCreator(configuration).keylessSslForAZoneListKeylessSslConfigurations(zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * KeylessSSLForAZoneApi - factory interface
 * @export
 */
export const KeylessSSLForAZoneApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Create Keyless SSL Configuration
         * @param {ZoneIdentifierKeylessCertificatesBody} body 
         * @param {KNYM3FIhIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async keylessSslForAZoneCreateKeylessSslConfiguration(body: ZoneIdentifierKeylessCertificatesBody, zoneIdentifier: KNYM3FIhIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<KNYM3FIhKeylessResponseSingle>> {
            return KeylessSSLForAZoneApiFp(configuration).keylessSslForAZoneCreateKeylessSslConfiguration(body, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Keyless SSL Configuration
         * @param {KNYM3FIhIdentifier} identifier 
         * @param {KNYM3FIhIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async keylessSslForAZoneDeleteKeylessSslConfiguration(identifier: KNYM3FIhIdentifier, zoneIdentifier: KNYM3FIhIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<KNYM3FIhKeylessResponseSingleId>> {
            return KeylessSSLForAZoneApiFp(configuration).keylessSslForAZoneDeleteKeylessSslConfiguration(identifier, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * This will update attributes of a Keyless SSL. Consists of one or more of the following:  host,name,port.
         * @summary Edit Keyless SSL Configuration
         * @param {KeylessCertificatesIdentifierBody} body 
         * @param {KNYM3FIhIdentifier} identifier 
         * @param {KNYM3FIhIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async keylessSslForAZoneEditKeylessSslConfiguration(body: KeylessCertificatesIdentifierBody, identifier: KNYM3FIhIdentifier, zoneIdentifier: KNYM3FIhIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<KNYM3FIhKeylessResponseSingle>> {
            return KeylessSSLForAZoneApiFp(configuration).keylessSslForAZoneEditKeylessSslConfiguration(body, identifier, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Get details for one Keyless SSL configuration.
         * @summary Get Keyless SSL Configuration
         * @param {KNYM3FIhIdentifier} identifier 
         * @param {KNYM3FIhIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async keylessSslForAZoneGetKeylessSslConfiguration(identifier: KNYM3FIhIdentifier, zoneIdentifier: KNYM3FIhIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<KNYM3FIhKeylessResponseSingle>> {
            return KeylessSSLForAZoneApiFp(configuration).keylessSslForAZoneGetKeylessSslConfiguration(identifier, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * List all Keyless SSL configurations for a given zone.
         * @summary List Keyless SSL Configurations
         * @param {KNYM3FIhIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async keylessSslForAZoneListKeylessSslConfigurations(zoneIdentifier: KNYM3FIhIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<KNYM3FIhKeylessResponseCollection>> {
            return KeylessSSLForAZoneApiFp(configuration).keylessSslForAZoneListKeylessSslConfigurations(zoneIdentifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * KeylessSSLForAZoneApi - object-oriented interface
 * @export
 * @class KeylessSSLForAZoneApi
 * @extends {BaseAPI}
 */
export class KeylessSSLForAZoneApi extends BaseAPI {
    /**
     * 
     * @summary Create Keyless SSL Configuration
     * @param {ZoneIdentifierKeylessCertificatesBody} body 
     * @param {KNYM3FIhIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeylessSSLForAZoneApi
     */
    public async keylessSslForAZoneCreateKeylessSslConfiguration(body: ZoneIdentifierKeylessCertificatesBody, zoneIdentifier: KNYM3FIhIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<KNYM3FIhKeylessResponseSingle>> {
        return KeylessSSLForAZoneApiFp(this.configuration).keylessSslForAZoneCreateKeylessSslConfiguration(body, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Delete Keyless SSL Configuration
     * @param {KNYM3FIhIdentifier} identifier 
     * @param {KNYM3FIhIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeylessSSLForAZoneApi
     */
    public async keylessSslForAZoneDeleteKeylessSslConfiguration(identifier: KNYM3FIhIdentifier, zoneIdentifier: KNYM3FIhIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<KNYM3FIhKeylessResponseSingleId>> {
        return KeylessSSLForAZoneApiFp(this.configuration).keylessSslForAZoneDeleteKeylessSslConfiguration(identifier, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This will update attributes of a Keyless SSL. Consists of one or more of the following:  host,name,port.
     * @summary Edit Keyless SSL Configuration
     * @param {KeylessCertificatesIdentifierBody} body 
     * @param {KNYM3FIhIdentifier} identifier 
     * @param {KNYM3FIhIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeylessSSLForAZoneApi
     */
    public async keylessSslForAZoneEditKeylessSslConfiguration(body: KeylessCertificatesIdentifierBody, identifier: KNYM3FIhIdentifier, zoneIdentifier: KNYM3FIhIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<KNYM3FIhKeylessResponseSingle>> {
        return KeylessSSLForAZoneApiFp(this.configuration).keylessSslForAZoneEditKeylessSslConfiguration(body, identifier, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get details for one Keyless SSL configuration.
     * @summary Get Keyless SSL Configuration
     * @param {KNYM3FIhIdentifier} identifier 
     * @param {KNYM3FIhIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeylessSSLForAZoneApi
     */
    public async keylessSslForAZoneGetKeylessSslConfiguration(identifier: KNYM3FIhIdentifier, zoneIdentifier: KNYM3FIhIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<KNYM3FIhKeylessResponseSingle>> {
        return KeylessSSLForAZoneApiFp(this.configuration).keylessSslForAZoneGetKeylessSslConfiguration(identifier, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List all Keyless SSL configurations for a given zone.
     * @summary List Keyless SSL Configurations
     * @param {KNYM3FIhIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeylessSSLForAZoneApi
     */
    public async keylessSslForAZoneListKeylessSslConfigurations(zoneIdentifier: KNYM3FIhIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<KNYM3FIhKeylessResponseCollection>> {
        return KeylessSSLForAZoneApiFp(this.configuration).keylessSslForAZoneListKeylessSslConfigurations(zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
}
