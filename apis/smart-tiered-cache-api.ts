/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse4XX286 } from '../models';
import { KUKGSak9Identifier } from '../models';
import { KUKGSak9ResponseSingle } from '../models';
import { KUKGSak9SchemasPatch } from '../models';
/**
 * SmartTieredCacheApi - axios parameter creator
 * @export
 */
export const SmartTieredCacheApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Remvoves enablement of Smart Tiered Cache
         * @summary Delete Smart Tiered Cache setting
         * @param {KUKGSak9Identifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smartTieredCacheDeleteSmartTieredCacheSetting: async (zoneIdentifier: KUKGSak9Identifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling smartTieredCacheDeleteSmartTieredCacheSetting.');
            }
            const localVarPath = `/zones/{zone_identifier}/cache/tiered_cache_smart_topology_enable`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Smart Tiered Cache setting
         * @param {KUKGSak9Identifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smartTieredCacheGetSmartTieredCacheSetting: async (zoneIdentifier: KUKGSak9Identifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling smartTieredCacheGetSmartTieredCacheSetting.');
            }
            const localVarPath = `/zones/{zone_identifier}/cache/tiered_cache_smart_topology_enable`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates enablement of Tiered Cache
         * @summary Patch Smart Tiered Cache setting
         * @param {KUKGSak9SchemasPatch} body 
         * @param {KUKGSak9Identifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smartTieredCachePatchSmartTieredCacheSetting: async (body: KUKGSak9SchemasPatch, zoneIdentifier: KUKGSak9Identifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling smartTieredCachePatchSmartTieredCacheSetting.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling smartTieredCachePatchSmartTieredCacheSetting.');
            }
            const localVarPath = `/zones/{zone_identifier}/cache/tiered_cache_smart_topology_enable`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SmartTieredCacheApi - functional programming interface
 * @export
 */
export const SmartTieredCacheApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Remvoves enablement of Smart Tiered Cache
         * @summary Delete Smart Tiered Cache setting
         * @param {KUKGSak9Identifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async smartTieredCacheDeleteSmartTieredCacheSetting(zoneIdentifier: KUKGSak9Identifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<KUKGSak9ResponseSingle>>> {
            const localVarAxiosArgs = await SmartTieredCacheApiAxiosParamCreator(configuration).smartTieredCacheDeleteSmartTieredCacheSetting(zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get Smart Tiered Cache setting
         * @param {KUKGSak9Identifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async smartTieredCacheGetSmartTieredCacheSetting(zoneIdentifier: KUKGSak9Identifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<KUKGSak9ResponseSingle>>> {
            const localVarAxiosArgs = await SmartTieredCacheApiAxiosParamCreator(configuration).smartTieredCacheGetSmartTieredCacheSetting(zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates enablement of Tiered Cache
         * @summary Patch Smart Tiered Cache setting
         * @param {KUKGSak9SchemasPatch} body 
         * @param {KUKGSak9Identifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async smartTieredCachePatchSmartTieredCacheSetting(body: KUKGSak9SchemasPatch, zoneIdentifier: KUKGSak9Identifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<KUKGSak9ResponseSingle>>> {
            const localVarAxiosArgs = await SmartTieredCacheApiAxiosParamCreator(configuration).smartTieredCachePatchSmartTieredCacheSetting(body, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SmartTieredCacheApi - factory interface
 * @export
 */
export const SmartTieredCacheApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Remvoves enablement of Smart Tiered Cache
         * @summary Delete Smart Tiered Cache setting
         * @param {KUKGSak9Identifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async smartTieredCacheDeleteSmartTieredCacheSetting(zoneIdentifier: KUKGSak9Identifier, options?: AxiosRequestConfig): Promise<AxiosResponse<KUKGSak9ResponseSingle>> {
            return SmartTieredCacheApiFp(configuration).smartTieredCacheDeleteSmartTieredCacheSetting(zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Smart Tiered Cache setting
         * @param {KUKGSak9Identifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async smartTieredCacheGetSmartTieredCacheSetting(zoneIdentifier: KUKGSak9Identifier, options?: AxiosRequestConfig): Promise<AxiosResponse<KUKGSak9ResponseSingle>> {
            return SmartTieredCacheApiFp(configuration).smartTieredCacheGetSmartTieredCacheSetting(zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates enablement of Tiered Cache
         * @summary Patch Smart Tiered Cache setting
         * @param {KUKGSak9SchemasPatch} body 
         * @param {KUKGSak9Identifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async smartTieredCachePatchSmartTieredCacheSetting(body: KUKGSak9SchemasPatch, zoneIdentifier: KUKGSak9Identifier, options?: AxiosRequestConfig): Promise<AxiosResponse<KUKGSak9ResponseSingle>> {
            return SmartTieredCacheApiFp(configuration).smartTieredCachePatchSmartTieredCacheSetting(body, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SmartTieredCacheApi - object-oriented interface
 * @export
 * @class SmartTieredCacheApi
 * @extends {BaseAPI}
 */
export class SmartTieredCacheApi extends BaseAPI {
    /**
     * Remvoves enablement of Smart Tiered Cache
     * @summary Delete Smart Tiered Cache setting
     * @param {KUKGSak9Identifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmartTieredCacheApi
     */
    public async smartTieredCacheDeleteSmartTieredCacheSetting(zoneIdentifier: KUKGSak9Identifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<KUKGSak9ResponseSingle>> {
        return SmartTieredCacheApiFp(this.configuration).smartTieredCacheDeleteSmartTieredCacheSetting(zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get Smart Tiered Cache setting
     * @param {KUKGSak9Identifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmartTieredCacheApi
     */
    public async smartTieredCacheGetSmartTieredCacheSetting(zoneIdentifier: KUKGSak9Identifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<KUKGSak9ResponseSingle>> {
        return SmartTieredCacheApiFp(this.configuration).smartTieredCacheGetSmartTieredCacheSetting(zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates enablement of Tiered Cache
     * @summary Patch Smart Tiered Cache setting
     * @param {KUKGSak9SchemasPatch} body 
     * @param {KUKGSak9Identifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmartTieredCacheApi
     */
    public async smartTieredCachePatchSmartTieredCacheSetting(body: KUKGSak9SchemasPatch, zoneIdentifier: KUKGSak9Identifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<KUKGSak9ResponseSingle>> {
        return SmartTieredCacheApiFp(this.configuration).smartTieredCachePatchSmartTieredCacheSetting(body, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
}
