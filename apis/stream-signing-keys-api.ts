/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { JOh1h9zQApiResponseCommonFailure } from '../models';
import { JOh1h9zQDeletedResponse } from '../models';
import { JOh1h9zQKeyGenerationResponse } from '../models';
import { JOh1h9zQKeyResponseCollection } from '../models';
import { JOh1h9zQSchemasIdentifier } from '../models';
/**
 * StreamSigningKeysApi - axios parameter creator
 * @export
 */
export const StreamSigningKeysApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates an RSA private key in PEM and JWK formats. Key files are only displayed once after creation. Keys are created, used, and deleted independently of videos, and every key can sign any video.
         * @summary Create signing keys
         * @param {JOh1h9zQSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamSigningKeysCreateSigningKeys: async (accountIdentifier: JOh1h9zQSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling streamSigningKeysCreateSigningKeys.');
            }
            const localVarPath = `/accounts/{account_identifier}/stream/keys`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes signing keys and revokes all signed URLs generated with the key.
         * @summary Delete signing keys
         * @param {JOh1h9zQSchemasIdentifier} identifier 
         * @param {JOh1h9zQSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamSigningKeysDeleteSigningKeys: async (identifier: JOh1h9zQSchemasIdentifier, accountIdentifier: JOh1h9zQSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling streamSigningKeysDeleteSigningKeys.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling streamSigningKeysDeleteSigningKeys.');
            }
            const localVarPath = `/accounts/{account_identifier}/stream/keys/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists the video ID and creation date and time when a signing key was created.
         * @summary List signing keys
         * @param {JOh1h9zQSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamSigningKeysListSigningKeys: async (accountIdentifier: JOh1h9zQSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling streamSigningKeysListSigningKeys.');
            }
            const localVarPath = `/accounts/{account_identifier}/stream/keys`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StreamSigningKeysApi - functional programming interface
 * @export
 */
export const StreamSigningKeysApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates an RSA private key in PEM and JWK formats. Key files are only displayed once after creation. Keys are created, used, and deleted independently of videos, and every key can sign any video.
         * @summary Create signing keys
         * @param {JOh1h9zQSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamSigningKeysCreateSigningKeys(accountIdentifier: JOh1h9zQSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<JOh1h9zQKeyGenerationResponse>>> {
            const localVarAxiosArgs = await StreamSigningKeysApiAxiosParamCreator(configuration).streamSigningKeysCreateSigningKeys(accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes signing keys and revokes all signed URLs generated with the key.
         * @summary Delete signing keys
         * @param {JOh1h9zQSchemasIdentifier} identifier 
         * @param {JOh1h9zQSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamSigningKeysDeleteSigningKeys(identifier: JOh1h9zQSchemasIdentifier, accountIdentifier: JOh1h9zQSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<JOh1h9zQDeletedResponse>>> {
            const localVarAxiosArgs = await StreamSigningKeysApiAxiosParamCreator(configuration).streamSigningKeysDeleteSigningKeys(identifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Lists the video ID and creation date and time when a signing key was created.
         * @summary List signing keys
         * @param {JOh1h9zQSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamSigningKeysListSigningKeys(accountIdentifier: JOh1h9zQSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<JOh1h9zQKeyResponseCollection>>> {
            const localVarAxiosArgs = await StreamSigningKeysApiAxiosParamCreator(configuration).streamSigningKeysListSigningKeys(accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * StreamSigningKeysApi - factory interface
 * @export
 */
export const StreamSigningKeysApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Creates an RSA private key in PEM and JWK formats. Key files are only displayed once after creation. Keys are created, used, and deleted independently of videos, and every key can sign any video.
         * @summary Create signing keys
         * @param {JOh1h9zQSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamSigningKeysCreateSigningKeys(accountIdentifier: JOh1h9zQSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<JOh1h9zQKeyGenerationResponse>> {
            return StreamSigningKeysApiFp(configuration).streamSigningKeysCreateSigningKeys(accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes signing keys and revokes all signed URLs generated with the key.
         * @summary Delete signing keys
         * @param {JOh1h9zQSchemasIdentifier} identifier 
         * @param {JOh1h9zQSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamSigningKeysDeleteSigningKeys(identifier: JOh1h9zQSchemasIdentifier, accountIdentifier: JOh1h9zQSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<JOh1h9zQDeletedResponse>> {
            return StreamSigningKeysApiFp(configuration).streamSigningKeysDeleteSigningKeys(identifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists the video ID and creation date and time when a signing key was created.
         * @summary List signing keys
         * @param {JOh1h9zQSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamSigningKeysListSigningKeys(accountIdentifier: JOh1h9zQSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<JOh1h9zQKeyResponseCollection>> {
            return StreamSigningKeysApiFp(configuration).streamSigningKeysListSigningKeys(accountIdentifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StreamSigningKeysApi - object-oriented interface
 * @export
 * @class StreamSigningKeysApi
 * @extends {BaseAPI}
 */
export class StreamSigningKeysApi extends BaseAPI {
    /**
     * Creates an RSA private key in PEM and JWK formats. Key files are only displayed once after creation. Keys are created, used, and deleted independently of videos, and every key can sign any video.
     * @summary Create signing keys
     * @param {JOh1h9zQSchemasIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamSigningKeysApi
     */
    public async streamSigningKeysCreateSigningKeys(accountIdentifier: JOh1h9zQSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<JOh1h9zQKeyGenerationResponse>> {
        return StreamSigningKeysApiFp(this.configuration).streamSigningKeysCreateSigningKeys(accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes signing keys and revokes all signed URLs generated with the key.
     * @summary Delete signing keys
     * @param {JOh1h9zQSchemasIdentifier} identifier 
     * @param {JOh1h9zQSchemasIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamSigningKeysApi
     */
    public async streamSigningKeysDeleteSigningKeys(identifier: JOh1h9zQSchemasIdentifier, accountIdentifier: JOh1h9zQSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<JOh1h9zQDeletedResponse>> {
        return StreamSigningKeysApiFp(this.configuration).streamSigningKeysDeleteSigningKeys(identifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists the video ID and creation date and time when a signing key was created.
     * @summary List signing keys
     * @param {JOh1h9zQSchemasIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamSigningKeysApi
     */
    public async streamSigningKeysListSigningKeys(accountIdentifier: JOh1h9zQSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<JOh1h9zQKeyResponseCollection>> {
        return StreamSigningKeysApiFp(this.configuration).streamSigningKeysListSigningKeys(accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
}
