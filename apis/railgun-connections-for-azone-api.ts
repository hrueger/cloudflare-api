/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { C4f8RoOSCommonComponentsSchemasIdentifier } from '../models';
import { C4f8RoOSRailgunComponentsSchemasIdentifier2 } from '../models';
import { C4f8RoOSRailgunResponseSingle } from '../models';
import { C4f8RoOSSchemasRailgunResponseCollection } from '../models';
import { C4f8RoOSTestConnectionResponse } from '../models';
import { InlineResponse4xx6 } from '../models';
import { InlineResponse4xx69 } from '../models';
import { InlineResponse4xx70 } from '../models';
import { RailgunsIdentifierBody2 } from '../models';
/**
 * RailgunConnectionsForAZoneApi - axios parameter creator
 * @export
 */
export const RailgunConnectionsForAZoneApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Connect or disconnect a Railgun.
         * @summary Connect or disconnect a Railgun
         * @param {RailgunsIdentifierBody2} body 
         * @param {C4f8RoOSRailgunComponentsSchemasIdentifier2} identifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        railgunConnectionsForAZoneConnectOrDisconnectARailgun: async (body: RailgunsIdentifierBody2, identifier: C4f8RoOSRailgunComponentsSchemasIdentifier2, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling railgunConnectionsForAZoneConnectOrDisconnectARailgun.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling railgunConnectionsForAZoneConnectOrDisconnectARailgun.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling railgunConnectionsForAZoneConnectOrDisconnectARailgun.');
            }
            const localVarPath = `/zones/{zone_identifier}/railguns/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * A list of available Railguns the zone can use.
         * @summary List available Railguns
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        railgunConnectionsForAZoneListAvailableRailguns: async (zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling railgunConnectionsForAZoneListAvailableRailguns.');
            }
            const localVarPath = `/zones/{zone_identifier}/railguns`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists details about a specific Railgun.
         * @summary Railgun details
         * @param {C4f8RoOSRailgunComponentsSchemasIdentifier2} identifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        railgunConnectionsForAZoneRailgunDetails: async (identifier: C4f8RoOSRailgunComponentsSchemasIdentifier2, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling railgunConnectionsForAZoneRailgunDetails.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling railgunConnectionsForAZoneRailgunDetails.');
            }
            const localVarPath = `/zones/{zone_identifier}/railguns/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Tests the Railgun connection to the zone.
         * @summary Test Railgun connection
         * @param {C4f8RoOSRailgunComponentsSchemasIdentifier2} identifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        railgunConnectionsForAZoneTestRailgunConnection: async (identifier: C4f8RoOSRailgunComponentsSchemasIdentifier2, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling railgunConnectionsForAZoneTestRailgunConnection.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling railgunConnectionsForAZoneTestRailgunConnection.');
            }
            const localVarPath = `/zones/{zone_identifier}/railguns/{identifier}/diagnose`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RailgunConnectionsForAZoneApi - functional programming interface
 * @export
 */
export const RailgunConnectionsForAZoneApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Connect or disconnect a Railgun.
         * @summary Connect or disconnect a Railgun
         * @param {RailgunsIdentifierBody2} body 
         * @param {C4f8RoOSRailgunComponentsSchemasIdentifier2} identifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async railgunConnectionsForAZoneConnectOrDisconnectARailgun(body: RailgunsIdentifierBody2, identifier: C4f8RoOSRailgunComponentsSchemasIdentifier2, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<C4f8RoOSRailgunResponseSingle>>> {
            const localVarAxiosArgs = await RailgunConnectionsForAZoneApiAxiosParamCreator(configuration).railgunConnectionsForAZoneConnectOrDisconnectARailgun(body, identifier, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * A list of available Railguns the zone can use.
         * @summary List available Railguns
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async railgunConnectionsForAZoneListAvailableRailguns(zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<C4f8RoOSSchemasRailgunResponseCollection>>> {
            const localVarAxiosArgs = await RailgunConnectionsForAZoneApiAxiosParamCreator(configuration).railgunConnectionsForAZoneListAvailableRailguns(zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Lists details about a specific Railgun.
         * @summary Railgun details
         * @param {C4f8RoOSRailgunComponentsSchemasIdentifier2} identifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async railgunConnectionsForAZoneRailgunDetails(identifier: C4f8RoOSRailgunComponentsSchemasIdentifier2, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<C4f8RoOSRailgunResponseSingle>>> {
            const localVarAxiosArgs = await RailgunConnectionsForAZoneApiAxiosParamCreator(configuration).railgunConnectionsForAZoneRailgunDetails(identifier, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Tests the Railgun connection to the zone.
         * @summary Test Railgun connection
         * @param {C4f8RoOSRailgunComponentsSchemasIdentifier2} identifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async railgunConnectionsForAZoneTestRailgunConnection(identifier: C4f8RoOSRailgunComponentsSchemasIdentifier2, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<C4f8RoOSTestConnectionResponse>>> {
            const localVarAxiosArgs = await RailgunConnectionsForAZoneApiAxiosParamCreator(configuration).railgunConnectionsForAZoneTestRailgunConnection(identifier, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * RailgunConnectionsForAZoneApi - factory interface
 * @export
 */
export const RailgunConnectionsForAZoneApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Connect or disconnect a Railgun.
         * @summary Connect or disconnect a Railgun
         * @param {RailgunsIdentifierBody2} body 
         * @param {C4f8RoOSRailgunComponentsSchemasIdentifier2} identifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async railgunConnectionsForAZoneConnectOrDisconnectARailgun(body: RailgunsIdentifierBody2, identifier: C4f8RoOSRailgunComponentsSchemasIdentifier2, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<C4f8RoOSRailgunResponseSingle>> {
            return RailgunConnectionsForAZoneApiFp(configuration).railgunConnectionsForAZoneConnectOrDisconnectARailgun(body, identifier, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * A list of available Railguns the zone can use.
         * @summary List available Railguns
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async railgunConnectionsForAZoneListAvailableRailguns(zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<C4f8RoOSSchemasRailgunResponseCollection>> {
            return RailgunConnectionsForAZoneApiFp(configuration).railgunConnectionsForAZoneListAvailableRailguns(zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists details about a specific Railgun.
         * @summary Railgun details
         * @param {C4f8RoOSRailgunComponentsSchemasIdentifier2} identifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async railgunConnectionsForAZoneRailgunDetails(identifier: C4f8RoOSRailgunComponentsSchemasIdentifier2, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<C4f8RoOSRailgunResponseSingle>> {
            return RailgunConnectionsForAZoneApiFp(configuration).railgunConnectionsForAZoneRailgunDetails(identifier, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Tests the Railgun connection to the zone.
         * @summary Test Railgun connection
         * @param {C4f8RoOSRailgunComponentsSchemasIdentifier2} identifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async railgunConnectionsForAZoneTestRailgunConnection(identifier: C4f8RoOSRailgunComponentsSchemasIdentifier2, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<C4f8RoOSTestConnectionResponse>> {
            return RailgunConnectionsForAZoneApiFp(configuration).railgunConnectionsForAZoneTestRailgunConnection(identifier, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RailgunConnectionsForAZoneApi - object-oriented interface
 * @export
 * @class RailgunConnectionsForAZoneApi
 * @extends {BaseAPI}
 */
export class RailgunConnectionsForAZoneApi extends BaseAPI {
    /**
     * Connect or disconnect a Railgun.
     * @summary Connect or disconnect a Railgun
     * @param {RailgunsIdentifierBody2} body 
     * @param {C4f8RoOSRailgunComponentsSchemasIdentifier2} identifier 
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RailgunConnectionsForAZoneApi
     */
    public async railgunConnectionsForAZoneConnectOrDisconnectARailgun(body: RailgunsIdentifierBody2, identifier: C4f8RoOSRailgunComponentsSchemasIdentifier2, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<C4f8RoOSRailgunResponseSingle>> {
        return RailgunConnectionsForAZoneApiFp(this.configuration).railgunConnectionsForAZoneConnectOrDisconnectARailgun(body, identifier, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * A list of available Railguns the zone can use.
     * @summary List available Railguns
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RailgunConnectionsForAZoneApi
     */
    public async railgunConnectionsForAZoneListAvailableRailguns(zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<C4f8RoOSSchemasRailgunResponseCollection>> {
        return RailgunConnectionsForAZoneApiFp(this.configuration).railgunConnectionsForAZoneListAvailableRailguns(zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists details about a specific Railgun.
     * @summary Railgun details
     * @param {C4f8RoOSRailgunComponentsSchemasIdentifier2} identifier 
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RailgunConnectionsForAZoneApi
     */
    public async railgunConnectionsForAZoneRailgunDetails(identifier: C4f8RoOSRailgunComponentsSchemasIdentifier2, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<C4f8RoOSRailgunResponseSingle>> {
        return RailgunConnectionsForAZoneApiFp(this.configuration).railgunConnectionsForAZoneRailgunDetails(identifier, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Tests the Railgun connection to the zone.
     * @summary Test Railgun connection
     * @param {C4f8RoOSRailgunComponentsSchemasIdentifier2} identifier 
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RailgunConnectionsForAZoneApi
     */
    public async railgunConnectionsForAZoneTestRailgunConnection(identifier: C4f8RoOSRailgunComponentsSchemasIdentifier2, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<C4f8RoOSTestConnectionResponse>> {
        return RailgunConnectionsForAZoneApiFp(this.configuration).railgunConnectionsForAZoneTestRailgunConnection(identifier, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
}
