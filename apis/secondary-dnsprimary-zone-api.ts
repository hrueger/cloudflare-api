/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse4XX276 } from '../models';
import { InlineResponse4XX277 } from '../models';
import { InlineResponse4XX278 } from '../models';
import { InlineResponse4XX279 } from '../models';
import { InlineResponse4XX280 } from '../models';
import { Model2UOufITZDisableTransferResponse } from '../models';
import { Model2UOufITZEnableTransferResponse } from '../models';
import { Model2UOufITZIdResponse } from '../models';
import { Model2UOufITZIdentifier } from '../models';
import { Model2UOufITZSchemasForceResponse } from '../models';
import { Model2UOufITZSingleRequestOutgoing } from '../models';
import { Model2UOufITZSingleResponseOutgoing } from '../models';
/**
 * SecondaryDNSPrimaryZoneApi - axios parameter creator
 * @export
 */
export const SecondaryDNSPrimaryZoneApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create primary zone configuration for outgoing zone transfers.
         * @summary Create Primary Zone Configuration
         * @param {Model2UOufITZSingleRequestOutgoing} body 
         * @param {Model2UOufITZIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secondaryDnsPrimaryZoneCreatePrimaryZoneConfiguration: async (body: Model2UOufITZSingleRequestOutgoing, zoneIdentifier: Model2UOufITZIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling secondaryDnsPrimaryZoneCreatePrimaryZoneConfiguration.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling secondaryDnsPrimaryZoneCreatePrimaryZoneConfiguration.');
            }
            const localVarPath = `/zones/{zone_identifier}/secondary_dns/outgoing`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete primary zone configuration for outgoing zone transfers.
         * @summary Delete Primary Zone Configuration
         * @param {Model2UOufITZIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secondaryDnsPrimaryZoneDeletePrimaryZoneConfiguration: async (zoneIdentifier: Model2UOufITZIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling secondaryDnsPrimaryZoneDeletePrimaryZoneConfiguration.');
            }
            const localVarPath = `/zones/{zone_identifier}/secondary_dns/outgoing`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Disable outgoing zone transfers for primary zone and clears IXFR backlog of primary zone.
         * @summary Disable Outgoing Zone Transfers
         * @param {Model2UOufITZIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secondaryDnsPrimaryZoneDisableOutgoingZoneTransfers: async (zoneIdentifier: Model2UOufITZIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling secondaryDnsPrimaryZoneDisableOutgoingZoneTransfers.');
            }
            const localVarPath = `/zones/{zone_identifier}/secondary_dns/outgoing/disable`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Enable outgoing zone transfers for primary zone.
         * @summary Enable Outgoing Zone Transfers
         * @param {Model2UOufITZIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secondaryDnsPrimaryZoneEnableOutgoingZoneTransfers: async (zoneIdentifier: Model2UOufITZIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling secondaryDnsPrimaryZoneEnableOutgoingZoneTransfers.');
            }
            const localVarPath = `/zones/{zone_identifier}/secondary_dns/outgoing/enable`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Notifies the secondary nameserver(s) and clears IXFR backlog of primary zone.
         * @summary Force DNS NOTIFY
         * @param {Model2UOufITZIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secondaryDnsPrimaryZoneForceDnsNotify: async (zoneIdentifier: Model2UOufITZIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling secondaryDnsPrimaryZoneForceDnsNotify.');
            }
            const localVarPath = `/zones/{zone_identifier}/secondary_dns/outgoing/force_notify`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get primary zone transfer status.
         * @summary Get Outgoing Zone Transfer Status
         * @param {Model2UOufITZIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secondaryDnsPrimaryZoneGetOutgoingZoneTransferStatus: async (zoneIdentifier: Model2UOufITZIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling secondaryDnsPrimaryZoneGetOutgoingZoneTransferStatus.');
            }
            const localVarPath = `/zones/{zone_identifier}/secondary_dns/outgoing/status`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get primary zone configuration for outgoing zone transfers.
         * @summary Primary Zone Configuration Details
         * @param {Model2UOufITZIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secondaryDnsPrimaryZonePrimaryZoneConfigurationDetails: async (zoneIdentifier: Model2UOufITZIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling secondaryDnsPrimaryZonePrimaryZoneConfigurationDetails.');
            }
            const localVarPath = `/zones/{zone_identifier}/secondary_dns/outgoing`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update primary zone configuration for outgoing zone transfers.
         * @summary Update Primary Zone Configuration
         * @param {Model2UOufITZSingleRequestOutgoing} body 
         * @param {Model2UOufITZIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secondaryDnsPrimaryZoneUpdatePrimaryZoneConfiguration: async (body: Model2UOufITZSingleRequestOutgoing, zoneIdentifier: Model2UOufITZIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling secondaryDnsPrimaryZoneUpdatePrimaryZoneConfiguration.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling secondaryDnsPrimaryZoneUpdatePrimaryZoneConfiguration.');
            }
            const localVarPath = `/zones/{zone_identifier}/secondary_dns/outgoing`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SecondaryDNSPrimaryZoneApi - functional programming interface
 * @export
 */
export const SecondaryDNSPrimaryZoneApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create primary zone configuration for outgoing zone transfers.
         * @summary Create Primary Zone Configuration
         * @param {Model2UOufITZSingleRequestOutgoing} body 
         * @param {Model2UOufITZIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secondaryDnsPrimaryZoneCreatePrimaryZoneConfiguration(body: Model2UOufITZSingleRequestOutgoing, zoneIdentifier: Model2UOufITZIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model2UOufITZSingleResponseOutgoing>>> {
            const localVarAxiosArgs = await SecondaryDNSPrimaryZoneApiAxiosParamCreator(configuration).secondaryDnsPrimaryZoneCreatePrimaryZoneConfiguration(body, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete primary zone configuration for outgoing zone transfers.
         * @summary Delete Primary Zone Configuration
         * @param {Model2UOufITZIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secondaryDnsPrimaryZoneDeletePrimaryZoneConfiguration(zoneIdentifier: Model2UOufITZIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model2UOufITZIdResponse>>> {
            const localVarAxiosArgs = await SecondaryDNSPrimaryZoneApiAxiosParamCreator(configuration).secondaryDnsPrimaryZoneDeletePrimaryZoneConfiguration(zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Disable outgoing zone transfers for primary zone and clears IXFR backlog of primary zone.
         * @summary Disable Outgoing Zone Transfers
         * @param {Model2UOufITZIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secondaryDnsPrimaryZoneDisableOutgoingZoneTransfers(zoneIdentifier: Model2UOufITZIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model2UOufITZDisableTransferResponse>>> {
            const localVarAxiosArgs = await SecondaryDNSPrimaryZoneApiAxiosParamCreator(configuration).secondaryDnsPrimaryZoneDisableOutgoingZoneTransfers(zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Enable outgoing zone transfers for primary zone.
         * @summary Enable Outgoing Zone Transfers
         * @param {Model2UOufITZIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secondaryDnsPrimaryZoneEnableOutgoingZoneTransfers(zoneIdentifier: Model2UOufITZIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model2UOufITZEnableTransferResponse>>> {
            const localVarAxiosArgs = await SecondaryDNSPrimaryZoneApiAxiosParamCreator(configuration).secondaryDnsPrimaryZoneEnableOutgoingZoneTransfers(zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Notifies the secondary nameserver(s) and clears IXFR backlog of primary zone.
         * @summary Force DNS NOTIFY
         * @param {Model2UOufITZIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secondaryDnsPrimaryZoneForceDnsNotify(zoneIdentifier: Model2UOufITZIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model2UOufITZSchemasForceResponse>>> {
            const localVarAxiosArgs = await SecondaryDNSPrimaryZoneApiAxiosParamCreator(configuration).secondaryDnsPrimaryZoneForceDnsNotify(zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get primary zone transfer status.
         * @summary Get Outgoing Zone Transfer Status
         * @param {Model2UOufITZIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secondaryDnsPrimaryZoneGetOutgoingZoneTransferStatus(zoneIdentifier: Model2UOufITZIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model2UOufITZEnableTransferResponse>>> {
            const localVarAxiosArgs = await SecondaryDNSPrimaryZoneApiAxiosParamCreator(configuration).secondaryDnsPrimaryZoneGetOutgoingZoneTransferStatus(zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get primary zone configuration for outgoing zone transfers.
         * @summary Primary Zone Configuration Details
         * @param {Model2UOufITZIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secondaryDnsPrimaryZonePrimaryZoneConfigurationDetails(zoneIdentifier: Model2UOufITZIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model2UOufITZSingleResponseOutgoing>>> {
            const localVarAxiosArgs = await SecondaryDNSPrimaryZoneApiAxiosParamCreator(configuration).secondaryDnsPrimaryZonePrimaryZoneConfigurationDetails(zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update primary zone configuration for outgoing zone transfers.
         * @summary Update Primary Zone Configuration
         * @param {Model2UOufITZSingleRequestOutgoing} body 
         * @param {Model2UOufITZIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secondaryDnsPrimaryZoneUpdatePrimaryZoneConfiguration(body: Model2UOufITZSingleRequestOutgoing, zoneIdentifier: Model2UOufITZIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model2UOufITZSingleResponseOutgoing>>> {
            const localVarAxiosArgs = await SecondaryDNSPrimaryZoneApiAxiosParamCreator(configuration).secondaryDnsPrimaryZoneUpdatePrimaryZoneConfiguration(body, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SecondaryDNSPrimaryZoneApi - factory interface
 * @export
 */
export const SecondaryDNSPrimaryZoneApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create primary zone configuration for outgoing zone transfers.
         * @summary Create Primary Zone Configuration
         * @param {Model2UOufITZSingleRequestOutgoing} body 
         * @param {Model2UOufITZIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secondaryDnsPrimaryZoneCreatePrimaryZoneConfiguration(body: Model2UOufITZSingleRequestOutgoing, zoneIdentifier: Model2UOufITZIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model2UOufITZSingleResponseOutgoing>> {
            return SecondaryDNSPrimaryZoneApiFp(configuration).secondaryDnsPrimaryZoneCreatePrimaryZoneConfiguration(body, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete primary zone configuration for outgoing zone transfers.
         * @summary Delete Primary Zone Configuration
         * @param {Model2UOufITZIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secondaryDnsPrimaryZoneDeletePrimaryZoneConfiguration(zoneIdentifier: Model2UOufITZIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model2UOufITZIdResponse>> {
            return SecondaryDNSPrimaryZoneApiFp(configuration).secondaryDnsPrimaryZoneDeletePrimaryZoneConfiguration(zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Disable outgoing zone transfers for primary zone and clears IXFR backlog of primary zone.
         * @summary Disable Outgoing Zone Transfers
         * @param {Model2UOufITZIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secondaryDnsPrimaryZoneDisableOutgoingZoneTransfers(zoneIdentifier: Model2UOufITZIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model2UOufITZDisableTransferResponse>> {
            return SecondaryDNSPrimaryZoneApiFp(configuration).secondaryDnsPrimaryZoneDisableOutgoingZoneTransfers(zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Enable outgoing zone transfers for primary zone.
         * @summary Enable Outgoing Zone Transfers
         * @param {Model2UOufITZIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secondaryDnsPrimaryZoneEnableOutgoingZoneTransfers(zoneIdentifier: Model2UOufITZIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model2UOufITZEnableTransferResponse>> {
            return SecondaryDNSPrimaryZoneApiFp(configuration).secondaryDnsPrimaryZoneEnableOutgoingZoneTransfers(zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Notifies the secondary nameserver(s) and clears IXFR backlog of primary zone.
         * @summary Force DNS NOTIFY
         * @param {Model2UOufITZIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secondaryDnsPrimaryZoneForceDnsNotify(zoneIdentifier: Model2UOufITZIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model2UOufITZSchemasForceResponse>> {
            return SecondaryDNSPrimaryZoneApiFp(configuration).secondaryDnsPrimaryZoneForceDnsNotify(zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Get primary zone transfer status.
         * @summary Get Outgoing Zone Transfer Status
         * @param {Model2UOufITZIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secondaryDnsPrimaryZoneGetOutgoingZoneTransferStatus(zoneIdentifier: Model2UOufITZIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model2UOufITZEnableTransferResponse>> {
            return SecondaryDNSPrimaryZoneApiFp(configuration).secondaryDnsPrimaryZoneGetOutgoingZoneTransferStatus(zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Get primary zone configuration for outgoing zone transfers.
         * @summary Primary Zone Configuration Details
         * @param {Model2UOufITZIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secondaryDnsPrimaryZonePrimaryZoneConfigurationDetails(zoneIdentifier: Model2UOufITZIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model2UOufITZSingleResponseOutgoing>> {
            return SecondaryDNSPrimaryZoneApiFp(configuration).secondaryDnsPrimaryZonePrimaryZoneConfigurationDetails(zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Update primary zone configuration for outgoing zone transfers.
         * @summary Update Primary Zone Configuration
         * @param {Model2UOufITZSingleRequestOutgoing} body 
         * @param {Model2UOufITZIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secondaryDnsPrimaryZoneUpdatePrimaryZoneConfiguration(body: Model2UOufITZSingleRequestOutgoing, zoneIdentifier: Model2UOufITZIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model2UOufITZSingleResponseOutgoing>> {
            return SecondaryDNSPrimaryZoneApiFp(configuration).secondaryDnsPrimaryZoneUpdatePrimaryZoneConfiguration(body, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SecondaryDNSPrimaryZoneApi - object-oriented interface
 * @export
 * @class SecondaryDNSPrimaryZoneApi
 * @extends {BaseAPI}
 */
export class SecondaryDNSPrimaryZoneApi extends BaseAPI {
    /**
     * Create primary zone configuration for outgoing zone transfers.
     * @summary Create Primary Zone Configuration
     * @param {Model2UOufITZSingleRequestOutgoing} body 
     * @param {Model2UOufITZIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecondaryDNSPrimaryZoneApi
     */
    public async secondaryDnsPrimaryZoneCreatePrimaryZoneConfiguration(body: Model2UOufITZSingleRequestOutgoing, zoneIdentifier: Model2UOufITZIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model2UOufITZSingleResponseOutgoing>> {
        return SecondaryDNSPrimaryZoneApiFp(this.configuration).secondaryDnsPrimaryZoneCreatePrimaryZoneConfiguration(body, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete primary zone configuration for outgoing zone transfers.
     * @summary Delete Primary Zone Configuration
     * @param {Model2UOufITZIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecondaryDNSPrimaryZoneApi
     */
    public async secondaryDnsPrimaryZoneDeletePrimaryZoneConfiguration(zoneIdentifier: Model2UOufITZIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model2UOufITZIdResponse>> {
        return SecondaryDNSPrimaryZoneApiFp(this.configuration).secondaryDnsPrimaryZoneDeletePrimaryZoneConfiguration(zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Disable outgoing zone transfers for primary zone and clears IXFR backlog of primary zone.
     * @summary Disable Outgoing Zone Transfers
     * @param {Model2UOufITZIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecondaryDNSPrimaryZoneApi
     */
    public async secondaryDnsPrimaryZoneDisableOutgoingZoneTransfers(zoneIdentifier: Model2UOufITZIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model2UOufITZDisableTransferResponse>> {
        return SecondaryDNSPrimaryZoneApiFp(this.configuration).secondaryDnsPrimaryZoneDisableOutgoingZoneTransfers(zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Enable outgoing zone transfers for primary zone.
     * @summary Enable Outgoing Zone Transfers
     * @param {Model2UOufITZIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecondaryDNSPrimaryZoneApi
     */
    public async secondaryDnsPrimaryZoneEnableOutgoingZoneTransfers(zoneIdentifier: Model2UOufITZIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model2UOufITZEnableTransferResponse>> {
        return SecondaryDNSPrimaryZoneApiFp(this.configuration).secondaryDnsPrimaryZoneEnableOutgoingZoneTransfers(zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Notifies the secondary nameserver(s) and clears IXFR backlog of primary zone.
     * @summary Force DNS NOTIFY
     * @param {Model2UOufITZIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecondaryDNSPrimaryZoneApi
     */
    public async secondaryDnsPrimaryZoneForceDnsNotify(zoneIdentifier: Model2UOufITZIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model2UOufITZSchemasForceResponse>> {
        return SecondaryDNSPrimaryZoneApiFp(this.configuration).secondaryDnsPrimaryZoneForceDnsNotify(zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get primary zone transfer status.
     * @summary Get Outgoing Zone Transfer Status
     * @param {Model2UOufITZIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecondaryDNSPrimaryZoneApi
     */
    public async secondaryDnsPrimaryZoneGetOutgoingZoneTransferStatus(zoneIdentifier: Model2UOufITZIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model2UOufITZEnableTransferResponse>> {
        return SecondaryDNSPrimaryZoneApiFp(this.configuration).secondaryDnsPrimaryZoneGetOutgoingZoneTransferStatus(zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get primary zone configuration for outgoing zone transfers.
     * @summary Primary Zone Configuration Details
     * @param {Model2UOufITZIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecondaryDNSPrimaryZoneApi
     */
    public async secondaryDnsPrimaryZonePrimaryZoneConfigurationDetails(zoneIdentifier: Model2UOufITZIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model2UOufITZSingleResponseOutgoing>> {
        return SecondaryDNSPrimaryZoneApiFp(this.configuration).secondaryDnsPrimaryZonePrimaryZoneConfigurationDetails(zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update primary zone configuration for outgoing zone transfers.
     * @summary Update Primary Zone Configuration
     * @param {Model2UOufITZSingleRequestOutgoing} body 
     * @param {Model2UOufITZIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecondaryDNSPrimaryZoneApi
     */
    public async secondaryDnsPrimaryZoneUpdatePrimaryZoneConfiguration(body: Model2UOufITZSingleRequestOutgoing, zoneIdentifier: Model2UOufITZIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model2UOufITZSingleResponseOutgoing>> {
        return SecondaryDNSPrimaryZoneApiFp(this.configuration).secondaryDnsPrimaryZoneUpdatePrimaryZoneConfiguration(body, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
}
