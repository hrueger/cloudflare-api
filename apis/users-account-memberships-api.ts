/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse200172 } from '../models';
import { InlineResponse4XX303 } from '../models';
import { InlineResponse4XX304 } from '../models';
import { InlineResponse4XX305 } from '../models';
import { MembershipsIdentifierBody } from '../models';
import { Model6KaSmMdRCollectionMembershipResponse } from '../models';
import { Model6KaSmMdRMembershipComponentsSchemasIdentifier } from '../models';
import { Model6KaSmMdRPropertiesName } from '../models';
import { Model6KaSmMdRSingleMembershipResponse } from '../models';
/**
 * UsersAccountMembershipsApi - axios parameter creator
 * @export
 */
export const UsersAccountMembershipsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Remove the associated member from an account.
         * @summary Delete Membership
         * @param {Model6KaSmMdRMembershipComponentsSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userSAccountMembershipsDeleteMembership: async (identifier: Model6KaSmMdRMembershipComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling userSAccountMembershipsDeleteMembership.');
            }
            const localVarPath = `/memberships/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List memberships of accounts the user can access.
         * @summary List Memberships
         * @param {Model6KaSmMdRPropertiesName} [accountName] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {string} [order] 
         * @param {string} [direction] 
         * @param {Model6KaSmMdRPropertiesName} [name] 
         * @param {string} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userSAccountMembershipsListMemberships: async (accountName?: Model6KaSmMdRPropertiesName, page?: number, perPage?: number, order?: string, direction?: string, name?: Model6KaSmMdRPropertiesName, status?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/memberships`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            if (accountName !== undefined) {
                localVarQueryParameter['account.name'] = accountName;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific membership.
         * @summary Membership Details
         * @param {Model6KaSmMdRMembershipComponentsSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userSAccountMembershipsMembershipDetails: async (identifier: Model6KaSmMdRMembershipComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling userSAccountMembershipsMembershipDetails.');
            }
            const localVarPath = `/memberships/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Accept or reject this account invitation.
         * @summary Update Membership
         * @param {MembershipsIdentifierBody} body 
         * @param {Model6KaSmMdRMembershipComponentsSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userSAccountMembershipsUpdateMembership: async (body: MembershipsIdentifierBody, identifier: Model6KaSmMdRMembershipComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling userSAccountMembershipsUpdateMembership.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling userSAccountMembershipsUpdateMembership.');
            }
            const localVarPath = `/memberships/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersAccountMembershipsApi - functional programming interface
 * @export
 */
export const UsersAccountMembershipsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Remove the associated member from an account.
         * @summary Delete Membership
         * @param {Model6KaSmMdRMembershipComponentsSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userSAccountMembershipsDeleteMembership(identifier: Model6KaSmMdRMembershipComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200172>>> {
            const localVarAxiosArgs = await UsersAccountMembershipsApiAxiosParamCreator(configuration).userSAccountMembershipsDeleteMembership(identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List memberships of accounts the user can access.
         * @summary List Memberships
         * @param {Model6KaSmMdRPropertiesName} [accountName] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {string} [order] 
         * @param {string} [direction] 
         * @param {Model6KaSmMdRPropertiesName} [name] 
         * @param {string} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userSAccountMembershipsListMemberships(accountName?: Model6KaSmMdRPropertiesName, page?: number, perPage?: number, order?: string, direction?: string, name?: Model6KaSmMdRPropertiesName, status?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model6KaSmMdRCollectionMembershipResponse>>> {
            const localVarAxiosArgs = await UsersAccountMembershipsApiAxiosParamCreator(configuration).userSAccountMembershipsListMemberships(accountName, page, perPage, order, direction, name, status, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a specific membership.
         * @summary Membership Details
         * @param {Model6KaSmMdRMembershipComponentsSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userSAccountMembershipsMembershipDetails(identifier: Model6KaSmMdRMembershipComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model6KaSmMdRSingleMembershipResponse>>> {
            const localVarAxiosArgs = await UsersAccountMembershipsApiAxiosParamCreator(configuration).userSAccountMembershipsMembershipDetails(identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Accept or reject this account invitation.
         * @summary Update Membership
         * @param {MembershipsIdentifierBody} body 
         * @param {Model6KaSmMdRMembershipComponentsSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userSAccountMembershipsUpdateMembership(body: MembershipsIdentifierBody, identifier: Model6KaSmMdRMembershipComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model6KaSmMdRSingleMembershipResponse>>> {
            const localVarAxiosArgs = await UsersAccountMembershipsApiAxiosParamCreator(configuration).userSAccountMembershipsUpdateMembership(body, identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UsersAccountMembershipsApi - factory interface
 * @export
 */
export const UsersAccountMembershipsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Remove the associated member from an account.
         * @summary Delete Membership
         * @param {Model6KaSmMdRMembershipComponentsSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userSAccountMembershipsDeleteMembership(identifier: Model6KaSmMdRMembershipComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200172>> {
            return UsersAccountMembershipsApiFp(configuration).userSAccountMembershipsDeleteMembership(identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * List memberships of accounts the user can access.
         * @summary List Memberships
         * @param {Model6KaSmMdRPropertiesName} [accountName] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {string} [order] 
         * @param {string} [direction] 
         * @param {Model6KaSmMdRPropertiesName} [name] 
         * @param {string} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userSAccountMembershipsListMemberships(accountName?: Model6KaSmMdRPropertiesName, page?: number, perPage?: number, order?: string, direction?: string, name?: Model6KaSmMdRPropertiesName, status?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Model6KaSmMdRCollectionMembershipResponse>> {
            return UsersAccountMembershipsApiFp(configuration).userSAccountMembershipsListMemberships(accountName, page, perPage, order, direction, name, status, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a specific membership.
         * @summary Membership Details
         * @param {Model6KaSmMdRMembershipComponentsSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userSAccountMembershipsMembershipDetails(identifier: Model6KaSmMdRMembershipComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model6KaSmMdRSingleMembershipResponse>> {
            return UsersAccountMembershipsApiFp(configuration).userSAccountMembershipsMembershipDetails(identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Accept or reject this account invitation.
         * @summary Update Membership
         * @param {MembershipsIdentifierBody} body 
         * @param {Model6KaSmMdRMembershipComponentsSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userSAccountMembershipsUpdateMembership(body: MembershipsIdentifierBody, identifier: Model6KaSmMdRMembershipComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model6KaSmMdRSingleMembershipResponse>> {
            return UsersAccountMembershipsApiFp(configuration).userSAccountMembershipsUpdateMembership(body, identifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersAccountMembershipsApi - object-oriented interface
 * @export
 * @class UsersAccountMembershipsApi
 * @extends {BaseAPI}
 */
export class UsersAccountMembershipsApi extends BaseAPI {
    /**
     * Remove the associated member from an account.
     * @summary Delete Membership
     * @param {Model6KaSmMdRMembershipComponentsSchemasIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersAccountMembershipsApi
     */
    public async userSAccountMembershipsDeleteMembership(identifier: Model6KaSmMdRMembershipComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200172>> {
        return UsersAccountMembershipsApiFp(this.configuration).userSAccountMembershipsDeleteMembership(identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List memberships of accounts the user can access.
     * @summary List Memberships
     * @param {Model6KaSmMdRPropertiesName} [accountName] 
     * @param {number} [page] 
     * @param {number} [perPage] 
     * @param {string} [order] 
     * @param {string} [direction] 
     * @param {Model6KaSmMdRPropertiesName} [name] 
     * @param {string} [status] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersAccountMembershipsApi
     */
    public async userSAccountMembershipsListMemberships(accountName?: Model6KaSmMdRPropertiesName, page?: number, perPage?: number, order?: string, direction?: string, name?: Model6KaSmMdRPropertiesName, status?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model6KaSmMdRCollectionMembershipResponse>> {
        return UsersAccountMembershipsApiFp(this.configuration).userSAccountMembershipsListMemberships(accountName, page, perPage, order, direction, name, status, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a specific membership.
     * @summary Membership Details
     * @param {Model6KaSmMdRMembershipComponentsSchemasIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersAccountMembershipsApi
     */
    public async userSAccountMembershipsMembershipDetails(identifier: Model6KaSmMdRMembershipComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model6KaSmMdRSingleMembershipResponse>> {
        return UsersAccountMembershipsApiFp(this.configuration).userSAccountMembershipsMembershipDetails(identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Accept or reject this account invitation.
     * @summary Update Membership
     * @param {MembershipsIdentifierBody} body 
     * @param {Model6KaSmMdRMembershipComponentsSchemasIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersAccountMembershipsApi
     */
    public async userSAccountMembershipsUpdateMembership(body: MembershipsIdentifierBody, identifier: Model6KaSmMdRMembershipComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model6KaSmMdRSingleMembershipResponse>> {
        return UsersAccountMembershipsApiFp(this.configuration).userSAccountMembershipsUpdateMembership(body, identifier, options).then((request) => request(this.axios, this.basePath));
    }
}
