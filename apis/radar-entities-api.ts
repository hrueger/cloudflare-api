/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse200120 } from '../models';
import { InlineResponse200121 } from '../models';
import { InlineResponse200122 } from '../models';
import { InlineResponse200123 } from '../models';
import { InlineResponse200124 } from '../models';
import { InlineResponse200125 } from '../models';
import { InlineResponse200126 } from '../models';
import { InlineResponse400 } from '../models';
import { InlineResponse404 } from '../models';
/**
 * RadarEntitiesApi - axios parameter creator
 * @export
 */
export const RadarEntitiesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get AS-level relationship for given networks.
         * @summary Get AS-level relationships by AS number
         * @param {number} asn 
         * @param {number} [asn2] 
         * @param {string} [format] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        radarGetAsnsRel: async (asn: number, asn2?: number, format?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'asn' is not null or undefined
            if (asn === null || asn === undefined) {
                throw new RequiredError('asn','Required parameter asn was null or undefined when calling radarGetAsnsRel.');
            }
            const localVarPath = `/radar/entities/asns/{asn}/rel`
                .replace(`{${"asn"}}`, encodeURIComponent(String(asn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            if (asn2 !== undefined) {
                localVarQueryParameter['asn2'] = asn2;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the requested autonomous system information. A confidence level below `5` indicates a low level of confidence in the traffic data - normally this happens because Cloudflare has a small amount of traffic from/to this AS). Population estimates come from APNIC (refer to https://labs.apnic.net/?p=526).
         * @summary Get autonomous system information by AS number
         * @param {number} asn 
         * @param {string} [format] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        radarGetEntitiesAsnById: async (asn: number, format?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'asn' is not null or undefined
            if (asn === null || asn === undefined) {
                throw new RequiredError('asn','Required parameter asn was null or undefined when calling radarGetEntitiesAsnById.');
            }
            const localVarPath = `/radar/entities/asns/{asn}`
                .replace(`{${"asn"}}`, encodeURIComponent(String(asn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the requested autonomous system information based on IP address. Population estimates come from APNIC (refer to https://labs.apnic.net/?p=526).
         * @summary Get autonomous system information by IP address
         * @param {string} ip 
         * @param {string} [format] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        radarGetEntitiesAsnByIp: async (ip: string, format?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ip' is not null or undefined
            if (ip === null || ip === undefined) {
                throw new RequiredError('ip','Required parameter ip was null or undefined when calling radarGetEntitiesAsnByIp.');
            }
            const localVarPath = `/radar/entities/asns/ip`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            if (ip !== undefined) {
                localVarQueryParameter['ip'] = ip;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a list of autonomous systems (AS).
         * @summary Get autonomous systems
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [asn] 
         * @param {string} [location] 
         * @param {string} [orderBy] 
         * @param {string} [format] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        radarGetEntitiesAsnList: async (limit?: number, offset?: number, asn?: string, location?: string, orderBy?: string, format?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/radar/entities/asns`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (asn !== undefined) {
                localVarQueryParameter['asn'] = asn;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get IP address information. 
         * @summary Get IP address
         * @param {string} ip 
         * @param {string} [format] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        radarGetEntitiesIp: async (ip: string, format?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ip' is not null or undefined
            if (ip === null || ip === undefined) {
                throw new RequiredError('ip','Required parameter ip was null or undefined when calling radarGetEntitiesIp.');
            }
            const localVarPath = `/radar/entities/ip`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            if (ip !== undefined) {
                localVarQueryParameter['ip'] = ip;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the requested location information. A confidence level below `5` indicates a low level of confidence in the traffic data - normally this happens because Cloudflare has a small amount of traffic from/to this location).
         * @summary Get location
         * @param {string} location 
         * @param {string} [format] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        radarGetEntitiesLocationByAlpha2: async (location: string, format?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'location' is not null or undefined
            if (location === null || location === undefined) {
                throw new RequiredError('location','Required parameter location was null or undefined when calling radarGetEntitiesLocationByAlpha2.');
            }
            const localVarPath = `/radar/entities/locations/{location}`
                .replace(`{${"location"}}`, encodeURIComponent(String(location)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of locations.
         * @summary Get locations
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [location] 
         * @param {string} [format] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        radarGetEntitiesLocations: async (limit?: number, offset?: number, location?: string, format?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/radar/entities/locations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RadarEntitiesApi - functional programming interface
 * @export
 */
export const RadarEntitiesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get AS-level relationship for given networks.
         * @summary Get AS-level relationships by AS number
         * @param {number} asn 
         * @param {number} [asn2] 
         * @param {string} [format] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async radarGetAsnsRel(asn: number, asn2?: number, format?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200123>>> {
            const localVarAxiosArgs = await RadarEntitiesApiAxiosParamCreator(configuration).radarGetAsnsRel(asn, asn2, format, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the requested autonomous system information. A confidence level below `5` indicates a low level of confidence in the traffic data - normally this happens because Cloudflare has a small amount of traffic from/to this AS). Population estimates come from APNIC (refer to https://labs.apnic.net/?p=526).
         * @summary Get autonomous system information by AS number
         * @param {number} asn 
         * @param {string} [format] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async radarGetEntitiesAsnById(asn: number, format?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200122>>> {
            const localVarAxiosArgs = await RadarEntitiesApiAxiosParamCreator(configuration).radarGetEntitiesAsnById(asn, format, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the requested autonomous system information based on IP address. Population estimates come from APNIC (refer to https://labs.apnic.net/?p=526).
         * @summary Get autonomous system information by IP address
         * @param {string} ip 
         * @param {string} [format] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async radarGetEntitiesAsnByIp(ip: string, format?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200121>>> {
            const localVarAxiosArgs = await RadarEntitiesApiAxiosParamCreator(configuration).radarGetEntitiesAsnByIp(ip, format, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets a list of autonomous systems (AS).
         * @summary Get autonomous systems
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [asn] 
         * @param {string} [location] 
         * @param {string} [orderBy] 
         * @param {string} [format] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async radarGetEntitiesAsnList(limit?: number, offset?: number, asn?: string, location?: string, orderBy?: string, format?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200120>>> {
            const localVarAxiosArgs = await RadarEntitiesApiAxiosParamCreator(configuration).radarGetEntitiesAsnList(limit, offset, asn, location, orderBy, format, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get IP address information. 
         * @summary Get IP address
         * @param {string} ip 
         * @param {string} [format] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async radarGetEntitiesIp(ip: string, format?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200124>>> {
            const localVarAxiosArgs = await RadarEntitiesApiAxiosParamCreator(configuration).radarGetEntitiesIp(ip, format, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the requested location information. A confidence level below `5` indicates a low level of confidence in the traffic data - normally this happens because Cloudflare has a small amount of traffic from/to this location).
         * @summary Get location
         * @param {string} location 
         * @param {string} [format] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async radarGetEntitiesLocationByAlpha2(location: string, format?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200126>>> {
            const localVarAxiosArgs = await RadarEntitiesApiAxiosParamCreator(configuration).radarGetEntitiesLocationByAlpha2(location, format, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a list of locations.
         * @summary Get locations
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [location] 
         * @param {string} [format] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async radarGetEntitiesLocations(limit?: number, offset?: number, location?: string, format?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200125>>> {
            const localVarAxiosArgs = await RadarEntitiesApiAxiosParamCreator(configuration).radarGetEntitiesLocations(limit, offset, location, format, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * RadarEntitiesApi - factory interface
 * @export
 */
export const RadarEntitiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Get AS-level relationship for given networks.
         * @summary Get AS-level relationships by AS number
         * @param {number} asn 
         * @param {number} [asn2] 
         * @param {string} [format] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async radarGetAsnsRel(asn: number, asn2?: number, format?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200123>> {
            return RadarEntitiesApiFp(configuration).radarGetAsnsRel(asn, asn2, format, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the requested autonomous system information. A confidence level below `5` indicates a low level of confidence in the traffic data - normally this happens because Cloudflare has a small amount of traffic from/to this AS). Population estimates come from APNIC (refer to https://labs.apnic.net/?p=526).
         * @summary Get autonomous system information by AS number
         * @param {number} asn 
         * @param {string} [format] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async radarGetEntitiesAsnById(asn: number, format?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200122>> {
            return RadarEntitiesApiFp(configuration).radarGetEntitiesAsnById(asn, format, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the requested autonomous system information based on IP address. Population estimates come from APNIC (refer to https://labs.apnic.net/?p=526).
         * @summary Get autonomous system information by IP address
         * @param {string} ip 
         * @param {string} [format] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async radarGetEntitiesAsnByIp(ip: string, format?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200121>> {
            return RadarEntitiesApiFp(configuration).radarGetEntitiesAsnByIp(ip, format, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a list of autonomous systems (AS).
         * @summary Get autonomous systems
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [asn] 
         * @param {string} [location] 
         * @param {string} [orderBy] 
         * @param {string} [format] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async radarGetEntitiesAsnList(limit?: number, offset?: number, asn?: string, location?: string, orderBy?: string, format?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200120>> {
            return RadarEntitiesApiFp(configuration).radarGetEntitiesAsnList(limit, offset, asn, location, orderBy, format, options).then((request) => request(axios, basePath));
        },
        /**
         * Get IP address information. 
         * @summary Get IP address
         * @param {string} ip 
         * @param {string} [format] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async radarGetEntitiesIp(ip: string, format?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200124>> {
            return RadarEntitiesApiFp(configuration).radarGetEntitiesIp(ip, format, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the requested location information. A confidence level below `5` indicates a low level of confidence in the traffic data - normally this happens because Cloudflare has a small amount of traffic from/to this location).
         * @summary Get location
         * @param {string} location 
         * @param {string} [format] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async radarGetEntitiesLocationByAlpha2(location: string, format?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200126>> {
            return RadarEntitiesApiFp(configuration).radarGetEntitiesLocationByAlpha2(location, format, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of locations.
         * @summary Get locations
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [location] 
         * @param {string} [format] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async radarGetEntitiesLocations(limit?: number, offset?: number, location?: string, format?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200125>> {
            return RadarEntitiesApiFp(configuration).radarGetEntitiesLocations(limit, offset, location, format, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RadarEntitiesApi - object-oriented interface
 * @export
 * @class RadarEntitiesApi
 * @extends {BaseAPI}
 */
export class RadarEntitiesApi extends BaseAPI {
    /**
     * Get AS-level relationship for given networks.
     * @summary Get AS-level relationships by AS number
     * @param {number} asn 
     * @param {number} [asn2] 
     * @param {string} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RadarEntitiesApi
     */
    public async radarGetAsnsRel(asn: number, asn2?: number, format?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200123>> {
        return RadarEntitiesApiFp(this.configuration).radarGetAsnsRel(asn, asn2, format, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the requested autonomous system information. A confidence level below `5` indicates a low level of confidence in the traffic data - normally this happens because Cloudflare has a small amount of traffic from/to this AS). Population estimates come from APNIC (refer to https://labs.apnic.net/?p=526).
     * @summary Get autonomous system information by AS number
     * @param {number} asn 
     * @param {string} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RadarEntitiesApi
     */
    public async radarGetEntitiesAsnById(asn: number, format?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200122>> {
        return RadarEntitiesApiFp(this.configuration).radarGetEntitiesAsnById(asn, format, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the requested autonomous system information based on IP address. Population estimates come from APNIC (refer to https://labs.apnic.net/?p=526).
     * @summary Get autonomous system information by IP address
     * @param {string} ip 
     * @param {string} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RadarEntitiesApi
     */
    public async radarGetEntitiesAsnByIp(ip: string, format?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200121>> {
        return RadarEntitiesApiFp(this.configuration).radarGetEntitiesAsnByIp(ip, format, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets a list of autonomous systems (AS).
     * @summary Get autonomous systems
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {string} [asn] 
     * @param {string} [location] 
     * @param {string} [orderBy] 
     * @param {string} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RadarEntitiesApi
     */
    public async radarGetEntitiesAsnList(limit?: number, offset?: number, asn?: string, location?: string, orderBy?: string, format?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200120>> {
        return RadarEntitiesApiFp(this.configuration).radarGetEntitiesAsnList(limit, offset, asn, location, orderBy, format, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get IP address information. 
     * @summary Get IP address
     * @param {string} ip 
     * @param {string} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RadarEntitiesApi
     */
    public async radarGetEntitiesIp(ip: string, format?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200124>> {
        return RadarEntitiesApiFp(this.configuration).radarGetEntitiesIp(ip, format, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the requested location information. A confidence level below `5` indicates a low level of confidence in the traffic data - normally this happens because Cloudflare has a small amount of traffic from/to this location).
     * @summary Get location
     * @param {string} location 
     * @param {string} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RadarEntitiesApi
     */
    public async radarGetEntitiesLocationByAlpha2(location: string, format?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200126>> {
        return RadarEntitiesApiFp(this.configuration).radarGetEntitiesLocationByAlpha2(location, format, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a list of locations.
     * @summary Get locations
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {string} [location] 
     * @param {string} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RadarEntitiesApi
     */
    public async radarGetEntitiesLocations(limit?: number, offset?: number, location?: string, format?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200125>> {
        return RadarEntitiesApiFp(this.configuration).radarGetEntitiesLocations(limit, offset, location, format, options).then((request) => request(this.axios, this.basePath));
    }
}
