/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CacheOriginPostQuantumEncryptionBody } from '../models';
import { InlineResponse20045 } from '../models';
import { InlineResponse4XX233 } from '../models';
import { KUKGSak9Identifier } from '../models';
/**
 * OriginPostQuantumApi - axios parameter creator
 * @export
 */
export const OriginPostQuantumApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Instructs Cloudflare to use Post-Quantum (PQ) key agreement algorithms when connecting to your origin. Preferred instructs Cloudflare to opportunistically send a Post-Quantum keyshare in the first message to the origin (for fastest connections when the origin supports and prefers PQ), supported means that PQ algorithms are advertised but only used when requested by the origin, and off means that PQ algorithms are not advertised
         * @summary Change Origin Post-Quantum Encryption setting
         * @param {CacheOriginPostQuantumEncryptionBody} body 
         * @param {KUKGSak9Identifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zoneCacheSettingsChangeOriginPostQuantumEncryptionSetting: async (body: CacheOriginPostQuantumEncryptionBody, zoneIdentifier: KUKGSak9Identifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling zoneCacheSettingsChangeOriginPostQuantumEncryptionSetting.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling zoneCacheSettingsChangeOriginPostQuantumEncryptionSetting.');
            }
            const localVarPath = `/zones/{zone_identifier}/cache/origin_post_quantum_encryption`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Instructs Cloudflare to use Post-Quantum (PQ) key agreement algorithms when connecting to your origin. Preferred instructs Cloudflare to opportunistically send a Post-Quantum keyshare in the first message to the origin (for fastest connections when the origin supports and prefers PQ), supported means that PQ algorithms are advertised but only used when requested by the origin, and off means that PQ algorithms are not advertised
         * @summary Get Origin Post-Quantum Encryption setting
         * @param {KUKGSak9Identifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zoneCacheSettingsGetOriginPostQuantumEncryptionSetting: async (zoneIdentifier: KUKGSak9Identifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling zoneCacheSettingsGetOriginPostQuantumEncryptionSetting.');
            }
            const localVarPath = `/zones/{zone_identifier}/cache/origin_post_quantum_encryption`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OriginPostQuantumApi - functional programming interface
 * @export
 */
export const OriginPostQuantumApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Instructs Cloudflare to use Post-Quantum (PQ) key agreement algorithms when connecting to your origin. Preferred instructs Cloudflare to opportunistically send a Post-Quantum keyshare in the first message to the origin (for fastest connections when the origin supports and prefers PQ), supported means that PQ algorithms are advertised but only used when requested by the origin, and off means that PQ algorithms are not advertised
         * @summary Change Origin Post-Quantum Encryption setting
         * @param {CacheOriginPostQuantumEncryptionBody} body 
         * @param {KUKGSak9Identifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zoneCacheSettingsChangeOriginPostQuantumEncryptionSetting(body: CacheOriginPostQuantumEncryptionBody, zoneIdentifier: KUKGSak9Identifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20045>>> {
            const localVarAxiosArgs = await OriginPostQuantumApiAxiosParamCreator(configuration).zoneCacheSettingsChangeOriginPostQuantumEncryptionSetting(body, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Instructs Cloudflare to use Post-Quantum (PQ) key agreement algorithms when connecting to your origin. Preferred instructs Cloudflare to opportunistically send a Post-Quantum keyshare in the first message to the origin (for fastest connections when the origin supports and prefers PQ), supported means that PQ algorithms are advertised but only used when requested by the origin, and off means that PQ algorithms are not advertised
         * @summary Get Origin Post-Quantum Encryption setting
         * @param {KUKGSak9Identifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zoneCacheSettingsGetOriginPostQuantumEncryptionSetting(zoneIdentifier: KUKGSak9Identifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20045>>> {
            const localVarAxiosArgs = await OriginPostQuantumApiAxiosParamCreator(configuration).zoneCacheSettingsGetOriginPostQuantumEncryptionSetting(zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * OriginPostQuantumApi - factory interface
 * @export
 */
export const OriginPostQuantumApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Instructs Cloudflare to use Post-Quantum (PQ) key agreement algorithms when connecting to your origin. Preferred instructs Cloudflare to opportunistically send a Post-Quantum keyshare in the first message to the origin (for fastest connections when the origin supports and prefers PQ), supported means that PQ algorithms are advertised but only used when requested by the origin, and off means that PQ algorithms are not advertised
         * @summary Change Origin Post-Quantum Encryption setting
         * @param {CacheOriginPostQuantumEncryptionBody} body 
         * @param {KUKGSak9Identifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zoneCacheSettingsChangeOriginPostQuantumEncryptionSetting(body: CacheOriginPostQuantumEncryptionBody, zoneIdentifier: KUKGSak9Identifier, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20045>> {
            return OriginPostQuantumApiFp(configuration).zoneCacheSettingsChangeOriginPostQuantumEncryptionSetting(body, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Instructs Cloudflare to use Post-Quantum (PQ) key agreement algorithms when connecting to your origin. Preferred instructs Cloudflare to opportunistically send a Post-Quantum keyshare in the first message to the origin (for fastest connections when the origin supports and prefers PQ), supported means that PQ algorithms are advertised but only used when requested by the origin, and off means that PQ algorithms are not advertised
         * @summary Get Origin Post-Quantum Encryption setting
         * @param {KUKGSak9Identifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zoneCacheSettingsGetOriginPostQuantumEncryptionSetting(zoneIdentifier: KUKGSak9Identifier, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20045>> {
            return OriginPostQuantumApiFp(configuration).zoneCacheSettingsGetOriginPostQuantumEncryptionSetting(zoneIdentifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OriginPostQuantumApi - object-oriented interface
 * @export
 * @class OriginPostQuantumApi
 * @extends {BaseAPI}
 */
export class OriginPostQuantumApi extends BaseAPI {
    /**
     * Instructs Cloudflare to use Post-Quantum (PQ) key agreement algorithms when connecting to your origin. Preferred instructs Cloudflare to opportunistically send a Post-Quantum keyshare in the first message to the origin (for fastest connections when the origin supports and prefers PQ), supported means that PQ algorithms are advertised but only used when requested by the origin, and off means that PQ algorithms are not advertised
     * @summary Change Origin Post-Quantum Encryption setting
     * @param {CacheOriginPostQuantumEncryptionBody} body 
     * @param {KUKGSak9Identifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OriginPostQuantumApi
     */
    public async zoneCacheSettingsChangeOriginPostQuantumEncryptionSetting(body: CacheOriginPostQuantumEncryptionBody, zoneIdentifier: KUKGSak9Identifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20045>> {
        return OriginPostQuantumApiFp(this.configuration).zoneCacheSettingsChangeOriginPostQuantumEncryptionSetting(body, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Instructs Cloudflare to use Post-Quantum (PQ) key agreement algorithms when connecting to your origin. Preferred instructs Cloudflare to opportunistically send a Post-Quantum keyshare in the first message to the origin (for fastest connections when the origin supports and prefers PQ), supported means that PQ algorithms are advertised but only used when requested by the origin, and off means that PQ algorithms are not advertised
     * @summary Get Origin Post-Quantum Encryption setting
     * @param {KUKGSak9Identifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OriginPostQuantumApi
     */
    public async zoneCacheSettingsGetOriginPostQuantumEncryptionSetting(zoneIdentifier: KUKGSak9Identifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20045>> {
        return OriginPostQuantumApiFp(this.configuration).zoneCacheSettingsGetOriginPostQuantumEncryptionSetting(zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
}
