/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse200 } from '../models';
import { InlineResponse4XX } from '../models';
import { InlineResponse4XX1 } from '../models';
import { OoPdFtgXApiDiscoveryOrigin } from '../models';
import { OoPdFtgXApiDiscoveryPatchMultipleRequestEntry } from '../models';
import { OoPdFtgXApiDiscoveryState } from '../models';
import { OoPdFtgXApiResponseCommonFailure } from '../models';
import { OoPdFtgXIdentifier } from '../models';
import { OoPdFtgXPatchDiscoveriesResponse } from '../models';
import { OoPdFtgXPatchDiscoveryResponse } from '../models';
import { OoPdFtgXSchemaResponseDiscovery } from '../models';
import { OoPdFtgXUuid } from '../models';
import { OperationsOperationIdBody } from '../models';
/**
 * APIShieldAPIDiscoveryApi - axios parameter creator
 * @export
 */
export const APIShieldAPIDiscoveryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve the most up to date view of discovered operations
         * @summary Retrieve discovered operations on a zone
         * @param {OoPdFtgXIdentifier} zoneId 
         * @param {any} [page] Page number of paginated results.
         * @param {any} [perPage] Maximum number of results per page.
         * @param {Array<string>} [host] 
         * @param {Array<string>} [method] 
         * @param {string} [endpoint] 
         * @param {string} [direction] 
         * @param {string} [order] 
         * @param {boolean} [diff] 
         * @param {OoPdFtgXApiDiscoveryOrigin} [origin] Filter results to only include discovery results sourced from a particular discovery engine   * &#x60;ML&#x60; - Discovered operations that were sourced using ML API Discovery   * &#x60;SessionIdentifier&#x60; - Discovered operations that were sourced using Session Identifier API Discovery 
         * @param {OoPdFtgXApiDiscoveryState} [state] Filter results to only include discovery results in a particular state. States are as follows   * &#x60;review&#x60; - Discovered operations that are not saved into API Shield Endpoint Management   * &#x60;saved&#x60; - Discovered operations that are already saved into API Shield Endpoint Management   * &#x60;ignored&#x60; - Discovered operations that have been marked as ignored 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShieldApiDiscoveryRetrieveDiscoveredOperationsOnAZone: async (zoneId: OoPdFtgXIdentifier, page?: any, perPage?: any, host?: Array<string>, method?: Array<string>, endpoint?: string, direction?: string, order?: string, diff?: boolean, origin?: OoPdFtgXApiDiscoveryOrigin, state?: OoPdFtgXApiDiscoveryState, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneId' is not null or undefined
            if (zoneId === null || zoneId === undefined) {
                throw new RequiredError('zoneId','Required parameter zoneId was null or undefined when calling apiShieldApiDiscoveryRetrieveDiscoveredOperationsOnAZone.');
            }
            const localVarPath = `/zones/{zone_id}/api_gateway/discovery/operations`
                .replace(`{${"zone_id"}}`, encodeURIComponent(String(zoneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (host) {
                localVarQueryParameter['host'] = host;
            }

            if (method) {
                localVarQueryParameter['method'] = method;
            }

            if (endpoint !== undefined) {
                localVarQueryParameter['endpoint'] = endpoint;
            }

            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (diff !== undefined) {
                localVarQueryParameter['diff'] = diff;
            }

            if (origin !== undefined) {
                localVarQueryParameter['origin'] = origin;
            }

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the most up to date view of discovered operations, rendered as OpenAPI schemas
         * @summary Retrieve discovered operations on a zone rendered as OpenAPI schemas
         * @param {OoPdFtgXIdentifier} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShieldApiDiscoveryRetrieveDiscoveredOperationsOnAZoneAsOpenapi: async (zoneId: OoPdFtgXIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneId' is not null or undefined
            if (zoneId === null || zoneId === undefined) {
                throw new RequiredError('zoneId','Required parameter zoneId was null or undefined when calling apiShieldApiDiscoveryRetrieveDiscoveredOperationsOnAZoneAsOpenapi.');
            }
            const localVarPath = `/zones/{zone_id}/api_gateway/discovery`
                .replace(`{${"zone_id"}}`, encodeURIComponent(String(zoneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the `state` on a discovered operation
         * @summary Patch discovered operation
         * @param {OperationsOperationIdBody} body 
         * @param {OoPdFtgXIdentifier} zoneId 
         * @param {OoPdFtgXUuid} operationId Identifier for the discovered operation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShieldApiPatchDiscoveredOperation: async (body: OperationsOperationIdBody, zoneId: OoPdFtgXIdentifier, operationId: OoPdFtgXUuid, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling apiShieldApiPatchDiscoveredOperation.');
            }
            // verify required parameter 'zoneId' is not null or undefined
            if (zoneId === null || zoneId === undefined) {
                throw new RequiredError('zoneId','Required parameter zoneId was null or undefined when calling apiShieldApiPatchDiscoveredOperation.');
            }
            // verify required parameter 'operationId' is not null or undefined
            if (operationId === null || operationId === undefined) {
                throw new RequiredError('operationId','Required parameter operationId was null or undefined when calling apiShieldApiPatchDiscoveredOperation.');
            }
            const localVarPath = `/zones/{zone_id}/api_gateway/discovery/operations/{operation_id}`
                .replace(`{${"zone_id"}}`, encodeURIComponent(String(zoneId)))
                .replace(`{${"operation_id"}}`, encodeURIComponent(String(operationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the `state` on one or more discovered operations
         * @summary Patch discovered operations
         * @param {{ [key: string]: OoPdFtgXApiDiscoveryPatchMultipleRequestEntry; }} body 
         * @param {OoPdFtgXIdentifier} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShieldApiPatchDiscoveredOperations: async (body: { [key: string]: OoPdFtgXApiDiscoveryPatchMultipleRequestEntry; }, zoneId: OoPdFtgXIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling apiShieldApiPatchDiscoveredOperations.');
            }
            // verify required parameter 'zoneId' is not null or undefined
            if (zoneId === null || zoneId === undefined) {
                throw new RequiredError('zoneId','Required parameter zoneId was null or undefined when calling apiShieldApiPatchDiscoveredOperations.');
            }
            const localVarPath = `/zones/{zone_id}/api_gateway/discovery/operations`
                .replace(`{${"zone_id"}}`, encodeURIComponent(String(zoneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * APIShieldAPIDiscoveryApi - functional programming interface
 * @export
 */
export const APIShieldAPIDiscoveryApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Retrieve the most up to date view of discovered operations
         * @summary Retrieve discovered operations on a zone
         * @param {OoPdFtgXIdentifier} zoneId 
         * @param {any} [page] Page number of paginated results.
         * @param {any} [perPage] Maximum number of results per page.
         * @param {Array<string>} [host] 
         * @param {Array<string>} [method] 
         * @param {string} [endpoint] 
         * @param {string} [direction] 
         * @param {string} [order] 
         * @param {boolean} [diff] 
         * @param {OoPdFtgXApiDiscoveryOrigin} [origin] Filter results to only include discovery results sourced from a particular discovery engine   * &#x60;ML&#x60; - Discovered operations that were sourced using ML API Discovery   * &#x60;SessionIdentifier&#x60; - Discovered operations that were sourced using Session Identifier API Discovery 
         * @param {OoPdFtgXApiDiscoveryState} [state] Filter results to only include discovery results in a particular state. States are as follows   * &#x60;review&#x60; - Discovered operations that are not saved into API Shield Endpoint Management   * &#x60;saved&#x60; - Discovered operations that are already saved into API Shield Endpoint Management   * &#x60;ignored&#x60; - Discovered operations that have been marked as ignored 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiShieldApiDiscoveryRetrieveDiscoveredOperationsOnAZone(zoneId: OoPdFtgXIdentifier, page?: any, perPage?: any, host?: Array<string>, method?: Array<string>, endpoint?: string, direction?: string, order?: string, diff?: boolean, origin?: OoPdFtgXApiDiscoveryOrigin, state?: OoPdFtgXApiDiscoveryState, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200>>> {
            const localVarAxiosArgs = await APIShieldAPIDiscoveryApiAxiosParamCreator(configuration).apiShieldApiDiscoveryRetrieveDiscoveredOperationsOnAZone(zoneId, page, perPage, host, method, endpoint, direction, order, diff, origin, state, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve the most up to date view of discovered operations, rendered as OpenAPI schemas
         * @summary Retrieve discovered operations on a zone rendered as OpenAPI schemas
         * @param {OoPdFtgXIdentifier} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiShieldApiDiscoveryRetrieveDiscoveredOperationsOnAZoneAsOpenapi(zoneId: OoPdFtgXIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<OoPdFtgXSchemaResponseDiscovery>>> {
            const localVarAxiosArgs = await APIShieldAPIDiscoveryApiAxiosParamCreator(configuration).apiShieldApiDiscoveryRetrieveDiscoveredOperationsOnAZoneAsOpenapi(zoneId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update the `state` on a discovered operation
         * @summary Patch discovered operation
         * @param {OperationsOperationIdBody} body 
         * @param {OoPdFtgXIdentifier} zoneId 
         * @param {OoPdFtgXUuid} operationId Identifier for the discovered operation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiShieldApiPatchDiscoveredOperation(body: OperationsOperationIdBody, zoneId: OoPdFtgXIdentifier, operationId: OoPdFtgXUuid, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<OoPdFtgXPatchDiscoveryResponse>>> {
            const localVarAxiosArgs = await APIShieldAPIDiscoveryApiAxiosParamCreator(configuration).apiShieldApiPatchDiscoveredOperation(body, zoneId, operationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update the `state` on one or more discovered operations
         * @summary Patch discovered operations
         * @param {{ [key: string]: OoPdFtgXApiDiscoveryPatchMultipleRequestEntry; }} body 
         * @param {OoPdFtgXIdentifier} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiShieldApiPatchDiscoveredOperations(body: { [key: string]: OoPdFtgXApiDiscoveryPatchMultipleRequestEntry; }, zoneId: OoPdFtgXIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<OoPdFtgXPatchDiscoveriesResponse>>> {
            const localVarAxiosArgs = await APIShieldAPIDiscoveryApiAxiosParamCreator(configuration).apiShieldApiPatchDiscoveredOperations(body, zoneId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * APIShieldAPIDiscoveryApi - factory interface
 * @export
 */
export const APIShieldAPIDiscoveryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Retrieve the most up to date view of discovered operations
         * @summary Retrieve discovered operations on a zone
         * @param {OoPdFtgXIdentifier} zoneId 
         * @param {any} [page] Page number of paginated results.
         * @param {any} [perPage] Maximum number of results per page.
         * @param {Array<string>} [host] 
         * @param {Array<string>} [method] 
         * @param {string} [endpoint] 
         * @param {string} [direction] 
         * @param {string} [order] 
         * @param {boolean} [diff] 
         * @param {OoPdFtgXApiDiscoveryOrigin} [origin] Filter results to only include discovery results sourced from a particular discovery engine   * &#x60;ML&#x60; - Discovered operations that were sourced using ML API Discovery   * &#x60;SessionIdentifier&#x60; - Discovered operations that were sourced using Session Identifier API Discovery 
         * @param {OoPdFtgXApiDiscoveryState} [state] Filter results to only include discovery results in a particular state. States are as follows   * &#x60;review&#x60; - Discovered operations that are not saved into API Shield Endpoint Management   * &#x60;saved&#x60; - Discovered operations that are already saved into API Shield Endpoint Management   * &#x60;ignored&#x60; - Discovered operations that have been marked as ignored 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiShieldApiDiscoveryRetrieveDiscoveredOperationsOnAZone(zoneId: OoPdFtgXIdentifier, page?: any, perPage?: any, host?: Array<string>, method?: Array<string>, endpoint?: string, direction?: string, order?: string, diff?: boolean, origin?: OoPdFtgXApiDiscoveryOrigin, state?: OoPdFtgXApiDiscoveryState, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200>> {
            return APIShieldAPIDiscoveryApiFp(configuration).apiShieldApiDiscoveryRetrieveDiscoveredOperationsOnAZone(zoneId, page, perPage, host, method, endpoint, direction, order, diff, origin, state, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the most up to date view of discovered operations, rendered as OpenAPI schemas
         * @summary Retrieve discovered operations on a zone rendered as OpenAPI schemas
         * @param {OoPdFtgXIdentifier} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiShieldApiDiscoveryRetrieveDiscoveredOperationsOnAZoneAsOpenapi(zoneId: OoPdFtgXIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<OoPdFtgXSchemaResponseDiscovery>> {
            return APIShieldAPIDiscoveryApiFp(configuration).apiShieldApiDiscoveryRetrieveDiscoveredOperationsOnAZoneAsOpenapi(zoneId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the `state` on a discovered operation
         * @summary Patch discovered operation
         * @param {OperationsOperationIdBody} body 
         * @param {OoPdFtgXIdentifier} zoneId 
         * @param {OoPdFtgXUuid} operationId Identifier for the discovered operation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiShieldApiPatchDiscoveredOperation(body: OperationsOperationIdBody, zoneId: OoPdFtgXIdentifier, operationId: OoPdFtgXUuid, options?: AxiosRequestConfig): Promise<AxiosResponse<OoPdFtgXPatchDiscoveryResponse>> {
            return APIShieldAPIDiscoveryApiFp(configuration).apiShieldApiPatchDiscoveredOperation(body, zoneId, operationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the `state` on one or more discovered operations
         * @summary Patch discovered operations
         * @param {{ [key: string]: OoPdFtgXApiDiscoveryPatchMultipleRequestEntry; }} body 
         * @param {OoPdFtgXIdentifier} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiShieldApiPatchDiscoveredOperations(body: { [key: string]: OoPdFtgXApiDiscoveryPatchMultipleRequestEntry; }, zoneId: OoPdFtgXIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<OoPdFtgXPatchDiscoveriesResponse>> {
            return APIShieldAPIDiscoveryApiFp(configuration).apiShieldApiPatchDiscoveredOperations(body, zoneId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * APIShieldAPIDiscoveryApi - object-oriented interface
 * @export
 * @class APIShieldAPIDiscoveryApi
 * @extends {BaseAPI}
 */
export class APIShieldAPIDiscoveryApi extends BaseAPI {
    /**
     * Retrieve the most up to date view of discovered operations
     * @summary Retrieve discovered operations on a zone
     * @param {OoPdFtgXIdentifier} zoneId 
     * @param {any} [page] Page number of paginated results.
     * @param {any} [perPage] Maximum number of results per page.
     * @param {Array<string>} [host] 
     * @param {Array<string>} [method] 
     * @param {string} [endpoint] 
     * @param {string} [direction] 
     * @param {string} [order] 
     * @param {boolean} [diff] 
     * @param {OoPdFtgXApiDiscoveryOrigin} [origin] Filter results to only include discovery results sourced from a particular discovery engine   * &#x60;ML&#x60; - Discovered operations that were sourced using ML API Discovery   * &#x60;SessionIdentifier&#x60; - Discovered operations that were sourced using Session Identifier API Discovery 
     * @param {OoPdFtgXApiDiscoveryState} [state] Filter results to only include discovery results in a particular state. States are as follows   * &#x60;review&#x60; - Discovered operations that are not saved into API Shield Endpoint Management   * &#x60;saved&#x60; - Discovered operations that are already saved into API Shield Endpoint Management   * &#x60;ignored&#x60; - Discovered operations that have been marked as ignored 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIShieldAPIDiscoveryApi
     */
    public async apiShieldApiDiscoveryRetrieveDiscoveredOperationsOnAZone(zoneId: OoPdFtgXIdentifier, page?: any, perPage?: any, host?: Array<string>, method?: Array<string>, endpoint?: string, direction?: string, order?: string, diff?: boolean, origin?: OoPdFtgXApiDiscoveryOrigin, state?: OoPdFtgXApiDiscoveryState, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200>> {
        return APIShieldAPIDiscoveryApiFp(this.configuration).apiShieldApiDiscoveryRetrieveDiscoveredOperationsOnAZone(zoneId, page, perPage, host, method, endpoint, direction, order, diff, origin, state, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve the most up to date view of discovered operations, rendered as OpenAPI schemas
     * @summary Retrieve discovered operations on a zone rendered as OpenAPI schemas
     * @param {OoPdFtgXIdentifier} zoneId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIShieldAPIDiscoveryApi
     */
    public async apiShieldApiDiscoveryRetrieveDiscoveredOperationsOnAZoneAsOpenapi(zoneId: OoPdFtgXIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<OoPdFtgXSchemaResponseDiscovery>> {
        return APIShieldAPIDiscoveryApiFp(this.configuration).apiShieldApiDiscoveryRetrieveDiscoveredOperationsOnAZoneAsOpenapi(zoneId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update the `state` on a discovered operation
     * @summary Patch discovered operation
     * @param {OperationsOperationIdBody} body 
     * @param {OoPdFtgXIdentifier} zoneId 
     * @param {OoPdFtgXUuid} operationId Identifier for the discovered operation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIShieldAPIDiscoveryApi
     */
    public async apiShieldApiPatchDiscoveredOperation(body: OperationsOperationIdBody, zoneId: OoPdFtgXIdentifier, operationId: OoPdFtgXUuid, options?: AxiosRequestConfig) : Promise<AxiosResponse<OoPdFtgXPatchDiscoveryResponse>> {
        return APIShieldAPIDiscoveryApiFp(this.configuration).apiShieldApiPatchDiscoveredOperation(body, zoneId, operationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update the `state` on one or more discovered operations
     * @summary Patch discovered operations
     * @param {{ [key: string]: OoPdFtgXApiDiscoveryPatchMultipleRequestEntry; }} body 
     * @param {OoPdFtgXIdentifier} zoneId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIShieldAPIDiscoveryApi
     */
    public async apiShieldApiPatchDiscoveredOperations(body: { [key: string]: OoPdFtgXApiDiscoveryPatchMultipleRequestEntry; }, zoneId: OoPdFtgXIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<OoPdFtgXPatchDiscoveriesResponse>> {
        return APIShieldAPIDiscoveryApiFp(this.configuration).apiShieldApiPatchDiscoveredOperations(body, zoneId, options).then((request) => request(this.axios, this.basePath));
    }
}
