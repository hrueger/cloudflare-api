/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { BillSubsApiSchemasIdentifier } from '../models';
import { BillSubsApiSubscriptionV2 } from '../models';
import { BillSubsApiZoneSubscriptionResponseSingle } from '../models';
import { InlineResponse4XX375 } from '../models';
/**
 * ZoneSubscriptionApi - axios parameter creator
 * @export
 */
export const ZoneSubscriptionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a zone subscription, either plan or add-ons.
         * @summary Create Zone Subscription
         * @param {BillSubsApiSubscriptionV2} body 
         * @param {BillSubsApiSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zoneSubscriptionCreateZoneSubscription: async (body: BillSubsApiSubscriptionV2, identifier: BillSubsApiSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling zoneSubscriptionCreateZoneSubscription.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling zoneSubscriptionCreateZoneSubscription.');
            }
            const localVarPath = `/zones/{identifier}/subscription`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates zone subscriptions, either plan or add-ons.
         * @summary Update Zone Subscription
         * @param {BillSubsApiSubscriptionV2} body 
         * @param {BillSubsApiSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zoneSubscriptionUpdateZoneSubscription: async (body: BillSubsApiSubscriptionV2, identifier: BillSubsApiSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling zoneSubscriptionUpdateZoneSubscription.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling zoneSubscriptionUpdateZoneSubscription.');
            }
            const localVarPath = `/zones/{identifier}/subscription`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists zone subscription details.
         * @summary Zone Subscription Details
         * @param {BillSubsApiSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zoneSubscriptionZoneSubscriptionDetails: async (identifier: BillSubsApiSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling zoneSubscriptionZoneSubscriptionDetails.');
            }
            const localVarPath = `/zones/{identifier}/subscription`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ZoneSubscriptionApi - functional programming interface
 * @export
 */
export const ZoneSubscriptionApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create a zone subscription, either plan or add-ons.
         * @summary Create Zone Subscription
         * @param {BillSubsApiSubscriptionV2} body 
         * @param {BillSubsApiSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zoneSubscriptionCreateZoneSubscription(body: BillSubsApiSubscriptionV2, identifier: BillSubsApiSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<BillSubsApiZoneSubscriptionResponseSingle>>> {
            const localVarAxiosArgs = await ZoneSubscriptionApiAxiosParamCreator(configuration).zoneSubscriptionCreateZoneSubscription(body, identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates zone subscriptions, either plan or add-ons.
         * @summary Update Zone Subscription
         * @param {BillSubsApiSubscriptionV2} body 
         * @param {BillSubsApiSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zoneSubscriptionUpdateZoneSubscription(body: BillSubsApiSubscriptionV2, identifier: BillSubsApiSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<BillSubsApiZoneSubscriptionResponseSingle>>> {
            const localVarAxiosArgs = await ZoneSubscriptionApiAxiosParamCreator(configuration).zoneSubscriptionUpdateZoneSubscription(body, identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Lists zone subscription details.
         * @summary Zone Subscription Details
         * @param {BillSubsApiSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zoneSubscriptionZoneSubscriptionDetails(identifier: BillSubsApiSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<BillSubsApiZoneSubscriptionResponseSingle>>> {
            const localVarAxiosArgs = await ZoneSubscriptionApiAxiosParamCreator(configuration).zoneSubscriptionZoneSubscriptionDetails(identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ZoneSubscriptionApi - factory interface
 * @export
 */
export const ZoneSubscriptionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create a zone subscription, either plan or add-ons.
         * @summary Create Zone Subscription
         * @param {BillSubsApiSubscriptionV2} body 
         * @param {BillSubsApiSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zoneSubscriptionCreateZoneSubscription(body: BillSubsApiSubscriptionV2, identifier: BillSubsApiSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<BillSubsApiZoneSubscriptionResponseSingle>> {
            return ZoneSubscriptionApiFp(configuration).zoneSubscriptionCreateZoneSubscription(body, identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates zone subscriptions, either plan or add-ons.
         * @summary Update Zone Subscription
         * @param {BillSubsApiSubscriptionV2} body 
         * @param {BillSubsApiSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zoneSubscriptionUpdateZoneSubscription(body: BillSubsApiSubscriptionV2, identifier: BillSubsApiSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<BillSubsApiZoneSubscriptionResponseSingle>> {
            return ZoneSubscriptionApiFp(configuration).zoneSubscriptionUpdateZoneSubscription(body, identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists zone subscription details.
         * @summary Zone Subscription Details
         * @param {BillSubsApiSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zoneSubscriptionZoneSubscriptionDetails(identifier: BillSubsApiSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<BillSubsApiZoneSubscriptionResponseSingle>> {
            return ZoneSubscriptionApiFp(configuration).zoneSubscriptionZoneSubscriptionDetails(identifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ZoneSubscriptionApi - object-oriented interface
 * @export
 * @class ZoneSubscriptionApi
 * @extends {BaseAPI}
 */
export class ZoneSubscriptionApi extends BaseAPI {
    /**
     * Create a zone subscription, either plan or add-ons.
     * @summary Create Zone Subscription
     * @param {BillSubsApiSubscriptionV2} body 
     * @param {BillSubsApiSchemasIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZoneSubscriptionApi
     */
    public async zoneSubscriptionCreateZoneSubscription(body: BillSubsApiSubscriptionV2, identifier: BillSubsApiSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<BillSubsApiZoneSubscriptionResponseSingle>> {
        return ZoneSubscriptionApiFp(this.configuration).zoneSubscriptionCreateZoneSubscription(body, identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates zone subscriptions, either plan or add-ons.
     * @summary Update Zone Subscription
     * @param {BillSubsApiSubscriptionV2} body 
     * @param {BillSubsApiSchemasIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZoneSubscriptionApi
     */
    public async zoneSubscriptionUpdateZoneSubscription(body: BillSubsApiSubscriptionV2, identifier: BillSubsApiSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<BillSubsApiZoneSubscriptionResponseSingle>> {
        return ZoneSubscriptionApiFp(this.configuration).zoneSubscriptionUpdateZoneSubscription(body, identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists zone subscription details.
     * @summary Zone Subscription Details
     * @param {BillSubsApiSchemasIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZoneSubscriptionApi
     */
    public async zoneSubscriptionZoneSubscriptionDetails(identifier: BillSubsApiSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<BillSubsApiZoneSubscriptionResponseSingle>> {
        return ZoneSubscriptionApiFp(this.configuration).zoneSubscriptionZoneSubscriptionDetails(identifier, options).then((request) => request(this.axios, this.basePath));
    }
}
