/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AccountIdentifierRailgunsBody } from '../models';
import { C4f8RoOSCommonComponentsSchemasIdentifier } from '../models';
import { C4f8RoOSRailgunComponentsSchemasIdentifier } from '../models';
import { C4f8RoOSRailgunResponseCollection } from '../models';
import { C4f8RoOSRailgunResponseSingle } from '../models';
import { C4f8RoOSRailgunResponseSingleId } from '../models';
import { C4f8RoOSSchemasRailgun } from '../models';
import { InlineResponse4xx5 } from '../models';
import { InlineResponse4xx6 } from '../models';
import { InlineResponse4xx7 } from '../models';
/**
 * AccountRailgunsApi - axios parameter creator
 * @export
 */
export const AccountRailgunsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Railgun
         * @param {AccountIdentifierRailgunsBody} body 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountRailgunsCreateRailgun: async (body: AccountIdentifierRailgunsBody, accountIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling accountRailgunsCreateRailgun.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling accountRailgunsCreateRailgun.');
            }
            const localVarPath = `/accounts/{account_identifier}/railguns`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Disable and delete a Railgun. This will immediately disable the Railgun for any connected zones.
         * @summary Delete a Railgun
         * @param {C4f8RoOSRailgunComponentsSchemasIdentifier} identifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountRailgunsDeleteARailgun: async (identifier: C4f8RoOSRailgunComponentsSchemasIdentifier, accountIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling accountRailgunsDeleteARailgun.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling accountRailgunsDeleteARailgun.');
            }
            const localVarPath = `/accounts/{account_identifier}/railguns/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List, search, sort and filter your Railguns.
         * @summary List Railguns
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} accountIdentifier 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {string} [direction] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountRailgunsListRailguns: async (accountIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, page?: number, perPage?: number, direction?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling accountRailgunsListRailguns.');
            }
            const localVarPath = `/accounts/{account_identifier}/railguns`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Railgun details
         * @param {C4f8RoOSRailgunComponentsSchemasIdentifier} identifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountRailgunsRailgunDetails: async (identifier: C4f8RoOSRailgunComponentsSchemasIdentifier, accountIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling accountRailgunsRailgunDetails.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling accountRailgunsRailgunDetails.');
            }
            const localVarPath = `/accounts/{account_identifier}/railguns/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a Railgun.
         * @summary Update Railgun
         * @param {C4f8RoOSSchemasRailgun} body 
         * @param {C4f8RoOSRailgunComponentsSchemasIdentifier} identifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountRailgunsUpdateRailgun: async (body: C4f8RoOSSchemasRailgun, identifier: C4f8RoOSRailgunComponentsSchemasIdentifier, accountIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling accountRailgunsUpdateRailgun.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling accountRailgunsUpdateRailgun.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling accountRailgunsUpdateRailgun.');
            }
            const localVarPath = `/accounts/{account_identifier}/railguns/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountRailgunsApi - functional programming interface
 * @export
 */
export const AccountRailgunsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Railgun
         * @param {AccountIdentifierRailgunsBody} body 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountRailgunsCreateRailgun(body: AccountIdentifierRailgunsBody, accountIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<C4f8RoOSRailgunResponseSingle>>> {
            const localVarAxiosArgs = await AccountRailgunsApiAxiosParamCreator(configuration).accountRailgunsCreateRailgun(body, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Disable and delete a Railgun. This will immediately disable the Railgun for any connected zones.
         * @summary Delete a Railgun
         * @param {C4f8RoOSRailgunComponentsSchemasIdentifier} identifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountRailgunsDeleteARailgun(identifier: C4f8RoOSRailgunComponentsSchemasIdentifier, accountIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<C4f8RoOSRailgunResponseSingleId>>> {
            const localVarAxiosArgs = await AccountRailgunsApiAxiosParamCreator(configuration).accountRailgunsDeleteARailgun(identifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List, search, sort and filter your Railguns.
         * @summary List Railguns
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} accountIdentifier 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {string} [direction] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountRailgunsListRailguns(accountIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, page?: number, perPage?: number, direction?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<C4f8RoOSRailgunResponseCollection>>> {
            const localVarAxiosArgs = await AccountRailgunsApiAxiosParamCreator(configuration).accountRailgunsListRailguns(accountIdentifier, page, perPage, direction, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Railgun details
         * @param {C4f8RoOSRailgunComponentsSchemasIdentifier} identifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountRailgunsRailgunDetails(identifier: C4f8RoOSRailgunComponentsSchemasIdentifier, accountIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<C4f8RoOSRailgunResponseSingle>>> {
            const localVarAxiosArgs = await AccountRailgunsApiAxiosParamCreator(configuration).accountRailgunsRailgunDetails(identifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a Railgun.
         * @summary Update Railgun
         * @param {C4f8RoOSSchemasRailgun} body 
         * @param {C4f8RoOSRailgunComponentsSchemasIdentifier} identifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountRailgunsUpdateRailgun(body: C4f8RoOSSchemasRailgun, identifier: C4f8RoOSRailgunComponentsSchemasIdentifier, accountIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<C4f8RoOSRailgunResponseSingle>>> {
            const localVarAxiosArgs = await AccountRailgunsApiAxiosParamCreator(configuration).accountRailgunsUpdateRailgun(body, identifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AccountRailgunsApi - factory interface
 * @export
 */
export const AccountRailgunsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Create Railgun
         * @param {AccountIdentifierRailgunsBody} body 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountRailgunsCreateRailgun(body: AccountIdentifierRailgunsBody, accountIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<C4f8RoOSRailgunResponseSingle>> {
            return AccountRailgunsApiFp(configuration).accountRailgunsCreateRailgun(body, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Disable and delete a Railgun. This will immediately disable the Railgun for any connected zones.
         * @summary Delete a Railgun
         * @param {C4f8RoOSRailgunComponentsSchemasIdentifier} identifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountRailgunsDeleteARailgun(identifier: C4f8RoOSRailgunComponentsSchemasIdentifier, accountIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<C4f8RoOSRailgunResponseSingleId>> {
            return AccountRailgunsApiFp(configuration).accountRailgunsDeleteARailgun(identifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * List, search, sort and filter your Railguns.
         * @summary List Railguns
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} accountIdentifier 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {string} [direction] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountRailgunsListRailguns(accountIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, page?: number, perPage?: number, direction?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<C4f8RoOSRailgunResponseCollection>> {
            return AccountRailgunsApiFp(configuration).accountRailgunsListRailguns(accountIdentifier, page, perPage, direction, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Railgun details
         * @param {C4f8RoOSRailgunComponentsSchemasIdentifier} identifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountRailgunsRailgunDetails(identifier: C4f8RoOSRailgunComponentsSchemasIdentifier, accountIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<C4f8RoOSRailgunResponseSingle>> {
            return AccountRailgunsApiFp(configuration).accountRailgunsRailgunDetails(identifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a Railgun.
         * @summary Update Railgun
         * @param {C4f8RoOSSchemasRailgun} body 
         * @param {C4f8RoOSRailgunComponentsSchemasIdentifier} identifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountRailgunsUpdateRailgun(body: C4f8RoOSSchemasRailgun, identifier: C4f8RoOSRailgunComponentsSchemasIdentifier, accountIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<C4f8RoOSRailgunResponseSingle>> {
            return AccountRailgunsApiFp(configuration).accountRailgunsUpdateRailgun(body, identifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountRailgunsApi - object-oriented interface
 * @export
 * @class AccountRailgunsApi
 * @extends {BaseAPI}
 */
export class AccountRailgunsApi extends BaseAPI {
    /**
     * 
     * @summary Create Railgun
     * @param {AccountIdentifierRailgunsBody} body 
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountRailgunsApi
     */
    public async accountRailgunsCreateRailgun(body: AccountIdentifierRailgunsBody, accountIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<C4f8RoOSRailgunResponseSingle>> {
        return AccountRailgunsApiFp(this.configuration).accountRailgunsCreateRailgun(body, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Disable and delete a Railgun. This will immediately disable the Railgun for any connected zones.
     * @summary Delete a Railgun
     * @param {C4f8RoOSRailgunComponentsSchemasIdentifier} identifier 
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountRailgunsApi
     */
    public async accountRailgunsDeleteARailgun(identifier: C4f8RoOSRailgunComponentsSchemasIdentifier, accountIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<C4f8RoOSRailgunResponseSingleId>> {
        return AccountRailgunsApiFp(this.configuration).accountRailgunsDeleteARailgun(identifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List, search, sort and filter your Railguns.
     * @summary List Railguns
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} accountIdentifier 
     * @param {number} [page] 
     * @param {number} [perPage] 
     * @param {string} [direction] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountRailgunsApi
     */
    public async accountRailgunsListRailguns(accountIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, page?: number, perPage?: number, direction?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<C4f8RoOSRailgunResponseCollection>> {
        return AccountRailgunsApiFp(this.configuration).accountRailgunsListRailguns(accountIdentifier, page, perPage, direction, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Railgun details
     * @param {C4f8RoOSRailgunComponentsSchemasIdentifier} identifier 
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountRailgunsApi
     */
    public async accountRailgunsRailgunDetails(identifier: C4f8RoOSRailgunComponentsSchemasIdentifier, accountIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<C4f8RoOSRailgunResponseSingle>> {
        return AccountRailgunsApiFp(this.configuration).accountRailgunsRailgunDetails(identifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update a Railgun.
     * @summary Update Railgun
     * @param {C4f8RoOSSchemasRailgun} body 
     * @param {C4f8RoOSRailgunComponentsSchemasIdentifier} identifier 
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountRailgunsApi
     */
    public async accountRailgunsUpdateRailgun(body: C4f8RoOSSchemasRailgun, identifier: C4f8RoOSRailgunComponentsSchemasIdentifier, accountIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<C4f8RoOSRailgunResponseSingle>> {
        return AccountRailgunsApiFp(this.configuration).accountRailgunsUpdateRailgun(body, identifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
}
