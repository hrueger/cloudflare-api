/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse20036 } from '../models';
import { InlineResponse20037 } from '../models';
import { InlineResponse201 } from '../models';
import { VmrjA5DJApiResponseCommon } from '../models';
import { VmrjA5DJApiResponseCommonFailure } from '../models';
import { VmrjA5DJCreateBindingRequest } from '../models';
import { VmrjA5DJIdentifier } from '../models';
/**
 * IPAddressManagementServiceBindingsApi - axios parameter creator
 * @export
 */
export const IPAddressManagementServiceBindingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new Service Binding, routing traffic to IPs within the given CIDR to a service running on Cloudflare's network.  **Note:** This API may only be used on prefixes currently configured with a Magic Transit service binding, and only allows creating service bindings for the Cloudflare CDN or Cloudflare Spectrum. 
         * @summary Create Service Binding
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {VmrjA5DJIdentifier} prefixIdentifier 
         * @param {VmrjA5DJCreateBindingRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipAddressManagementServiceBindingsCreateServiceBinding: async (accountIdentifier: VmrjA5DJIdentifier, prefixIdentifier: VmrjA5DJIdentifier, body?: VmrjA5DJCreateBindingRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling ipAddressManagementServiceBindingsCreateServiceBinding.');
            }
            // verify required parameter 'prefixIdentifier' is not null or undefined
            if (prefixIdentifier === null || prefixIdentifier === undefined) {
                throw new RequiredError('prefixIdentifier','Required parameter prefixIdentifier was null or undefined when calling ipAddressManagementServiceBindingsCreateServiceBinding.');
            }
            const localVarPath = `/accounts/{account_identifier}/addressing/prefixes/{prefix_identifier}/bindings`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)))
                .replace(`{${"prefix_identifier"}}`, encodeURIComponent(String(prefixIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Service Binding
         * @summary Delete Service Binding
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {VmrjA5DJIdentifier} prefixIdentifier 
         * @param {VmrjA5DJIdentifier} bindingIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipAddressManagementServiceBindingsDeleteServiceBinding: async (accountIdentifier: VmrjA5DJIdentifier, prefixIdentifier: VmrjA5DJIdentifier, bindingIdentifier: VmrjA5DJIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling ipAddressManagementServiceBindingsDeleteServiceBinding.');
            }
            // verify required parameter 'prefixIdentifier' is not null or undefined
            if (prefixIdentifier === null || prefixIdentifier === undefined) {
                throw new RequiredError('prefixIdentifier','Required parameter prefixIdentifier was null or undefined when calling ipAddressManagementServiceBindingsDeleteServiceBinding.');
            }
            // verify required parameter 'bindingIdentifier' is not null or undefined
            if (bindingIdentifier === null || bindingIdentifier === undefined) {
                throw new RequiredError('bindingIdentifier','Required parameter bindingIdentifier was null or undefined when calling ipAddressManagementServiceBindingsDeleteServiceBinding.');
            }
            const localVarPath = `/accounts/{account_identifier}/addressing/prefixes/{prefix_identifier}/bindings/{binding_identifier}`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)))
                .replace(`{${"prefix_identifier"}}`, encodeURIComponent(String(prefixIdentifier)))
                .replace(`{${"binding_identifier"}}`, encodeURIComponent(String(bindingIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch a single Service Binding
         * @summary Get Service Binding
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {VmrjA5DJIdentifier} prefixIdentifier 
         * @param {VmrjA5DJIdentifier} bindingIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipAddressManagementServiceBindingsGetServiceBinding: async (accountIdentifier: VmrjA5DJIdentifier, prefixIdentifier: VmrjA5DJIdentifier, bindingIdentifier: VmrjA5DJIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling ipAddressManagementServiceBindingsGetServiceBinding.');
            }
            // verify required parameter 'prefixIdentifier' is not null or undefined
            if (prefixIdentifier === null || prefixIdentifier === undefined) {
                throw new RequiredError('prefixIdentifier','Required parameter prefixIdentifier was null or undefined when calling ipAddressManagementServiceBindingsGetServiceBinding.');
            }
            // verify required parameter 'bindingIdentifier' is not null or undefined
            if (bindingIdentifier === null || bindingIdentifier === undefined) {
                throw new RequiredError('bindingIdentifier','Required parameter bindingIdentifier was null or undefined when calling ipAddressManagementServiceBindingsGetServiceBinding.');
            }
            const localVarPath = `/accounts/{account_identifier}/addressing/prefixes/{prefix_identifier}/bindings/{binding_identifier}`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)))
                .replace(`{${"prefix_identifier"}}`, encodeURIComponent(String(prefixIdentifier)))
                .replace(`{${"binding_identifier"}}`, encodeURIComponent(String(bindingIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List the Cloudflare services this prefix is currently bound to. Traffic sent to an address within an IP prefix will be routed to the Cloudflare service of the most-specific Service Binding matching the address.  **Example:** binding `192.0.2.0/24` to Cloudflare Magic Transit and `192.0.2.1/32` to the Cloudflare CDN would route traffic  for `192.0.2.1` to the CDN, and traffic for all other IPs in the prefix to Cloudflare Magic Transit. 
         * @summary List Service Bindings
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {VmrjA5DJIdentifier} prefixIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipAddressManagementServiceBindingsListServiceBindings: async (accountIdentifier: VmrjA5DJIdentifier, prefixIdentifier: VmrjA5DJIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling ipAddressManagementServiceBindingsListServiceBindings.');
            }
            // verify required parameter 'prefixIdentifier' is not null or undefined
            if (prefixIdentifier === null || prefixIdentifier === undefined) {
                throw new RequiredError('prefixIdentifier','Required parameter prefixIdentifier was null or undefined when calling ipAddressManagementServiceBindingsListServiceBindings.');
            }
            const localVarPath = `/accounts/{account_identifier}/addressing/prefixes/{prefix_identifier}/bindings`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)))
                .replace(`{${"prefix_identifier"}}`, encodeURIComponent(String(prefixIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Bring-Your-Own IP (BYOIP) prefixes onboarded to Cloudflare must be bound to a service running on the Cloudflare network to enable a Cloudflare product on the IP addresses. This endpoint can be used as a reference of available services on the Cloudflare network, and their service IDs. 
         * @summary List Services
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipAddressManagementServiceBindingsListServices: async (accountIdentifier: VmrjA5DJIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling ipAddressManagementServiceBindingsListServices.');
            }
            const localVarPath = `/accounts/{account_identifier}/addressing/services`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IPAddressManagementServiceBindingsApi - functional programming interface
 * @export
 */
export const IPAddressManagementServiceBindingsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates a new Service Binding, routing traffic to IPs within the given CIDR to a service running on Cloudflare's network.  **Note:** This API may only be used on prefixes currently configured with a Magic Transit service binding, and only allows creating service bindings for the Cloudflare CDN or Cloudflare Spectrum. 
         * @summary Create Service Binding
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {VmrjA5DJIdentifier} prefixIdentifier 
         * @param {VmrjA5DJCreateBindingRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAddressManagementServiceBindingsCreateServiceBinding(accountIdentifier: VmrjA5DJIdentifier, prefixIdentifier: VmrjA5DJIdentifier, body?: VmrjA5DJCreateBindingRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse201>>> {
            const localVarAxiosArgs = await IPAddressManagementServiceBindingsApiAxiosParamCreator(configuration).ipAddressManagementServiceBindingsCreateServiceBinding(accountIdentifier, prefixIdentifier, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a Service Binding
         * @summary Delete Service Binding
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {VmrjA5DJIdentifier} prefixIdentifier 
         * @param {VmrjA5DJIdentifier} bindingIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAddressManagementServiceBindingsDeleteServiceBinding(accountIdentifier: VmrjA5DJIdentifier, prefixIdentifier: VmrjA5DJIdentifier, bindingIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<VmrjA5DJApiResponseCommon>>> {
            const localVarAxiosArgs = await IPAddressManagementServiceBindingsApiAxiosParamCreator(configuration).ipAddressManagementServiceBindingsDeleteServiceBinding(accountIdentifier, prefixIdentifier, bindingIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetch a single Service Binding
         * @summary Get Service Binding
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {VmrjA5DJIdentifier} prefixIdentifier 
         * @param {VmrjA5DJIdentifier} bindingIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAddressManagementServiceBindingsGetServiceBinding(accountIdentifier: VmrjA5DJIdentifier, prefixIdentifier: VmrjA5DJIdentifier, bindingIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse201>>> {
            const localVarAxiosArgs = await IPAddressManagementServiceBindingsApiAxiosParamCreator(configuration).ipAddressManagementServiceBindingsGetServiceBinding(accountIdentifier, prefixIdentifier, bindingIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List the Cloudflare services this prefix is currently bound to. Traffic sent to an address within an IP prefix will be routed to the Cloudflare service of the most-specific Service Binding matching the address.  **Example:** binding `192.0.2.0/24` to Cloudflare Magic Transit and `192.0.2.1/32` to the Cloudflare CDN would route traffic  for `192.0.2.1` to the CDN, and traffic for all other IPs in the prefix to Cloudflare Magic Transit. 
         * @summary List Service Bindings
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {VmrjA5DJIdentifier} prefixIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAddressManagementServiceBindingsListServiceBindings(accountIdentifier: VmrjA5DJIdentifier, prefixIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20036>>> {
            const localVarAxiosArgs = await IPAddressManagementServiceBindingsApiAxiosParamCreator(configuration).ipAddressManagementServiceBindingsListServiceBindings(accountIdentifier, prefixIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Bring-Your-Own IP (BYOIP) prefixes onboarded to Cloudflare must be bound to a service running on the Cloudflare network to enable a Cloudflare product on the IP addresses. This endpoint can be used as a reference of available services on the Cloudflare network, and their service IDs. 
         * @summary List Services
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAddressManagementServiceBindingsListServices(accountIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20037>>> {
            const localVarAxiosArgs = await IPAddressManagementServiceBindingsApiAxiosParamCreator(configuration).ipAddressManagementServiceBindingsListServices(accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * IPAddressManagementServiceBindingsApi - factory interface
 * @export
 */
export const IPAddressManagementServiceBindingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Creates a new Service Binding, routing traffic to IPs within the given CIDR to a service running on Cloudflare's network.  **Note:** This API may only be used on prefixes currently configured with a Magic Transit service binding, and only allows creating service bindings for the Cloudflare CDN or Cloudflare Spectrum. 
         * @summary Create Service Binding
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {VmrjA5DJIdentifier} prefixIdentifier 
         * @param {VmrjA5DJCreateBindingRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAddressManagementServiceBindingsCreateServiceBinding(accountIdentifier: VmrjA5DJIdentifier, prefixIdentifier: VmrjA5DJIdentifier, body?: VmrjA5DJCreateBindingRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse201>> {
            return IPAddressManagementServiceBindingsApiFp(configuration).ipAddressManagementServiceBindingsCreateServiceBinding(accountIdentifier, prefixIdentifier, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Service Binding
         * @summary Delete Service Binding
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {VmrjA5DJIdentifier} prefixIdentifier 
         * @param {VmrjA5DJIdentifier} bindingIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAddressManagementServiceBindingsDeleteServiceBinding(accountIdentifier: VmrjA5DJIdentifier, prefixIdentifier: VmrjA5DJIdentifier, bindingIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<VmrjA5DJApiResponseCommon>> {
            return IPAddressManagementServiceBindingsApiFp(configuration).ipAddressManagementServiceBindingsDeleteServiceBinding(accountIdentifier, prefixIdentifier, bindingIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a single Service Binding
         * @summary Get Service Binding
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {VmrjA5DJIdentifier} prefixIdentifier 
         * @param {VmrjA5DJIdentifier} bindingIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAddressManagementServiceBindingsGetServiceBinding(accountIdentifier: VmrjA5DJIdentifier, prefixIdentifier: VmrjA5DJIdentifier, bindingIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse201>> {
            return IPAddressManagementServiceBindingsApiFp(configuration).ipAddressManagementServiceBindingsGetServiceBinding(accountIdentifier, prefixIdentifier, bindingIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * List the Cloudflare services this prefix is currently bound to. Traffic sent to an address within an IP prefix will be routed to the Cloudflare service of the most-specific Service Binding matching the address.  **Example:** binding `192.0.2.0/24` to Cloudflare Magic Transit and `192.0.2.1/32` to the Cloudflare CDN would route traffic  for `192.0.2.1` to the CDN, and traffic for all other IPs in the prefix to Cloudflare Magic Transit. 
         * @summary List Service Bindings
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {VmrjA5DJIdentifier} prefixIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAddressManagementServiceBindingsListServiceBindings(accountIdentifier: VmrjA5DJIdentifier, prefixIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20036>> {
            return IPAddressManagementServiceBindingsApiFp(configuration).ipAddressManagementServiceBindingsListServiceBindings(accountIdentifier, prefixIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Bring-Your-Own IP (BYOIP) prefixes onboarded to Cloudflare must be bound to a service running on the Cloudflare network to enable a Cloudflare product on the IP addresses. This endpoint can be used as a reference of available services on the Cloudflare network, and their service IDs. 
         * @summary List Services
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAddressManagementServiceBindingsListServices(accountIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20037>> {
            return IPAddressManagementServiceBindingsApiFp(configuration).ipAddressManagementServiceBindingsListServices(accountIdentifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IPAddressManagementServiceBindingsApi - object-oriented interface
 * @export
 * @class IPAddressManagementServiceBindingsApi
 * @extends {BaseAPI}
 */
export class IPAddressManagementServiceBindingsApi extends BaseAPI {
    /**
     * Creates a new Service Binding, routing traffic to IPs within the given CIDR to a service running on Cloudflare's network.  **Note:** This API may only be used on prefixes currently configured with a Magic Transit service binding, and only allows creating service bindings for the Cloudflare CDN or Cloudflare Spectrum. 
     * @summary Create Service Binding
     * @param {VmrjA5DJIdentifier} accountIdentifier 
     * @param {VmrjA5DJIdentifier} prefixIdentifier 
     * @param {VmrjA5DJCreateBindingRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IPAddressManagementServiceBindingsApi
     */
    public async ipAddressManagementServiceBindingsCreateServiceBinding(accountIdentifier: VmrjA5DJIdentifier, prefixIdentifier: VmrjA5DJIdentifier, body?: VmrjA5DJCreateBindingRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse201>> {
        return IPAddressManagementServiceBindingsApiFp(this.configuration).ipAddressManagementServiceBindingsCreateServiceBinding(accountIdentifier, prefixIdentifier, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a Service Binding
     * @summary Delete Service Binding
     * @param {VmrjA5DJIdentifier} accountIdentifier 
     * @param {VmrjA5DJIdentifier} prefixIdentifier 
     * @param {VmrjA5DJIdentifier} bindingIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IPAddressManagementServiceBindingsApi
     */
    public async ipAddressManagementServiceBindingsDeleteServiceBinding(accountIdentifier: VmrjA5DJIdentifier, prefixIdentifier: VmrjA5DJIdentifier, bindingIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<VmrjA5DJApiResponseCommon>> {
        return IPAddressManagementServiceBindingsApiFp(this.configuration).ipAddressManagementServiceBindingsDeleteServiceBinding(accountIdentifier, prefixIdentifier, bindingIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch a single Service Binding
     * @summary Get Service Binding
     * @param {VmrjA5DJIdentifier} accountIdentifier 
     * @param {VmrjA5DJIdentifier} prefixIdentifier 
     * @param {VmrjA5DJIdentifier} bindingIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IPAddressManagementServiceBindingsApi
     */
    public async ipAddressManagementServiceBindingsGetServiceBinding(accountIdentifier: VmrjA5DJIdentifier, prefixIdentifier: VmrjA5DJIdentifier, bindingIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse201>> {
        return IPAddressManagementServiceBindingsApiFp(this.configuration).ipAddressManagementServiceBindingsGetServiceBinding(accountIdentifier, prefixIdentifier, bindingIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List the Cloudflare services this prefix is currently bound to. Traffic sent to an address within an IP prefix will be routed to the Cloudflare service of the most-specific Service Binding matching the address.  **Example:** binding `192.0.2.0/24` to Cloudflare Magic Transit and `192.0.2.1/32` to the Cloudflare CDN would route traffic  for `192.0.2.1` to the CDN, and traffic for all other IPs in the prefix to Cloudflare Magic Transit. 
     * @summary List Service Bindings
     * @param {VmrjA5DJIdentifier} accountIdentifier 
     * @param {VmrjA5DJIdentifier} prefixIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IPAddressManagementServiceBindingsApi
     */
    public async ipAddressManagementServiceBindingsListServiceBindings(accountIdentifier: VmrjA5DJIdentifier, prefixIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20036>> {
        return IPAddressManagementServiceBindingsApiFp(this.configuration).ipAddressManagementServiceBindingsListServiceBindings(accountIdentifier, prefixIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Bring-Your-Own IP (BYOIP) prefixes onboarded to Cloudflare must be bound to a service running on the Cloudflare network to enable a Cloudflare product on the IP addresses. This endpoint can be used as a reference of available services on the Cloudflare network, and their service IDs. 
     * @summary List Services
     * @param {VmrjA5DJIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IPAddressManagementServiceBindingsApi
     */
    public async ipAddressManagementServiceBindingsListServices(accountIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20037>> {
        return IPAddressManagementServiceBindingsApiFp(this.configuration).ipAddressManagementServiceBindingsListServices(accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
}
