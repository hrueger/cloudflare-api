/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { DlpApiResponseSingle } from '../models';
import { DlpCreateCustomProfileResponse } from '../models';
import { DlpCreateCustomProfiles } from '../models';
import { DlpCustomProfile } from '../models';
import { DlpCustomProfileResponse } from '../models';
import { DlpEitherProfileResponse } from '../models';
import { DlpIdentifier } from '../models';
import { DlpPredefinedProfile } from '../models';
import { DlpPredefinedProfileResponse } from '../models';
import { DlpProfileId } from '../models';
import { DlpResponseCollection } from '../models';
import { DlpUpdateCustomProfile } from '../models';
import { DlpUpdatePredefinedProfile } from '../models';
import { InlineResponse4XX113 } from '../models';
import { InlineResponse4XX114 } from '../models';
import { InlineResponse4XX115 } from '../models';
import { InlineResponse4XX116 } from '../models';
import { InlineResponse4XX117 } from '../models';
import { InlineResponse4XX118 } from '../models';
import { InlineResponse4XX119 } from '../models';
import { InlineResponse4XX120 } from '../models';
/**
 * DLPProfilesApi - axios parameter creator
 * @export
 */
export const DLPProfilesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a set of DLP custom profiles.
         * @summary Create custom profiles
         * @param {DlpCreateCustomProfiles} body 
         * @param {DlpIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dlpProfilesCreateCustomProfiles: async (body: DlpCreateCustomProfiles, accountIdentifier: DlpIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling dlpProfilesCreateCustomProfiles.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling dlpProfilesCreateCustomProfiles.');
            }
            const localVarPath = `/accounts/{account_identifier}/dlp/profiles/custom`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a DLP custom profile.
         * @summary Delete custom profile
         * @param {DlpProfileId} profileId 
         * @param {DlpIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dlpProfilesDeleteCustomProfile: async (profileId: DlpProfileId, accountIdentifier: DlpIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'profileId' is not null or undefined
            if (profileId === null || profileId === undefined) {
                throw new RequiredError('profileId','Required parameter profileId was null or undefined when calling dlpProfilesDeleteCustomProfile.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling dlpProfilesDeleteCustomProfile.');
            }
            const localVarPath = `/accounts/{account_identifier}/dlp/profiles/custom/{profile_id}`
                .replace(`{${"profile_id"}}`, encodeURIComponent(String(profileId)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches a custom DLP profile.
         * @summary Get custom profile
         * @param {DlpProfileId} profileId 
         * @param {DlpIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dlpProfilesGetCustomProfile: async (profileId: DlpProfileId, accountIdentifier: DlpIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'profileId' is not null or undefined
            if (profileId === null || profileId === undefined) {
                throw new RequiredError('profileId','Required parameter profileId was null or undefined when calling dlpProfilesGetCustomProfile.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling dlpProfilesGetCustomProfile.');
            }
            const localVarPath = `/accounts/{account_identifier}/dlp/profiles/custom/{profile_id}`
                .replace(`{${"profile_id"}}`, encodeURIComponent(String(profileId)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches a DLP profile by ID. Supports both predefined and custom profiles
         * @summary Get DLP Profile
         * @param {DlpProfileId} profileId 
         * @param {DlpIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dlpProfilesGetDlpProfile: async (profileId: DlpProfileId, accountIdentifier: DlpIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'profileId' is not null or undefined
            if (profileId === null || profileId === undefined) {
                throw new RequiredError('profileId','Required parameter profileId was null or undefined when calling dlpProfilesGetDlpProfile.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling dlpProfilesGetDlpProfile.');
            }
            const localVarPath = `/accounts/{account_identifier}/dlp/profiles/{profile_id}`
                .replace(`{${"profile_id"}}`, encodeURIComponent(String(profileId)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches a predefined DLP profile.
         * @summary Get predefined profile
         * @param {DlpProfileId} profileId 
         * @param {DlpIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dlpProfilesGetPredefinedProfile: async (profileId: DlpProfileId, accountIdentifier: DlpIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'profileId' is not null or undefined
            if (profileId === null || profileId === undefined) {
                throw new RequiredError('profileId','Required parameter profileId was null or undefined when calling dlpProfilesGetPredefinedProfile.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling dlpProfilesGetPredefinedProfile.');
            }
            const localVarPath = `/accounts/{account_identifier}/dlp/profiles/predefined/{profile_id}`
                .replace(`{${"profile_id"}}`, encodeURIComponent(String(profileId)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all DLP profiles in an account.
         * @summary List all profiles
         * @param {DlpIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dlpProfilesListAllProfiles: async (accountIdentifier: DlpIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling dlpProfilesListAllProfiles.');
            }
            const localVarPath = `/accounts/{account_identifier}/dlp/profiles`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a DLP custom profile.
         * @summary Update custom profile
         * @param {DlpUpdateCustomProfile} body 
         * @param {DlpProfileId} profileId 
         * @param {DlpIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dlpProfilesUpdateCustomProfile: async (body: DlpUpdateCustomProfile, profileId: DlpProfileId, accountIdentifier: DlpIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling dlpProfilesUpdateCustomProfile.');
            }
            // verify required parameter 'profileId' is not null or undefined
            if (profileId === null || profileId === undefined) {
                throw new RequiredError('profileId','Required parameter profileId was null or undefined when calling dlpProfilesUpdateCustomProfile.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling dlpProfilesUpdateCustomProfile.');
            }
            const localVarPath = `/accounts/{account_identifier}/dlp/profiles/custom/{profile_id}`
                .replace(`{${"profile_id"}}`, encodeURIComponent(String(profileId)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a DLP predefined profile. Only supports enabling/disabling entries.
         * @summary Update predefined profile
         * @param {DlpUpdatePredefinedProfile} body 
         * @param {DlpProfileId} profileId 
         * @param {DlpIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dlpProfilesUpdatePredefinedProfile: async (body: DlpUpdatePredefinedProfile, profileId: DlpProfileId, accountIdentifier: DlpIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling dlpProfilesUpdatePredefinedProfile.');
            }
            // verify required parameter 'profileId' is not null or undefined
            if (profileId === null || profileId === undefined) {
                throw new RequiredError('profileId','Required parameter profileId was null or undefined when calling dlpProfilesUpdatePredefinedProfile.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling dlpProfilesUpdatePredefinedProfile.');
            }
            const localVarPath = `/accounts/{account_identifier}/dlp/profiles/predefined/{profile_id}`
                .replace(`{${"profile_id"}}`, encodeURIComponent(String(profileId)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DLPProfilesApi - functional programming interface
 * @export
 */
export const DLPProfilesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates a set of DLP custom profiles.
         * @summary Create custom profiles
         * @param {DlpCreateCustomProfiles} body 
         * @param {DlpIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dlpProfilesCreateCustomProfiles(body: DlpCreateCustomProfiles, accountIdentifier: DlpIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DlpCreateCustomProfileResponse>>> {
            const localVarAxiosArgs = await DLPProfilesApiAxiosParamCreator(configuration).dlpProfilesCreateCustomProfiles(body, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes a DLP custom profile.
         * @summary Delete custom profile
         * @param {DlpProfileId} profileId 
         * @param {DlpIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dlpProfilesDeleteCustomProfile(profileId: DlpProfileId, accountIdentifier: DlpIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DlpApiResponseSingle>>> {
            const localVarAxiosArgs = await DLPProfilesApiAxiosParamCreator(configuration).dlpProfilesDeleteCustomProfile(profileId, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetches a custom DLP profile.
         * @summary Get custom profile
         * @param {DlpProfileId} profileId 
         * @param {DlpIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dlpProfilesGetCustomProfile(profileId: DlpProfileId, accountIdentifier: DlpIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DlpCustomProfileResponse>>> {
            const localVarAxiosArgs = await DLPProfilesApiAxiosParamCreator(configuration).dlpProfilesGetCustomProfile(profileId, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetches a DLP profile by ID. Supports both predefined and custom profiles
         * @summary Get DLP Profile
         * @param {DlpProfileId} profileId 
         * @param {DlpIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dlpProfilesGetDlpProfile(profileId: DlpProfileId, accountIdentifier: DlpIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DlpEitherProfileResponse>>> {
            const localVarAxiosArgs = await DLPProfilesApiAxiosParamCreator(configuration).dlpProfilesGetDlpProfile(profileId, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetches a predefined DLP profile.
         * @summary Get predefined profile
         * @param {DlpProfileId} profileId 
         * @param {DlpIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dlpProfilesGetPredefinedProfile(profileId: DlpProfileId, accountIdentifier: DlpIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DlpPredefinedProfileResponse>>> {
            const localVarAxiosArgs = await DLPProfilesApiAxiosParamCreator(configuration).dlpProfilesGetPredefinedProfile(profileId, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Lists all DLP profiles in an account.
         * @summary List all profiles
         * @param {DlpIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dlpProfilesListAllProfiles(accountIdentifier: DlpIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DlpResponseCollection>>> {
            const localVarAxiosArgs = await DLPProfilesApiAxiosParamCreator(configuration).dlpProfilesListAllProfiles(accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates a DLP custom profile.
         * @summary Update custom profile
         * @param {DlpUpdateCustomProfile} body 
         * @param {DlpProfileId} profileId 
         * @param {DlpIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dlpProfilesUpdateCustomProfile(body: DlpUpdateCustomProfile, profileId: DlpProfileId, accountIdentifier: DlpIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DlpCustomProfile>>> {
            const localVarAxiosArgs = await DLPProfilesApiAxiosParamCreator(configuration).dlpProfilesUpdateCustomProfile(body, profileId, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates a DLP predefined profile. Only supports enabling/disabling entries.
         * @summary Update predefined profile
         * @param {DlpUpdatePredefinedProfile} body 
         * @param {DlpProfileId} profileId 
         * @param {DlpIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dlpProfilesUpdatePredefinedProfile(body: DlpUpdatePredefinedProfile, profileId: DlpProfileId, accountIdentifier: DlpIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DlpPredefinedProfile>>> {
            const localVarAxiosArgs = await DLPProfilesApiAxiosParamCreator(configuration).dlpProfilesUpdatePredefinedProfile(body, profileId, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DLPProfilesApi - factory interface
 * @export
 */
export const DLPProfilesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Creates a set of DLP custom profiles.
         * @summary Create custom profiles
         * @param {DlpCreateCustomProfiles} body 
         * @param {DlpIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dlpProfilesCreateCustomProfiles(body: DlpCreateCustomProfiles, accountIdentifier: DlpIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<DlpCreateCustomProfileResponse>> {
            return DLPProfilesApiFp(configuration).dlpProfilesCreateCustomProfiles(body, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a DLP custom profile.
         * @summary Delete custom profile
         * @param {DlpProfileId} profileId 
         * @param {DlpIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dlpProfilesDeleteCustomProfile(profileId: DlpProfileId, accountIdentifier: DlpIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<DlpApiResponseSingle>> {
            return DLPProfilesApiFp(configuration).dlpProfilesDeleteCustomProfile(profileId, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches a custom DLP profile.
         * @summary Get custom profile
         * @param {DlpProfileId} profileId 
         * @param {DlpIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dlpProfilesGetCustomProfile(profileId: DlpProfileId, accountIdentifier: DlpIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<DlpCustomProfileResponse>> {
            return DLPProfilesApiFp(configuration).dlpProfilesGetCustomProfile(profileId, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches a DLP profile by ID. Supports both predefined and custom profiles
         * @summary Get DLP Profile
         * @param {DlpProfileId} profileId 
         * @param {DlpIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dlpProfilesGetDlpProfile(profileId: DlpProfileId, accountIdentifier: DlpIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<DlpEitherProfileResponse>> {
            return DLPProfilesApiFp(configuration).dlpProfilesGetDlpProfile(profileId, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches a predefined DLP profile.
         * @summary Get predefined profile
         * @param {DlpProfileId} profileId 
         * @param {DlpIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dlpProfilesGetPredefinedProfile(profileId: DlpProfileId, accountIdentifier: DlpIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<DlpPredefinedProfileResponse>> {
            return DLPProfilesApiFp(configuration).dlpProfilesGetPredefinedProfile(profileId, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists all DLP profiles in an account.
         * @summary List all profiles
         * @param {DlpIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dlpProfilesListAllProfiles(accountIdentifier: DlpIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<DlpResponseCollection>> {
            return DLPProfilesApiFp(configuration).dlpProfilesListAllProfiles(accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a DLP custom profile.
         * @summary Update custom profile
         * @param {DlpUpdateCustomProfile} body 
         * @param {DlpProfileId} profileId 
         * @param {DlpIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dlpProfilesUpdateCustomProfile(body: DlpUpdateCustomProfile, profileId: DlpProfileId, accountIdentifier: DlpIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<DlpCustomProfile>> {
            return DLPProfilesApiFp(configuration).dlpProfilesUpdateCustomProfile(body, profileId, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a DLP predefined profile. Only supports enabling/disabling entries.
         * @summary Update predefined profile
         * @param {DlpUpdatePredefinedProfile} body 
         * @param {DlpProfileId} profileId 
         * @param {DlpIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dlpProfilesUpdatePredefinedProfile(body: DlpUpdatePredefinedProfile, profileId: DlpProfileId, accountIdentifier: DlpIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<DlpPredefinedProfile>> {
            return DLPProfilesApiFp(configuration).dlpProfilesUpdatePredefinedProfile(body, profileId, accountIdentifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DLPProfilesApi - object-oriented interface
 * @export
 * @class DLPProfilesApi
 * @extends {BaseAPI}
 */
export class DLPProfilesApi extends BaseAPI {
    /**
     * Creates a set of DLP custom profiles.
     * @summary Create custom profiles
     * @param {DlpCreateCustomProfiles} body 
     * @param {DlpIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DLPProfilesApi
     */
    public async dlpProfilesCreateCustomProfiles(body: DlpCreateCustomProfiles, accountIdentifier: DlpIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<DlpCreateCustomProfileResponse>> {
        return DLPProfilesApiFp(this.configuration).dlpProfilesCreateCustomProfiles(body, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes a DLP custom profile.
     * @summary Delete custom profile
     * @param {DlpProfileId} profileId 
     * @param {DlpIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DLPProfilesApi
     */
    public async dlpProfilesDeleteCustomProfile(profileId: DlpProfileId, accountIdentifier: DlpIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<DlpApiResponseSingle>> {
        return DLPProfilesApiFp(this.configuration).dlpProfilesDeleteCustomProfile(profileId, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches a custom DLP profile.
     * @summary Get custom profile
     * @param {DlpProfileId} profileId 
     * @param {DlpIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DLPProfilesApi
     */
    public async dlpProfilesGetCustomProfile(profileId: DlpProfileId, accountIdentifier: DlpIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<DlpCustomProfileResponse>> {
        return DLPProfilesApiFp(this.configuration).dlpProfilesGetCustomProfile(profileId, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches a DLP profile by ID. Supports both predefined and custom profiles
     * @summary Get DLP Profile
     * @param {DlpProfileId} profileId 
     * @param {DlpIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DLPProfilesApi
     */
    public async dlpProfilesGetDlpProfile(profileId: DlpProfileId, accountIdentifier: DlpIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<DlpEitherProfileResponse>> {
        return DLPProfilesApiFp(this.configuration).dlpProfilesGetDlpProfile(profileId, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches a predefined DLP profile.
     * @summary Get predefined profile
     * @param {DlpProfileId} profileId 
     * @param {DlpIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DLPProfilesApi
     */
    public async dlpProfilesGetPredefinedProfile(profileId: DlpProfileId, accountIdentifier: DlpIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<DlpPredefinedProfileResponse>> {
        return DLPProfilesApiFp(this.configuration).dlpProfilesGetPredefinedProfile(profileId, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists all DLP profiles in an account.
     * @summary List all profiles
     * @param {DlpIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DLPProfilesApi
     */
    public async dlpProfilesListAllProfiles(accountIdentifier: DlpIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<DlpResponseCollection>> {
        return DLPProfilesApiFp(this.configuration).dlpProfilesListAllProfiles(accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates a DLP custom profile.
     * @summary Update custom profile
     * @param {DlpUpdateCustomProfile} body 
     * @param {DlpProfileId} profileId 
     * @param {DlpIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DLPProfilesApi
     */
    public async dlpProfilesUpdateCustomProfile(body: DlpUpdateCustomProfile, profileId: DlpProfileId, accountIdentifier: DlpIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<DlpCustomProfile>> {
        return DLPProfilesApiFp(this.configuration).dlpProfilesUpdateCustomProfile(body, profileId, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates a DLP predefined profile. Only supports enabling/disabling entries.
     * @summary Update predefined profile
     * @param {DlpUpdatePredefinedProfile} body 
     * @param {DlpProfileId} profileId 
     * @param {DlpIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DLPProfilesApi
     */
    public async dlpProfilesUpdatePredefinedProfile(body: DlpUpdatePredefinedProfile, profileId: DlpProfileId, accountIdentifier: DlpIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<DlpPredefinedProfile>> {
        return DLPProfilesApiFp(this.configuration).dlpProfilesUpdatePredefinedProfile(body, profileId, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
}
