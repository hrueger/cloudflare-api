/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { IdentifierGatewayBody } from '../models';
import { InlineResponse4XX349 } from '../models';
import { InlineResponse4XX350 } from '../models';
import { InlineResponse4XX351 } from '../models';
import { InlineResponse4XX352 } from '../models';
import { Ir4bTFI2GatewayAccount } from '../models';
import { Ir4bTFI2GatewayAccountConfig } from '../models';
import { Ir4bTFI2GatewayAccountLoggingSettings } from '../models';
import { Ir4bTFI2GatewayAccountLoggingSettingsResponse } from '../models';
import { Ir4bTFI2GatewayAccountSettings } from '../models';
import { Ir4bTFI2Identifier } from '../models';
import { ZzQH0lDwIdentifier } from '../models';
import { ZzQH0lDwZeroTrustAccountDeviceSettings } from '../models';
import { ZzQH0lDwZeroTrustAccountDeviceSettingsResponse } from '../models';
/**
 * ZeroTrustAccountsApi - axios parameter creator
 * @export
 */
export const ZeroTrustAccountsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a Zero Trust account with an existing Cloudflare account.
         * @summary Create Zero Trust account
         * @param {IdentifierGatewayBody} body 
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zeroTrustAccountsCreateZeroTrustAccount: async (body: IdentifierGatewayBody, identifier: Ir4bTFI2Identifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling zeroTrustAccountsCreateZeroTrustAccount.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling zeroTrustAccountsCreateZeroTrustAccount.');
            }
            const localVarPath = `/accounts/{identifier}/gateway`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Describes the current device settings for a Zero Trust account.
         * @summary Get device settings for a Zero Trust account
         * @param {ZzQH0lDwIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zeroTrustAccountsGetDeviceSettingsForZeroTrustAccount: async (identifier: ZzQH0lDwIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling zeroTrustAccountsGetDeviceSettingsForZeroTrustAccount.');
            }
            const localVarPath = `/accounts/{identifier}/devices/settings`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches the current logging settings for Zero Trust account.
         * @summary Get logging settings for the Zero Trust account
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zeroTrustAccountsGetLoggingSettingsForTheZeroTrustAccount: async (identifier: Ir4bTFI2Identifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling zeroTrustAccountsGetLoggingSettingsForTheZeroTrustAccount.');
            }
            const localVarPath = `/accounts/{identifier}/gateway/logging`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches the current Zero Trust account configuration.
         * @summary Get Zero Trust account configuration
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zeroTrustAccountsGetZeroTrustAccountConfiguration: async (identifier: Ir4bTFI2Identifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling zeroTrustAccountsGetZeroTrustAccountConfiguration.');
            }
            const localVarPath = `/accounts/{identifier}/gateway/configuration`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets information about the current Zero Trust account.
         * @summary Get Zero Trust account information
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zeroTrustAccountsGetZeroTrustAccountInformation: async (identifier: Ir4bTFI2Identifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling zeroTrustAccountsGetZeroTrustAccountInformation.');
            }
            const localVarPath = `/accounts/{identifier}/gateway`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Patches the current Zero Trust account configuration. This endpoint can update a single subcollection of settings such as `antivirus`, `tls_decrypt`, `activity_log`, `block_page`, `browser_isolation`, `fips`, `body_scanning`, or `custom_certificate`, without updating the entire configuration object. Returns an error if any collection of settings is not properly configured.
         * @summary Patch Zero Trust account configuration
         * @param {Ir4bTFI2GatewayAccountSettings} body 
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zeroTrustAccountsPatchZeroTrustAccountConfiguration: async (body: Ir4bTFI2GatewayAccountSettings, identifier: Ir4bTFI2Identifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling zeroTrustAccountsPatchZeroTrustAccountConfiguration.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling zeroTrustAccountsPatchZeroTrustAccountConfiguration.');
            }
            const localVarPath = `/accounts/{identifier}/gateway/configuration`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the current device settings for a Zero Trust account.
         * @summary Update device settings for a Zero Trust account
         * @param {ZzQH0lDwZeroTrustAccountDeviceSettings} body 
         * @param {ZzQH0lDwIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zeroTrustAccountsUpdateDeviceSettingsForTheZeroTrustAccount: async (body: ZzQH0lDwZeroTrustAccountDeviceSettings, identifier: ZzQH0lDwIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling zeroTrustAccountsUpdateDeviceSettingsForTheZeroTrustAccount.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling zeroTrustAccountsUpdateDeviceSettingsForTheZeroTrustAccount.');
            }
            const localVarPath = `/accounts/{identifier}/devices/settings`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates logging settings for the current Zero Trust account.
         * @summary Update Zero Trust account logging settings
         * @param {Ir4bTFI2GatewayAccountLoggingSettings} body 
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zeroTrustAccountsUpdateLoggingSettingsForTheZeroTrustAccount: async (body: Ir4bTFI2GatewayAccountLoggingSettings, identifier: Ir4bTFI2Identifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling zeroTrustAccountsUpdateLoggingSettingsForTheZeroTrustAccount.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling zeroTrustAccountsUpdateLoggingSettingsForTheZeroTrustAccount.');
            }
            const localVarPath = `/accounts/{identifier}/gateway/logging`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the current Zero Trust account configuration.
         * @summary Update Zero Trust account configuration
         * @param {Ir4bTFI2GatewayAccountSettings} body 
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zeroTrustAccountsUpdateZeroTrustAccountConfiguration: async (body: Ir4bTFI2GatewayAccountSettings, identifier: Ir4bTFI2Identifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling zeroTrustAccountsUpdateZeroTrustAccountConfiguration.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling zeroTrustAccountsUpdateZeroTrustAccountConfiguration.');
            }
            const localVarPath = `/accounts/{identifier}/gateway/configuration`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ZeroTrustAccountsApi - functional programming interface
 * @export
 */
export const ZeroTrustAccountsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates a Zero Trust account with an existing Cloudflare account.
         * @summary Create Zero Trust account
         * @param {IdentifierGatewayBody} body 
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zeroTrustAccountsCreateZeroTrustAccount(body: IdentifierGatewayBody, identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Ir4bTFI2GatewayAccount>>> {
            const localVarAxiosArgs = await ZeroTrustAccountsApiAxiosParamCreator(configuration).zeroTrustAccountsCreateZeroTrustAccount(body, identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Describes the current device settings for a Zero Trust account.
         * @summary Get device settings for a Zero Trust account
         * @param {ZzQH0lDwIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zeroTrustAccountsGetDeviceSettingsForZeroTrustAccount(identifier: ZzQH0lDwIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ZzQH0lDwZeroTrustAccountDeviceSettingsResponse>>> {
            const localVarAxiosArgs = await ZeroTrustAccountsApiAxiosParamCreator(configuration).zeroTrustAccountsGetDeviceSettingsForZeroTrustAccount(identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetches the current logging settings for Zero Trust account.
         * @summary Get logging settings for the Zero Trust account
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zeroTrustAccountsGetLoggingSettingsForTheZeroTrustAccount(identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Ir4bTFI2GatewayAccountLoggingSettingsResponse>>> {
            const localVarAxiosArgs = await ZeroTrustAccountsApiAxiosParamCreator(configuration).zeroTrustAccountsGetLoggingSettingsForTheZeroTrustAccount(identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetches the current Zero Trust account configuration.
         * @summary Get Zero Trust account configuration
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zeroTrustAccountsGetZeroTrustAccountConfiguration(identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Ir4bTFI2GatewayAccountConfig>>> {
            const localVarAxiosArgs = await ZeroTrustAccountsApiAxiosParamCreator(configuration).zeroTrustAccountsGetZeroTrustAccountConfiguration(identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets information about the current Zero Trust account.
         * @summary Get Zero Trust account information
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zeroTrustAccountsGetZeroTrustAccountInformation(identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Ir4bTFI2GatewayAccount>>> {
            const localVarAxiosArgs = await ZeroTrustAccountsApiAxiosParamCreator(configuration).zeroTrustAccountsGetZeroTrustAccountInformation(identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Patches the current Zero Trust account configuration. This endpoint can update a single subcollection of settings such as `antivirus`, `tls_decrypt`, `activity_log`, `block_page`, `browser_isolation`, `fips`, `body_scanning`, or `custom_certificate`, without updating the entire configuration object. Returns an error if any collection of settings is not properly configured.
         * @summary Patch Zero Trust account configuration
         * @param {Ir4bTFI2GatewayAccountSettings} body 
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zeroTrustAccountsPatchZeroTrustAccountConfiguration(body: Ir4bTFI2GatewayAccountSettings, identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Ir4bTFI2GatewayAccountConfig>>> {
            const localVarAxiosArgs = await ZeroTrustAccountsApiAxiosParamCreator(configuration).zeroTrustAccountsPatchZeroTrustAccountConfiguration(body, identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates the current device settings for a Zero Trust account.
         * @summary Update device settings for a Zero Trust account
         * @param {ZzQH0lDwZeroTrustAccountDeviceSettings} body 
         * @param {ZzQH0lDwIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zeroTrustAccountsUpdateDeviceSettingsForTheZeroTrustAccount(body: ZzQH0lDwZeroTrustAccountDeviceSettings, identifier: ZzQH0lDwIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ZzQH0lDwZeroTrustAccountDeviceSettingsResponse>>> {
            const localVarAxiosArgs = await ZeroTrustAccountsApiAxiosParamCreator(configuration).zeroTrustAccountsUpdateDeviceSettingsForTheZeroTrustAccount(body, identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates logging settings for the current Zero Trust account.
         * @summary Update Zero Trust account logging settings
         * @param {Ir4bTFI2GatewayAccountLoggingSettings} body 
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zeroTrustAccountsUpdateLoggingSettingsForTheZeroTrustAccount(body: Ir4bTFI2GatewayAccountLoggingSettings, identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Ir4bTFI2GatewayAccountLoggingSettingsResponse>>> {
            const localVarAxiosArgs = await ZeroTrustAccountsApiAxiosParamCreator(configuration).zeroTrustAccountsUpdateLoggingSettingsForTheZeroTrustAccount(body, identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates the current Zero Trust account configuration.
         * @summary Update Zero Trust account configuration
         * @param {Ir4bTFI2GatewayAccountSettings} body 
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zeroTrustAccountsUpdateZeroTrustAccountConfiguration(body: Ir4bTFI2GatewayAccountSettings, identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Ir4bTFI2GatewayAccountConfig>>> {
            const localVarAxiosArgs = await ZeroTrustAccountsApiAxiosParamCreator(configuration).zeroTrustAccountsUpdateZeroTrustAccountConfiguration(body, identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ZeroTrustAccountsApi - factory interface
 * @export
 */
export const ZeroTrustAccountsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Creates a Zero Trust account with an existing Cloudflare account.
         * @summary Create Zero Trust account
         * @param {IdentifierGatewayBody} body 
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zeroTrustAccountsCreateZeroTrustAccount(body: IdentifierGatewayBody, identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Ir4bTFI2GatewayAccount>> {
            return ZeroTrustAccountsApiFp(configuration).zeroTrustAccountsCreateZeroTrustAccount(body, identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Describes the current device settings for a Zero Trust account.
         * @summary Get device settings for a Zero Trust account
         * @param {ZzQH0lDwIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zeroTrustAccountsGetDeviceSettingsForZeroTrustAccount(identifier: ZzQH0lDwIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<ZzQH0lDwZeroTrustAccountDeviceSettingsResponse>> {
            return ZeroTrustAccountsApiFp(configuration).zeroTrustAccountsGetDeviceSettingsForZeroTrustAccount(identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches the current logging settings for Zero Trust account.
         * @summary Get logging settings for the Zero Trust account
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zeroTrustAccountsGetLoggingSettingsForTheZeroTrustAccount(identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Ir4bTFI2GatewayAccountLoggingSettingsResponse>> {
            return ZeroTrustAccountsApiFp(configuration).zeroTrustAccountsGetLoggingSettingsForTheZeroTrustAccount(identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches the current Zero Trust account configuration.
         * @summary Get Zero Trust account configuration
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zeroTrustAccountsGetZeroTrustAccountConfiguration(identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Ir4bTFI2GatewayAccountConfig>> {
            return ZeroTrustAccountsApiFp(configuration).zeroTrustAccountsGetZeroTrustAccountConfiguration(identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets information about the current Zero Trust account.
         * @summary Get Zero Trust account information
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zeroTrustAccountsGetZeroTrustAccountInformation(identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Ir4bTFI2GatewayAccount>> {
            return ZeroTrustAccountsApiFp(configuration).zeroTrustAccountsGetZeroTrustAccountInformation(identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Patches the current Zero Trust account configuration. This endpoint can update a single subcollection of settings such as `antivirus`, `tls_decrypt`, `activity_log`, `block_page`, `browser_isolation`, `fips`, `body_scanning`, or `custom_certificate`, without updating the entire configuration object. Returns an error if any collection of settings is not properly configured.
         * @summary Patch Zero Trust account configuration
         * @param {Ir4bTFI2GatewayAccountSettings} body 
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zeroTrustAccountsPatchZeroTrustAccountConfiguration(body: Ir4bTFI2GatewayAccountSettings, identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Ir4bTFI2GatewayAccountConfig>> {
            return ZeroTrustAccountsApiFp(configuration).zeroTrustAccountsPatchZeroTrustAccountConfiguration(body, identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the current device settings for a Zero Trust account.
         * @summary Update device settings for a Zero Trust account
         * @param {ZzQH0lDwZeroTrustAccountDeviceSettings} body 
         * @param {ZzQH0lDwIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zeroTrustAccountsUpdateDeviceSettingsForTheZeroTrustAccount(body: ZzQH0lDwZeroTrustAccountDeviceSettings, identifier: ZzQH0lDwIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<ZzQH0lDwZeroTrustAccountDeviceSettingsResponse>> {
            return ZeroTrustAccountsApiFp(configuration).zeroTrustAccountsUpdateDeviceSettingsForTheZeroTrustAccount(body, identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates logging settings for the current Zero Trust account.
         * @summary Update Zero Trust account logging settings
         * @param {Ir4bTFI2GatewayAccountLoggingSettings} body 
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zeroTrustAccountsUpdateLoggingSettingsForTheZeroTrustAccount(body: Ir4bTFI2GatewayAccountLoggingSettings, identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Ir4bTFI2GatewayAccountLoggingSettingsResponse>> {
            return ZeroTrustAccountsApiFp(configuration).zeroTrustAccountsUpdateLoggingSettingsForTheZeroTrustAccount(body, identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the current Zero Trust account configuration.
         * @summary Update Zero Trust account configuration
         * @param {Ir4bTFI2GatewayAccountSettings} body 
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zeroTrustAccountsUpdateZeroTrustAccountConfiguration(body: Ir4bTFI2GatewayAccountSettings, identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Ir4bTFI2GatewayAccountConfig>> {
            return ZeroTrustAccountsApiFp(configuration).zeroTrustAccountsUpdateZeroTrustAccountConfiguration(body, identifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ZeroTrustAccountsApi - object-oriented interface
 * @export
 * @class ZeroTrustAccountsApi
 * @extends {BaseAPI}
 */
export class ZeroTrustAccountsApi extends BaseAPI {
    /**
     * Creates a Zero Trust account with an existing Cloudflare account.
     * @summary Create Zero Trust account
     * @param {IdentifierGatewayBody} body 
     * @param {Ir4bTFI2Identifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZeroTrustAccountsApi
     */
    public async zeroTrustAccountsCreateZeroTrustAccount(body: IdentifierGatewayBody, identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Ir4bTFI2GatewayAccount>> {
        return ZeroTrustAccountsApiFp(this.configuration).zeroTrustAccountsCreateZeroTrustAccount(body, identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Describes the current device settings for a Zero Trust account.
     * @summary Get device settings for a Zero Trust account
     * @param {ZzQH0lDwIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZeroTrustAccountsApi
     */
    public async zeroTrustAccountsGetDeviceSettingsForZeroTrustAccount(identifier: ZzQH0lDwIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<ZzQH0lDwZeroTrustAccountDeviceSettingsResponse>> {
        return ZeroTrustAccountsApiFp(this.configuration).zeroTrustAccountsGetDeviceSettingsForZeroTrustAccount(identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches the current logging settings for Zero Trust account.
     * @summary Get logging settings for the Zero Trust account
     * @param {Ir4bTFI2Identifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZeroTrustAccountsApi
     */
    public async zeroTrustAccountsGetLoggingSettingsForTheZeroTrustAccount(identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Ir4bTFI2GatewayAccountLoggingSettingsResponse>> {
        return ZeroTrustAccountsApiFp(this.configuration).zeroTrustAccountsGetLoggingSettingsForTheZeroTrustAccount(identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches the current Zero Trust account configuration.
     * @summary Get Zero Trust account configuration
     * @param {Ir4bTFI2Identifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZeroTrustAccountsApi
     */
    public async zeroTrustAccountsGetZeroTrustAccountConfiguration(identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Ir4bTFI2GatewayAccountConfig>> {
        return ZeroTrustAccountsApiFp(this.configuration).zeroTrustAccountsGetZeroTrustAccountConfiguration(identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets information about the current Zero Trust account.
     * @summary Get Zero Trust account information
     * @param {Ir4bTFI2Identifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZeroTrustAccountsApi
     */
    public async zeroTrustAccountsGetZeroTrustAccountInformation(identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Ir4bTFI2GatewayAccount>> {
        return ZeroTrustAccountsApiFp(this.configuration).zeroTrustAccountsGetZeroTrustAccountInformation(identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Patches the current Zero Trust account configuration. This endpoint can update a single subcollection of settings such as `antivirus`, `tls_decrypt`, `activity_log`, `block_page`, `browser_isolation`, `fips`, `body_scanning`, or `custom_certificate`, without updating the entire configuration object. Returns an error if any collection of settings is not properly configured.
     * @summary Patch Zero Trust account configuration
     * @param {Ir4bTFI2GatewayAccountSettings} body 
     * @param {Ir4bTFI2Identifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZeroTrustAccountsApi
     */
    public async zeroTrustAccountsPatchZeroTrustAccountConfiguration(body: Ir4bTFI2GatewayAccountSettings, identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Ir4bTFI2GatewayAccountConfig>> {
        return ZeroTrustAccountsApiFp(this.configuration).zeroTrustAccountsPatchZeroTrustAccountConfiguration(body, identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates the current device settings for a Zero Trust account.
     * @summary Update device settings for a Zero Trust account
     * @param {ZzQH0lDwZeroTrustAccountDeviceSettings} body 
     * @param {ZzQH0lDwIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZeroTrustAccountsApi
     */
    public async zeroTrustAccountsUpdateDeviceSettingsForTheZeroTrustAccount(body: ZzQH0lDwZeroTrustAccountDeviceSettings, identifier: ZzQH0lDwIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<ZzQH0lDwZeroTrustAccountDeviceSettingsResponse>> {
        return ZeroTrustAccountsApiFp(this.configuration).zeroTrustAccountsUpdateDeviceSettingsForTheZeroTrustAccount(body, identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates logging settings for the current Zero Trust account.
     * @summary Update Zero Trust account logging settings
     * @param {Ir4bTFI2GatewayAccountLoggingSettings} body 
     * @param {Ir4bTFI2Identifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZeroTrustAccountsApi
     */
    public async zeroTrustAccountsUpdateLoggingSettingsForTheZeroTrustAccount(body: Ir4bTFI2GatewayAccountLoggingSettings, identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Ir4bTFI2GatewayAccountLoggingSettingsResponse>> {
        return ZeroTrustAccountsApiFp(this.configuration).zeroTrustAccountsUpdateLoggingSettingsForTheZeroTrustAccount(body, identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates the current Zero Trust account configuration.
     * @summary Update Zero Trust account configuration
     * @param {Ir4bTFI2GatewayAccountSettings} body 
     * @param {Ir4bTFI2Identifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZeroTrustAccountsApi
     */
    public async zeroTrustAccountsUpdateZeroTrustAccountConfiguration(body: Ir4bTFI2GatewayAccountSettings, identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Ir4bTFI2GatewayAccountConfig>> {
        return ZeroTrustAccountsApiFp(this.configuration).zeroTrustAccountsUpdateZeroTrustAccountConfiguration(body, identifier, options).then((request) => request(this.axios, this.basePath));
    }
}
