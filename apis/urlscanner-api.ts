/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse200166 } from '../models';
import { InlineResponse200167 } from '../models';
import { InlineResponse200168 } from '../models';
import { InlineResponse200169 } from '../models';
import { InlineResponse202 } from '../models';
import { InlineResponse4001 } from '../models';
import { InlineResponse4041 } from '../models';
import { InlineResponse409 } from '../models';
import { InlineResponse429 } from '../models';
import { UrlscannerScanBody } from '../models';
/**
 * URLScannerApi - axios parameter creator
 * @export
 */
export const URLScannerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Submit a URL to scan. You can also set some options, like the visibility level and custom headers. Accounts are limited to 1 new scan every 10 seconds and 8000 per month. If you need more, please reach out.
         * @summary Create URL Scan
         * @param {string} accountId Account Id
         * @param {UrlscannerScanBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        urlscannerCreateScan: async (accountId: string, body?: UrlscannerScanBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling urlscannerCreateScan.');
            }
            const localVarPath = `/accounts/{accountId}/urlscanner/scan`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get URL scan by uuid
         * @summary Get URL scan
         * @param {string} scanId Scan uuid
         * @param {string} accountId Account Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        urlscannerGetScan: async (scanId: string, accountId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scanId' is not null or undefined
            if (scanId === null || scanId === undefined) {
                throw new RequiredError('scanId','Required parameter scanId was null or undefined when calling urlscannerGetScan.');
            }
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling urlscannerGetScan.');
            }
            const localVarPath = `/accounts/{accountId}/urlscanner/scan/{scanId}`
                .replace(`{${"scanId"}}`, encodeURIComponent(String(scanId)))
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a URL scan's HAR file. See HAR spec at http://www.softwareishard.com/blog/har-12-spec/.
         * @summary Get URL scan's HAR
         * @param {string} scanId Scan uuid
         * @param {string} accountId Account Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        urlscannerGetScanHar: async (scanId: string, accountId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scanId' is not null or undefined
            if (scanId === null || scanId === undefined) {
                throw new RequiredError('scanId','Required parameter scanId was null or undefined when calling urlscannerGetScanHar.');
            }
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling urlscannerGetScanHar.');
            }
            const localVarPath = `/accounts/{accountId}/urlscanner/scan/{scanId}/har`
                .replace(`{${"scanId"}}`, encodeURIComponent(String(scanId)))
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get scan's screenshot by resolution (desktop/mobile/tablet).
         * @summary Get screenshot
         * @param {string} scanId Scan uuid
         * @param {string} accountId Account Id
         * @param {string} [resolution] Target device type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        urlscannerGetScanScreenshot: async (scanId: string, accountId: string, resolution?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scanId' is not null or undefined
            if (scanId === null || scanId === undefined) {
                throw new RequiredError('scanId','Required parameter scanId was null or undefined when calling urlscannerGetScanScreenshot.');
            }
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling urlscannerGetScanScreenshot.');
            }
            const localVarPath = `/accounts/{accountId}/urlscanner/scan/{scanId}/screenshot`
                .replace(`{${"scanId"}}`, encodeURIComponent(String(scanId)))
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            if (resolution !== undefined) {
                localVarQueryParameter['resolution'] = resolution;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Search scans by date and webpages' requests, including full URL (after redirects), hostname, and path. <br/> A successful scan will appear in search results a few minutes after finishing but may take much longer if the system in under load. By default, only successfully completed scans will appear in search results, unless searching by `scanId`. Please take into account that older scans may be removed from the search index at an unspecified time.
         * @summary Search URL scans
         * @param {string} accountId Account Id
         * @param {string} [scanId] Scan uuid
         * @param {number} [limit] Limit the number of objects in the response.
         * @param {string} [nextCursor] Pagination cursor to get the next set of results.
         * @param {Date} [dateStart] Filter scans requested after date (inclusive).
         * @param {Date} [dateEnd] Filter scans requested before date (inclusive).
         * @param {string} [url] Filter scans by exact match URL of _any_ request made by the webpage
         * @param {string} [hostname] Filter scans by hostname of _any_ request made by the webpage.
         * @param {string} [path] Filter scans by url path of _any_ request made by the webpage.
         * @param {string} [pageUrl] Filter scans by exact match to scanned URL (_after redirects_)
         * @param {string} [pageHostname] Filter scans by main page hostname .
         * @param {string} [pagePath] Filter scans by exact match URL path (also supports suffix search).
         * @param {boolean} [accountScans] Return only scans created by account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        urlscannerSearchScans: async (accountId: string, scanId?: string, limit?: number, nextCursor?: string, dateStart?: Date, dateEnd?: Date, url?: string, hostname?: string, path?: string, pageUrl?: string, pageHostname?: string, pagePath?: string, accountScans?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling urlscannerSearchScans.');
            }
            const localVarPath = `/accounts/{accountId}/urlscanner/scan`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            if (scanId !== undefined) {
                localVarQueryParameter['scanId'] = scanId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (nextCursor !== undefined) {
                localVarQueryParameter['next_cursor'] = nextCursor;
            }

            if (dateStart !== undefined) {
                localVarQueryParameter['date_start'] = (dateStart as any instanceof Date) ?
                    (dateStart as any).toISOString() :
                    dateStart;
            }

            if (dateEnd !== undefined) {
                localVarQueryParameter['date_end'] = (dateEnd as any instanceof Date) ?
                    (dateEnd as any).toISOString() :
                    dateEnd;
            }

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }

            if (hostname !== undefined) {
                localVarQueryParameter['hostname'] = hostname;
            }

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }

            if (pageUrl !== undefined) {
                localVarQueryParameter['page_url'] = pageUrl;
            }

            if (pageHostname !== undefined) {
                localVarQueryParameter['page_hostname'] = pageHostname;
            }

            if (pagePath !== undefined) {
                localVarQueryParameter['page_path'] = pagePath;
            }

            if (accountScans !== undefined) {
                localVarQueryParameter['account_scans'] = accountScans;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * URLScannerApi - functional programming interface
 * @export
 */
export const URLScannerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Submit a URL to scan. You can also set some options, like the visibility level and custom headers. Accounts are limited to 1 new scan every 10 seconds and 8000 per month. If you need more, please reach out.
         * @summary Create URL Scan
         * @param {string} accountId Account Id
         * @param {UrlscannerScanBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async urlscannerCreateScan(accountId: string, body?: UrlscannerScanBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200167>>> {
            const localVarAxiosArgs = await URLScannerApiAxiosParamCreator(configuration).urlscannerCreateScan(accountId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get URL scan by uuid
         * @summary Get URL scan
         * @param {string} scanId Scan uuid
         * @param {string} accountId Account Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async urlscannerGetScan(scanId: string, accountId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200168>>> {
            const localVarAxiosArgs = await URLScannerApiAxiosParamCreator(configuration).urlscannerGetScan(scanId, accountId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a URL scan's HAR file. See HAR spec at http://www.softwareishard.com/blog/har-12-spec/.
         * @summary Get URL scan's HAR
         * @param {string} scanId Scan uuid
         * @param {string} accountId Account Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async urlscannerGetScanHar(scanId: string, accountId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200169>>> {
            const localVarAxiosArgs = await URLScannerApiAxiosParamCreator(configuration).urlscannerGetScanHar(scanId, accountId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get scan's screenshot by resolution (desktop/mobile/tablet).
         * @summary Get screenshot
         * @param {string} scanId Scan uuid
         * @param {string} accountId Account Id
         * @param {string} [resolution] Target device type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async urlscannerGetScanScreenshot(scanId: string, accountId: string, resolution?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await URLScannerApiAxiosParamCreator(configuration).urlscannerGetScanScreenshot(scanId, accountId, resolution, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Search scans by date and webpages' requests, including full URL (after redirects), hostname, and path. <br/> A successful scan will appear in search results a few minutes after finishing but may take much longer if the system in under load. By default, only successfully completed scans will appear in search results, unless searching by `scanId`. Please take into account that older scans may be removed from the search index at an unspecified time.
         * @summary Search URL scans
         * @param {string} accountId Account Id
         * @param {string} [scanId] Scan uuid
         * @param {number} [limit] Limit the number of objects in the response.
         * @param {string} [nextCursor] Pagination cursor to get the next set of results.
         * @param {Date} [dateStart] Filter scans requested after date (inclusive).
         * @param {Date} [dateEnd] Filter scans requested before date (inclusive).
         * @param {string} [url] Filter scans by exact match URL of _any_ request made by the webpage
         * @param {string} [hostname] Filter scans by hostname of _any_ request made by the webpage.
         * @param {string} [path] Filter scans by url path of _any_ request made by the webpage.
         * @param {string} [pageUrl] Filter scans by exact match to scanned URL (_after redirects_)
         * @param {string} [pageHostname] Filter scans by main page hostname .
         * @param {string} [pagePath] Filter scans by exact match URL path (also supports suffix search).
         * @param {boolean} [accountScans] Return only scans created by account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async urlscannerSearchScans(accountId: string, scanId?: string, limit?: number, nextCursor?: string, dateStart?: Date, dateEnd?: Date, url?: string, hostname?: string, path?: string, pageUrl?: string, pageHostname?: string, pagePath?: string, accountScans?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200166>>> {
            const localVarAxiosArgs = await URLScannerApiAxiosParamCreator(configuration).urlscannerSearchScans(accountId, scanId, limit, nextCursor, dateStart, dateEnd, url, hostname, path, pageUrl, pageHostname, pagePath, accountScans, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * URLScannerApi - factory interface
 * @export
 */
export const URLScannerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Submit a URL to scan. You can also set some options, like the visibility level and custom headers. Accounts are limited to 1 new scan every 10 seconds and 8000 per month. If you need more, please reach out.
         * @summary Create URL Scan
         * @param {string} accountId Account Id
         * @param {UrlscannerScanBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async urlscannerCreateScan(accountId: string, body?: UrlscannerScanBody, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200167>> {
            return URLScannerApiFp(configuration).urlscannerCreateScan(accountId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Get URL scan by uuid
         * @summary Get URL scan
         * @param {string} scanId Scan uuid
         * @param {string} accountId Account Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async urlscannerGetScan(scanId: string, accountId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200168>> {
            return URLScannerApiFp(configuration).urlscannerGetScan(scanId, accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a URL scan's HAR file. See HAR spec at http://www.softwareishard.com/blog/har-12-spec/.
         * @summary Get URL scan's HAR
         * @param {string} scanId Scan uuid
         * @param {string} accountId Account Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async urlscannerGetScanHar(scanId: string, accountId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200169>> {
            return URLScannerApiFp(configuration).urlscannerGetScanHar(scanId, accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get scan's screenshot by resolution (desktop/mobile/tablet).
         * @summary Get screenshot
         * @param {string} scanId Scan uuid
         * @param {string} accountId Account Id
         * @param {string} [resolution] Target device type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async urlscannerGetScanScreenshot(scanId: string, accountId: string, resolution?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return URLScannerApiFp(configuration).urlscannerGetScanScreenshot(scanId, accountId, resolution, options).then((request) => request(axios, basePath));
        },
        /**
         * Search scans by date and webpages' requests, including full URL (after redirects), hostname, and path. <br/> A successful scan will appear in search results a few minutes after finishing but may take much longer if the system in under load. By default, only successfully completed scans will appear in search results, unless searching by `scanId`. Please take into account that older scans may be removed from the search index at an unspecified time.
         * @summary Search URL scans
         * @param {string} accountId Account Id
         * @param {string} [scanId] Scan uuid
         * @param {number} [limit] Limit the number of objects in the response.
         * @param {string} [nextCursor] Pagination cursor to get the next set of results.
         * @param {Date} [dateStart] Filter scans requested after date (inclusive).
         * @param {Date} [dateEnd] Filter scans requested before date (inclusive).
         * @param {string} [url] Filter scans by exact match URL of _any_ request made by the webpage
         * @param {string} [hostname] Filter scans by hostname of _any_ request made by the webpage.
         * @param {string} [path] Filter scans by url path of _any_ request made by the webpage.
         * @param {string} [pageUrl] Filter scans by exact match to scanned URL (_after redirects_)
         * @param {string} [pageHostname] Filter scans by main page hostname .
         * @param {string} [pagePath] Filter scans by exact match URL path (also supports suffix search).
         * @param {boolean} [accountScans] Return only scans created by account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async urlscannerSearchScans(accountId: string, scanId?: string, limit?: number, nextCursor?: string, dateStart?: Date, dateEnd?: Date, url?: string, hostname?: string, path?: string, pageUrl?: string, pageHostname?: string, pagePath?: string, accountScans?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200166>> {
            return URLScannerApiFp(configuration).urlscannerSearchScans(accountId, scanId, limit, nextCursor, dateStart, dateEnd, url, hostname, path, pageUrl, pageHostname, pagePath, accountScans, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * URLScannerApi - object-oriented interface
 * @export
 * @class URLScannerApi
 * @extends {BaseAPI}
 */
export class URLScannerApi extends BaseAPI {
    /**
     * Submit a URL to scan. You can also set some options, like the visibility level and custom headers. Accounts are limited to 1 new scan every 10 seconds and 8000 per month. If you need more, please reach out.
     * @summary Create URL Scan
     * @param {string} accountId Account Id
     * @param {UrlscannerScanBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof URLScannerApi
     */
    public async urlscannerCreateScan(accountId: string, body?: UrlscannerScanBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200167>> {
        return URLScannerApiFp(this.configuration).urlscannerCreateScan(accountId, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get URL scan by uuid
     * @summary Get URL scan
     * @param {string} scanId Scan uuid
     * @param {string} accountId Account Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof URLScannerApi
     */
    public async urlscannerGetScan(scanId: string, accountId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200168>> {
        return URLScannerApiFp(this.configuration).urlscannerGetScan(scanId, accountId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a URL scan's HAR file. See HAR spec at http://www.softwareishard.com/blog/har-12-spec/.
     * @summary Get URL scan's HAR
     * @param {string} scanId Scan uuid
     * @param {string} accountId Account Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof URLScannerApi
     */
    public async urlscannerGetScanHar(scanId: string, accountId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200169>> {
        return URLScannerApiFp(this.configuration).urlscannerGetScanHar(scanId, accountId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get scan's screenshot by resolution (desktop/mobile/tablet).
     * @summary Get screenshot
     * @param {string} scanId Scan uuid
     * @param {string} accountId Account Id
     * @param {string} [resolution] Target device type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof URLScannerApi
     */
    public async urlscannerGetScanScreenshot(scanId: string, accountId: string, resolution?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return URLScannerApiFp(this.configuration).urlscannerGetScanScreenshot(scanId, accountId, resolution, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Search scans by date and webpages' requests, including full URL (after redirects), hostname, and path. <br/> A successful scan will appear in search results a few minutes after finishing but may take much longer if the system in under load. By default, only successfully completed scans will appear in search results, unless searching by `scanId`. Please take into account that older scans may be removed from the search index at an unspecified time.
     * @summary Search URL scans
     * @param {string} accountId Account Id
     * @param {string} [scanId] Scan uuid
     * @param {number} [limit] Limit the number of objects in the response.
     * @param {string} [nextCursor] Pagination cursor to get the next set of results.
     * @param {Date} [dateStart] Filter scans requested after date (inclusive).
     * @param {Date} [dateEnd] Filter scans requested before date (inclusive).
     * @param {string} [url] Filter scans by exact match URL of _any_ request made by the webpage
     * @param {string} [hostname] Filter scans by hostname of _any_ request made by the webpage.
     * @param {string} [path] Filter scans by url path of _any_ request made by the webpage.
     * @param {string} [pageUrl] Filter scans by exact match to scanned URL (_after redirects_)
     * @param {string} [pageHostname] Filter scans by main page hostname .
     * @param {string} [pagePath] Filter scans by exact match URL path (also supports suffix search).
     * @param {boolean} [accountScans] Return only scans created by account.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof URLScannerApi
     */
    public async urlscannerSearchScans(accountId: string, scanId?: string, limit?: number, nextCursor?: string, dateStart?: Date, dateEnd?: Date, url?: string, hostname?: string, path?: string, pageUrl?: string, pageHostname?: string, pagePath?: string, accountScans?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200166>> {
        return URLScannerApiFp(this.configuration).urlscannerSearchScans(accountId, scanId, limit, nextCursor, dateStart, dateEnd, url, hostname, path, pageUrl, pageHostname, pagePath, accountScans, options).then((request) => request(this.axios, this.basePath));
    }
}
