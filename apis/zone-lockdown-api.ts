/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { C4f8RoOSCommonComponentsSchemasIdentifier } from '../models';
import { C4f8RoOSComponentsSchemasModifiedOn } from '../models';
import { C4f8RoOSIpRangeSearch } from '../models';
import { C4f8RoOSIpSearch } from '../models';
import { C4f8RoOSLockdownsComponentsSchemasId } from '../models';
import { C4f8RoOSLockdownsComponentsSchemasPriority } from '../models';
import { C4f8RoOSSchemasDescriptionSearch } from '../models';
import { C4f8RoOSUriSearch } from '../models';
import { C4f8RoOSZonelockdownResponseCollection } from '../models';
import { C4f8RoOSZonelockdownResponseSingle } from '../models';
import { InlineResponse200199 } from '../models';
import { InlineResponse4xx110 } from '../models';
import { InlineResponse4xx111 } from '../models';
import { InlineResponse4xx112 } from '../models';
/**
 * ZoneLockdownApi - axios parameter creator
 * @export
 */
export const ZoneLockdownApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new Zone Lockdown rule.
         * @summary Create a Zone Lockdown rule
         * @param {any} body 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zoneLockdownCreateAZoneLockdownRule: async (body: any, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling zoneLockdownCreateAZoneLockdownRule.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling zoneLockdownCreateAZoneLockdownRule.');
            }
            const localVarPath = `/zones/{zone_identifier}/firewall/lockdowns`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an existing Zone Lockdown rule.
         * @summary Delete a Zone Lockdown rule
         * @param {C4f8RoOSLockdownsComponentsSchemasId} id 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zoneLockdownDeleteAZoneLockdownRule: async (id: C4f8RoOSLockdownsComponentsSchemasId, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling zoneLockdownDeleteAZoneLockdownRule.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling zoneLockdownDeleteAZoneLockdownRule.');
            }
            const localVarPath = `/zones/{zone_identifier}/firewall/lockdowns/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches the details of a Zone Lockdown rule.
         * @summary Get a Zone Lockdown rule
         * @param {C4f8RoOSLockdownsComponentsSchemasId} id 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zoneLockdownGetAZoneLockdownRule: async (id: C4f8RoOSLockdownsComponentsSchemasId, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling zoneLockdownGetAZoneLockdownRule.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling zoneLockdownGetAZoneLockdownRule.');
            }
            const localVarPath = `/zones/{zone_identifier}/firewall/lockdowns/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches Zone Lockdown rules. You can filter the results using several optional parameters.
         * @summary List Zone Lockdown rules
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {number} [page] 
         * @param {C4f8RoOSSchemasDescriptionSearch} [description] 
         * @param {C4f8RoOSComponentsSchemasModifiedOn} [modifiedOn] 
         * @param {C4f8RoOSIpSearch} [ip] 
         * @param {C4f8RoOSLockdownsComponentsSchemasPriority} [priority] 
         * @param {C4f8RoOSUriSearch} [uriSearch] 
         * @param {C4f8RoOSIpRangeSearch} [ipRangeSearch] 
         * @param {number} [perPage] 
         * @param {Date} [createdOn] 
         * @param {string} [descriptionSearch] 
         * @param {string} [ipSearch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zoneLockdownListZoneLockdownRules: async (zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, page?: number, description?: C4f8RoOSSchemasDescriptionSearch, modifiedOn?: C4f8RoOSComponentsSchemasModifiedOn, ip?: C4f8RoOSIpSearch, priority?: C4f8RoOSLockdownsComponentsSchemasPriority, uriSearch?: C4f8RoOSUriSearch, ipRangeSearch?: C4f8RoOSIpRangeSearch, perPage?: number, createdOn?: Date, descriptionSearch?: string, ipSearch?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling zoneLockdownListZoneLockdownRules.');
            }
            const localVarPath = `/zones/{zone_identifier}/firewall/lockdowns`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }

            if (modifiedOn !== undefined) {
                localVarQueryParameter['modified_on'] = modifiedOn;
            }

            if (ip !== undefined) {
                localVarQueryParameter['ip'] = ip;
            }

            if (priority !== undefined) {
                localVarQueryParameter['priority'] = priority;
            }

            if (uriSearch !== undefined) {
                localVarQueryParameter['uri_search'] = uriSearch;
            }

            if (ipRangeSearch !== undefined) {
                localVarQueryParameter['ip_range_search'] = ipRangeSearch;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (createdOn !== undefined) {
                localVarQueryParameter['created_on'] = (createdOn as any instanceof Date) ?
                    (createdOn as any).toISOString() :
                    createdOn;
            }

            if (descriptionSearch !== undefined) {
                localVarQueryParameter['description_search'] = descriptionSearch;
            }

            if (ipSearch !== undefined) {
                localVarQueryParameter['ip_search'] = ipSearch;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an existing Zone Lockdown rule.
         * @summary Update a Zone Lockdown rule
         * @param {any} body 
         * @param {C4f8RoOSLockdownsComponentsSchemasId} id 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zoneLockdownUpdateAZoneLockdownRule: async (body: any, id: C4f8RoOSLockdownsComponentsSchemasId, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling zoneLockdownUpdateAZoneLockdownRule.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling zoneLockdownUpdateAZoneLockdownRule.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling zoneLockdownUpdateAZoneLockdownRule.');
            }
            const localVarPath = `/zones/{zone_identifier}/firewall/lockdowns/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ZoneLockdownApi - functional programming interface
 * @export
 */
export const ZoneLockdownApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates a new Zone Lockdown rule.
         * @summary Create a Zone Lockdown rule
         * @param {any} body 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zoneLockdownCreateAZoneLockdownRule(body: any, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<C4f8RoOSZonelockdownResponseSingle>>> {
            const localVarAxiosArgs = await ZoneLockdownApiAxiosParamCreator(configuration).zoneLockdownCreateAZoneLockdownRule(body, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes an existing Zone Lockdown rule.
         * @summary Delete a Zone Lockdown rule
         * @param {C4f8RoOSLockdownsComponentsSchemasId} id 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zoneLockdownDeleteAZoneLockdownRule(id: C4f8RoOSLockdownsComponentsSchemasId, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200199>>> {
            const localVarAxiosArgs = await ZoneLockdownApiAxiosParamCreator(configuration).zoneLockdownDeleteAZoneLockdownRule(id, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetches the details of a Zone Lockdown rule.
         * @summary Get a Zone Lockdown rule
         * @param {C4f8RoOSLockdownsComponentsSchemasId} id 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zoneLockdownGetAZoneLockdownRule(id: C4f8RoOSLockdownsComponentsSchemasId, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<C4f8RoOSZonelockdownResponseSingle>>> {
            const localVarAxiosArgs = await ZoneLockdownApiAxiosParamCreator(configuration).zoneLockdownGetAZoneLockdownRule(id, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetches Zone Lockdown rules. You can filter the results using several optional parameters.
         * @summary List Zone Lockdown rules
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {number} [page] 
         * @param {C4f8RoOSSchemasDescriptionSearch} [description] 
         * @param {C4f8RoOSComponentsSchemasModifiedOn} [modifiedOn] 
         * @param {C4f8RoOSIpSearch} [ip] 
         * @param {C4f8RoOSLockdownsComponentsSchemasPriority} [priority] 
         * @param {C4f8RoOSUriSearch} [uriSearch] 
         * @param {C4f8RoOSIpRangeSearch} [ipRangeSearch] 
         * @param {number} [perPage] 
         * @param {Date} [createdOn] 
         * @param {string} [descriptionSearch] 
         * @param {string} [ipSearch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zoneLockdownListZoneLockdownRules(zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, page?: number, description?: C4f8RoOSSchemasDescriptionSearch, modifiedOn?: C4f8RoOSComponentsSchemasModifiedOn, ip?: C4f8RoOSIpSearch, priority?: C4f8RoOSLockdownsComponentsSchemasPriority, uriSearch?: C4f8RoOSUriSearch, ipRangeSearch?: C4f8RoOSIpRangeSearch, perPage?: number, createdOn?: Date, descriptionSearch?: string, ipSearch?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<C4f8RoOSZonelockdownResponseCollection>>> {
            const localVarAxiosArgs = await ZoneLockdownApiAxiosParamCreator(configuration).zoneLockdownListZoneLockdownRules(zoneIdentifier, page, description, modifiedOn, ip, priority, uriSearch, ipRangeSearch, perPage, createdOn, descriptionSearch, ipSearch, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates an existing Zone Lockdown rule.
         * @summary Update a Zone Lockdown rule
         * @param {any} body 
         * @param {C4f8RoOSLockdownsComponentsSchemasId} id 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zoneLockdownUpdateAZoneLockdownRule(body: any, id: C4f8RoOSLockdownsComponentsSchemasId, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<C4f8RoOSZonelockdownResponseSingle>>> {
            const localVarAxiosArgs = await ZoneLockdownApiAxiosParamCreator(configuration).zoneLockdownUpdateAZoneLockdownRule(body, id, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ZoneLockdownApi - factory interface
 * @export
 */
export const ZoneLockdownApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Creates a new Zone Lockdown rule.
         * @summary Create a Zone Lockdown rule
         * @param {any} body 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zoneLockdownCreateAZoneLockdownRule(body: any, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<C4f8RoOSZonelockdownResponseSingle>> {
            return ZoneLockdownApiFp(configuration).zoneLockdownCreateAZoneLockdownRule(body, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes an existing Zone Lockdown rule.
         * @summary Delete a Zone Lockdown rule
         * @param {C4f8RoOSLockdownsComponentsSchemasId} id 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zoneLockdownDeleteAZoneLockdownRule(id: C4f8RoOSLockdownsComponentsSchemasId, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200199>> {
            return ZoneLockdownApiFp(configuration).zoneLockdownDeleteAZoneLockdownRule(id, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches the details of a Zone Lockdown rule.
         * @summary Get a Zone Lockdown rule
         * @param {C4f8RoOSLockdownsComponentsSchemasId} id 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zoneLockdownGetAZoneLockdownRule(id: C4f8RoOSLockdownsComponentsSchemasId, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<C4f8RoOSZonelockdownResponseSingle>> {
            return ZoneLockdownApiFp(configuration).zoneLockdownGetAZoneLockdownRule(id, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches Zone Lockdown rules. You can filter the results using several optional parameters.
         * @summary List Zone Lockdown rules
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {number} [page] 
         * @param {C4f8RoOSSchemasDescriptionSearch} [description] 
         * @param {C4f8RoOSComponentsSchemasModifiedOn} [modifiedOn] 
         * @param {C4f8RoOSIpSearch} [ip] 
         * @param {C4f8RoOSLockdownsComponentsSchemasPriority} [priority] 
         * @param {C4f8RoOSUriSearch} [uriSearch] 
         * @param {C4f8RoOSIpRangeSearch} [ipRangeSearch] 
         * @param {number} [perPage] 
         * @param {Date} [createdOn] 
         * @param {string} [descriptionSearch] 
         * @param {string} [ipSearch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zoneLockdownListZoneLockdownRules(zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, page?: number, description?: C4f8RoOSSchemasDescriptionSearch, modifiedOn?: C4f8RoOSComponentsSchemasModifiedOn, ip?: C4f8RoOSIpSearch, priority?: C4f8RoOSLockdownsComponentsSchemasPriority, uriSearch?: C4f8RoOSUriSearch, ipRangeSearch?: C4f8RoOSIpRangeSearch, perPage?: number, createdOn?: Date, descriptionSearch?: string, ipSearch?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<C4f8RoOSZonelockdownResponseCollection>> {
            return ZoneLockdownApiFp(configuration).zoneLockdownListZoneLockdownRules(zoneIdentifier, page, description, modifiedOn, ip, priority, uriSearch, ipRangeSearch, perPage, createdOn, descriptionSearch, ipSearch, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an existing Zone Lockdown rule.
         * @summary Update a Zone Lockdown rule
         * @param {any} body 
         * @param {C4f8RoOSLockdownsComponentsSchemasId} id 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zoneLockdownUpdateAZoneLockdownRule(body: any, id: C4f8RoOSLockdownsComponentsSchemasId, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<C4f8RoOSZonelockdownResponseSingle>> {
            return ZoneLockdownApiFp(configuration).zoneLockdownUpdateAZoneLockdownRule(body, id, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ZoneLockdownApi - object-oriented interface
 * @export
 * @class ZoneLockdownApi
 * @extends {BaseAPI}
 */
export class ZoneLockdownApi extends BaseAPI {
    /**
     * Creates a new Zone Lockdown rule.
     * @summary Create a Zone Lockdown rule
     * @param {any} body 
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZoneLockdownApi
     */
    public async zoneLockdownCreateAZoneLockdownRule(body: any, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<C4f8RoOSZonelockdownResponseSingle>> {
        return ZoneLockdownApiFp(this.configuration).zoneLockdownCreateAZoneLockdownRule(body, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes an existing Zone Lockdown rule.
     * @summary Delete a Zone Lockdown rule
     * @param {C4f8RoOSLockdownsComponentsSchemasId} id 
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZoneLockdownApi
     */
    public async zoneLockdownDeleteAZoneLockdownRule(id: C4f8RoOSLockdownsComponentsSchemasId, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200199>> {
        return ZoneLockdownApiFp(this.configuration).zoneLockdownDeleteAZoneLockdownRule(id, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches the details of a Zone Lockdown rule.
     * @summary Get a Zone Lockdown rule
     * @param {C4f8RoOSLockdownsComponentsSchemasId} id 
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZoneLockdownApi
     */
    public async zoneLockdownGetAZoneLockdownRule(id: C4f8RoOSLockdownsComponentsSchemasId, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<C4f8RoOSZonelockdownResponseSingle>> {
        return ZoneLockdownApiFp(this.configuration).zoneLockdownGetAZoneLockdownRule(id, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches Zone Lockdown rules. You can filter the results using several optional parameters.
     * @summary List Zone Lockdown rules
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
     * @param {number} [page] 
     * @param {C4f8RoOSSchemasDescriptionSearch} [description] 
     * @param {C4f8RoOSComponentsSchemasModifiedOn} [modifiedOn] 
     * @param {C4f8RoOSIpSearch} [ip] 
     * @param {C4f8RoOSLockdownsComponentsSchemasPriority} [priority] 
     * @param {C4f8RoOSUriSearch} [uriSearch] 
     * @param {C4f8RoOSIpRangeSearch} [ipRangeSearch] 
     * @param {number} [perPage] 
     * @param {Date} [createdOn] 
     * @param {string} [descriptionSearch] 
     * @param {string} [ipSearch] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZoneLockdownApi
     */
    public async zoneLockdownListZoneLockdownRules(zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, page?: number, description?: C4f8RoOSSchemasDescriptionSearch, modifiedOn?: C4f8RoOSComponentsSchemasModifiedOn, ip?: C4f8RoOSIpSearch, priority?: C4f8RoOSLockdownsComponentsSchemasPriority, uriSearch?: C4f8RoOSUriSearch, ipRangeSearch?: C4f8RoOSIpRangeSearch, perPage?: number, createdOn?: Date, descriptionSearch?: string, ipSearch?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<C4f8RoOSZonelockdownResponseCollection>> {
        return ZoneLockdownApiFp(this.configuration).zoneLockdownListZoneLockdownRules(zoneIdentifier, page, description, modifiedOn, ip, priority, uriSearch, ipRangeSearch, perPage, createdOn, descriptionSearch, ipSearch, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates an existing Zone Lockdown rule.
     * @summary Update a Zone Lockdown rule
     * @param {any} body 
     * @param {C4f8RoOSLockdownsComponentsSchemasId} id 
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZoneLockdownApi
     */
    public async zoneLockdownUpdateAZoneLockdownRule(body: any, id: C4f8RoOSLockdownsComponentsSchemasId, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<C4f8RoOSZonelockdownResponseSingle>> {
        return ZoneLockdownApiFp(this.configuration).zoneLockdownUpdateAZoneLockdownRule(body, id, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
}
