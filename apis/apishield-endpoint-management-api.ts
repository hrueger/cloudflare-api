/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse4XX1 } from '../models';
import { InlineResponse4XX2 } from '../models';
import { InlineResponse4XX3 } from '../models';
import { InlineResponse4XX4 } from '../models';
import { InlineResponse4XX5 } from '../models';
import { OoPdFtgXBasicOperation } from '../models';
import { OoPdFtgXCollectionResponse } from '../models';
import { OoPdFtgXCollectionResponsePaginated } from '../models';
import { OoPdFtgXDefaultResponse } from '../models';
import { OoPdFtgXIdentifier } from '../models';
import { OoPdFtgXSchemaResponseWithThresholds } from '../models';
import { OoPdFtgXSchemasSingleResponse } from '../models';
/**
 * APIShieldEndpointManagementApi - axios parameter creator
 * @export
 */
export const APIShieldEndpointManagementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add one or more operations to a zone. Endpoints can contain path variables. Host, method, endpoint will be normalized to a canoncial form when creating an operation and must be unique on the zone. Inserting an operation that matches an existing one will return the record of the already existing operation and update its last_updated date.
         * @summary Add operations to a zone
         * @param {Array<OoPdFtgXBasicOperation>} body 
         * @param {OoPdFtgXIdentifier} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShieldEndpointManagementAddOperationsToAZone: async (body: Array<OoPdFtgXBasicOperation>, zoneId: OoPdFtgXIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling apiShieldEndpointManagementAddOperationsToAZone.');
            }
            // verify required parameter 'zoneId' is not null or undefined
            if (zoneId === null || zoneId === undefined) {
                throw new RequiredError('zoneId','Required parameter zoneId was null or undefined when calling apiShieldEndpointManagementAddOperationsToAZone.');
            }
            const localVarPath = `/zones/{zone_id}/api_gateway/operations`
                .replace(`{${"zone_id"}}`, encodeURIComponent(String(zoneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete an operation
         * @param {OoPdFtgXIdentifier} zoneId 
         * @param {string} operationId Identifier for the operation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShieldEndpointManagementDeleteAnOperation: async (zoneId: OoPdFtgXIdentifier, operationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneId' is not null or undefined
            if (zoneId === null || zoneId === undefined) {
                throw new RequiredError('zoneId','Required parameter zoneId was null or undefined when calling apiShieldEndpointManagementDeleteAnOperation.');
            }
            // verify required parameter 'operationId' is not null or undefined
            if (operationId === null || operationId === undefined) {
                throw new RequiredError('operationId','Required parameter operationId was null or undefined when calling apiShieldEndpointManagementDeleteAnOperation.');
            }
            const localVarPath = `/zones/{zone_id}/api_gateway/operations/{operation_id}`
                .replace(`{${"zone_id"}}`, encodeURIComponent(String(zoneId)))
                .replace(`{${"operation_id"}}`, encodeURIComponent(String(operationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve information about all operations on a zone
         * @param {OoPdFtgXIdentifier} zoneId 
         * @param {any} [page] Page number of paginated results.
         * @param {number} [perPage] Number of results to return per page
         * @param {string} [order] 
         * @param {string} [direction] 
         * @param {Array<string>} [host] 
         * @param {Array<string>} [method] 
         * @param {string} [endpoint] 
         * @param {Array<string>} [feature] Add feature(s) to the results. The feature name that is given here corresponds to the resulting feature object. Have a look at the top-level object description for more details on the specific meaning.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShieldEndpointManagementRetrieveInformationAboutAllOperationsOnAZone: async (zoneId: OoPdFtgXIdentifier, page?: any, perPage?: number, order?: string, direction?: string, host?: Array<string>, method?: Array<string>, endpoint?: string, feature?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneId' is not null or undefined
            if (zoneId === null || zoneId === undefined) {
                throw new RequiredError('zoneId','Required parameter zoneId was null or undefined when calling apiShieldEndpointManagementRetrieveInformationAboutAllOperationsOnAZone.');
            }
            const localVarPath = `/zones/{zone_id}/api_gateway/operations`
                .replace(`{${"zone_id"}}`, encodeURIComponent(String(zoneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (host) {
                localVarQueryParameter['host'] = host;
            }

            if (method) {
                localVarQueryParameter['method'] = method;
            }

            if (endpoint !== undefined) {
                localVarQueryParameter['endpoint'] = endpoint;
            }

            if (feature) {
                localVarQueryParameter['feature'] = feature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve information about an operation
         * @param {OoPdFtgXIdentifier} zoneId 
         * @param {string} operationId Identifier for the operation
         * @param {Array<string>} [feature] Add feature(s) to the results. The feature name that is given here corresponds to the resulting feature object. Have a look at the top-level object description for more details on the specific meaning.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShieldEndpointManagementRetrieveInformationAboutAnOperation: async (zoneId: OoPdFtgXIdentifier, operationId: string, feature?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneId' is not null or undefined
            if (zoneId === null || zoneId === undefined) {
                throw new RequiredError('zoneId','Required parameter zoneId was null or undefined when calling apiShieldEndpointManagementRetrieveInformationAboutAnOperation.');
            }
            // verify required parameter 'operationId' is not null or undefined
            if (operationId === null || operationId === undefined) {
                throw new RequiredError('operationId','Required parameter operationId was null or undefined when calling apiShieldEndpointManagementRetrieveInformationAboutAnOperation.');
            }
            const localVarPath = `/zones/{zone_id}/api_gateway/operations/{operation_id}`
                .replace(`{${"zone_id"}}`, encodeURIComponent(String(zoneId)))
                .replace(`{${"operation_id"}}`, encodeURIComponent(String(operationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            if (feature) {
                localVarQueryParameter['feature'] = feature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve operations and features as OpenAPI schemas
         * @param {OoPdFtgXIdentifier} zoneId 
         * @param {Array<string>} [host] 
         * @param {Array<string>} [feature] Add feature(s) to the results. The feature name that is given here corresponds to the resulting feature object. Have a look at the top-level object description for more details on the specific meaning.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShieldEndpointManagementRetrieveOperationsAndFeaturesAsOpenApiSchemas: async (zoneId: OoPdFtgXIdentifier, host?: Array<string>, feature?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneId' is not null or undefined
            if (zoneId === null || zoneId === undefined) {
                throw new RequiredError('zoneId','Required parameter zoneId was null or undefined when calling apiShieldEndpointManagementRetrieveOperationsAndFeaturesAsOpenApiSchemas.');
            }
            const localVarPath = `/zones/{zone_id}/api_gateway/schemas`
                .replace(`{${"zone_id"}}`, encodeURIComponent(String(zoneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            if (host) {
                localVarQueryParameter['host'] = host;
            }

            if (feature) {
                localVarQueryParameter['feature'] = feature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * APIShieldEndpointManagementApi - functional programming interface
 * @export
 */
export const APIShieldEndpointManagementApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Add one or more operations to a zone. Endpoints can contain path variables. Host, method, endpoint will be normalized to a canoncial form when creating an operation and must be unique on the zone. Inserting an operation that matches an existing one will return the record of the already existing operation and update its last_updated date.
         * @summary Add operations to a zone
         * @param {Array<OoPdFtgXBasicOperation>} body 
         * @param {OoPdFtgXIdentifier} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiShieldEndpointManagementAddOperationsToAZone(body: Array<OoPdFtgXBasicOperation>, zoneId: OoPdFtgXIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<OoPdFtgXCollectionResponse>>> {
            const localVarAxiosArgs = await APIShieldEndpointManagementApiAxiosParamCreator(configuration).apiShieldEndpointManagementAddOperationsToAZone(body, zoneId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete an operation
         * @param {OoPdFtgXIdentifier} zoneId 
         * @param {string} operationId Identifier for the operation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiShieldEndpointManagementDeleteAnOperation(zoneId: OoPdFtgXIdentifier, operationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<OoPdFtgXDefaultResponse>>> {
            const localVarAxiosArgs = await APIShieldEndpointManagementApiAxiosParamCreator(configuration).apiShieldEndpointManagementDeleteAnOperation(zoneId, operationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Retrieve information about all operations on a zone
         * @param {OoPdFtgXIdentifier} zoneId 
         * @param {any} [page] Page number of paginated results.
         * @param {number} [perPage] Number of results to return per page
         * @param {string} [order] 
         * @param {string} [direction] 
         * @param {Array<string>} [host] 
         * @param {Array<string>} [method] 
         * @param {string} [endpoint] 
         * @param {Array<string>} [feature] Add feature(s) to the results. The feature name that is given here corresponds to the resulting feature object. Have a look at the top-level object description for more details on the specific meaning.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiShieldEndpointManagementRetrieveInformationAboutAllOperationsOnAZone(zoneId: OoPdFtgXIdentifier, page?: any, perPage?: number, order?: string, direction?: string, host?: Array<string>, method?: Array<string>, endpoint?: string, feature?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<OoPdFtgXCollectionResponsePaginated>>> {
            const localVarAxiosArgs = await APIShieldEndpointManagementApiAxiosParamCreator(configuration).apiShieldEndpointManagementRetrieveInformationAboutAllOperationsOnAZone(zoneId, page, perPage, order, direction, host, method, endpoint, feature, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Retrieve information about an operation
         * @param {OoPdFtgXIdentifier} zoneId 
         * @param {string} operationId Identifier for the operation
         * @param {Array<string>} [feature] Add feature(s) to the results. The feature name that is given here corresponds to the resulting feature object. Have a look at the top-level object description for more details on the specific meaning.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiShieldEndpointManagementRetrieveInformationAboutAnOperation(zoneId: OoPdFtgXIdentifier, operationId: string, feature?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<OoPdFtgXSchemasSingleResponse>>> {
            const localVarAxiosArgs = await APIShieldEndpointManagementApiAxiosParamCreator(configuration).apiShieldEndpointManagementRetrieveInformationAboutAnOperation(zoneId, operationId, feature, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Retrieve operations and features as OpenAPI schemas
         * @param {OoPdFtgXIdentifier} zoneId 
         * @param {Array<string>} [host] 
         * @param {Array<string>} [feature] Add feature(s) to the results. The feature name that is given here corresponds to the resulting feature object. Have a look at the top-level object description for more details on the specific meaning.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiShieldEndpointManagementRetrieveOperationsAndFeaturesAsOpenApiSchemas(zoneId: OoPdFtgXIdentifier, host?: Array<string>, feature?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<OoPdFtgXSchemaResponseWithThresholds>>> {
            const localVarAxiosArgs = await APIShieldEndpointManagementApiAxiosParamCreator(configuration).apiShieldEndpointManagementRetrieveOperationsAndFeaturesAsOpenApiSchemas(zoneId, host, feature, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * APIShieldEndpointManagementApi - factory interface
 * @export
 */
export const APIShieldEndpointManagementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Add one or more operations to a zone. Endpoints can contain path variables. Host, method, endpoint will be normalized to a canoncial form when creating an operation and must be unique on the zone. Inserting an operation that matches an existing one will return the record of the already existing operation and update its last_updated date.
         * @summary Add operations to a zone
         * @param {Array<OoPdFtgXBasicOperation>} body 
         * @param {OoPdFtgXIdentifier} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiShieldEndpointManagementAddOperationsToAZone(body: Array<OoPdFtgXBasicOperation>, zoneId: OoPdFtgXIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<OoPdFtgXCollectionResponse>> {
            return APIShieldEndpointManagementApiFp(configuration).apiShieldEndpointManagementAddOperationsToAZone(body, zoneId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete an operation
         * @param {OoPdFtgXIdentifier} zoneId 
         * @param {string} operationId Identifier for the operation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiShieldEndpointManagementDeleteAnOperation(zoneId: OoPdFtgXIdentifier, operationId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<OoPdFtgXDefaultResponse>> {
            return APIShieldEndpointManagementApiFp(configuration).apiShieldEndpointManagementDeleteAnOperation(zoneId, operationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve information about all operations on a zone
         * @param {OoPdFtgXIdentifier} zoneId 
         * @param {any} [page] Page number of paginated results.
         * @param {number} [perPage] Number of results to return per page
         * @param {string} [order] 
         * @param {string} [direction] 
         * @param {Array<string>} [host] 
         * @param {Array<string>} [method] 
         * @param {string} [endpoint] 
         * @param {Array<string>} [feature] Add feature(s) to the results. The feature name that is given here corresponds to the resulting feature object. Have a look at the top-level object description for more details on the specific meaning.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiShieldEndpointManagementRetrieveInformationAboutAllOperationsOnAZone(zoneId: OoPdFtgXIdentifier, page?: any, perPage?: number, order?: string, direction?: string, host?: Array<string>, method?: Array<string>, endpoint?: string, feature?: Array<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<OoPdFtgXCollectionResponsePaginated>> {
            return APIShieldEndpointManagementApiFp(configuration).apiShieldEndpointManagementRetrieveInformationAboutAllOperationsOnAZone(zoneId, page, perPage, order, direction, host, method, endpoint, feature, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve information about an operation
         * @param {OoPdFtgXIdentifier} zoneId 
         * @param {string} operationId Identifier for the operation
         * @param {Array<string>} [feature] Add feature(s) to the results. The feature name that is given here corresponds to the resulting feature object. Have a look at the top-level object description for more details on the specific meaning.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiShieldEndpointManagementRetrieveInformationAboutAnOperation(zoneId: OoPdFtgXIdentifier, operationId: string, feature?: Array<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<OoPdFtgXSchemasSingleResponse>> {
            return APIShieldEndpointManagementApiFp(configuration).apiShieldEndpointManagementRetrieveInformationAboutAnOperation(zoneId, operationId, feature, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve operations and features as OpenAPI schemas
         * @param {OoPdFtgXIdentifier} zoneId 
         * @param {Array<string>} [host] 
         * @param {Array<string>} [feature] Add feature(s) to the results. The feature name that is given here corresponds to the resulting feature object. Have a look at the top-level object description for more details on the specific meaning.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiShieldEndpointManagementRetrieveOperationsAndFeaturesAsOpenApiSchemas(zoneId: OoPdFtgXIdentifier, host?: Array<string>, feature?: Array<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<OoPdFtgXSchemaResponseWithThresholds>> {
            return APIShieldEndpointManagementApiFp(configuration).apiShieldEndpointManagementRetrieveOperationsAndFeaturesAsOpenApiSchemas(zoneId, host, feature, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * APIShieldEndpointManagementApi - object-oriented interface
 * @export
 * @class APIShieldEndpointManagementApi
 * @extends {BaseAPI}
 */
export class APIShieldEndpointManagementApi extends BaseAPI {
    /**
     * Add one or more operations to a zone. Endpoints can contain path variables. Host, method, endpoint will be normalized to a canoncial form when creating an operation and must be unique on the zone. Inserting an operation that matches an existing one will return the record of the already existing operation and update its last_updated date.
     * @summary Add operations to a zone
     * @param {Array<OoPdFtgXBasicOperation>} body 
     * @param {OoPdFtgXIdentifier} zoneId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIShieldEndpointManagementApi
     */
    public async apiShieldEndpointManagementAddOperationsToAZone(body: Array<OoPdFtgXBasicOperation>, zoneId: OoPdFtgXIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<OoPdFtgXCollectionResponse>> {
        return APIShieldEndpointManagementApiFp(this.configuration).apiShieldEndpointManagementAddOperationsToAZone(body, zoneId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Delete an operation
     * @param {OoPdFtgXIdentifier} zoneId 
     * @param {string} operationId Identifier for the operation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIShieldEndpointManagementApi
     */
    public async apiShieldEndpointManagementDeleteAnOperation(zoneId: OoPdFtgXIdentifier, operationId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<OoPdFtgXDefaultResponse>> {
        return APIShieldEndpointManagementApiFp(this.configuration).apiShieldEndpointManagementDeleteAnOperation(zoneId, operationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Retrieve information about all operations on a zone
     * @param {OoPdFtgXIdentifier} zoneId 
     * @param {any} [page] Page number of paginated results.
     * @param {number} [perPage] Number of results to return per page
     * @param {string} [order] 
     * @param {string} [direction] 
     * @param {Array<string>} [host] 
     * @param {Array<string>} [method] 
     * @param {string} [endpoint] 
     * @param {Array<string>} [feature] Add feature(s) to the results. The feature name that is given here corresponds to the resulting feature object. Have a look at the top-level object description for more details on the specific meaning.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIShieldEndpointManagementApi
     */
    public async apiShieldEndpointManagementRetrieveInformationAboutAllOperationsOnAZone(zoneId: OoPdFtgXIdentifier, page?: any, perPage?: number, order?: string, direction?: string, host?: Array<string>, method?: Array<string>, endpoint?: string, feature?: Array<string>, options?: AxiosRequestConfig) : Promise<AxiosResponse<OoPdFtgXCollectionResponsePaginated>> {
        return APIShieldEndpointManagementApiFp(this.configuration).apiShieldEndpointManagementRetrieveInformationAboutAllOperationsOnAZone(zoneId, page, perPage, order, direction, host, method, endpoint, feature, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Retrieve information about an operation
     * @param {OoPdFtgXIdentifier} zoneId 
     * @param {string} operationId Identifier for the operation
     * @param {Array<string>} [feature] Add feature(s) to the results. The feature name that is given here corresponds to the resulting feature object. Have a look at the top-level object description for more details on the specific meaning.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIShieldEndpointManagementApi
     */
    public async apiShieldEndpointManagementRetrieveInformationAboutAnOperation(zoneId: OoPdFtgXIdentifier, operationId: string, feature?: Array<string>, options?: AxiosRequestConfig) : Promise<AxiosResponse<OoPdFtgXSchemasSingleResponse>> {
        return APIShieldEndpointManagementApiFp(this.configuration).apiShieldEndpointManagementRetrieveInformationAboutAnOperation(zoneId, operationId, feature, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Retrieve operations and features as OpenAPI schemas
     * @param {OoPdFtgXIdentifier} zoneId 
     * @param {Array<string>} [host] 
     * @param {Array<string>} [feature] Add feature(s) to the results. The feature name that is given here corresponds to the resulting feature object. Have a look at the top-level object description for more details on the specific meaning.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIShieldEndpointManagementApi
     */
    public async apiShieldEndpointManagementRetrieveOperationsAndFeaturesAsOpenApiSchemas(zoneId: OoPdFtgXIdentifier, host?: Array<string>, feature?: Array<string>, options?: AxiosRequestConfig) : Promise<AxiosResponse<OoPdFtgXSchemaResponseWithThresholds>> {
        return APIShieldEndpointManagementApiFp(this.configuration).apiShieldEndpointManagementRetrieveOperationsAndFeaturesAsOpenApiSchemas(zoneId, host, feature, options).then((request) => request(this.axios, this.basePath));
    }
}
