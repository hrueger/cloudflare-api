/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { PgfDSRiEApiResponseCommonFailure } from '../models';
import { PgfDSRiECreateRuleRequest } from '../models';
import { PgfDSRiECreateSiteRequest } from '../models';
import { PgfDSRiEIdentifier } from '../models';
import { PgfDSRiEModifyRulesRequest } from '../models';
import { PgfDSRiEOrderBy } from '../models';
import { PgfDSRiEPage } from '../models';
import { PgfDSRiEPerPage } from '../models';
import { PgfDSRiERuleIdResponseSingle } from '../models';
import { PgfDSRiERuleIdentifier } from '../models';
import { PgfDSRiERuleResponseSingle } from '../models';
import { PgfDSRiERulesResponseCollection } from '../models';
import { PgfDSRiERulesetIdentifier } from '../models';
import { PgfDSRiESiteResponseSingle } from '../models';
import { PgfDSRiESiteTagResponseSingle } from '../models';
import { PgfDSRiESitesResponseCollection } from '../models';
/**
 * WebAnalyticsApi - axios parameter creator
 * @export
 */
export const WebAnalyticsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new rule in a Web Analytics ruleset.
         * @summary Create a Web Analytics rule
         * @param {PgfDSRiECreateRuleRequest} body 
         * @param {PgfDSRiEIdentifier} accountIdentifier 
         * @param {PgfDSRiERulesetIdentifier} rulesetIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webAnalyticsCreateRule: async (body: PgfDSRiECreateRuleRequest, accountIdentifier: PgfDSRiEIdentifier, rulesetIdentifier: PgfDSRiERulesetIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling webAnalyticsCreateRule.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling webAnalyticsCreateRule.');
            }
            // verify required parameter 'rulesetIdentifier' is not null or undefined
            if (rulesetIdentifier === null || rulesetIdentifier === undefined) {
                throw new RequiredError('rulesetIdentifier','Required parameter rulesetIdentifier was null or undefined when calling webAnalyticsCreateRule.');
            }
            const localVarPath = `/accounts/{account_identifier}/rum/v2/{ruleset_identifier}/rule`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)))
                .replace(`{${"ruleset_identifier"}}`, encodeURIComponent(String(rulesetIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new Web Analytics site.
         * @summary Create a Web Analytics site
         * @param {PgfDSRiECreateSiteRequest} body 
         * @param {PgfDSRiEIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webAnalyticsCreateSite: async (body: PgfDSRiECreateSiteRequest, accountIdentifier: PgfDSRiEIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling webAnalyticsCreateSite.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling webAnalyticsCreateSite.');
            }
            const localVarPath = `/accounts/{account_identifier}/rum/site_info`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an existing rule from a Web Analytics ruleset.
         * @summary Delete a Web Analytics rule
         * @param {PgfDSRiEIdentifier} accountIdentifier 
         * @param {PgfDSRiERulesetIdentifier} rulesetIdentifier 
         * @param {PgfDSRiERuleIdentifier} ruleIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webAnalyticsDeleteRule: async (accountIdentifier: PgfDSRiEIdentifier, rulesetIdentifier: PgfDSRiERulesetIdentifier, ruleIdentifier: PgfDSRiERuleIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling webAnalyticsDeleteRule.');
            }
            // verify required parameter 'rulesetIdentifier' is not null or undefined
            if (rulesetIdentifier === null || rulesetIdentifier === undefined) {
                throw new RequiredError('rulesetIdentifier','Required parameter rulesetIdentifier was null or undefined when calling webAnalyticsDeleteRule.');
            }
            // verify required parameter 'ruleIdentifier' is not null or undefined
            if (ruleIdentifier === null || ruleIdentifier === undefined) {
                throw new RequiredError('ruleIdentifier','Required parameter ruleIdentifier was null or undefined when calling webAnalyticsDeleteRule.');
            }
            const localVarPath = `/accounts/{account_identifier}/rum/v2/{ruleset_identifier}/rule/{rule_identifier}`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)))
                .replace(`{${"ruleset_identifier"}}`, encodeURIComponent(String(rulesetIdentifier)))
                .replace(`{${"rule_identifier"}}`, encodeURIComponent(String(ruleIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an existing Web Analytics site.
         * @summary Delete a Web Analytics site
         * @param {PgfDSRiEIdentifier} accountIdentifier 
         * @param {PgfDSRiEIdentifier} siteIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webAnalyticsDeleteSite: async (accountIdentifier: PgfDSRiEIdentifier, siteIdentifier: PgfDSRiEIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling webAnalyticsDeleteSite.');
            }
            // verify required parameter 'siteIdentifier' is not null or undefined
            if (siteIdentifier === null || siteIdentifier === undefined) {
                throw new RequiredError('siteIdentifier','Required parameter siteIdentifier was null or undefined when calling webAnalyticsDeleteSite.');
            }
            const localVarPath = `/accounts/{account_identifier}/rum/site_info/{site_identifier}`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)))
                .replace(`{${"site_identifier"}}`, encodeURIComponent(String(siteIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Web Analytics site.
         * @summary Get a Web Analytics site
         * @param {PgfDSRiEIdentifier} accountIdentifier 
         * @param {PgfDSRiEIdentifier} siteIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webAnalyticsGetSite: async (accountIdentifier: PgfDSRiEIdentifier, siteIdentifier: PgfDSRiEIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling webAnalyticsGetSite.');
            }
            // verify required parameter 'siteIdentifier' is not null or undefined
            if (siteIdentifier === null || siteIdentifier === undefined) {
                throw new RequiredError('siteIdentifier','Required parameter siteIdentifier was null or undefined when calling webAnalyticsGetSite.');
            }
            const localVarPath = `/accounts/{account_identifier}/rum/site_info/{site_identifier}`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)))
                .replace(`{${"site_identifier"}}`, encodeURIComponent(String(siteIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all the rules in a Web Analytics ruleset.
         * @summary List rules in Web Analytics ruleset
         * @param {PgfDSRiEIdentifier} accountIdentifier 
         * @param {PgfDSRiERulesetIdentifier} rulesetIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webAnalyticsListRules: async (accountIdentifier: PgfDSRiEIdentifier, rulesetIdentifier: PgfDSRiERulesetIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling webAnalyticsListRules.');
            }
            // verify required parameter 'rulesetIdentifier' is not null or undefined
            if (rulesetIdentifier === null || rulesetIdentifier === undefined) {
                throw new RequiredError('rulesetIdentifier','Required parameter rulesetIdentifier was null or undefined when calling webAnalyticsListRules.');
            }
            const localVarPath = `/accounts/{account_identifier}/rum/v2/{ruleset_identifier}/rules`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)))
                .replace(`{${"ruleset_identifier"}}`, encodeURIComponent(String(rulesetIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all Web Analytics sites of an account.
         * @summary List Web Analytics sites
         * @param {PgfDSRiEIdentifier} accountIdentifier 
         * @param {PgfDSRiEPerPage} [perPage] 
         * @param {PgfDSRiEPage} [page] 
         * @param {PgfDSRiEOrderBy} [orderBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webAnalyticsListSites: async (accountIdentifier: PgfDSRiEIdentifier, perPage?: PgfDSRiEPerPage, page?: PgfDSRiEPage, orderBy?: PgfDSRiEOrderBy, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling webAnalyticsListSites.');
            }
            const localVarPath = `/accounts/{account_identifier}/rum/site_info/list`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Modifies one or more rules in a Web Analytics ruleset with a single request.
         * @summary Update Web Analytics rules
         * @param {PgfDSRiEModifyRulesRequest} body 
         * @param {PgfDSRiEIdentifier} accountIdentifier 
         * @param {PgfDSRiERulesetIdentifier} rulesetIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webAnalyticsModifyRules: async (body: PgfDSRiEModifyRulesRequest, accountIdentifier: PgfDSRiEIdentifier, rulesetIdentifier: PgfDSRiERulesetIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling webAnalyticsModifyRules.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling webAnalyticsModifyRules.');
            }
            // verify required parameter 'rulesetIdentifier' is not null or undefined
            if (rulesetIdentifier === null || rulesetIdentifier === undefined) {
                throw new RequiredError('rulesetIdentifier','Required parameter rulesetIdentifier was null or undefined when calling webAnalyticsModifyRules.');
            }
            const localVarPath = `/accounts/{account_identifier}/rum/v2/{ruleset_identifier}/rules`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)))
                .replace(`{${"ruleset_identifier"}}`, encodeURIComponent(String(rulesetIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a rule in a Web Analytics ruleset.
         * @summary Update a Web Analytics rule
         * @param {PgfDSRiECreateRuleRequest} body 
         * @param {PgfDSRiEIdentifier} accountIdentifier 
         * @param {PgfDSRiERulesetIdentifier} rulesetIdentifier 
         * @param {PgfDSRiERuleIdentifier} ruleIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webAnalyticsUpdateRule: async (body: PgfDSRiECreateRuleRequest, accountIdentifier: PgfDSRiEIdentifier, rulesetIdentifier: PgfDSRiERulesetIdentifier, ruleIdentifier: PgfDSRiERuleIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling webAnalyticsUpdateRule.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling webAnalyticsUpdateRule.');
            }
            // verify required parameter 'rulesetIdentifier' is not null or undefined
            if (rulesetIdentifier === null || rulesetIdentifier === undefined) {
                throw new RequiredError('rulesetIdentifier','Required parameter rulesetIdentifier was null or undefined when calling webAnalyticsUpdateRule.');
            }
            // verify required parameter 'ruleIdentifier' is not null or undefined
            if (ruleIdentifier === null || ruleIdentifier === undefined) {
                throw new RequiredError('ruleIdentifier','Required parameter ruleIdentifier was null or undefined when calling webAnalyticsUpdateRule.');
            }
            const localVarPath = `/accounts/{account_identifier}/rum/v2/{ruleset_identifier}/rule/{rule_identifier}`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)))
                .replace(`{${"ruleset_identifier"}}`, encodeURIComponent(String(rulesetIdentifier)))
                .replace(`{${"rule_identifier"}}`, encodeURIComponent(String(ruleIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an existing Web Analytics site.
         * @summary Update a Web Analytics site
         * @param {PgfDSRiECreateSiteRequest} body 
         * @param {PgfDSRiEIdentifier} accountIdentifier 
         * @param {PgfDSRiEIdentifier} siteIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webAnalyticsUpdateSite: async (body: PgfDSRiECreateSiteRequest, accountIdentifier: PgfDSRiEIdentifier, siteIdentifier: PgfDSRiEIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling webAnalyticsUpdateSite.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling webAnalyticsUpdateSite.');
            }
            // verify required parameter 'siteIdentifier' is not null or undefined
            if (siteIdentifier === null || siteIdentifier === undefined) {
                throw new RequiredError('siteIdentifier','Required parameter siteIdentifier was null or undefined when calling webAnalyticsUpdateSite.');
            }
            const localVarPath = `/accounts/{account_identifier}/rum/site_info/{site_identifier}`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)))
                .replace(`{${"site_identifier"}}`, encodeURIComponent(String(siteIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WebAnalyticsApi - functional programming interface
 * @export
 */
export const WebAnalyticsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates a new rule in a Web Analytics ruleset.
         * @summary Create a Web Analytics rule
         * @param {PgfDSRiECreateRuleRequest} body 
         * @param {PgfDSRiEIdentifier} accountIdentifier 
         * @param {PgfDSRiERulesetIdentifier} rulesetIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webAnalyticsCreateRule(body: PgfDSRiECreateRuleRequest, accountIdentifier: PgfDSRiEIdentifier, rulesetIdentifier: PgfDSRiERulesetIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PgfDSRiERuleResponseSingle>>> {
            const localVarAxiosArgs = await WebAnalyticsApiAxiosParamCreator(configuration).webAnalyticsCreateRule(body, accountIdentifier, rulesetIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a new Web Analytics site.
         * @summary Create a Web Analytics site
         * @param {PgfDSRiECreateSiteRequest} body 
         * @param {PgfDSRiEIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webAnalyticsCreateSite(body: PgfDSRiECreateSiteRequest, accountIdentifier: PgfDSRiEIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PgfDSRiESiteResponseSingle>>> {
            const localVarAxiosArgs = await WebAnalyticsApiAxiosParamCreator(configuration).webAnalyticsCreateSite(body, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes an existing rule from a Web Analytics ruleset.
         * @summary Delete a Web Analytics rule
         * @param {PgfDSRiEIdentifier} accountIdentifier 
         * @param {PgfDSRiERulesetIdentifier} rulesetIdentifier 
         * @param {PgfDSRiERuleIdentifier} ruleIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webAnalyticsDeleteRule(accountIdentifier: PgfDSRiEIdentifier, rulesetIdentifier: PgfDSRiERulesetIdentifier, ruleIdentifier: PgfDSRiERuleIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PgfDSRiERuleIdResponseSingle>>> {
            const localVarAxiosArgs = await WebAnalyticsApiAxiosParamCreator(configuration).webAnalyticsDeleteRule(accountIdentifier, rulesetIdentifier, ruleIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes an existing Web Analytics site.
         * @summary Delete a Web Analytics site
         * @param {PgfDSRiEIdentifier} accountIdentifier 
         * @param {PgfDSRiEIdentifier} siteIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webAnalyticsDeleteSite(accountIdentifier: PgfDSRiEIdentifier, siteIdentifier: PgfDSRiEIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PgfDSRiESiteTagResponseSingle>>> {
            const localVarAxiosArgs = await WebAnalyticsApiAxiosParamCreator(configuration).webAnalyticsDeleteSite(accountIdentifier, siteIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a Web Analytics site.
         * @summary Get a Web Analytics site
         * @param {PgfDSRiEIdentifier} accountIdentifier 
         * @param {PgfDSRiEIdentifier} siteIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webAnalyticsGetSite(accountIdentifier: PgfDSRiEIdentifier, siteIdentifier: PgfDSRiEIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PgfDSRiESiteResponseSingle>>> {
            const localVarAxiosArgs = await WebAnalyticsApiAxiosParamCreator(configuration).webAnalyticsGetSite(accountIdentifier, siteIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Lists all the rules in a Web Analytics ruleset.
         * @summary List rules in Web Analytics ruleset
         * @param {PgfDSRiEIdentifier} accountIdentifier 
         * @param {PgfDSRiERulesetIdentifier} rulesetIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webAnalyticsListRules(accountIdentifier: PgfDSRiEIdentifier, rulesetIdentifier: PgfDSRiERulesetIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PgfDSRiERulesResponseCollection>>> {
            const localVarAxiosArgs = await WebAnalyticsApiAxiosParamCreator(configuration).webAnalyticsListRules(accountIdentifier, rulesetIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Lists all Web Analytics sites of an account.
         * @summary List Web Analytics sites
         * @param {PgfDSRiEIdentifier} accountIdentifier 
         * @param {PgfDSRiEPerPage} [perPage] 
         * @param {PgfDSRiEPage} [page] 
         * @param {PgfDSRiEOrderBy} [orderBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webAnalyticsListSites(accountIdentifier: PgfDSRiEIdentifier, perPage?: PgfDSRiEPerPage, page?: PgfDSRiEPage, orderBy?: PgfDSRiEOrderBy, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PgfDSRiESitesResponseCollection>>> {
            const localVarAxiosArgs = await WebAnalyticsApiAxiosParamCreator(configuration).webAnalyticsListSites(accountIdentifier, perPage, page, orderBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Modifies one or more rules in a Web Analytics ruleset with a single request.
         * @summary Update Web Analytics rules
         * @param {PgfDSRiEModifyRulesRequest} body 
         * @param {PgfDSRiEIdentifier} accountIdentifier 
         * @param {PgfDSRiERulesetIdentifier} rulesetIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webAnalyticsModifyRules(body: PgfDSRiEModifyRulesRequest, accountIdentifier: PgfDSRiEIdentifier, rulesetIdentifier: PgfDSRiERulesetIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PgfDSRiERulesResponseCollection>>> {
            const localVarAxiosArgs = await WebAnalyticsApiAxiosParamCreator(configuration).webAnalyticsModifyRules(body, accountIdentifier, rulesetIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates a rule in a Web Analytics ruleset.
         * @summary Update a Web Analytics rule
         * @param {PgfDSRiECreateRuleRequest} body 
         * @param {PgfDSRiEIdentifier} accountIdentifier 
         * @param {PgfDSRiERulesetIdentifier} rulesetIdentifier 
         * @param {PgfDSRiERuleIdentifier} ruleIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webAnalyticsUpdateRule(body: PgfDSRiECreateRuleRequest, accountIdentifier: PgfDSRiEIdentifier, rulesetIdentifier: PgfDSRiERulesetIdentifier, ruleIdentifier: PgfDSRiERuleIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PgfDSRiERuleResponseSingle>>> {
            const localVarAxiosArgs = await WebAnalyticsApiAxiosParamCreator(configuration).webAnalyticsUpdateRule(body, accountIdentifier, rulesetIdentifier, ruleIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates an existing Web Analytics site.
         * @summary Update a Web Analytics site
         * @param {PgfDSRiECreateSiteRequest} body 
         * @param {PgfDSRiEIdentifier} accountIdentifier 
         * @param {PgfDSRiEIdentifier} siteIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webAnalyticsUpdateSite(body: PgfDSRiECreateSiteRequest, accountIdentifier: PgfDSRiEIdentifier, siteIdentifier: PgfDSRiEIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PgfDSRiESiteResponseSingle>>> {
            const localVarAxiosArgs = await WebAnalyticsApiAxiosParamCreator(configuration).webAnalyticsUpdateSite(body, accountIdentifier, siteIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * WebAnalyticsApi - factory interface
 * @export
 */
export const WebAnalyticsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Creates a new rule in a Web Analytics ruleset.
         * @summary Create a Web Analytics rule
         * @param {PgfDSRiECreateRuleRequest} body 
         * @param {PgfDSRiEIdentifier} accountIdentifier 
         * @param {PgfDSRiERulesetIdentifier} rulesetIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webAnalyticsCreateRule(body: PgfDSRiECreateRuleRequest, accountIdentifier: PgfDSRiEIdentifier, rulesetIdentifier: PgfDSRiERulesetIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<PgfDSRiERuleResponseSingle>> {
            return WebAnalyticsApiFp(configuration).webAnalyticsCreateRule(body, accountIdentifier, rulesetIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new Web Analytics site.
         * @summary Create a Web Analytics site
         * @param {PgfDSRiECreateSiteRequest} body 
         * @param {PgfDSRiEIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webAnalyticsCreateSite(body: PgfDSRiECreateSiteRequest, accountIdentifier: PgfDSRiEIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<PgfDSRiESiteResponseSingle>> {
            return WebAnalyticsApiFp(configuration).webAnalyticsCreateSite(body, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes an existing rule from a Web Analytics ruleset.
         * @summary Delete a Web Analytics rule
         * @param {PgfDSRiEIdentifier} accountIdentifier 
         * @param {PgfDSRiERulesetIdentifier} rulesetIdentifier 
         * @param {PgfDSRiERuleIdentifier} ruleIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webAnalyticsDeleteRule(accountIdentifier: PgfDSRiEIdentifier, rulesetIdentifier: PgfDSRiERulesetIdentifier, ruleIdentifier: PgfDSRiERuleIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<PgfDSRiERuleIdResponseSingle>> {
            return WebAnalyticsApiFp(configuration).webAnalyticsDeleteRule(accountIdentifier, rulesetIdentifier, ruleIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes an existing Web Analytics site.
         * @summary Delete a Web Analytics site
         * @param {PgfDSRiEIdentifier} accountIdentifier 
         * @param {PgfDSRiEIdentifier} siteIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webAnalyticsDeleteSite(accountIdentifier: PgfDSRiEIdentifier, siteIdentifier: PgfDSRiEIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<PgfDSRiESiteTagResponseSingle>> {
            return WebAnalyticsApiFp(configuration).webAnalyticsDeleteSite(accountIdentifier, siteIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Web Analytics site.
         * @summary Get a Web Analytics site
         * @param {PgfDSRiEIdentifier} accountIdentifier 
         * @param {PgfDSRiEIdentifier} siteIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webAnalyticsGetSite(accountIdentifier: PgfDSRiEIdentifier, siteIdentifier: PgfDSRiEIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<PgfDSRiESiteResponseSingle>> {
            return WebAnalyticsApiFp(configuration).webAnalyticsGetSite(accountIdentifier, siteIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists all the rules in a Web Analytics ruleset.
         * @summary List rules in Web Analytics ruleset
         * @param {PgfDSRiEIdentifier} accountIdentifier 
         * @param {PgfDSRiERulesetIdentifier} rulesetIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webAnalyticsListRules(accountIdentifier: PgfDSRiEIdentifier, rulesetIdentifier: PgfDSRiERulesetIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<PgfDSRiERulesResponseCollection>> {
            return WebAnalyticsApiFp(configuration).webAnalyticsListRules(accountIdentifier, rulesetIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists all Web Analytics sites of an account.
         * @summary List Web Analytics sites
         * @param {PgfDSRiEIdentifier} accountIdentifier 
         * @param {PgfDSRiEPerPage} [perPage] 
         * @param {PgfDSRiEPage} [page] 
         * @param {PgfDSRiEOrderBy} [orderBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webAnalyticsListSites(accountIdentifier: PgfDSRiEIdentifier, perPage?: PgfDSRiEPerPage, page?: PgfDSRiEPage, orderBy?: PgfDSRiEOrderBy, options?: AxiosRequestConfig): Promise<AxiosResponse<PgfDSRiESitesResponseCollection>> {
            return WebAnalyticsApiFp(configuration).webAnalyticsListSites(accountIdentifier, perPage, page, orderBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Modifies one or more rules in a Web Analytics ruleset with a single request.
         * @summary Update Web Analytics rules
         * @param {PgfDSRiEModifyRulesRequest} body 
         * @param {PgfDSRiEIdentifier} accountIdentifier 
         * @param {PgfDSRiERulesetIdentifier} rulesetIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webAnalyticsModifyRules(body: PgfDSRiEModifyRulesRequest, accountIdentifier: PgfDSRiEIdentifier, rulesetIdentifier: PgfDSRiERulesetIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<PgfDSRiERulesResponseCollection>> {
            return WebAnalyticsApiFp(configuration).webAnalyticsModifyRules(body, accountIdentifier, rulesetIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a rule in a Web Analytics ruleset.
         * @summary Update a Web Analytics rule
         * @param {PgfDSRiECreateRuleRequest} body 
         * @param {PgfDSRiEIdentifier} accountIdentifier 
         * @param {PgfDSRiERulesetIdentifier} rulesetIdentifier 
         * @param {PgfDSRiERuleIdentifier} ruleIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webAnalyticsUpdateRule(body: PgfDSRiECreateRuleRequest, accountIdentifier: PgfDSRiEIdentifier, rulesetIdentifier: PgfDSRiERulesetIdentifier, ruleIdentifier: PgfDSRiERuleIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<PgfDSRiERuleResponseSingle>> {
            return WebAnalyticsApiFp(configuration).webAnalyticsUpdateRule(body, accountIdentifier, rulesetIdentifier, ruleIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an existing Web Analytics site.
         * @summary Update a Web Analytics site
         * @param {PgfDSRiECreateSiteRequest} body 
         * @param {PgfDSRiEIdentifier} accountIdentifier 
         * @param {PgfDSRiEIdentifier} siteIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webAnalyticsUpdateSite(body: PgfDSRiECreateSiteRequest, accountIdentifier: PgfDSRiEIdentifier, siteIdentifier: PgfDSRiEIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<PgfDSRiESiteResponseSingle>> {
            return WebAnalyticsApiFp(configuration).webAnalyticsUpdateSite(body, accountIdentifier, siteIdentifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WebAnalyticsApi - object-oriented interface
 * @export
 * @class WebAnalyticsApi
 * @extends {BaseAPI}
 */
export class WebAnalyticsApi extends BaseAPI {
    /**
     * Creates a new rule in a Web Analytics ruleset.
     * @summary Create a Web Analytics rule
     * @param {PgfDSRiECreateRuleRequest} body 
     * @param {PgfDSRiEIdentifier} accountIdentifier 
     * @param {PgfDSRiERulesetIdentifier} rulesetIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebAnalyticsApi
     */
    public async webAnalyticsCreateRule(body: PgfDSRiECreateRuleRequest, accountIdentifier: PgfDSRiEIdentifier, rulesetIdentifier: PgfDSRiERulesetIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<PgfDSRiERuleResponseSingle>> {
        return WebAnalyticsApiFp(this.configuration).webAnalyticsCreateRule(body, accountIdentifier, rulesetIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates a new Web Analytics site.
     * @summary Create a Web Analytics site
     * @param {PgfDSRiECreateSiteRequest} body 
     * @param {PgfDSRiEIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebAnalyticsApi
     */
    public async webAnalyticsCreateSite(body: PgfDSRiECreateSiteRequest, accountIdentifier: PgfDSRiEIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<PgfDSRiESiteResponseSingle>> {
        return WebAnalyticsApiFp(this.configuration).webAnalyticsCreateSite(body, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes an existing rule from a Web Analytics ruleset.
     * @summary Delete a Web Analytics rule
     * @param {PgfDSRiEIdentifier} accountIdentifier 
     * @param {PgfDSRiERulesetIdentifier} rulesetIdentifier 
     * @param {PgfDSRiERuleIdentifier} ruleIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebAnalyticsApi
     */
    public async webAnalyticsDeleteRule(accountIdentifier: PgfDSRiEIdentifier, rulesetIdentifier: PgfDSRiERulesetIdentifier, ruleIdentifier: PgfDSRiERuleIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<PgfDSRiERuleIdResponseSingle>> {
        return WebAnalyticsApiFp(this.configuration).webAnalyticsDeleteRule(accountIdentifier, rulesetIdentifier, ruleIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes an existing Web Analytics site.
     * @summary Delete a Web Analytics site
     * @param {PgfDSRiEIdentifier} accountIdentifier 
     * @param {PgfDSRiEIdentifier} siteIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebAnalyticsApi
     */
    public async webAnalyticsDeleteSite(accountIdentifier: PgfDSRiEIdentifier, siteIdentifier: PgfDSRiEIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<PgfDSRiESiteTagResponseSingle>> {
        return WebAnalyticsApiFp(this.configuration).webAnalyticsDeleteSite(accountIdentifier, siteIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a Web Analytics site.
     * @summary Get a Web Analytics site
     * @param {PgfDSRiEIdentifier} accountIdentifier 
     * @param {PgfDSRiEIdentifier} siteIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebAnalyticsApi
     */
    public async webAnalyticsGetSite(accountIdentifier: PgfDSRiEIdentifier, siteIdentifier: PgfDSRiEIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<PgfDSRiESiteResponseSingle>> {
        return WebAnalyticsApiFp(this.configuration).webAnalyticsGetSite(accountIdentifier, siteIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists all the rules in a Web Analytics ruleset.
     * @summary List rules in Web Analytics ruleset
     * @param {PgfDSRiEIdentifier} accountIdentifier 
     * @param {PgfDSRiERulesetIdentifier} rulesetIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebAnalyticsApi
     */
    public async webAnalyticsListRules(accountIdentifier: PgfDSRiEIdentifier, rulesetIdentifier: PgfDSRiERulesetIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<PgfDSRiERulesResponseCollection>> {
        return WebAnalyticsApiFp(this.configuration).webAnalyticsListRules(accountIdentifier, rulesetIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists all Web Analytics sites of an account.
     * @summary List Web Analytics sites
     * @param {PgfDSRiEIdentifier} accountIdentifier 
     * @param {PgfDSRiEPerPage} [perPage] 
     * @param {PgfDSRiEPage} [page] 
     * @param {PgfDSRiEOrderBy} [orderBy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebAnalyticsApi
     */
    public async webAnalyticsListSites(accountIdentifier: PgfDSRiEIdentifier, perPage?: PgfDSRiEPerPage, page?: PgfDSRiEPage, orderBy?: PgfDSRiEOrderBy, options?: AxiosRequestConfig) : Promise<AxiosResponse<PgfDSRiESitesResponseCollection>> {
        return WebAnalyticsApiFp(this.configuration).webAnalyticsListSites(accountIdentifier, perPage, page, orderBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modifies one or more rules in a Web Analytics ruleset with a single request.
     * @summary Update Web Analytics rules
     * @param {PgfDSRiEModifyRulesRequest} body 
     * @param {PgfDSRiEIdentifier} accountIdentifier 
     * @param {PgfDSRiERulesetIdentifier} rulesetIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebAnalyticsApi
     */
    public async webAnalyticsModifyRules(body: PgfDSRiEModifyRulesRequest, accountIdentifier: PgfDSRiEIdentifier, rulesetIdentifier: PgfDSRiERulesetIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<PgfDSRiERulesResponseCollection>> {
        return WebAnalyticsApiFp(this.configuration).webAnalyticsModifyRules(body, accountIdentifier, rulesetIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates a rule in a Web Analytics ruleset.
     * @summary Update a Web Analytics rule
     * @param {PgfDSRiECreateRuleRequest} body 
     * @param {PgfDSRiEIdentifier} accountIdentifier 
     * @param {PgfDSRiERulesetIdentifier} rulesetIdentifier 
     * @param {PgfDSRiERuleIdentifier} ruleIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebAnalyticsApi
     */
    public async webAnalyticsUpdateRule(body: PgfDSRiECreateRuleRequest, accountIdentifier: PgfDSRiEIdentifier, rulesetIdentifier: PgfDSRiERulesetIdentifier, ruleIdentifier: PgfDSRiERuleIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<PgfDSRiERuleResponseSingle>> {
        return WebAnalyticsApiFp(this.configuration).webAnalyticsUpdateRule(body, accountIdentifier, rulesetIdentifier, ruleIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates an existing Web Analytics site.
     * @summary Update a Web Analytics site
     * @param {PgfDSRiECreateSiteRequest} body 
     * @param {PgfDSRiEIdentifier} accountIdentifier 
     * @param {PgfDSRiEIdentifier} siteIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebAnalyticsApi
     */
    public async webAnalyticsUpdateSite(body: PgfDSRiECreateSiteRequest, accountIdentifier: PgfDSRiEIdentifier, siteIdentifier: PgfDSRiEIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<PgfDSRiESiteResponseSingle>> {
        return WebAnalyticsApiFp(this.configuration).webAnalyticsUpdateSite(body, accountIdentifier, siteIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
}
