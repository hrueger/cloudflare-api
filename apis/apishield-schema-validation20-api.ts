/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse2001 } from '../models';
import { InlineResponse2002 } from '../models';
import { InlineResponse2003 } from '../models';
import { InlineResponse2004 } from '../models';
import { InlineResponse4XX1 } from '../models';
import { OoPdFtgXApiResponseCommonFailure } from '../models';
import { OoPdFtgXDefaultResponse } from '../models';
import { OoPdFtgXIdentifier } from '../models';
import { OoPdFtgXKind } from '../models';
import { OoPdFtgXSchemaUploadFailure } from '../models';
import { OoPdFtgXValidationEnabled } from '../models';
import { UserSchemasSchemaIdBody } from '../models';
/**
 * APIShieldSchemaValidation20Api - axios parameter creator
 * @export
 */
export const APIShieldSchemaValidation20ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete a schema
         * @param {OoPdFtgXIdentifier} zoneId 
         * @param {string} schemaId Identifier for the schema-ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShieldSchemaDeleteASchema: async (zoneId: OoPdFtgXIdentifier, schemaId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneId' is not null or undefined
            if (zoneId === null || zoneId === undefined) {
                throw new RequiredError('zoneId','Required parameter zoneId was null or undefined when calling apiShieldSchemaDeleteASchema.');
            }
            // verify required parameter 'schemaId' is not null or undefined
            if (schemaId === null || schemaId === undefined) {
                throw new RequiredError('schemaId','Required parameter schemaId was null or undefined when calling apiShieldSchemaDeleteASchema.');
            }
            const localVarPath = `/zones/{zone_id}/api_gateway/user_schemas/{schema_id}`
                .replace(`{${"zone_id"}}`, encodeURIComponent(String(zoneId)))
                .replace(`{${"schema_id"}}`, encodeURIComponent(String(schemaId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Enable validation for a schema
         * @param {UserSchemasSchemaIdBody} body 
         * @param {OoPdFtgXIdentifier} zoneId 
         * @param {string} schemaId Identifier for the schema-ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShieldSchemaValidationEnableValidationForASchema: async (body: UserSchemasSchemaIdBody, zoneId: OoPdFtgXIdentifier, schemaId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling apiShieldSchemaValidationEnableValidationForASchema.');
            }
            // verify required parameter 'zoneId' is not null or undefined
            if (zoneId === null || zoneId === undefined) {
                throw new RequiredError('zoneId','Required parameter zoneId was null or undefined when calling apiShieldSchemaValidationEnableValidationForASchema.');
            }
            // verify required parameter 'schemaId' is not null or undefined
            if (schemaId === null || schemaId === undefined) {
                throw new RequiredError('schemaId','Required parameter schemaId was null or undefined when calling apiShieldSchemaValidationEnableValidationForASchema.');
            }
            const localVarPath = `/zones/{zone_id}/api_gateway/user_schemas/{schema_id}`
                .replace(`{${"zone_id"}}`, encodeURIComponent(String(zoneId)))
                .replace(`{${"schema_id"}}`, encodeURIComponent(String(schemaId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all operations from the schema. Operations that already exist in API Shield Endpoint Management will be returned as full operations.
         * @summary Retrieve all operations from a schema.
         * @param {OoPdFtgXIdentifier} zoneId 
         * @param {string} schemaId Identifier for the schema-ID
         * @param {Array<string>} [feature] Add feature(s) to the results. The feature name that is given here corresponds to the resulting feature object. Have a look at the top-level object description for more details on the specific meaning.
         * @param {Array<string>} [host] 
         * @param {Array<string>} [method] 
         * @param {string} [endpoint] 
         * @param {any} [page] Page number of paginated results.
         * @param {any} [perPage] Maximum number of results per page.
         * @param {string} [operationStatus] Filter results by whether operations exist in API Shield Endpoint Management or not. &#x60;new&#x60; will just return operations from the schema that do not exist in API Shield Endpoint Management. &#x60;existing&#x60; will just return operations from the schema that already exist in API Shield Endpoint Management.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShieldSchemaValidationExtractOperationsFromSchema: async (zoneId: OoPdFtgXIdentifier, schemaId: string, feature?: Array<string>, host?: Array<string>, method?: Array<string>, endpoint?: string, page?: any, perPage?: any, operationStatus?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneId' is not null or undefined
            if (zoneId === null || zoneId === undefined) {
                throw new RequiredError('zoneId','Required parameter zoneId was null or undefined when calling apiShieldSchemaValidationExtractOperationsFromSchema.');
            }
            // verify required parameter 'schemaId' is not null or undefined
            if (schemaId === null || schemaId === undefined) {
                throw new RequiredError('schemaId','Required parameter schemaId was null or undefined when calling apiShieldSchemaValidationExtractOperationsFromSchema.');
            }
            const localVarPath = `/zones/{zone_id}/api_gateway/user_schemas/{schema_id}/operations`
                .replace(`{${"zone_id"}}`, encodeURIComponent(String(zoneId)))
                .replace(`{${"schema_id"}}`, encodeURIComponent(String(schemaId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            if (feature) {
                localVarQueryParameter['feature'] = feature;
            }

            if (host) {
                localVarQueryParameter['host'] = host;
            }

            if (method) {
                localVarQueryParameter['method'] = method;
            }

            if (endpoint !== undefined) {
                localVarQueryParameter['endpoint'] = endpoint;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (operationStatus !== undefined) {
                localVarQueryParameter['operation_status'] = operationStatus;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload a schema to a zone
         * @param {Blob} file 
         * @param {OoPdFtgXKind} kind 
         * @param {string} name 
         * @param {string} validationEnabled 
         * @param {OoPdFtgXIdentifier} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShieldSchemaValidationPostSchemaForm: async (file: Blob, kind: OoPdFtgXKind, name: string, validationEnabled: string, zoneId: OoPdFtgXIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            if (file === null || file === undefined) {
                throw new RequiredError('file','Required parameter file was null or undefined when calling apiShieldSchemaValidationPostSchemaForm.');
            }
            // verify required parameter 'kind' is not null or undefined
            if (kind === null || kind === undefined) {
                throw new RequiredError('kind','Required parameter kind was null or undefined when calling apiShieldSchemaValidationPostSchemaForm.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling apiShieldSchemaValidationPostSchemaForm.');
            }
            // verify required parameter 'validationEnabled' is not null or undefined
            if (validationEnabled === null || validationEnabled === undefined) {
                throw new RequiredError('validationEnabled','Required parameter validationEnabled was null or undefined when calling apiShieldSchemaValidationPostSchemaForm.');
            }
            // verify required parameter 'zoneId' is not null or undefined
            if (zoneId === null || zoneId === undefined) {
                throw new RequiredError('zoneId','Required parameter zoneId was null or undefined when calling apiShieldSchemaValidationPostSchemaForm.');
            }
            const localVarPath = `/zones/{zone_id}/api_gateway/user_schemas`
                .replace(`{${"zone_id"}}`, encodeURIComponent(String(zoneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }

            if (kind !== undefined) { 
                localVarFormParams.append('kind', kind as any);
            }

            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }

            if (validationEnabled !== undefined) { 
                localVarFormParams.append('validation_enabled', validationEnabled as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve information about all schemas on a zone
         * @param {OoPdFtgXIdentifier} zoneId 
         * @param {any} [page] Page number of paginated results.
         * @param {any} [perPage] Maximum number of results per page.
         * @param {boolean} [omitSource] Omit the source-files of schemas and only retrieve their meta-data.
         * @param {OoPdFtgXValidationEnabled} [validationEnabled] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShieldSchemaValidationRetrieveInformationAboutAllSchemas: async (zoneId: OoPdFtgXIdentifier, page?: any, perPage?: any, omitSource?: boolean, validationEnabled?: OoPdFtgXValidationEnabled, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneId' is not null or undefined
            if (zoneId === null || zoneId === undefined) {
                throw new RequiredError('zoneId','Required parameter zoneId was null or undefined when calling apiShieldSchemaValidationRetrieveInformationAboutAllSchemas.');
            }
            const localVarPath = `/zones/{zone_id}/api_gateway/user_schemas`
                .replace(`{${"zone_id"}}`, encodeURIComponent(String(zoneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (omitSource !== undefined) {
                localVarQueryParameter['omit_source'] = omitSource;
            }

            if (validationEnabled !== undefined) {
                localVarQueryParameter['validation_enabled'] = validationEnabled;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve information about a specific schema on a zone
         * @param {OoPdFtgXIdentifier} zoneId 
         * @param {string} schemaId Identifier for the schema-ID
         * @param {boolean} [omitSource] Omit the source-files of schemas and only retrieve their meta-data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShieldSchemaValidationRetrieveInformationAboutSpecificSchema: async (zoneId: OoPdFtgXIdentifier, schemaId: string, omitSource?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneId' is not null or undefined
            if (zoneId === null || zoneId === undefined) {
                throw new RequiredError('zoneId','Required parameter zoneId was null or undefined when calling apiShieldSchemaValidationRetrieveInformationAboutSpecificSchema.');
            }
            // verify required parameter 'schemaId' is not null or undefined
            if (schemaId === null || schemaId === undefined) {
                throw new RequiredError('schemaId','Required parameter schemaId was null or undefined when calling apiShieldSchemaValidationRetrieveInformationAboutSpecificSchema.');
            }
            const localVarPath = `/zones/{zone_id}/api_gateway/user_schemas/{schema_id}`
                .replace(`{${"zone_id"}}`, encodeURIComponent(String(zoneId)))
                .replace(`{${"schema_id"}}`, encodeURIComponent(String(schemaId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            if (omitSource !== undefined) {
                localVarQueryParameter['omit_source'] = omitSource;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * APIShieldSchemaValidation20Api - functional programming interface
 * @export
 */
export const APIShieldSchemaValidation20ApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete a schema
         * @param {OoPdFtgXIdentifier} zoneId 
         * @param {string} schemaId Identifier for the schema-ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiShieldSchemaDeleteASchema(zoneId: OoPdFtgXIdentifier, schemaId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<OoPdFtgXDefaultResponse>>> {
            const localVarAxiosArgs = await APIShieldSchemaValidation20ApiAxiosParamCreator(configuration).apiShieldSchemaDeleteASchema(zoneId, schemaId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Enable validation for a schema
         * @param {UserSchemasSchemaIdBody} body 
         * @param {OoPdFtgXIdentifier} zoneId 
         * @param {string} schemaId Identifier for the schema-ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiShieldSchemaValidationEnableValidationForASchema(body: UserSchemasSchemaIdBody, zoneId: OoPdFtgXIdentifier, schemaId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2003>>> {
            const localVarAxiosArgs = await APIShieldSchemaValidation20ApiAxiosParamCreator(configuration).apiShieldSchemaValidationEnableValidationForASchema(body, zoneId, schemaId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves all operations from the schema. Operations that already exist in API Shield Endpoint Management will be returned as full operations.
         * @summary Retrieve all operations from a schema.
         * @param {OoPdFtgXIdentifier} zoneId 
         * @param {string} schemaId Identifier for the schema-ID
         * @param {Array<string>} [feature] Add feature(s) to the results. The feature name that is given here corresponds to the resulting feature object. Have a look at the top-level object description for more details on the specific meaning.
         * @param {Array<string>} [host] 
         * @param {Array<string>} [method] 
         * @param {string} [endpoint] 
         * @param {any} [page] Page number of paginated results.
         * @param {any} [perPage] Maximum number of results per page.
         * @param {string} [operationStatus] Filter results by whether operations exist in API Shield Endpoint Management or not. &#x60;new&#x60; will just return operations from the schema that do not exist in API Shield Endpoint Management. &#x60;existing&#x60; will just return operations from the schema that already exist in API Shield Endpoint Management.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiShieldSchemaValidationExtractOperationsFromSchema(zoneId: OoPdFtgXIdentifier, schemaId: string, feature?: Array<string>, host?: Array<string>, method?: Array<string>, endpoint?: string, page?: any, perPage?: any, operationStatus?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2004>>> {
            const localVarAxiosArgs = await APIShieldSchemaValidation20ApiAxiosParamCreator(configuration).apiShieldSchemaValidationExtractOperationsFromSchema(zoneId, schemaId, feature, host, method, endpoint, page, perPage, operationStatus, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Upload a schema to a zone
         * @param {Blob} file 
         * @param {OoPdFtgXKind} kind 
         * @param {string} name 
         * @param {string} validationEnabled 
         * @param {OoPdFtgXIdentifier} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiShieldSchemaValidationPostSchemaForm(file: Blob, kind: OoPdFtgXKind, name: string, validationEnabled: string, zoneId: OoPdFtgXIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2002>>> {
            const localVarAxiosArgs = await APIShieldSchemaValidation20ApiAxiosParamCreator(configuration).apiShieldSchemaValidationPostSchemaForm(file, kind, name, validationEnabled, zoneId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Retrieve information about all schemas on a zone
         * @param {OoPdFtgXIdentifier} zoneId 
         * @param {any} [page] Page number of paginated results.
         * @param {any} [perPage] Maximum number of results per page.
         * @param {boolean} [omitSource] Omit the source-files of schemas and only retrieve their meta-data.
         * @param {OoPdFtgXValidationEnabled} [validationEnabled] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiShieldSchemaValidationRetrieveInformationAboutAllSchemas(zoneId: OoPdFtgXIdentifier, page?: any, perPage?: any, omitSource?: boolean, validationEnabled?: OoPdFtgXValidationEnabled, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2001>>> {
            const localVarAxiosArgs = await APIShieldSchemaValidation20ApiAxiosParamCreator(configuration).apiShieldSchemaValidationRetrieveInformationAboutAllSchemas(zoneId, page, perPage, omitSource, validationEnabled, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Retrieve information about a specific schema on a zone
         * @param {OoPdFtgXIdentifier} zoneId 
         * @param {string} schemaId Identifier for the schema-ID
         * @param {boolean} [omitSource] Omit the source-files of schemas and only retrieve their meta-data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiShieldSchemaValidationRetrieveInformationAboutSpecificSchema(zoneId: OoPdFtgXIdentifier, schemaId: string, omitSource?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2003>>> {
            const localVarAxiosArgs = await APIShieldSchemaValidation20ApiAxiosParamCreator(configuration).apiShieldSchemaValidationRetrieveInformationAboutSpecificSchema(zoneId, schemaId, omitSource, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * APIShieldSchemaValidation20Api - factory interface
 * @export
 */
export const APIShieldSchemaValidation20ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Delete a schema
         * @param {OoPdFtgXIdentifier} zoneId 
         * @param {string} schemaId Identifier for the schema-ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiShieldSchemaDeleteASchema(zoneId: OoPdFtgXIdentifier, schemaId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<OoPdFtgXDefaultResponse>> {
            return APIShieldSchemaValidation20ApiFp(configuration).apiShieldSchemaDeleteASchema(zoneId, schemaId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Enable validation for a schema
         * @param {UserSchemasSchemaIdBody} body 
         * @param {OoPdFtgXIdentifier} zoneId 
         * @param {string} schemaId Identifier for the schema-ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiShieldSchemaValidationEnableValidationForASchema(body: UserSchemasSchemaIdBody, zoneId: OoPdFtgXIdentifier, schemaId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2003>> {
            return APIShieldSchemaValidation20ApiFp(configuration).apiShieldSchemaValidationEnableValidationForASchema(body, zoneId, schemaId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves all operations from the schema. Operations that already exist in API Shield Endpoint Management will be returned as full operations.
         * @summary Retrieve all operations from a schema.
         * @param {OoPdFtgXIdentifier} zoneId 
         * @param {string} schemaId Identifier for the schema-ID
         * @param {Array<string>} [feature] Add feature(s) to the results. The feature name that is given here corresponds to the resulting feature object. Have a look at the top-level object description for more details on the specific meaning.
         * @param {Array<string>} [host] 
         * @param {Array<string>} [method] 
         * @param {string} [endpoint] 
         * @param {any} [page] Page number of paginated results.
         * @param {any} [perPage] Maximum number of results per page.
         * @param {string} [operationStatus] Filter results by whether operations exist in API Shield Endpoint Management or not. &#x60;new&#x60; will just return operations from the schema that do not exist in API Shield Endpoint Management. &#x60;existing&#x60; will just return operations from the schema that already exist in API Shield Endpoint Management.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiShieldSchemaValidationExtractOperationsFromSchema(zoneId: OoPdFtgXIdentifier, schemaId: string, feature?: Array<string>, host?: Array<string>, method?: Array<string>, endpoint?: string, page?: any, perPage?: any, operationStatus?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2004>> {
            return APIShieldSchemaValidation20ApiFp(configuration).apiShieldSchemaValidationExtractOperationsFromSchema(zoneId, schemaId, feature, host, method, endpoint, page, perPage, operationStatus, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload a schema to a zone
         * @param {Blob} file 
         * @param {OoPdFtgXKind} kind 
         * @param {string} name 
         * @param {string} validationEnabled 
         * @param {OoPdFtgXIdentifier} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiShieldSchemaValidationPostSchemaForm(file: Blob, kind: OoPdFtgXKind, name: string, validationEnabled: string, zoneId: OoPdFtgXIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2002>> {
            return APIShieldSchemaValidation20ApiFp(configuration).apiShieldSchemaValidationPostSchemaForm(file, kind, name, validationEnabled, zoneId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve information about all schemas on a zone
         * @param {OoPdFtgXIdentifier} zoneId 
         * @param {any} [page] Page number of paginated results.
         * @param {any} [perPage] Maximum number of results per page.
         * @param {boolean} [omitSource] Omit the source-files of schemas and only retrieve their meta-data.
         * @param {OoPdFtgXValidationEnabled} [validationEnabled] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiShieldSchemaValidationRetrieveInformationAboutAllSchemas(zoneId: OoPdFtgXIdentifier, page?: any, perPage?: any, omitSource?: boolean, validationEnabled?: OoPdFtgXValidationEnabled, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2001>> {
            return APIShieldSchemaValidation20ApiFp(configuration).apiShieldSchemaValidationRetrieveInformationAboutAllSchemas(zoneId, page, perPage, omitSource, validationEnabled, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve information about a specific schema on a zone
         * @param {OoPdFtgXIdentifier} zoneId 
         * @param {string} schemaId Identifier for the schema-ID
         * @param {boolean} [omitSource] Omit the source-files of schemas and only retrieve their meta-data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiShieldSchemaValidationRetrieveInformationAboutSpecificSchema(zoneId: OoPdFtgXIdentifier, schemaId: string, omitSource?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2003>> {
            return APIShieldSchemaValidation20ApiFp(configuration).apiShieldSchemaValidationRetrieveInformationAboutSpecificSchema(zoneId, schemaId, omitSource, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * APIShieldSchemaValidation20Api - object-oriented interface
 * @export
 * @class APIShieldSchemaValidation20Api
 * @extends {BaseAPI}
 */
export class APIShieldSchemaValidation20Api extends BaseAPI {
    /**
     * 
     * @summary Delete a schema
     * @param {OoPdFtgXIdentifier} zoneId 
     * @param {string} schemaId Identifier for the schema-ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIShieldSchemaValidation20Api
     */
    public async apiShieldSchemaDeleteASchema(zoneId: OoPdFtgXIdentifier, schemaId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<OoPdFtgXDefaultResponse>> {
        return APIShieldSchemaValidation20ApiFp(this.configuration).apiShieldSchemaDeleteASchema(zoneId, schemaId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Enable validation for a schema
     * @param {UserSchemasSchemaIdBody} body 
     * @param {OoPdFtgXIdentifier} zoneId 
     * @param {string} schemaId Identifier for the schema-ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIShieldSchemaValidation20Api
     */
    public async apiShieldSchemaValidationEnableValidationForASchema(body: UserSchemasSchemaIdBody, zoneId: OoPdFtgXIdentifier, schemaId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2003>> {
        return APIShieldSchemaValidation20ApiFp(this.configuration).apiShieldSchemaValidationEnableValidationForASchema(body, zoneId, schemaId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves all operations from the schema. Operations that already exist in API Shield Endpoint Management will be returned as full operations.
     * @summary Retrieve all operations from a schema.
     * @param {OoPdFtgXIdentifier} zoneId 
     * @param {string} schemaId Identifier for the schema-ID
     * @param {Array<string>} [feature] Add feature(s) to the results. The feature name that is given here corresponds to the resulting feature object. Have a look at the top-level object description for more details on the specific meaning.
     * @param {Array<string>} [host] 
     * @param {Array<string>} [method] 
     * @param {string} [endpoint] 
     * @param {any} [page] Page number of paginated results.
     * @param {any} [perPage] Maximum number of results per page.
     * @param {string} [operationStatus] Filter results by whether operations exist in API Shield Endpoint Management or not. &#x60;new&#x60; will just return operations from the schema that do not exist in API Shield Endpoint Management. &#x60;existing&#x60; will just return operations from the schema that already exist in API Shield Endpoint Management.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIShieldSchemaValidation20Api
     */
    public async apiShieldSchemaValidationExtractOperationsFromSchema(zoneId: OoPdFtgXIdentifier, schemaId: string, feature?: Array<string>, host?: Array<string>, method?: Array<string>, endpoint?: string, page?: any, perPage?: any, operationStatus?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2004>> {
        return APIShieldSchemaValidation20ApiFp(this.configuration).apiShieldSchemaValidationExtractOperationsFromSchema(zoneId, schemaId, feature, host, method, endpoint, page, perPage, operationStatus, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Upload a schema to a zone
     * @param {Blob} file 
     * @param {OoPdFtgXKind} kind 
     * @param {string} name 
     * @param {string} validationEnabled 
     * @param {OoPdFtgXIdentifier} zoneId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIShieldSchemaValidation20Api
     */
    public async apiShieldSchemaValidationPostSchemaForm(file: Blob, kind: OoPdFtgXKind, name: string, validationEnabled: string, zoneId: OoPdFtgXIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2002>> {
        return APIShieldSchemaValidation20ApiFp(this.configuration).apiShieldSchemaValidationPostSchemaForm(file, kind, name, validationEnabled, zoneId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Retrieve information about all schemas on a zone
     * @param {OoPdFtgXIdentifier} zoneId 
     * @param {any} [page] Page number of paginated results.
     * @param {any} [perPage] Maximum number of results per page.
     * @param {boolean} [omitSource] Omit the source-files of schemas and only retrieve their meta-data.
     * @param {OoPdFtgXValidationEnabled} [validationEnabled] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIShieldSchemaValidation20Api
     */
    public async apiShieldSchemaValidationRetrieveInformationAboutAllSchemas(zoneId: OoPdFtgXIdentifier, page?: any, perPage?: any, omitSource?: boolean, validationEnabled?: OoPdFtgXValidationEnabled, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2001>> {
        return APIShieldSchemaValidation20ApiFp(this.configuration).apiShieldSchemaValidationRetrieveInformationAboutAllSchemas(zoneId, page, perPage, omitSource, validationEnabled, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Retrieve information about a specific schema on a zone
     * @param {OoPdFtgXIdentifier} zoneId 
     * @param {string} schemaId Identifier for the schema-ID
     * @param {boolean} [omitSource] Omit the source-files of schemas and only retrieve their meta-data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIShieldSchemaValidation20Api
     */
    public async apiShieldSchemaValidationRetrieveInformationAboutSpecificSchema(zoneId: OoPdFtgXIdentifier, schemaId: string, omitSource?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2003>> {
        return APIShieldSchemaValidation20ApiFp(this.configuration).apiShieldSchemaValidationRetrieveInformationAboutSpecificSchema(zoneId, schemaId, omitSource, options).then((request) => request(this.axios, this.basePath));
    }
}
