/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse4xx2 } from '../models';
import { InlineResponse4xx3 } from '../models';
import { InlineResponse4xx4 } from '../models';
import { Model6KaSmMdRAccountIdentifier } from '../models';
import { Model6KaSmMdRApiResponseSingleId } from '../models';
import { Model6KaSmMdRCollectionMemberResponse } from '../models';
import { Model6KaSmMdRCreate } from '../models';
import { Model6KaSmMdRMembershipComponentsSchemasIdentifier } from '../models';
import { Model6KaSmMdRSchemasMember } from '../models';
import { Model6KaSmMdRSingleMemberResponse } from '../models';
import { Model6KaSmMdRSingleMemberResponseWithCode } from '../models';
/**
 * AccountMembersApi - axios parameter creator
 * @export
 */
export const AccountMembersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a user to the list of members for this account.
         * @summary Add Member
         * @param {Model6KaSmMdRCreate} body 
         * @param {Model6KaSmMdRAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountMembersAddMember: async (body: Model6KaSmMdRCreate, accountIdentifier: Model6KaSmMdRAccountIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling accountMembersAddMember.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling accountMembersAddMember.');
            }
            const localVarPath = `/accounts/{account_identifier}/members`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List all members of an account.
         * @summary List Members
         * @param {Model6KaSmMdRAccountIdentifier} accountIdentifier 
         * @param {string} [order] 
         * @param {string} [status] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {string} [direction] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountMembersListMembers: async (accountIdentifier: Model6KaSmMdRAccountIdentifier, order?: string, status?: string, page?: number, perPage?: number, direction?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling accountMembersListMembers.');
            }
            const localVarPath = `/accounts/{account_identifier}/members`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about a specific member of an account.
         * @summary Member Details
         * @param {Model6KaSmMdRMembershipComponentsSchemasIdentifier} identifier 
         * @param {Model6KaSmMdRAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountMembersMemberDetails: async (identifier: Model6KaSmMdRMembershipComponentsSchemasIdentifier, accountIdentifier: Model6KaSmMdRAccountIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling accountMembersMemberDetails.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling accountMembersMemberDetails.');
            }
            const localVarPath = `/accounts/{account_identifier}/members/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a member from an account.
         * @summary Remove Member
         * @param {Model6KaSmMdRMembershipComponentsSchemasIdentifier} identifier 
         * @param {Model6KaSmMdRAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountMembersRemoveMember: async (identifier: Model6KaSmMdRMembershipComponentsSchemasIdentifier, accountIdentifier: Model6KaSmMdRAccountIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling accountMembersRemoveMember.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling accountMembersRemoveMember.');
            }
            const localVarPath = `/accounts/{account_identifier}/members/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify an account member.
         * @summary Update Member
         * @param {Model6KaSmMdRSchemasMember} body 
         * @param {Model6KaSmMdRMembershipComponentsSchemasIdentifier} identifier 
         * @param {Model6KaSmMdRAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountMembersUpdateMember: async (body: Model6KaSmMdRSchemasMember, identifier: Model6KaSmMdRMembershipComponentsSchemasIdentifier, accountIdentifier: Model6KaSmMdRAccountIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling accountMembersUpdateMember.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling accountMembersUpdateMember.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling accountMembersUpdateMember.');
            }
            const localVarPath = `/accounts/{account_identifier}/members/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountMembersApi - functional programming interface
 * @export
 */
export const AccountMembersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Add a user to the list of members for this account.
         * @summary Add Member
         * @param {Model6KaSmMdRCreate} body 
         * @param {Model6KaSmMdRAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountMembersAddMember(body: Model6KaSmMdRCreate, accountIdentifier: Model6KaSmMdRAccountIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model6KaSmMdRSingleMemberResponseWithCode>>> {
            const localVarAxiosArgs = await AccountMembersApiAxiosParamCreator(configuration).accountMembersAddMember(body, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List all members of an account.
         * @summary List Members
         * @param {Model6KaSmMdRAccountIdentifier} accountIdentifier 
         * @param {string} [order] 
         * @param {string} [status] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {string} [direction] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountMembersListMembers(accountIdentifier: Model6KaSmMdRAccountIdentifier, order?: string, status?: string, page?: number, perPage?: number, direction?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model6KaSmMdRCollectionMemberResponse>>> {
            const localVarAxiosArgs = await AccountMembersApiAxiosParamCreator(configuration).accountMembersListMembers(accountIdentifier, order, status, page, perPage, direction, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get information about a specific member of an account.
         * @summary Member Details
         * @param {Model6KaSmMdRMembershipComponentsSchemasIdentifier} identifier 
         * @param {Model6KaSmMdRAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountMembersMemberDetails(identifier: Model6KaSmMdRMembershipComponentsSchemasIdentifier, accountIdentifier: Model6KaSmMdRAccountIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model6KaSmMdRSingleMemberResponse>>> {
            const localVarAxiosArgs = await AccountMembersApiAxiosParamCreator(configuration).accountMembersMemberDetails(identifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Remove a member from an account.
         * @summary Remove Member
         * @param {Model6KaSmMdRMembershipComponentsSchemasIdentifier} identifier 
         * @param {Model6KaSmMdRAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountMembersRemoveMember(identifier: Model6KaSmMdRMembershipComponentsSchemasIdentifier, accountIdentifier: Model6KaSmMdRAccountIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model6KaSmMdRApiResponseSingleId>>> {
            const localVarAxiosArgs = await AccountMembersApiAxiosParamCreator(configuration).accountMembersRemoveMember(identifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Modify an account member.
         * @summary Update Member
         * @param {Model6KaSmMdRSchemasMember} body 
         * @param {Model6KaSmMdRMembershipComponentsSchemasIdentifier} identifier 
         * @param {Model6KaSmMdRAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountMembersUpdateMember(body: Model6KaSmMdRSchemasMember, identifier: Model6KaSmMdRMembershipComponentsSchemasIdentifier, accountIdentifier: Model6KaSmMdRAccountIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model6KaSmMdRSingleMemberResponse>>> {
            const localVarAxiosArgs = await AccountMembersApiAxiosParamCreator(configuration).accountMembersUpdateMember(body, identifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AccountMembersApi - factory interface
 * @export
 */
export const AccountMembersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Add a user to the list of members for this account.
         * @summary Add Member
         * @param {Model6KaSmMdRCreate} body 
         * @param {Model6KaSmMdRAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountMembersAddMember(body: Model6KaSmMdRCreate, accountIdentifier: Model6KaSmMdRAccountIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model6KaSmMdRSingleMemberResponseWithCode>> {
            return AccountMembersApiFp(configuration).accountMembersAddMember(body, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * List all members of an account.
         * @summary List Members
         * @param {Model6KaSmMdRAccountIdentifier} accountIdentifier 
         * @param {string} [order] 
         * @param {string} [status] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {string} [direction] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountMembersListMembers(accountIdentifier: Model6KaSmMdRAccountIdentifier, order?: string, status?: string, page?: number, perPage?: number, direction?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Model6KaSmMdRCollectionMemberResponse>> {
            return AccountMembersApiFp(configuration).accountMembersListMembers(accountIdentifier, order, status, page, perPage, direction, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about a specific member of an account.
         * @summary Member Details
         * @param {Model6KaSmMdRMembershipComponentsSchemasIdentifier} identifier 
         * @param {Model6KaSmMdRAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountMembersMemberDetails(identifier: Model6KaSmMdRMembershipComponentsSchemasIdentifier, accountIdentifier: Model6KaSmMdRAccountIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model6KaSmMdRSingleMemberResponse>> {
            return AccountMembersApiFp(configuration).accountMembersMemberDetails(identifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a member from an account.
         * @summary Remove Member
         * @param {Model6KaSmMdRMembershipComponentsSchemasIdentifier} identifier 
         * @param {Model6KaSmMdRAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountMembersRemoveMember(identifier: Model6KaSmMdRMembershipComponentsSchemasIdentifier, accountIdentifier: Model6KaSmMdRAccountIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model6KaSmMdRApiResponseSingleId>> {
            return AccountMembersApiFp(configuration).accountMembersRemoveMember(identifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify an account member.
         * @summary Update Member
         * @param {Model6KaSmMdRSchemasMember} body 
         * @param {Model6KaSmMdRMembershipComponentsSchemasIdentifier} identifier 
         * @param {Model6KaSmMdRAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountMembersUpdateMember(body: Model6KaSmMdRSchemasMember, identifier: Model6KaSmMdRMembershipComponentsSchemasIdentifier, accountIdentifier: Model6KaSmMdRAccountIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model6KaSmMdRSingleMemberResponse>> {
            return AccountMembersApiFp(configuration).accountMembersUpdateMember(body, identifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountMembersApi - object-oriented interface
 * @export
 * @class AccountMembersApi
 * @extends {BaseAPI}
 */
export class AccountMembersApi extends BaseAPI {
    /**
     * Add a user to the list of members for this account.
     * @summary Add Member
     * @param {Model6KaSmMdRCreate} body 
     * @param {Model6KaSmMdRAccountIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountMembersApi
     */
    public async accountMembersAddMember(body: Model6KaSmMdRCreate, accountIdentifier: Model6KaSmMdRAccountIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model6KaSmMdRSingleMemberResponseWithCode>> {
        return AccountMembersApiFp(this.configuration).accountMembersAddMember(body, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List all members of an account.
     * @summary List Members
     * @param {Model6KaSmMdRAccountIdentifier} accountIdentifier 
     * @param {string} [order] 
     * @param {string} [status] 
     * @param {number} [page] 
     * @param {number} [perPage] 
     * @param {string} [direction] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountMembersApi
     */
    public async accountMembersListMembers(accountIdentifier: Model6KaSmMdRAccountIdentifier, order?: string, status?: string, page?: number, perPage?: number, direction?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model6KaSmMdRCollectionMemberResponse>> {
        return AccountMembersApiFp(this.configuration).accountMembersListMembers(accountIdentifier, order, status, page, perPage, direction, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get information about a specific member of an account.
     * @summary Member Details
     * @param {Model6KaSmMdRMembershipComponentsSchemasIdentifier} identifier 
     * @param {Model6KaSmMdRAccountIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountMembersApi
     */
    public async accountMembersMemberDetails(identifier: Model6KaSmMdRMembershipComponentsSchemasIdentifier, accountIdentifier: Model6KaSmMdRAccountIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model6KaSmMdRSingleMemberResponse>> {
        return AccountMembersApiFp(this.configuration).accountMembersMemberDetails(identifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove a member from an account.
     * @summary Remove Member
     * @param {Model6KaSmMdRMembershipComponentsSchemasIdentifier} identifier 
     * @param {Model6KaSmMdRAccountIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountMembersApi
     */
    public async accountMembersRemoveMember(identifier: Model6KaSmMdRMembershipComponentsSchemasIdentifier, accountIdentifier: Model6KaSmMdRAccountIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model6KaSmMdRApiResponseSingleId>> {
        return AccountMembersApiFp(this.configuration).accountMembersRemoveMember(identifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify an account member.
     * @summary Update Member
     * @param {Model6KaSmMdRSchemasMember} body 
     * @param {Model6KaSmMdRMembershipComponentsSchemasIdentifier} identifier 
     * @param {Model6KaSmMdRAccountIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountMembersApi
     */
    public async accountMembersUpdateMember(body: Model6KaSmMdRSchemasMember, identifier: Model6KaSmMdRMembershipComponentsSchemasIdentifier, accountIdentifier: Model6KaSmMdRAccountIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model6KaSmMdRSingleMemberResponse>> {
        return AccountMembersApiFp(this.configuration).accountMembersUpdateMember(body, identifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
}
