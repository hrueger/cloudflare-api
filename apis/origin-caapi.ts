/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CertificatesBody } from '../models';
import { InlineResponse4XX230 } from '../models';
import { InlineResponse4XX231 } from '../models';
import { InlineResponse4XX232 } from '../models';
import { KNYM3FIhCertificateResponseSingleId } from '../models';
import { KNYM3FIhIdentifier } from '../models';
import { KNYM3FIhSchemasCertificateResponseCollection } from '../models';
import { KNYM3FIhSchemasCertificateResponseSingle } from '../models';
/**
 * OriginCAApi - axios parameter creator
 * @export
 */
export const OriginCAApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create an Origin CA certificate. Use your Origin CA Key as your User Service Key when calling this endpoint ([see above](#requests)).
         * @summary Create Certificate
         * @param {CertificatesBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        originCaCreateCertificate: async (body: CertificatesBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling originCaCreateCertificate.');
            }
            const localVarPath = `/certificates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication user_service_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-User-Service-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-User-Service-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an existing Origin CA certificate by its serial number. Use your Origin CA Key as your User Service Key when calling this endpoint ([see above](#requests)).
         * @summary Get Certificate
         * @param {KNYM3FIhIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        originCaGetCertificate: async (identifier: KNYM3FIhIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling originCaGetCertificate.');
            }
            const localVarPath = `/certificates/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication user_service_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-User-Service-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-User-Service-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List all existing Origin CA certificates for a given zone. Use your Origin CA Key as your User Service Key when calling this endpoint ([see above](#requests)).
         * @summary List Certificates
         * @param {KNYM3FIhIdentifier} [identifier] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        originCaListCertificates: async (identifier?: KNYM3FIhIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/certificates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication user_service_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-User-Service-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-User-Service-Key"] = localVarApiKeyValue;
            }

            if (identifier !== undefined) {
                localVarQueryParameter['identifier'] = identifier;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Revoke an existing Origin CA certificate by its serial number. Use your Origin CA Key as your User Service Key when calling this endpoint ([see above](#requests)).
         * @summary Revoke Certificate
         * @param {KNYM3FIhIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        originCaRevokeCertificate: async (identifier: KNYM3FIhIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling originCaRevokeCertificate.');
            }
            const localVarPath = `/certificates/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication user_service_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-User-Service-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-User-Service-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OriginCAApi - functional programming interface
 * @export
 */
export const OriginCAApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create an Origin CA certificate. Use your Origin CA Key as your User Service Key when calling this endpoint ([see above](#requests)).
         * @summary Create Certificate
         * @param {CertificatesBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async originCaCreateCertificate(body: CertificatesBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<KNYM3FIhSchemasCertificateResponseSingle>>> {
            const localVarAxiosArgs = await OriginCAApiAxiosParamCreator(configuration).originCaCreateCertificate(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get an existing Origin CA certificate by its serial number. Use your Origin CA Key as your User Service Key when calling this endpoint ([see above](#requests)).
         * @summary Get Certificate
         * @param {KNYM3FIhIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async originCaGetCertificate(identifier: KNYM3FIhIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<KNYM3FIhSchemasCertificateResponseSingle>>> {
            const localVarAxiosArgs = await OriginCAApiAxiosParamCreator(configuration).originCaGetCertificate(identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List all existing Origin CA certificates for a given zone. Use your Origin CA Key as your User Service Key when calling this endpoint ([see above](#requests)).
         * @summary List Certificates
         * @param {KNYM3FIhIdentifier} [identifier] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async originCaListCertificates(identifier?: KNYM3FIhIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<KNYM3FIhSchemasCertificateResponseCollection>>> {
            const localVarAxiosArgs = await OriginCAApiAxiosParamCreator(configuration).originCaListCertificates(identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Revoke an existing Origin CA certificate by its serial number. Use your Origin CA Key as your User Service Key when calling this endpoint ([see above](#requests)).
         * @summary Revoke Certificate
         * @param {KNYM3FIhIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async originCaRevokeCertificate(identifier: KNYM3FIhIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<KNYM3FIhCertificateResponseSingleId>>> {
            const localVarAxiosArgs = await OriginCAApiAxiosParamCreator(configuration).originCaRevokeCertificate(identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * OriginCAApi - factory interface
 * @export
 */
export const OriginCAApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create an Origin CA certificate. Use your Origin CA Key as your User Service Key when calling this endpoint ([see above](#requests)).
         * @summary Create Certificate
         * @param {CertificatesBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async originCaCreateCertificate(body: CertificatesBody, options?: AxiosRequestConfig): Promise<AxiosResponse<KNYM3FIhSchemasCertificateResponseSingle>> {
            return OriginCAApiFp(configuration).originCaCreateCertificate(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an existing Origin CA certificate by its serial number. Use your Origin CA Key as your User Service Key when calling this endpoint ([see above](#requests)).
         * @summary Get Certificate
         * @param {KNYM3FIhIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async originCaGetCertificate(identifier: KNYM3FIhIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<KNYM3FIhSchemasCertificateResponseSingle>> {
            return OriginCAApiFp(configuration).originCaGetCertificate(identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * List all existing Origin CA certificates for a given zone. Use your Origin CA Key as your User Service Key when calling this endpoint ([see above](#requests)).
         * @summary List Certificates
         * @param {KNYM3FIhIdentifier} [identifier] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async originCaListCertificates(identifier?: KNYM3FIhIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<KNYM3FIhSchemasCertificateResponseCollection>> {
            return OriginCAApiFp(configuration).originCaListCertificates(identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Revoke an existing Origin CA certificate by its serial number. Use your Origin CA Key as your User Service Key when calling this endpoint ([see above](#requests)).
         * @summary Revoke Certificate
         * @param {KNYM3FIhIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async originCaRevokeCertificate(identifier: KNYM3FIhIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<KNYM3FIhCertificateResponseSingleId>> {
            return OriginCAApiFp(configuration).originCaRevokeCertificate(identifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OriginCAApi - object-oriented interface
 * @export
 * @class OriginCAApi
 * @extends {BaseAPI}
 */
export class OriginCAApi extends BaseAPI {
    /**
     * Create an Origin CA certificate. Use your Origin CA Key as your User Service Key when calling this endpoint ([see above](#requests)).
     * @summary Create Certificate
     * @param {CertificatesBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OriginCAApi
     */
    public async originCaCreateCertificate(body: CertificatesBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<KNYM3FIhSchemasCertificateResponseSingle>> {
        return OriginCAApiFp(this.configuration).originCaCreateCertificate(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get an existing Origin CA certificate by its serial number. Use your Origin CA Key as your User Service Key when calling this endpoint ([see above](#requests)).
     * @summary Get Certificate
     * @param {KNYM3FIhIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OriginCAApi
     */
    public async originCaGetCertificate(identifier: KNYM3FIhIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<KNYM3FIhSchemasCertificateResponseSingle>> {
        return OriginCAApiFp(this.configuration).originCaGetCertificate(identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List all existing Origin CA certificates for a given zone. Use your Origin CA Key as your User Service Key when calling this endpoint ([see above](#requests)).
     * @summary List Certificates
     * @param {KNYM3FIhIdentifier} [identifier] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OriginCAApi
     */
    public async originCaListCertificates(identifier?: KNYM3FIhIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<KNYM3FIhSchemasCertificateResponseCollection>> {
        return OriginCAApiFp(this.configuration).originCaListCertificates(identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Revoke an existing Origin CA certificate by its serial number. Use your Origin CA Key as your User Service Key when calling this endpoint ([see above](#requests)).
     * @summary Revoke Certificate
     * @param {KNYM3FIhIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OriginCAApi
     */
    public async originCaRevokeCertificate(identifier: KNYM3FIhIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<KNYM3FIhCertificateResponseSingleId>> {
        return OriginCAApiFp(this.configuration).originCaRevokeCertificate(identifier, options).then((request) => request(this.axios, this.basePath));
    }
}
