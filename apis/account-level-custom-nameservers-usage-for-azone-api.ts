/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse4XX58 } from '../models';
import { InlineResponse4XX59 } from '../models';
import { Rc72JKPiGetResponse } from '../models';
import { Rc72JKPiSchemasEmptyResponse } from '../models';
import { Rc72JKPiSchemasIdentifier } from '../models';
import { Rc72JKPiZoneMetadata } from '../models';
/**
 * AccountLevelCustomNameserversUsageForAZoneApi - axios parameter creator
 * @export
 */
export const AccountLevelCustomNameserversUsageForAZoneApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get metadata for account-level custom nameservers on a zone. 
         * @summary Get Account Custom Nameserver Related Zone Metadata
         * @param {Rc72JKPiSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountLevelCustomNameserversUsageForAZoneGetAccountCustomNameserverRelatedZoneMetadata: async (zoneIdentifier: Rc72JKPiSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling accountLevelCustomNameserversUsageForAZoneGetAccountCustomNameserverRelatedZoneMetadata.');
            }
            const localVarPath = `/zones/{zone_identifier}/custom_ns`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Set metadata for account-level custom nameservers on a zone.  If you would like new zones in the account to use account custom nameservers by default, use PUT /accounts/:identifier to set the account setting use_account_custom_ns_by_default to true. 
         * @summary Set Account Custom Nameserver Related Zone Metadata
         * @param {Rc72JKPiZoneMetadata} body 
         * @param {Rc72JKPiSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountLevelCustomNameserversUsageForAZoneSetAccountCustomNameserverRelatedZoneMetadata: async (body: Rc72JKPiZoneMetadata, zoneIdentifier: Rc72JKPiSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling accountLevelCustomNameserversUsageForAZoneSetAccountCustomNameserverRelatedZoneMetadata.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling accountLevelCustomNameserversUsageForAZoneSetAccountCustomNameserverRelatedZoneMetadata.');
            }
            const localVarPath = `/zones/{zone_identifier}/custom_ns`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountLevelCustomNameserversUsageForAZoneApi - functional programming interface
 * @export
 */
export const AccountLevelCustomNameserversUsageForAZoneApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get metadata for account-level custom nameservers on a zone. 
         * @summary Get Account Custom Nameserver Related Zone Metadata
         * @param {Rc72JKPiSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountLevelCustomNameserversUsageForAZoneGetAccountCustomNameserverRelatedZoneMetadata(zoneIdentifier: Rc72JKPiSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Rc72JKPiGetResponse>>> {
            const localVarAxiosArgs = await AccountLevelCustomNameserversUsageForAZoneApiAxiosParamCreator(configuration).accountLevelCustomNameserversUsageForAZoneGetAccountCustomNameserverRelatedZoneMetadata(zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Set metadata for account-level custom nameservers on a zone.  If you would like new zones in the account to use account custom nameservers by default, use PUT /accounts/:identifier to set the account setting use_account_custom_ns_by_default to true. 
         * @summary Set Account Custom Nameserver Related Zone Metadata
         * @param {Rc72JKPiZoneMetadata} body 
         * @param {Rc72JKPiSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountLevelCustomNameserversUsageForAZoneSetAccountCustomNameserverRelatedZoneMetadata(body: Rc72JKPiZoneMetadata, zoneIdentifier: Rc72JKPiSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Rc72JKPiSchemasEmptyResponse>>> {
            const localVarAxiosArgs = await AccountLevelCustomNameserversUsageForAZoneApiAxiosParamCreator(configuration).accountLevelCustomNameserversUsageForAZoneSetAccountCustomNameserverRelatedZoneMetadata(body, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AccountLevelCustomNameserversUsageForAZoneApi - factory interface
 * @export
 */
export const AccountLevelCustomNameserversUsageForAZoneApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Get metadata for account-level custom nameservers on a zone. 
         * @summary Get Account Custom Nameserver Related Zone Metadata
         * @param {Rc72JKPiSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountLevelCustomNameserversUsageForAZoneGetAccountCustomNameserverRelatedZoneMetadata(zoneIdentifier: Rc72JKPiSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Rc72JKPiGetResponse>> {
            return AccountLevelCustomNameserversUsageForAZoneApiFp(configuration).accountLevelCustomNameserversUsageForAZoneGetAccountCustomNameserverRelatedZoneMetadata(zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Set metadata for account-level custom nameservers on a zone.  If you would like new zones in the account to use account custom nameservers by default, use PUT /accounts/:identifier to set the account setting use_account_custom_ns_by_default to true. 
         * @summary Set Account Custom Nameserver Related Zone Metadata
         * @param {Rc72JKPiZoneMetadata} body 
         * @param {Rc72JKPiSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountLevelCustomNameserversUsageForAZoneSetAccountCustomNameserverRelatedZoneMetadata(body: Rc72JKPiZoneMetadata, zoneIdentifier: Rc72JKPiSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Rc72JKPiSchemasEmptyResponse>> {
            return AccountLevelCustomNameserversUsageForAZoneApiFp(configuration).accountLevelCustomNameserversUsageForAZoneSetAccountCustomNameserverRelatedZoneMetadata(body, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountLevelCustomNameserversUsageForAZoneApi - object-oriented interface
 * @export
 * @class AccountLevelCustomNameserversUsageForAZoneApi
 * @extends {BaseAPI}
 */
export class AccountLevelCustomNameserversUsageForAZoneApi extends BaseAPI {
    /**
     * Get metadata for account-level custom nameservers on a zone. 
     * @summary Get Account Custom Nameserver Related Zone Metadata
     * @param {Rc72JKPiSchemasIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountLevelCustomNameserversUsageForAZoneApi
     */
    public async accountLevelCustomNameserversUsageForAZoneGetAccountCustomNameserverRelatedZoneMetadata(zoneIdentifier: Rc72JKPiSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Rc72JKPiGetResponse>> {
        return AccountLevelCustomNameserversUsageForAZoneApiFp(this.configuration).accountLevelCustomNameserversUsageForAZoneGetAccountCustomNameserverRelatedZoneMetadata(zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Set metadata for account-level custom nameservers on a zone.  If you would like new zones in the account to use account custom nameservers by default, use PUT /accounts/:identifier to set the account setting use_account_custom_ns_by_default to true. 
     * @summary Set Account Custom Nameserver Related Zone Metadata
     * @param {Rc72JKPiZoneMetadata} body 
     * @param {Rc72JKPiSchemasIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountLevelCustomNameserversUsageForAZoneApi
     */
    public async accountLevelCustomNameserversUsageForAZoneSetAccountCustomNameserverRelatedZoneMetadata(body: Rc72JKPiZoneMetadata, zoneIdentifier: Rc72JKPiSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Rc72JKPiSchemasEmptyResponse>> {
        return AccountLevelCustomNameserversUsageForAZoneApiFp(this.configuration).accountLevelCustomNameserversUsageForAZoneSetAccountCustomNameserverRelatedZoneMetadata(body, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
}
