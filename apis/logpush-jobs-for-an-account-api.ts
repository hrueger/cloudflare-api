/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { DestinationExistsBody1 } from '../models';
import { InlineResponse20039 } from '../models';
import { InlineResponse4XX183 } from '../models';
import { InlineResponse4XX184 } from '../models';
import { InlineResponse4XX185 } from '../models';
import { InlineResponse4XX186 } from '../models';
import { InlineResponse4XX187 } from '../models';
import { InlineResponse4XX188 } from '../models';
import { InlineResponse4XX189 } from '../models';
import { InlineResponse4XX190 } from '../models';
import { JobsJobIdentifierBody1 } from '../models';
import { K5aj3sh5Dataset } from '../models';
import { K5aj3sh5DestinationExistsResponse } from '../models';
import { K5aj3sh5GetOwnershipResponse } from '../models';
import { K5aj3sh5Id } from '../models';
import { K5aj3sh5Identifier } from '../models';
import { K5aj3sh5LogpushFieldResponseCollection } from '../models';
import { K5aj3sh5LogpushJobResponseCollection } from '../models';
import { K5aj3sh5LogpushJobResponseSingle } from '../models';
import { K5aj3sh5ValidateOwnershipResponse } from '../models';
import { K5aj3sh5ValidateResponse } from '../models';
import { LogpushJobsBody1 } from '../models';
import { LogpushOwnershipBody1 } from '../models';
import { OwnershipValidateBody1 } from '../models';
import { ValidateOriginBody1 } from '../models';
/**
 * LogpushJobsForAnAccountApi - axios parameter creator
 * @export
 */
export const LogpushJobsForAnAccountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deletes a Logpush job.
         * @summary Delete Logpush job
         * @param {K5aj3sh5Id} jobIdentifier 
         * @param {K5aj3sh5Identifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccountsAccountIdentifierLogpushJobsJobIdentifier: async (jobIdentifier: K5aj3sh5Id, accountIdentifier: K5aj3sh5Identifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobIdentifier' is not null or undefined
            if (jobIdentifier === null || jobIdentifier === undefined) {
                throw new RequiredError('jobIdentifier','Required parameter jobIdentifier was null or undefined when calling deleteAccountsAccountIdentifierLogpushJobsJobIdentifier.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling deleteAccountsAccountIdentifierLogpushJobsJobIdentifier.');
            }
            const localVarPath = `/accounts/{account_identifier}/logpush/jobs/{job_identifier}`
                .replace(`{${"job_identifier"}}`, encodeURIComponent(String(jobIdentifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Checks if there is an existing job with a destination.
         * @summary Check destination exists
         * @param {DestinationExistsBody1} body 
         * @param {K5aj3sh5Identifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccountsAccountIdentifierLogpushValidateDestinationExists: async (body: DestinationExistsBody1, accountIdentifier: K5aj3sh5Identifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling deleteAccountsAccountIdentifierLogpushValidateDestinationExists.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling deleteAccountsAccountIdentifierLogpushValidateDestinationExists.');
            }
            const localVarPath = `/accounts/{account_identifier}/logpush/validate/destination/exists`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all fields available for a dataset. The response result is an object with key-value pairs, where keys are field names, and values are descriptions.
         * @summary List fields
         * @param {K5aj3sh5Dataset} dataset 
         * @param {K5aj3sh5Identifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountsAccountIdentifierLogpushDatasetsDatasetFields: async (dataset: K5aj3sh5Dataset, accountIdentifier: K5aj3sh5Identifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataset' is not null or undefined
            if (dataset === null || dataset === undefined) {
                throw new RequiredError('dataset','Required parameter dataset was null or undefined when calling getAccountsAccountIdentifierLogpushDatasetsDatasetFields.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling getAccountsAccountIdentifierLogpushDatasetsDatasetFields.');
            }
            const localVarPath = `/accounts/{account_identifier}/logpush/datasets/{dataset}/fields`
                .replace(`{${"dataset"}}`, encodeURIComponent(String(dataset)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists Logpush jobs for an account for a dataset.
         * @summary List Logpush jobs for a dataset
         * @param {K5aj3sh5Dataset} dataset 
         * @param {K5aj3sh5Identifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountsAccountIdentifierLogpushDatasetsDatasetJobs: async (dataset: K5aj3sh5Dataset, accountIdentifier: K5aj3sh5Identifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataset' is not null or undefined
            if (dataset === null || dataset === undefined) {
                throw new RequiredError('dataset','Required parameter dataset was null or undefined when calling getAccountsAccountIdentifierLogpushDatasetsDatasetJobs.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling getAccountsAccountIdentifierLogpushDatasetsDatasetJobs.');
            }
            const localVarPath = `/accounts/{account_identifier}/logpush/datasets/{dataset}/jobs`
                .replace(`{${"dataset"}}`, encodeURIComponent(String(dataset)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists Logpush jobs for an account.
         * @summary List Logpush jobs
         * @param {K5aj3sh5Identifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountsAccountIdentifierLogpushJobs: async (accountIdentifier: K5aj3sh5Identifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling getAccountsAccountIdentifierLogpushJobs.');
            }
            const localVarPath = `/accounts/{account_identifier}/logpush/jobs`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the details of a Logpush job.
         * @summary Get Logpush job details
         * @param {K5aj3sh5Id} jobIdentifier 
         * @param {K5aj3sh5Identifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountsAccountIdentifierLogpushJobsJobIdentifier: async (jobIdentifier: K5aj3sh5Id, accountIdentifier: K5aj3sh5Identifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobIdentifier' is not null or undefined
            if (jobIdentifier === null || jobIdentifier === undefined) {
                throw new RequiredError('jobIdentifier','Required parameter jobIdentifier was null or undefined when calling getAccountsAccountIdentifierLogpushJobsJobIdentifier.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling getAccountsAccountIdentifierLogpushJobsJobIdentifier.');
            }
            const localVarPath = `/accounts/{account_identifier}/logpush/jobs/{job_identifier}`
                .replace(`{${"job_identifier"}}`, encodeURIComponent(String(jobIdentifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new Logpush job for an account.
         * @summary Create Logpush job
         * @param {LogpushJobsBody1} body 
         * @param {K5aj3sh5Identifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAccountsAccountIdentifierLogpushJobs: async (body: LogpushJobsBody1, accountIdentifier: K5aj3sh5Identifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postAccountsAccountIdentifierLogpushJobs.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling postAccountsAccountIdentifierLogpushJobs.');
            }
            const localVarPath = `/accounts/{account_identifier}/logpush/jobs`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a new ownership challenge sent to your destination.
         * @summary Get ownership challenge
         * @param {LogpushOwnershipBody1} body 
         * @param {K5aj3sh5Identifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAccountsAccountIdentifierLogpushOwnership: async (body: LogpushOwnershipBody1, accountIdentifier: K5aj3sh5Identifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postAccountsAccountIdentifierLogpushOwnership.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling postAccountsAccountIdentifierLogpushOwnership.');
            }
            const localVarPath = `/accounts/{account_identifier}/logpush/ownership`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Validates ownership challenge of the destination.
         * @summary Validate ownership challenge
         * @param {OwnershipValidateBody1} body 
         * @param {K5aj3sh5Identifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAccountsAccountIdentifierLogpushOwnershipValidate: async (body: OwnershipValidateBody1, accountIdentifier: K5aj3sh5Identifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postAccountsAccountIdentifierLogpushOwnershipValidate.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling postAccountsAccountIdentifierLogpushOwnershipValidate.');
            }
            const localVarPath = `/accounts/{account_identifier}/logpush/ownership/validate`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Validates logpull origin with logpull_options.
         * @summary Validate origin
         * @param {ValidateOriginBody1} body 
         * @param {K5aj3sh5Identifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAccountsAccountIdentifierLogpushValidateOrigin: async (body: ValidateOriginBody1, accountIdentifier: K5aj3sh5Identifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postAccountsAccountIdentifierLogpushValidateOrigin.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling postAccountsAccountIdentifierLogpushValidateOrigin.');
            }
            const localVarPath = `/accounts/{account_identifier}/logpush/validate/origin`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a Logpush job.
         * @summary Update Logpush job
         * @param {JobsJobIdentifierBody1} body 
         * @param {K5aj3sh5Id} jobIdentifier 
         * @param {K5aj3sh5Identifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAccountsAccountIdentifierLogpushJobsJobIdentifier: async (body: JobsJobIdentifierBody1, jobIdentifier: K5aj3sh5Id, accountIdentifier: K5aj3sh5Identifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling putAccountsAccountIdentifierLogpushJobsJobIdentifier.');
            }
            // verify required parameter 'jobIdentifier' is not null or undefined
            if (jobIdentifier === null || jobIdentifier === undefined) {
                throw new RequiredError('jobIdentifier','Required parameter jobIdentifier was null or undefined when calling putAccountsAccountIdentifierLogpushJobsJobIdentifier.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling putAccountsAccountIdentifierLogpushJobsJobIdentifier.');
            }
            const localVarPath = `/accounts/{account_identifier}/logpush/jobs/{job_identifier}`
                .replace(`{${"job_identifier"}}`, encodeURIComponent(String(jobIdentifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LogpushJobsForAnAccountApi - functional programming interface
 * @export
 */
export const LogpushJobsForAnAccountApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Deletes a Logpush job.
         * @summary Delete Logpush job
         * @param {K5aj3sh5Id} jobIdentifier 
         * @param {K5aj3sh5Identifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAccountsAccountIdentifierLogpushJobsJobIdentifier(jobIdentifier: K5aj3sh5Id, accountIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20039>>> {
            const localVarAxiosArgs = await LogpushJobsForAnAccountApiAxiosParamCreator(configuration).deleteAccountsAccountIdentifierLogpushJobsJobIdentifier(jobIdentifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Checks if there is an existing job with a destination.
         * @summary Check destination exists
         * @param {DestinationExistsBody1} body 
         * @param {K5aj3sh5Identifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAccountsAccountIdentifierLogpushValidateDestinationExists(body: DestinationExistsBody1, accountIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<K5aj3sh5DestinationExistsResponse>>> {
            const localVarAxiosArgs = await LogpushJobsForAnAccountApiAxiosParamCreator(configuration).deleteAccountsAccountIdentifierLogpushValidateDestinationExists(body, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Lists all fields available for a dataset. The response result is an object with key-value pairs, where keys are field names, and values are descriptions.
         * @summary List fields
         * @param {K5aj3sh5Dataset} dataset 
         * @param {K5aj3sh5Identifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountsAccountIdentifierLogpushDatasetsDatasetFields(dataset: K5aj3sh5Dataset, accountIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<K5aj3sh5LogpushFieldResponseCollection>>> {
            const localVarAxiosArgs = await LogpushJobsForAnAccountApiAxiosParamCreator(configuration).getAccountsAccountIdentifierLogpushDatasetsDatasetFields(dataset, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Lists Logpush jobs for an account for a dataset.
         * @summary List Logpush jobs for a dataset
         * @param {K5aj3sh5Dataset} dataset 
         * @param {K5aj3sh5Identifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountsAccountIdentifierLogpushDatasetsDatasetJobs(dataset: K5aj3sh5Dataset, accountIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<K5aj3sh5LogpushJobResponseCollection>>> {
            const localVarAxiosArgs = await LogpushJobsForAnAccountApiAxiosParamCreator(configuration).getAccountsAccountIdentifierLogpushDatasetsDatasetJobs(dataset, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Lists Logpush jobs for an account.
         * @summary List Logpush jobs
         * @param {K5aj3sh5Identifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountsAccountIdentifierLogpushJobs(accountIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<K5aj3sh5LogpushJobResponseCollection>>> {
            const localVarAxiosArgs = await LogpushJobsForAnAccountApiAxiosParamCreator(configuration).getAccountsAccountIdentifierLogpushJobs(accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets the details of a Logpush job.
         * @summary Get Logpush job details
         * @param {K5aj3sh5Id} jobIdentifier 
         * @param {K5aj3sh5Identifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountsAccountIdentifierLogpushJobsJobIdentifier(jobIdentifier: K5aj3sh5Id, accountIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<K5aj3sh5LogpushJobResponseSingle>>> {
            const localVarAxiosArgs = await LogpushJobsForAnAccountApiAxiosParamCreator(configuration).getAccountsAccountIdentifierLogpushJobsJobIdentifier(jobIdentifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a new Logpush job for an account.
         * @summary Create Logpush job
         * @param {LogpushJobsBody1} body 
         * @param {K5aj3sh5Identifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAccountsAccountIdentifierLogpushJobs(body: LogpushJobsBody1, accountIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<K5aj3sh5LogpushJobResponseSingle>>> {
            const localVarAxiosArgs = await LogpushJobsForAnAccountApiAxiosParamCreator(configuration).postAccountsAccountIdentifierLogpushJobs(body, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets a new ownership challenge sent to your destination.
         * @summary Get ownership challenge
         * @param {LogpushOwnershipBody1} body 
         * @param {K5aj3sh5Identifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAccountsAccountIdentifierLogpushOwnership(body: LogpushOwnershipBody1, accountIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<K5aj3sh5GetOwnershipResponse>>> {
            const localVarAxiosArgs = await LogpushJobsForAnAccountApiAxiosParamCreator(configuration).postAccountsAccountIdentifierLogpushOwnership(body, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Validates ownership challenge of the destination.
         * @summary Validate ownership challenge
         * @param {OwnershipValidateBody1} body 
         * @param {K5aj3sh5Identifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAccountsAccountIdentifierLogpushOwnershipValidate(body: OwnershipValidateBody1, accountIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<K5aj3sh5ValidateOwnershipResponse>>> {
            const localVarAxiosArgs = await LogpushJobsForAnAccountApiAxiosParamCreator(configuration).postAccountsAccountIdentifierLogpushOwnershipValidate(body, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Validates logpull origin with logpull_options.
         * @summary Validate origin
         * @param {ValidateOriginBody1} body 
         * @param {K5aj3sh5Identifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAccountsAccountIdentifierLogpushValidateOrigin(body: ValidateOriginBody1, accountIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<K5aj3sh5ValidateResponse>>> {
            const localVarAxiosArgs = await LogpushJobsForAnAccountApiAxiosParamCreator(configuration).postAccountsAccountIdentifierLogpushValidateOrigin(body, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates a Logpush job.
         * @summary Update Logpush job
         * @param {JobsJobIdentifierBody1} body 
         * @param {K5aj3sh5Id} jobIdentifier 
         * @param {K5aj3sh5Identifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putAccountsAccountIdentifierLogpushJobsJobIdentifier(body: JobsJobIdentifierBody1, jobIdentifier: K5aj3sh5Id, accountIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<K5aj3sh5LogpushJobResponseSingle>>> {
            const localVarAxiosArgs = await LogpushJobsForAnAccountApiAxiosParamCreator(configuration).putAccountsAccountIdentifierLogpushJobsJobIdentifier(body, jobIdentifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * LogpushJobsForAnAccountApi - factory interface
 * @export
 */
export const LogpushJobsForAnAccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Deletes a Logpush job.
         * @summary Delete Logpush job
         * @param {K5aj3sh5Id} jobIdentifier 
         * @param {K5aj3sh5Identifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAccountsAccountIdentifierLogpushJobsJobIdentifier(jobIdentifier: K5aj3sh5Id, accountIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20039>> {
            return LogpushJobsForAnAccountApiFp(configuration).deleteAccountsAccountIdentifierLogpushJobsJobIdentifier(jobIdentifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Checks if there is an existing job with a destination.
         * @summary Check destination exists
         * @param {DestinationExistsBody1} body 
         * @param {K5aj3sh5Identifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAccountsAccountIdentifierLogpushValidateDestinationExists(body: DestinationExistsBody1, accountIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig): Promise<AxiosResponse<K5aj3sh5DestinationExistsResponse>> {
            return LogpushJobsForAnAccountApiFp(configuration).deleteAccountsAccountIdentifierLogpushValidateDestinationExists(body, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists all fields available for a dataset. The response result is an object with key-value pairs, where keys are field names, and values are descriptions.
         * @summary List fields
         * @param {K5aj3sh5Dataset} dataset 
         * @param {K5aj3sh5Identifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountsAccountIdentifierLogpushDatasetsDatasetFields(dataset: K5aj3sh5Dataset, accountIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig): Promise<AxiosResponse<K5aj3sh5LogpushFieldResponseCollection>> {
            return LogpushJobsForAnAccountApiFp(configuration).getAccountsAccountIdentifierLogpushDatasetsDatasetFields(dataset, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists Logpush jobs for an account for a dataset.
         * @summary List Logpush jobs for a dataset
         * @param {K5aj3sh5Dataset} dataset 
         * @param {K5aj3sh5Identifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountsAccountIdentifierLogpushDatasetsDatasetJobs(dataset: K5aj3sh5Dataset, accountIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig): Promise<AxiosResponse<K5aj3sh5LogpushJobResponseCollection>> {
            return LogpushJobsForAnAccountApiFp(configuration).getAccountsAccountIdentifierLogpushDatasetsDatasetJobs(dataset, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists Logpush jobs for an account.
         * @summary List Logpush jobs
         * @param {K5aj3sh5Identifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountsAccountIdentifierLogpushJobs(accountIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig): Promise<AxiosResponse<K5aj3sh5LogpushJobResponseCollection>> {
            return LogpushJobsForAnAccountApiFp(configuration).getAccountsAccountIdentifierLogpushJobs(accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the details of a Logpush job.
         * @summary Get Logpush job details
         * @param {K5aj3sh5Id} jobIdentifier 
         * @param {K5aj3sh5Identifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountsAccountIdentifierLogpushJobsJobIdentifier(jobIdentifier: K5aj3sh5Id, accountIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig): Promise<AxiosResponse<K5aj3sh5LogpushJobResponseSingle>> {
            return LogpushJobsForAnAccountApiFp(configuration).getAccountsAccountIdentifierLogpushJobsJobIdentifier(jobIdentifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new Logpush job for an account.
         * @summary Create Logpush job
         * @param {LogpushJobsBody1} body 
         * @param {K5aj3sh5Identifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAccountsAccountIdentifierLogpushJobs(body: LogpushJobsBody1, accountIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig): Promise<AxiosResponse<K5aj3sh5LogpushJobResponseSingle>> {
            return LogpushJobsForAnAccountApiFp(configuration).postAccountsAccountIdentifierLogpushJobs(body, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a new ownership challenge sent to your destination.
         * @summary Get ownership challenge
         * @param {LogpushOwnershipBody1} body 
         * @param {K5aj3sh5Identifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAccountsAccountIdentifierLogpushOwnership(body: LogpushOwnershipBody1, accountIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig): Promise<AxiosResponse<K5aj3sh5GetOwnershipResponse>> {
            return LogpushJobsForAnAccountApiFp(configuration).postAccountsAccountIdentifierLogpushOwnership(body, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Validates ownership challenge of the destination.
         * @summary Validate ownership challenge
         * @param {OwnershipValidateBody1} body 
         * @param {K5aj3sh5Identifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAccountsAccountIdentifierLogpushOwnershipValidate(body: OwnershipValidateBody1, accountIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig): Promise<AxiosResponse<K5aj3sh5ValidateOwnershipResponse>> {
            return LogpushJobsForAnAccountApiFp(configuration).postAccountsAccountIdentifierLogpushOwnershipValidate(body, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Validates logpull origin with logpull_options.
         * @summary Validate origin
         * @param {ValidateOriginBody1} body 
         * @param {K5aj3sh5Identifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAccountsAccountIdentifierLogpushValidateOrigin(body: ValidateOriginBody1, accountIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig): Promise<AxiosResponse<K5aj3sh5ValidateResponse>> {
            return LogpushJobsForAnAccountApiFp(configuration).postAccountsAccountIdentifierLogpushValidateOrigin(body, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a Logpush job.
         * @summary Update Logpush job
         * @param {JobsJobIdentifierBody1} body 
         * @param {K5aj3sh5Id} jobIdentifier 
         * @param {K5aj3sh5Identifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putAccountsAccountIdentifierLogpushJobsJobIdentifier(body: JobsJobIdentifierBody1, jobIdentifier: K5aj3sh5Id, accountIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig): Promise<AxiosResponse<K5aj3sh5LogpushJobResponseSingle>> {
            return LogpushJobsForAnAccountApiFp(configuration).putAccountsAccountIdentifierLogpushJobsJobIdentifier(body, jobIdentifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LogpushJobsForAnAccountApi - object-oriented interface
 * @export
 * @class LogpushJobsForAnAccountApi
 * @extends {BaseAPI}
 */
export class LogpushJobsForAnAccountApi extends BaseAPI {
    /**
     * Deletes a Logpush job.
     * @summary Delete Logpush job
     * @param {K5aj3sh5Id} jobIdentifier 
     * @param {K5aj3sh5Identifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogpushJobsForAnAccountApi
     */
    public async deleteAccountsAccountIdentifierLogpushJobsJobIdentifier(jobIdentifier: K5aj3sh5Id, accountIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20039>> {
        return LogpushJobsForAnAccountApiFp(this.configuration).deleteAccountsAccountIdentifierLogpushJobsJobIdentifier(jobIdentifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Checks if there is an existing job with a destination.
     * @summary Check destination exists
     * @param {DestinationExistsBody1} body 
     * @param {K5aj3sh5Identifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogpushJobsForAnAccountApi
     */
    public async deleteAccountsAccountIdentifierLogpushValidateDestinationExists(body: DestinationExistsBody1, accountIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<K5aj3sh5DestinationExistsResponse>> {
        return LogpushJobsForAnAccountApiFp(this.configuration).deleteAccountsAccountIdentifierLogpushValidateDestinationExists(body, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists all fields available for a dataset. The response result is an object with key-value pairs, where keys are field names, and values are descriptions.
     * @summary List fields
     * @param {K5aj3sh5Dataset} dataset 
     * @param {K5aj3sh5Identifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogpushJobsForAnAccountApi
     */
    public async getAccountsAccountIdentifierLogpushDatasetsDatasetFields(dataset: K5aj3sh5Dataset, accountIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<K5aj3sh5LogpushFieldResponseCollection>> {
        return LogpushJobsForAnAccountApiFp(this.configuration).getAccountsAccountIdentifierLogpushDatasetsDatasetFields(dataset, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists Logpush jobs for an account for a dataset.
     * @summary List Logpush jobs for a dataset
     * @param {K5aj3sh5Dataset} dataset 
     * @param {K5aj3sh5Identifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogpushJobsForAnAccountApi
     */
    public async getAccountsAccountIdentifierLogpushDatasetsDatasetJobs(dataset: K5aj3sh5Dataset, accountIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<K5aj3sh5LogpushJobResponseCollection>> {
        return LogpushJobsForAnAccountApiFp(this.configuration).getAccountsAccountIdentifierLogpushDatasetsDatasetJobs(dataset, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists Logpush jobs for an account.
     * @summary List Logpush jobs
     * @param {K5aj3sh5Identifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogpushJobsForAnAccountApi
     */
    public async getAccountsAccountIdentifierLogpushJobs(accountIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<K5aj3sh5LogpushJobResponseCollection>> {
        return LogpushJobsForAnAccountApiFp(this.configuration).getAccountsAccountIdentifierLogpushJobs(accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets the details of a Logpush job.
     * @summary Get Logpush job details
     * @param {K5aj3sh5Id} jobIdentifier 
     * @param {K5aj3sh5Identifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogpushJobsForAnAccountApi
     */
    public async getAccountsAccountIdentifierLogpushJobsJobIdentifier(jobIdentifier: K5aj3sh5Id, accountIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<K5aj3sh5LogpushJobResponseSingle>> {
        return LogpushJobsForAnAccountApiFp(this.configuration).getAccountsAccountIdentifierLogpushJobsJobIdentifier(jobIdentifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates a new Logpush job for an account.
     * @summary Create Logpush job
     * @param {LogpushJobsBody1} body 
     * @param {K5aj3sh5Identifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogpushJobsForAnAccountApi
     */
    public async postAccountsAccountIdentifierLogpushJobs(body: LogpushJobsBody1, accountIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<K5aj3sh5LogpushJobResponseSingle>> {
        return LogpushJobsForAnAccountApiFp(this.configuration).postAccountsAccountIdentifierLogpushJobs(body, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets a new ownership challenge sent to your destination.
     * @summary Get ownership challenge
     * @param {LogpushOwnershipBody1} body 
     * @param {K5aj3sh5Identifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogpushJobsForAnAccountApi
     */
    public async postAccountsAccountIdentifierLogpushOwnership(body: LogpushOwnershipBody1, accountIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<K5aj3sh5GetOwnershipResponse>> {
        return LogpushJobsForAnAccountApiFp(this.configuration).postAccountsAccountIdentifierLogpushOwnership(body, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Validates ownership challenge of the destination.
     * @summary Validate ownership challenge
     * @param {OwnershipValidateBody1} body 
     * @param {K5aj3sh5Identifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogpushJobsForAnAccountApi
     */
    public async postAccountsAccountIdentifierLogpushOwnershipValidate(body: OwnershipValidateBody1, accountIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<K5aj3sh5ValidateOwnershipResponse>> {
        return LogpushJobsForAnAccountApiFp(this.configuration).postAccountsAccountIdentifierLogpushOwnershipValidate(body, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Validates logpull origin with logpull_options.
     * @summary Validate origin
     * @param {ValidateOriginBody1} body 
     * @param {K5aj3sh5Identifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogpushJobsForAnAccountApi
     */
    public async postAccountsAccountIdentifierLogpushValidateOrigin(body: ValidateOriginBody1, accountIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<K5aj3sh5ValidateResponse>> {
        return LogpushJobsForAnAccountApiFp(this.configuration).postAccountsAccountIdentifierLogpushValidateOrigin(body, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates a Logpush job.
     * @summary Update Logpush job
     * @param {JobsJobIdentifierBody1} body 
     * @param {K5aj3sh5Id} jobIdentifier 
     * @param {K5aj3sh5Identifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogpushJobsForAnAccountApi
     */
    public async putAccountsAccountIdentifierLogpushJobsJobIdentifier(body: JobsJobIdentifierBody1, jobIdentifier: K5aj3sh5Id, accountIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<K5aj3sh5LogpushJobResponseSingle>> {
        return LogpushJobsForAnAccountApiFp(this.configuration).putAccountsAccountIdentifierLogpushJobsJobIdentifier(body, jobIdentifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
}
