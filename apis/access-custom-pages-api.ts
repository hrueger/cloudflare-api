/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse4XX18 } from '../models';
import { InlineResponse4XX19 } from '../models';
import { Tm1HTKEcComponentsSchemasIdResponse } from '../models';
import { Tm1HTKEcCustomPage } from '../models';
import { Tm1HTKEcCustomPagesComponentsSchemasResponseCollection } from '../models';
import { Tm1HTKEcCustomPagesComponentsSchemasSingleResponse } from '../models';
import { Tm1HTKEcSchemasIdentifier } from '../models';
import { Tm1HTKEcUuid } from '../models';
/**
 * AccessCustomPagesApi - axios parameter creator
 * @export
 */
export const AccessCustomPagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a custom page
         * @summary Create a custom page
         * @param {Tm1HTKEcSchemasIdentifier} identifier 
         * @param {Tm1HTKEcCustomPage} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accessCustomPagesCreateACustomPage: async (identifier: Tm1HTKEcSchemasIdentifier, body?: Tm1HTKEcCustomPage, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling accessCustomPagesCreateACustomPage.');
            }
            const localVarPath = `/accounts/{identifier}/access/custom_pages`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a custom page
         * @summary Delete a custom page
         * @param {Tm1HTKEcUuid} uuid 
         * @param {Tm1HTKEcSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accessCustomPagesDeleteACustomPage: async (uuid: Tm1HTKEcUuid, identifier: Tm1HTKEcSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling accessCustomPagesDeleteACustomPage.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling accessCustomPagesDeleteACustomPage.');
            }
            const localVarPath = `/accounts/{identifier}/access/custom_pages/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)))
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches a custom page and also returns its HTML.
         * @summary Get a custom page
         * @param {Tm1HTKEcUuid} uuid 
         * @param {Tm1HTKEcSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accessCustomPagesGetACustomPage: async (uuid: Tm1HTKEcUuid, identifier: Tm1HTKEcSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling accessCustomPagesGetACustomPage.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling accessCustomPagesGetACustomPage.');
            }
            const localVarPath = `/accounts/{identifier}/access/custom_pages/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)))
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List custom pages
         * @summary List custom pages
         * @param {Tm1HTKEcSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accessCustomPagesListCustomPages: async (identifier: Tm1HTKEcSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling accessCustomPagesListCustomPages.');
            }
            const localVarPath = `/accounts/{identifier}/access/custom_pages`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a custom page
         * @summary Update a custom page
         * @param {Tm1HTKEcUuid} uuid 
         * @param {Tm1HTKEcSchemasIdentifier} identifier 
         * @param {Tm1HTKEcCustomPage} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accessCustomPagesUpdateACustomPage: async (uuid: Tm1HTKEcUuid, identifier: Tm1HTKEcSchemasIdentifier, body?: Tm1HTKEcCustomPage, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling accessCustomPagesUpdateACustomPage.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling accessCustomPagesUpdateACustomPage.');
            }
            const localVarPath = `/accounts/{identifier}/access/custom_pages/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)))
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccessCustomPagesApi - functional programming interface
 * @export
 */
export const AccessCustomPagesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create a custom page
         * @summary Create a custom page
         * @param {Tm1HTKEcSchemasIdentifier} identifier 
         * @param {Tm1HTKEcCustomPage} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accessCustomPagesCreateACustomPage(identifier: Tm1HTKEcSchemasIdentifier, body?: Tm1HTKEcCustomPage, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Tm1HTKEcCustomPagesComponentsSchemasSingleResponse>>> {
            const localVarAxiosArgs = await AccessCustomPagesApiAxiosParamCreator(configuration).accessCustomPagesCreateACustomPage(identifier, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a custom page
         * @summary Delete a custom page
         * @param {Tm1HTKEcUuid} uuid 
         * @param {Tm1HTKEcSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accessCustomPagesDeleteACustomPage(uuid: Tm1HTKEcUuid, identifier: Tm1HTKEcSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Tm1HTKEcComponentsSchemasIdResponse>>> {
            const localVarAxiosArgs = await AccessCustomPagesApiAxiosParamCreator(configuration).accessCustomPagesDeleteACustomPage(uuid, identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetches a custom page and also returns its HTML.
         * @summary Get a custom page
         * @param {Tm1HTKEcUuid} uuid 
         * @param {Tm1HTKEcSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accessCustomPagesGetACustomPage(uuid: Tm1HTKEcUuid, identifier: Tm1HTKEcSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Tm1HTKEcCustomPagesComponentsSchemasSingleResponse>>> {
            const localVarAxiosArgs = await AccessCustomPagesApiAxiosParamCreator(configuration).accessCustomPagesGetACustomPage(uuid, identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List custom pages
         * @summary List custom pages
         * @param {Tm1HTKEcSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accessCustomPagesListCustomPages(identifier: Tm1HTKEcSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Tm1HTKEcCustomPagesComponentsSchemasResponseCollection>>> {
            const localVarAxiosArgs = await AccessCustomPagesApiAxiosParamCreator(configuration).accessCustomPagesListCustomPages(identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a custom page
         * @summary Update a custom page
         * @param {Tm1HTKEcUuid} uuid 
         * @param {Tm1HTKEcSchemasIdentifier} identifier 
         * @param {Tm1HTKEcCustomPage} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accessCustomPagesUpdateACustomPage(uuid: Tm1HTKEcUuid, identifier: Tm1HTKEcSchemasIdentifier, body?: Tm1HTKEcCustomPage, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Tm1HTKEcCustomPagesComponentsSchemasSingleResponse>>> {
            const localVarAxiosArgs = await AccessCustomPagesApiAxiosParamCreator(configuration).accessCustomPagesUpdateACustomPage(uuid, identifier, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AccessCustomPagesApi - factory interface
 * @export
 */
export const AccessCustomPagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create a custom page
         * @summary Create a custom page
         * @param {Tm1HTKEcSchemasIdentifier} identifier 
         * @param {Tm1HTKEcCustomPage} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accessCustomPagesCreateACustomPage(identifier: Tm1HTKEcSchemasIdentifier, body?: Tm1HTKEcCustomPage, options?: AxiosRequestConfig): Promise<AxiosResponse<Tm1HTKEcCustomPagesComponentsSchemasSingleResponse>> {
            return AccessCustomPagesApiFp(configuration).accessCustomPagesCreateACustomPage(identifier, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a custom page
         * @summary Delete a custom page
         * @param {Tm1HTKEcUuid} uuid 
         * @param {Tm1HTKEcSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accessCustomPagesDeleteACustomPage(uuid: Tm1HTKEcUuid, identifier: Tm1HTKEcSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Tm1HTKEcComponentsSchemasIdResponse>> {
            return AccessCustomPagesApiFp(configuration).accessCustomPagesDeleteACustomPage(uuid, identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches a custom page and also returns its HTML.
         * @summary Get a custom page
         * @param {Tm1HTKEcUuid} uuid 
         * @param {Tm1HTKEcSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accessCustomPagesGetACustomPage(uuid: Tm1HTKEcUuid, identifier: Tm1HTKEcSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Tm1HTKEcCustomPagesComponentsSchemasSingleResponse>> {
            return AccessCustomPagesApiFp(configuration).accessCustomPagesGetACustomPage(uuid, identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * List custom pages
         * @summary List custom pages
         * @param {Tm1HTKEcSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accessCustomPagesListCustomPages(identifier: Tm1HTKEcSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Tm1HTKEcCustomPagesComponentsSchemasResponseCollection>> {
            return AccessCustomPagesApiFp(configuration).accessCustomPagesListCustomPages(identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a custom page
         * @summary Update a custom page
         * @param {Tm1HTKEcUuid} uuid 
         * @param {Tm1HTKEcSchemasIdentifier} identifier 
         * @param {Tm1HTKEcCustomPage} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accessCustomPagesUpdateACustomPage(uuid: Tm1HTKEcUuid, identifier: Tm1HTKEcSchemasIdentifier, body?: Tm1HTKEcCustomPage, options?: AxiosRequestConfig): Promise<AxiosResponse<Tm1HTKEcCustomPagesComponentsSchemasSingleResponse>> {
            return AccessCustomPagesApiFp(configuration).accessCustomPagesUpdateACustomPage(uuid, identifier, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccessCustomPagesApi - object-oriented interface
 * @export
 * @class AccessCustomPagesApi
 * @extends {BaseAPI}
 */
export class AccessCustomPagesApi extends BaseAPI {
    /**
     * Create a custom page
     * @summary Create a custom page
     * @param {Tm1HTKEcSchemasIdentifier} identifier 
     * @param {Tm1HTKEcCustomPage} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessCustomPagesApi
     */
    public async accessCustomPagesCreateACustomPage(identifier: Tm1HTKEcSchemasIdentifier, body?: Tm1HTKEcCustomPage, options?: AxiosRequestConfig) : Promise<AxiosResponse<Tm1HTKEcCustomPagesComponentsSchemasSingleResponse>> {
        return AccessCustomPagesApiFp(this.configuration).accessCustomPagesCreateACustomPage(identifier, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a custom page
     * @summary Delete a custom page
     * @param {Tm1HTKEcUuid} uuid 
     * @param {Tm1HTKEcSchemasIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessCustomPagesApi
     */
    public async accessCustomPagesDeleteACustomPage(uuid: Tm1HTKEcUuid, identifier: Tm1HTKEcSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Tm1HTKEcComponentsSchemasIdResponse>> {
        return AccessCustomPagesApiFp(this.configuration).accessCustomPagesDeleteACustomPage(uuid, identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches a custom page and also returns its HTML.
     * @summary Get a custom page
     * @param {Tm1HTKEcUuid} uuid 
     * @param {Tm1HTKEcSchemasIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessCustomPagesApi
     */
    public async accessCustomPagesGetACustomPage(uuid: Tm1HTKEcUuid, identifier: Tm1HTKEcSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Tm1HTKEcCustomPagesComponentsSchemasSingleResponse>> {
        return AccessCustomPagesApiFp(this.configuration).accessCustomPagesGetACustomPage(uuid, identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List custom pages
     * @summary List custom pages
     * @param {Tm1HTKEcSchemasIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessCustomPagesApi
     */
    public async accessCustomPagesListCustomPages(identifier: Tm1HTKEcSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Tm1HTKEcCustomPagesComponentsSchemasResponseCollection>> {
        return AccessCustomPagesApiFp(this.configuration).accessCustomPagesListCustomPages(identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update a custom page
     * @summary Update a custom page
     * @param {Tm1HTKEcUuid} uuid 
     * @param {Tm1HTKEcSchemasIdentifier} identifier 
     * @param {Tm1HTKEcCustomPage} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessCustomPagesApi
     */
    public async accessCustomPagesUpdateACustomPage(uuid: Tm1HTKEcUuid, identifier: Tm1HTKEcSchemasIdentifier, body?: Tm1HTKEcCustomPage, options?: AxiosRequestConfig) : Promise<AxiosResponse<Tm1HTKEcCustomPagesComponentsSchemasSingleResponse>> {
        return AccessCustomPagesApiFp(this.configuration).accessCustomPagesUpdateACustomPage(uuid, identifier, body, options).then((request) => request(this.axios, this.basePath));
    }
}
