/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { IdentifierLoadBalancersBody } from '../models';
import { InlineResponse4XX178 } from '../models';
import { InlineResponse4XX179 } from '../models';
import { InlineResponse4XX180 } from '../models';
import { LoadBalancersIdentifierBody } from '../models';
import { LoadBalancersIdentifierBody1 } from '../models';
import { VXFDQCwXComponentsSchemasIdResponse } from '../models';
import { VXFDQCwXLoadBalancerComponentsSchemasIdentifier } from '../models';
import { VXFDQCwXLoadBalancerComponentsSchemasResponseCollection } from '../models';
import { VXFDQCwXLoadBalancerComponentsSchemasSingleResponse } from '../models';
/**
 * LoadBalancersApi - axios parameter creator
 * @export
 */
export const LoadBalancersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new load balancer.
         * @summary Create Load Balancer
         * @param {IdentifierLoadBalancersBody} body 
         * @param {VXFDQCwXLoadBalancerComponentsSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadBalancersCreateLoadBalancer: async (body: IdentifierLoadBalancersBody, identifier: VXFDQCwXLoadBalancerComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling loadBalancersCreateLoadBalancer.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling loadBalancersCreateLoadBalancer.');
            }
            const localVarPath = `/zones/{identifier}/load_balancers`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a configured load balancer.
         * @summary Delete Load Balancer
         * @param {VXFDQCwXLoadBalancerComponentsSchemasIdentifier} identifier 
         * @param {VXFDQCwXLoadBalancerComponentsSchemasIdentifier} identifier1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadBalancersDeleteLoadBalancer: async (identifier: VXFDQCwXLoadBalancerComponentsSchemasIdentifier, identifier1: VXFDQCwXLoadBalancerComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling loadBalancersDeleteLoadBalancer.');
            }
            // verify required parameter 'identifier1' is not null or undefined
            if (identifier1 === null || identifier1 === undefined) {
                throw new RequiredError('identifier1','Required parameter identifier1 was null or undefined when calling loadBalancersDeleteLoadBalancer.');
            }
            const localVarPath = `/zones/{identifier1}/load_balancers/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"identifier1"}}`, encodeURIComponent(String(identifier1)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List configured load balancers.
         * @summary List Load Balancers
         * @param {VXFDQCwXLoadBalancerComponentsSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadBalancersListLoadBalancers: async (identifier: VXFDQCwXLoadBalancerComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling loadBalancersListLoadBalancers.');
            }
            const localVarPath = `/zones/{identifier}/load_balancers`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch a single configured load balancer.
         * @summary Load Balancer Details
         * @param {VXFDQCwXLoadBalancerComponentsSchemasIdentifier} identifier 
         * @param {VXFDQCwXLoadBalancerComponentsSchemasIdentifier} identifier1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadBalancersLoadBalancerDetails: async (identifier: VXFDQCwXLoadBalancerComponentsSchemasIdentifier, identifier1: VXFDQCwXLoadBalancerComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling loadBalancersLoadBalancerDetails.');
            }
            // verify required parameter 'identifier1' is not null or undefined
            if (identifier1 === null || identifier1 === undefined) {
                throw new RequiredError('identifier1','Required parameter identifier1 was null or undefined when calling loadBalancersLoadBalancerDetails.');
            }
            const localVarPath = `/zones/{identifier1}/load_balancers/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"identifier1"}}`, encodeURIComponent(String(identifier1)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Apply changes to an existing load balancer, overwriting the supplied properties.
         * @summary Patch Load Balancer
         * @param {LoadBalancersIdentifierBody1} body 
         * @param {VXFDQCwXLoadBalancerComponentsSchemasIdentifier} identifier 
         * @param {VXFDQCwXLoadBalancerComponentsSchemasIdentifier} identifier1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadBalancersPatchLoadBalancer: async (body: LoadBalancersIdentifierBody1, identifier: VXFDQCwXLoadBalancerComponentsSchemasIdentifier, identifier1: VXFDQCwXLoadBalancerComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling loadBalancersPatchLoadBalancer.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling loadBalancersPatchLoadBalancer.');
            }
            // verify required parameter 'identifier1' is not null or undefined
            if (identifier1 === null || identifier1 === undefined) {
                throw new RequiredError('identifier1','Required parameter identifier1 was null or undefined when calling loadBalancersPatchLoadBalancer.');
            }
            const localVarPath = `/zones/{identifier1}/load_balancers/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"identifier1"}}`, encodeURIComponent(String(identifier1)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a configured load balancer.
         * @summary Update Load Balancer
         * @param {LoadBalancersIdentifierBody} body 
         * @param {VXFDQCwXLoadBalancerComponentsSchemasIdentifier} identifier 
         * @param {VXFDQCwXLoadBalancerComponentsSchemasIdentifier} identifier1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadBalancersUpdateLoadBalancer: async (body: LoadBalancersIdentifierBody, identifier: VXFDQCwXLoadBalancerComponentsSchemasIdentifier, identifier1: VXFDQCwXLoadBalancerComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling loadBalancersUpdateLoadBalancer.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling loadBalancersUpdateLoadBalancer.');
            }
            // verify required parameter 'identifier1' is not null or undefined
            if (identifier1 === null || identifier1 === undefined) {
                throw new RequiredError('identifier1','Required parameter identifier1 was null or undefined when calling loadBalancersUpdateLoadBalancer.');
            }
            const localVarPath = `/zones/{identifier1}/load_balancers/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"identifier1"}}`, encodeURIComponent(String(identifier1)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LoadBalancersApi - functional programming interface
 * @export
 */
export const LoadBalancersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create a new load balancer.
         * @summary Create Load Balancer
         * @param {IdentifierLoadBalancersBody} body 
         * @param {VXFDQCwXLoadBalancerComponentsSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loadBalancersCreateLoadBalancer(body: IdentifierLoadBalancersBody, identifier: VXFDQCwXLoadBalancerComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<VXFDQCwXLoadBalancerComponentsSchemasSingleResponse>>> {
            const localVarAxiosArgs = await LoadBalancersApiAxiosParamCreator(configuration).loadBalancersCreateLoadBalancer(body, identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a configured load balancer.
         * @summary Delete Load Balancer
         * @param {VXFDQCwXLoadBalancerComponentsSchemasIdentifier} identifier 
         * @param {VXFDQCwXLoadBalancerComponentsSchemasIdentifier} identifier1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loadBalancersDeleteLoadBalancer(identifier: VXFDQCwXLoadBalancerComponentsSchemasIdentifier, identifier1: VXFDQCwXLoadBalancerComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<VXFDQCwXComponentsSchemasIdResponse>>> {
            const localVarAxiosArgs = await LoadBalancersApiAxiosParamCreator(configuration).loadBalancersDeleteLoadBalancer(identifier, identifier1, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List configured load balancers.
         * @summary List Load Balancers
         * @param {VXFDQCwXLoadBalancerComponentsSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loadBalancersListLoadBalancers(identifier: VXFDQCwXLoadBalancerComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<VXFDQCwXLoadBalancerComponentsSchemasResponseCollection>>> {
            const localVarAxiosArgs = await LoadBalancersApiAxiosParamCreator(configuration).loadBalancersListLoadBalancers(identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetch a single configured load balancer.
         * @summary Load Balancer Details
         * @param {VXFDQCwXLoadBalancerComponentsSchemasIdentifier} identifier 
         * @param {VXFDQCwXLoadBalancerComponentsSchemasIdentifier} identifier1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loadBalancersLoadBalancerDetails(identifier: VXFDQCwXLoadBalancerComponentsSchemasIdentifier, identifier1: VXFDQCwXLoadBalancerComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<VXFDQCwXLoadBalancerComponentsSchemasSingleResponse>>> {
            const localVarAxiosArgs = await LoadBalancersApiAxiosParamCreator(configuration).loadBalancersLoadBalancerDetails(identifier, identifier1, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Apply changes to an existing load balancer, overwriting the supplied properties.
         * @summary Patch Load Balancer
         * @param {LoadBalancersIdentifierBody1} body 
         * @param {VXFDQCwXLoadBalancerComponentsSchemasIdentifier} identifier 
         * @param {VXFDQCwXLoadBalancerComponentsSchemasIdentifier} identifier1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loadBalancersPatchLoadBalancer(body: LoadBalancersIdentifierBody1, identifier: VXFDQCwXLoadBalancerComponentsSchemasIdentifier, identifier1: VXFDQCwXLoadBalancerComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<VXFDQCwXLoadBalancerComponentsSchemasSingleResponse>>> {
            const localVarAxiosArgs = await LoadBalancersApiAxiosParamCreator(configuration).loadBalancersPatchLoadBalancer(body, identifier, identifier1, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a configured load balancer.
         * @summary Update Load Balancer
         * @param {LoadBalancersIdentifierBody} body 
         * @param {VXFDQCwXLoadBalancerComponentsSchemasIdentifier} identifier 
         * @param {VXFDQCwXLoadBalancerComponentsSchemasIdentifier} identifier1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loadBalancersUpdateLoadBalancer(body: LoadBalancersIdentifierBody, identifier: VXFDQCwXLoadBalancerComponentsSchemasIdentifier, identifier1: VXFDQCwXLoadBalancerComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<VXFDQCwXLoadBalancerComponentsSchemasSingleResponse>>> {
            const localVarAxiosArgs = await LoadBalancersApiAxiosParamCreator(configuration).loadBalancersUpdateLoadBalancer(body, identifier, identifier1, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * LoadBalancersApi - factory interface
 * @export
 */
export const LoadBalancersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create a new load balancer.
         * @summary Create Load Balancer
         * @param {IdentifierLoadBalancersBody} body 
         * @param {VXFDQCwXLoadBalancerComponentsSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loadBalancersCreateLoadBalancer(body: IdentifierLoadBalancersBody, identifier: VXFDQCwXLoadBalancerComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<VXFDQCwXLoadBalancerComponentsSchemasSingleResponse>> {
            return LoadBalancersApiFp(configuration).loadBalancersCreateLoadBalancer(body, identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a configured load balancer.
         * @summary Delete Load Balancer
         * @param {VXFDQCwXLoadBalancerComponentsSchemasIdentifier} identifier 
         * @param {VXFDQCwXLoadBalancerComponentsSchemasIdentifier} identifier1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loadBalancersDeleteLoadBalancer(identifier: VXFDQCwXLoadBalancerComponentsSchemasIdentifier, identifier1: VXFDQCwXLoadBalancerComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<VXFDQCwXComponentsSchemasIdResponse>> {
            return LoadBalancersApiFp(configuration).loadBalancersDeleteLoadBalancer(identifier, identifier1, options).then((request) => request(axios, basePath));
        },
        /**
         * List configured load balancers.
         * @summary List Load Balancers
         * @param {VXFDQCwXLoadBalancerComponentsSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loadBalancersListLoadBalancers(identifier: VXFDQCwXLoadBalancerComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<VXFDQCwXLoadBalancerComponentsSchemasResponseCollection>> {
            return LoadBalancersApiFp(configuration).loadBalancersListLoadBalancers(identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a single configured load balancer.
         * @summary Load Balancer Details
         * @param {VXFDQCwXLoadBalancerComponentsSchemasIdentifier} identifier 
         * @param {VXFDQCwXLoadBalancerComponentsSchemasIdentifier} identifier1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loadBalancersLoadBalancerDetails(identifier: VXFDQCwXLoadBalancerComponentsSchemasIdentifier, identifier1: VXFDQCwXLoadBalancerComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<VXFDQCwXLoadBalancerComponentsSchemasSingleResponse>> {
            return LoadBalancersApiFp(configuration).loadBalancersLoadBalancerDetails(identifier, identifier1, options).then((request) => request(axios, basePath));
        },
        /**
         * Apply changes to an existing load balancer, overwriting the supplied properties.
         * @summary Patch Load Balancer
         * @param {LoadBalancersIdentifierBody1} body 
         * @param {VXFDQCwXLoadBalancerComponentsSchemasIdentifier} identifier 
         * @param {VXFDQCwXLoadBalancerComponentsSchemasIdentifier} identifier1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loadBalancersPatchLoadBalancer(body: LoadBalancersIdentifierBody1, identifier: VXFDQCwXLoadBalancerComponentsSchemasIdentifier, identifier1: VXFDQCwXLoadBalancerComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<VXFDQCwXLoadBalancerComponentsSchemasSingleResponse>> {
            return LoadBalancersApiFp(configuration).loadBalancersPatchLoadBalancer(body, identifier, identifier1, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a configured load balancer.
         * @summary Update Load Balancer
         * @param {LoadBalancersIdentifierBody} body 
         * @param {VXFDQCwXLoadBalancerComponentsSchemasIdentifier} identifier 
         * @param {VXFDQCwXLoadBalancerComponentsSchemasIdentifier} identifier1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loadBalancersUpdateLoadBalancer(body: LoadBalancersIdentifierBody, identifier: VXFDQCwXLoadBalancerComponentsSchemasIdentifier, identifier1: VXFDQCwXLoadBalancerComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<VXFDQCwXLoadBalancerComponentsSchemasSingleResponse>> {
            return LoadBalancersApiFp(configuration).loadBalancersUpdateLoadBalancer(body, identifier, identifier1, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LoadBalancersApi - object-oriented interface
 * @export
 * @class LoadBalancersApi
 * @extends {BaseAPI}
 */
export class LoadBalancersApi extends BaseAPI {
    /**
     * Create a new load balancer.
     * @summary Create Load Balancer
     * @param {IdentifierLoadBalancersBody} body 
     * @param {VXFDQCwXLoadBalancerComponentsSchemasIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoadBalancersApi
     */
    public async loadBalancersCreateLoadBalancer(body: IdentifierLoadBalancersBody, identifier: VXFDQCwXLoadBalancerComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<VXFDQCwXLoadBalancerComponentsSchemasSingleResponse>> {
        return LoadBalancersApiFp(this.configuration).loadBalancersCreateLoadBalancer(body, identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a configured load balancer.
     * @summary Delete Load Balancer
     * @param {VXFDQCwXLoadBalancerComponentsSchemasIdentifier} identifier 
     * @param {VXFDQCwXLoadBalancerComponentsSchemasIdentifier} identifier1 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoadBalancersApi
     */
    public async loadBalancersDeleteLoadBalancer(identifier: VXFDQCwXLoadBalancerComponentsSchemasIdentifier, identifier1: VXFDQCwXLoadBalancerComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<VXFDQCwXComponentsSchemasIdResponse>> {
        return LoadBalancersApiFp(this.configuration).loadBalancersDeleteLoadBalancer(identifier, identifier1, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List configured load balancers.
     * @summary List Load Balancers
     * @param {VXFDQCwXLoadBalancerComponentsSchemasIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoadBalancersApi
     */
    public async loadBalancersListLoadBalancers(identifier: VXFDQCwXLoadBalancerComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<VXFDQCwXLoadBalancerComponentsSchemasResponseCollection>> {
        return LoadBalancersApiFp(this.configuration).loadBalancersListLoadBalancers(identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch a single configured load balancer.
     * @summary Load Balancer Details
     * @param {VXFDQCwXLoadBalancerComponentsSchemasIdentifier} identifier 
     * @param {VXFDQCwXLoadBalancerComponentsSchemasIdentifier} identifier1 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoadBalancersApi
     */
    public async loadBalancersLoadBalancerDetails(identifier: VXFDQCwXLoadBalancerComponentsSchemasIdentifier, identifier1: VXFDQCwXLoadBalancerComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<VXFDQCwXLoadBalancerComponentsSchemasSingleResponse>> {
        return LoadBalancersApiFp(this.configuration).loadBalancersLoadBalancerDetails(identifier, identifier1, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Apply changes to an existing load balancer, overwriting the supplied properties.
     * @summary Patch Load Balancer
     * @param {LoadBalancersIdentifierBody1} body 
     * @param {VXFDQCwXLoadBalancerComponentsSchemasIdentifier} identifier 
     * @param {VXFDQCwXLoadBalancerComponentsSchemasIdentifier} identifier1 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoadBalancersApi
     */
    public async loadBalancersPatchLoadBalancer(body: LoadBalancersIdentifierBody1, identifier: VXFDQCwXLoadBalancerComponentsSchemasIdentifier, identifier1: VXFDQCwXLoadBalancerComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<VXFDQCwXLoadBalancerComponentsSchemasSingleResponse>> {
        return LoadBalancersApiFp(this.configuration).loadBalancersPatchLoadBalancer(body, identifier, identifier1, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update a configured load balancer.
     * @summary Update Load Balancer
     * @param {LoadBalancersIdentifierBody} body 
     * @param {VXFDQCwXLoadBalancerComponentsSchemasIdentifier} identifier 
     * @param {VXFDQCwXLoadBalancerComponentsSchemasIdentifier} identifier1 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoadBalancersApi
     */
    public async loadBalancersUpdateLoadBalancer(body: LoadBalancersIdentifierBody, identifier: VXFDQCwXLoadBalancerComponentsSchemasIdentifier, identifier1: VXFDQCwXLoadBalancerComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<VXFDQCwXLoadBalancerComponentsSchemasSingleResponse>> {
        return LoadBalancersApiFp(this.configuration).loadBalancersUpdateLoadBalancer(body, identifier, identifier1, options).then((request) => request(this.axios, this.basePath));
    }
}
