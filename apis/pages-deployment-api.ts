/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse4XX246 } from '../models';
import { InlineResponse4XX247 } from '../models';
import { InlineResponse4XX248 } from '../models';
import { InlineResponse4XX249 } from '../models';
import { InlineResponse4XX250 } from '../models';
import { WAy69x7MDeploymentListResponse } from '../models';
import { WAy69x7MDeploymentNewDeployment } from '../models';
import { WAy69x7MDeploymentResponseDetails } from '../models';
import { WAy69x7MDeploymentResponseLogs } from '../models';
import { WAy69x7MIdentifier } from '../models';
import { WAy69x7MProjectName } from '../models';
/**
 * PagesDeploymentApi - axios parameter creator
 * @export
 */
export const PagesDeploymentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Start a new deployment from production. The repository and account must have already been authorized on the Cloudflare Pages dashboard.
         * @summary Create deployment
         * @param {string} branch 
         * @param {WAy69x7MProjectName} projectName 
         * @param {WAy69x7MIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pagesDeploymentCreateDeploymentForm: async (branch: string, projectName: WAy69x7MProjectName, accountIdentifier: WAy69x7MIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'branch' is not null or undefined
            if (branch === null || branch === undefined) {
                throw new RequiredError('branch','Required parameter branch was null or undefined when calling pagesDeploymentCreateDeploymentForm.');
            }
            // verify required parameter 'projectName' is not null or undefined
            if (projectName === null || projectName === undefined) {
                throw new RequiredError('projectName','Required parameter projectName was null or undefined when calling pagesDeploymentCreateDeploymentForm.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling pagesDeploymentCreateDeploymentForm.');
            }
            const localVarPath = `/accounts/{account_identifier}/pages/projects/{project_name}/deployments`
                .replace(`{${"project_name"}}`, encodeURIComponent(String(projectName)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }


            if (branch !== undefined) { 
                localVarFormParams.append('branch', branch as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a deployment.
         * @summary Delete deployment
         * @param {WAy69x7MIdentifier} deploymentIdentifier 
         * @param {WAy69x7MProjectName} projectName 
         * @param {WAy69x7MIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pagesDeploymentDeleteDeployment: async (deploymentIdentifier: WAy69x7MIdentifier, projectName: WAy69x7MProjectName, accountIdentifier: WAy69x7MIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deploymentIdentifier' is not null or undefined
            if (deploymentIdentifier === null || deploymentIdentifier === undefined) {
                throw new RequiredError('deploymentIdentifier','Required parameter deploymentIdentifier was null or undefined when calling pagesDeploymentDeleteDeployment.');
            }
            // verify required parameter 'projectName' is not null or undefined
            if (projectName === null || projectName === undefined) {
                throw new RequiredError('projectName','Required parameter projectName was null or undefined when calling pagesDeploymentDeleteDeployment.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling pagesDeploymentDeleteDeployment.');
            }
            const localVarPath = `/accounts/{account_identifier}/pages/projects/{project_name}/deployments/{deployment_identifier}`
                .replace(`{${"deployment_identifier"}}`, encodeURIComponent(String(deploymentIdentifier)))
                .replace(`{${"project_name"}}`, encodeURIComponent(String(projectName)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch information about a deployment.
         * @summary Get deployment info
         * @param {WAy69x7MIdentifier} deploymentIdentifier 
         * @param {WAy69x7MProjectName} projectName 
         * @param {WAy69x7MIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pagesDeploymentGetDeploymentInfo: async (deploymentIdentifier: WAy69x7MIdentifier, projectName: WAy69x7MProjectName, accountIdentifier: WAy69x7MIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deploymentIdentifier' is not null or undefined
            if (deploymentIdentifier === null || deploymentIdentifier === undefined) {
                throw new RequiredError('deploymentIdentifier','Required parameter deploymentIdentifier was null or undefined when calling pagesDeploymentGetDeploymentInfo.');
            }
            // verify required parameter 'projectName' is not null or undefined
            if (projectName === null || projectName === undefined) {
                throw new RequiredError('projectName','Required parameter projectName was null or undefined when calling pagesDeploymentGetDeploymentInfo.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling pagesDeploymentGetDeploymentInfo.');
            }
            const localVarPath = `/accounts/{account_identifier}/pages/projects/{project_name}/deployments/{deployment_identifier}`
                .replace(`{${"deployment_identifier"}}`, encodeURIComponent(String(deploymentIdentifier)))
                .replace(`{${"project_name"}}`, encodeURIComponent(String(projectName)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch deployment logs for a project.
         * @summary Get deployment logs
         * @param {WAy69x7MIdentifier} deploymentIdentifier 
         * @param {WAy69x7MProjectName} projectName 
         * @param {WAy69x7MIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pagesDeploymentGetDeploymentLogs: async (deploymentIdentifier: WAy69x7MIdentifier, projectName: WAy69x7MProjectName, accountIdentifier: WAy69x7MIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deploymentIdentifier' is not null or undefined
            if (deploymentIdentifier === null || deploymentIdentifier === undefined) {
                throw new RequiredError('deploymentIdentifier','Required parameter deploymentIdentifier was null or undefined when calling pagesDeploymentGetDeploymentLogs.');
            }
            // verify required parameter 'projectName' is not null or undefined
            if (projectName === null || projectName === undefined) {
                throw new RequiredError('projectName','Required parameter projectName was null or undefined when calling pagesDeploymentGetDeploymentLogs.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling pagesDeploymentGetDeploymentLogs.');
            }
            const localVarPath = `/accounts/{account_identifier}/pages/projects/{project_name}/deployments/{deployment_identifier}/history/logs`
                .replace(`{${"deployment_identifier"}}`, encodeURIComponent(String(deploymentIdentifier)))
                .replace(`{${"project_name"}}`, encodeURIComponent(String(projectName)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch a list of project deployments.
         * @summary Get deployments
         * @param {WAy69x7MProjectName} projectName 
         * @param {WAy69x7MIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pagesDeploymentGetDeployments: async (projectName: WAy69x7MProjectName, accountIdentifier: WAy69x7MIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectName' is not null or undefined
            if (projectName === null || projectName === undefined) {
                throw new RequiredError('projectName','Required parameter projectName was null or undefined when calling pagesDeploymentGetDeployments.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling pagesDeploymentGetDeployments.');
            }
            const localVarPath = `/accounts/{account_identifier}/pages/projects/{project_name}/deployments`
                .replace(`{${"project_name"}}`, encodeURIComponent(String(projectName)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retry a previous deployment.
         * @summary Retry deployment
         * @param {WAy69x7MIdentifier} deploymentIdentifier 
         * @param {WAy69x7MProjectName} projectName 
         * @param {WAy69x7MIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pagesDeploymentRetryDeployment: async (deploymentIdentifier: WAy69x7MIdentifier, projectName: WAy69x7MProjectName, accountIdentifier: WAy69x7MIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deploymentIdentifier' is not null or undefined
            if (deploymentIdentifier === null || deploymentIdentifier === undefined) {
                throw new RequiredError('deploymentIdentifier','Required parameter deploymentIdentifier was null or undefined when calling pagesDeploymentRetryDeployment.');
            }
            // verify required parameter 'projectName' is not null or undefined
            if (projectName === null || projectName === undefined) {
                throw new RequiredError('projectName','Required parameter projectName was null or undefined when calling pagesDeploymentRetryDeployment.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling pagesDeploymentRetryDeployment.');
            }
            const localVarPath = `/accounts/{account_identifier}/pages/projects/{project_name}/deployments/{deployment_identifier}/retry`
                .replace(`{${"deployment_identifier"}}`, encodeURIComponent(String(deploymentIdentifier)))
                .replace(`{${"project_name"}}`, encodeURIComponent(String(projectName)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Rollback the production deployment to a previous deployment. You can only rollback to succesful builds on production.
         * @summary Rollback deployment
         * @param {WAy69x7MIdentifier} deploymentIdentifier 
         * @param {WAy69x7MProjectName} projectName 
         * @param {WAy69x7MIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pagesDeploymentRollbackDeployment: async (deploymentIdentifier: WAy69x7MIdentifier, projectName: WAy69x7MProjectName, accountIdentifier: WAy69x7MIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deploymentIdentifier' is not null or undefined
            if (deploymentIdentifier === null || deploymentIdentifier === undefined) {
                throw new RequiredError('deploymentIdentifier','Required parameter deploymentIdentifier was null or undefined when calling pagesDeploymentRollbackDeployment.');
            }
            // verify required parameter 'projectName' is not null or undefined
            if (projectName === null || projectName === undefined) {
                throw new RequiredError('projectName','Required parameter projectName was null or undefined when calling pagesDeploymentRollbackDeployment.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling pagesDeploymentRollbackDeployment.');
            }
            const localVarPath = `/accounts/{account_identifier}/pages/projects/{project_name}/deployments/{deployment_identifier}/rollback`
                .replace(`{${"deployment_identifier"}}`, encodeURIComponent(String(deploymentIdentifier)))
                .replace(`{${"project_name"}}`, encodeURIComponent(String(projectName)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PagesDeploymentApi - functional programming interface
 * @export
 */
export const PagesDeploymentApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Start a new deployment from production. The repository and account must have already been authorized on the Cloudflare Pages dashboard.
         * @summary Create deployment
         * @param {string} branch 
         * @param {WAy69x7MProjectName} projectName 
         * @param {WAy69x7MIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pagesDeploymentCreateDeploymentForm(branch: string, projectName: WAy69x7MProjectName, accountIdentifier: WAy69x7MIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<WAy69x7MDeploymentNewDeployment>>> {
            const localVarAxiosArgs = await PagesDeploymentApiAxiosParamCreator(configuration).pagesDeploymentCreateDeploymentForm(branch, projectName, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a deployment.
         * @summary Delete deployment
         * @param {WAy69x7MIdentifier} deploymentIdentifier 
         * @param {WAy69x7MProjectName} projectName 
         * @param {WAy69x7MIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pagesDeploymentDeleteDeployment(deploymentIdentifier: WAy69x7MIdentifier, projectName: WAy69x7MProjectName, accountIdentifier: WAy69x7MIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await PagesDeploymentApiAxiosParamCreator(configuration).pagesDeploymentDeleteDeployment(deploymentIdentifier, projectName, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetch information about a deployment.
         * @summary Get deployment info
         * @param {WAy69x7MIdentifier} deploymentIdentifier 
         * @param {WAy69x7MProjectName} projectName 
         * @param {WAy69x7MIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pagesDeploymentGetDeploymentInfo(deploymentIdentifier: WAy69x7MIdentifier, projectName: WAy69x7MProjectName, accountIdentifier: WAy69x7MIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<WAy69x7MDeploymentResponseDetails>>> {
            const localVarAxiosArgs = await PagesDeploymentApiAxiosParamCreator(configuration).pagesDeploymentGetDeploymentInfo(deploymentIdentifier, projectName, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetch deployment logs for a project.
         * @summary Get deployment logs
         * @param {WAy69x7MIdentifier} deploymentIdentifier 
         * @param {WAy69x7MProjectName} projectName 
         * @param {WAy69x7MIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pagesDeploymentGetDeploymentLogs(deploymentIdentifier: WAy69x7MIdentifier, projectName: WAy69x7MProjectName, accountIdentifier: WAy69x7MIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<WAy69x7MDeploymentResponseLogs>>> {
            const localVarAxiosArgs = await PagesDeploymentApiAxiosParamCreator(configuration).pagesDeploymentGetDeploymentLogs(deploymentIdentifier, projectName, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetch a list of project deployments.
         * @summary Get deployments
         * @param {WAy69x7MProjectName} projectName 
         * @param {WAy69x7MIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pagesDeploymentGetDeployments(projectName: WAy69x7MProjectName, accountIdentifier: WAy69x7MIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<WAy69x7MDeploymentListResponse>>> {
            const localVarAxiosArgs = await PagesDeploymentApiAxiosParamCreator(configuration).pagesDeploymentGetDeployments(projectName, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retry a previous deployment.
         * @summary Retry deployment
         * @param {WAy69x7MIdentifier} deploymentIdentifier 
         * @param {WAy69x7MProjectName} projectName 
         * @param {WAy69x7MIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pagesDeploymentRetryDeployment(deploymentIdentifier: WAy69x7MIdentifier, projectName: WAy69x7MProjectName, accountIdentifier: WAy69x7MIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<WAy69x7MDeploymentNewDeployment>>> {
            const localVarAxiosArgs = await PagesDeploymentApiAxiosParamCreator(configuration).pagesDeploymentRetryDeployment(deploymentIdentifier, projectName, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Rollback the production deployment to a previous deployment. You can only rollback to succesful builds on production.
         * @summary Rollback deployment
         * @param {WAy69x7MIdentifier} deploymentIdentifier 
         * @param {WAy69x7MProjectName} projectName 
         * @param {WAy69x7MIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pagesDeploymentRollbackDeployment(deploymentIdentifier: WAy69x7MIdentifier, projectName: WAy69x7MProjectName, accountIdentifier: WAy69x7MIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<WAy69x7MDeploymentResponseDetails>>> {
            const localVarAxiosArgs = await PagesDeploymentApiAxiosParamCreator(configuration).pagesDeploymentRollbackDeployment(deploymentIdentifier, projectName, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PagesDeploymentApi - factory interface
 * @export
 */
export const PagesDeploymentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Start a new deployment from production. The repository and account must have already been authorized on the Cloudflare Pages dashboard.
         * @summary Create deployment
         * @param {string} branch 
         * @param {WAy69x7MProjectName} projectName 
         * @param {WAy69x7MIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pagesDeploymentCreateDeploymentForm(branch: string, projectName: WAy69x7MProjectName, accountIdentifier: WAy69x7MIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<WAy69x7MDeploymentNewDeployment>> {
            return PagesDeploymentApiFp(configuration).pagesDeploymentCreateDeploymentForm(branch, projectName, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a deployment.
         * @summary Delete deployment
         * @param {WAy69x7MIdentifier} deploymentIdentifier 
         * @param {WAy69x7MProjectName} projectName 
         * @param {WAy69x7MIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pagesDeploymentDeleteDeployment(deploymentIdentifier: WAy69x7MIdentifier, projectName: WAy69x7MProjectName, accountIdentifier: WAy69x7MIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return PagesDeploymentApiFp(configuration).pagesDeploymentDeleteDeployment(deploymentIdentifier, projectName, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch information about a deployment.
         * @summary Get deployment info
         * @param {WAy69x7MIdentifier} deploymentIdentifier 
         * @param {WAy69x7MProjectName} projectName 
         * @param {WAy69x7MIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pagesDeploymentGetDeploymentInfo(deploymentIdentifier: WAy69x7MIdentifier, projectName: WAy69x7MProjectName, accountIdentifier: WAy69x7MIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<WAy69x7MDeploymentResponseDetails>> {
            return PagesDeploymentApiFp(configuration).pagesDeploymentGetDeploymentInfo(deploymentIdentifier, projectName, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch deployment logs for a project.
         * @summary Get deployment logs
         * @param {WAy69x7MIdentifier} deploymentIdentifier 
         * @param {WAy69x7MProjectName} projectName 
         * @param {WAy69x7MIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pagesDeploymentGetDeploymentLogs(deploymentIdentifier: WAy69x7MIdentifier, projectName: WAy69x7MProjectName, accountIdentifier: WAy69x7MIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<WAy69x7MDeploymentResponseLogs>> {
            return PagesDeploymentApiFp(configuration).pagesDeploymentGetDeploymentLogs(deploymentIdentifier, projectName, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a list of project deployments.
         * @summary Get deployments
         * @param {WAy69x7MProjectName} projectName 
         * @param {WAy69x7MIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pagesDeploymentGetDeployments(projectName: WAy69x7MProjectName, accountIdentifier: WAy69x7MIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<WAy69x7MDeploymentListResponse>> {
            return PagesDeploymentApiFp(configuration).pagesDeploymentGetDeployments(projectName, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Retry a previous deployment.
         * @summary Retry deployment
         * @param {WAy69x7MIdentifier} deploymentIdentifier 
         * @param {WAy69x7MProjectName} projectName 
         * @param {WAy69x7MIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pagesDeploymentRetryDeployment(deploymentIdentifier: WAy69x7MIdentifier, projectName: WAy69x7MProjectName, accountIdentifier: WAy69x7MIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<WAy69x7MDeploymentNewDeployment>> {
            return PagesDeploymentApiFp(configuration).pagesDeploymentRetryDeployment(deploymentIdentifier, projectName, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Rollback the production deployment to a previous deployment. You can only rollback to succesful builds on production.
         * @summary Rollback deployment
         * @param {WAy69x7MIdentifier} deploymentIdentifier 
         * @param {WAy69x7MProjectName} projectName 
         * @param {WAy69x7MIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pagesDeploymentRollbackDeployment(deploymentIdentifier: WAy69x7MIdentifier, projectName: WAy69x7MProjectName, accountIdentifier: WAy69x7MIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<WAy69x7MDeploymentResponseDetails>> {
            return PagesDeploymentApiFp(configuration).pagesDeploymentRollbackDeployment(deploymentIdentifier, projectName, accountIdentifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PagesDeploymentApi - object-oriented interface
 * @export
 * @class PagesDeploymentApi
 * @extends {BaseAPI}
 */
export class PagesDeploymentApi extends BaseAPI {
    /**
     * Start a new deployment from production. The repository and account must have already been authorized on the Cloudflare Pages dashboard.
     * @summary Create deployment
     * @param {string} branch 
     * @param {WAy69x7MProjectName} projectName 
     * @param {WAy69x7MIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PagesDeploymentApi
     */
    public async pagesDeploymentCreateDeploymentForm(branch: string, projectName: WAy69x7MProjectName, accountIdentifier: WAy69x7MIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<WAy69x7MDeploymentNewDeployment>> {
        return PagesDeploymentApiFp(this.configuration).pagesDeploymentCreateDeploymentForm(branch, projectName, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a deployment.
     * @summary Delete deployment
     * @param {WAy69x7MIdentifier} deploymentIdentifier 
     * @param {WAy69x7MProjectName} projectName 
     * @param {WAy69x7MIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PagesDeploymentApi
     */
    public async pagesDeploymentDeleteDeployment(deploymentIdentifier: WAy69x7MIdentifier, projectName: WAy69x7MProjectName, accountIdentifier: WAy69x7MIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return PagesDeploymentApiFp(this.configuration).pagesDeploymentDeleteDeployment(deploymentIdentifier, projectName, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch information about a deployment.
     * @summary Get deployment info
     * @param {WAy69x7MIdentifier} deploymentIdentifier 
     * @param {WAy69x7MProjectName} projectName 
     * @param {WAy69x7MIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PagesDeploymentApi
     */
    public async pagesDeploymentGetDeploymentInfo(deploymentIdentifier: WAy69x7MIdentifier, projectName: WAy69x7MProjectName, accountIdentifier: WAy69x7MIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<WAy69x7MDeploymentResponseDetails>> {
        return PagesDeploymentApiFp(this.configuration).pagesDeploymentGetDeploymentInfo(deploymentIdentifier, projectName, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch deployment logs for a project.
     * @summary Get deployment logs
     * @param {WAy69x7MIdentifier} deploymentIdentifier 
     * @param {WAy69x7MProjectName} projectName 
     * @param {WAy69x7MIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PagesDeploymentApi
     */
    public async pagesDeploymentGetDeploymentLogs(deploymentIdentifier: WAy69x7MIdentifier, projectName: WAy69x7MProjectName, accountIdentifier: WAy69x7MIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<WAy69x7MDeploymentResponseLogs>> {
        return PagesDeploymentApiFp(this.configuration).pagesDeploymentGetDeploymentLogs(deploymentIdentifier, projectName, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch a list of project deployments.
     * @summary Get deployments
     * @param {WAy69x7MProjectName} projectName 
     * @param {WAy69x7MIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PagesDeploymentApi
     */
    public async pagesDeploymentGetDeployments(projectName: WAy69x7MProjectName, accountIdentifier: WAy69x7MIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<WAy69x7MDeploymentListResponse>> {
        return PagesDeploymentApiFp(this.configuration).pagesDeploymentGetDeployments(projectName, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retry a previous deployment.
     * @summary Retry deployment
     * @param {WAy69x7MIdentifier} deploymentIdentifier 
     * @param {WAy69x7MProjectName} projectName 
     * @param {WAy69x7MIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PagesDeploymentApi
     */
    public async pagesDeploymentRetryDeployment(deploymentIdentifier: WAy69x7MIdentifier, projectName: WAy69x7MProjectName, accountIdentifier: WAy69x7MIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<WAy69x7MDeploymentNewDeployment>> {
        return PagesDeploymentApiFp(this.configuration).pagesDeploymentRetryDeployment(deploymentIdentifier, projectName, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Rollback the production deployment to a previous deployment. You can only rollback to succesful builds on production.
     * @summary Rollback deployment
     * @param {WAy69x7MIdentifier} deploymentIdentifier 
     * @param {WAy69x7MProjectName} projectName 
     * @param {WAy69x7MIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PagesDeploymentApi
     */
    public async pagesDeploymentRollbackDeployment(deploymentIdentifier: WAy69x7MIdentifier, projectName: WAy69x7MProjectName, accountIdentifier: WAy69x7MIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<WAy69x7MDeploymentResponseDetails>> {
        return PagesDeploymentApiFp(this.configuration).pagesDeploymentRollbackDeployment(deploymentIdentifier, projectName, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
}
