/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse200174 } from '../models';
import { InlineResponse200175 } from '../models';
import { InlineResponse200176 } from '../models';
import { InlineResponse200177 } from '../models';
import { InlineResponse4XX309 } from '../models';
import { VectorizeCreateIndexRequest } from '../models';
import { VectorizeIdentifier } from '../models';
import { VectorizeIndexName } from '../models';
import { VectorizeUpdateIndexRequest } from '../models';
/**
 * VectorizeIndexApi - axios parameter creator
 * @export
 */
export const VectorizeIndexApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates and returns a new Vectorize Index.
         * @summary Create Vectorize Index
         * @param {VectorizeCreateIndexRequest} body 
         * @param {VectorizeIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vectorizeCreateVectorizeIndex: async (body: VectorizeCreateIndexRequest, accountIdentifier: VectorizeIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling vectorizeCreateVectorizeIndex.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling vectorizeCreateVectorizeIndex.');
            }
            const localVarPath = `/accounts/{account_identifier}/vectorize/indexes`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes the specified Vectorize Index.
         * @summary Delete Vectorize Index
         * @param {VectorizeIdentifier} accountIdentifier 
         * @param {VectorizeIndexName} indexName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vectorizeDeleteVectorizeIndex: async (accountIdentifier: VectorizeIdentifier, indexName: VectorizeIndexName, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling vectorizeDeleteVectorizeIndex.');
            }
            // verify required parameter 'indexName' is not null or undefined
            if (indexName === null || indexName === undefined) {
                throw new RequiredError('indexName','Required parameter indexName was null or undefined when calling vectorizeDeleteVectorizeIndex.');
            }
            const localVarPath = `/accounts/{account_identifier}/vectorize/indexes/{index_name}`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)))
                .replace(`{${"index_name"}}`, encodeURIComponent(String(indexName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the specified Vectorize Index.
         * @summary Get Vectorize Index
         * @param {VectorizeIdentifier} accountIdentifier 
         * @param {VectorizeIndexName} indexName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vectorizeGetVectorizeIndex: async (accountIdentifier: VectorizeIdentifier, indexName: VectorizeIndexName, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling vectorizeGetVectorizeIndex.');
            }
            // verify required parameter 'indexName' is not null or undefined
            if (indexName === null || indexName === undefined) {
                throw new RequiredError('indexName','Required parameter indexName was null or undefined when calling vectorizeGetVectorizeIndex.');
            }
            const localVarPath = `/accounts/{account_identifier}/vectorize/indexes/{index_name}`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)))
                .replace(`{${"index_name"}}`, encodeURIComponent(String(indexName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Inserts vectors into the specified index and returns the count of values and ids successfuly inserted.
         * @summary Insert Vectors
         * @param {Object} body 
         * @param {VectorizeIdentifier} accountIdentifier 
         * @param {VectorizeIndexName} indexName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vectorizeInsertVector: async (body: Object, accountIdentifier: VectorizeIdentifier, indexName: VectorizeIndexName, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling vectorizeInsertVector.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling vectorizeInsertVector.');
            }
            // verify required parameter 'indexName' is not null or undefined
            if (indexName === null || indexName === undefined) {
                throw new RequiredError('indexName','Required parameter indexName was null or undefined when calling vectorizeInsertVector.');
            }
            const localVarPath = `/accounts/{account_identifier}/vectorize/indexes/{index_name}/insert`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)))
                .replace(`{${"index_name"}}`, encodeURIComponent(String(indexName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-ndjson';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of Vectorize Indexes
         * @summary List Vectorize Indexes
         * @param {VectorizeIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vectorizeListVectorizeIndexes: async (accountIdentifier: VectorizeIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling vectorizeListVectorizeIndexes.');
            }
            const localVarPath = `/accounts/{account_identifier}/vectorize/indexes`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates and returns the specified Vectorize Index.
         * @summary Update Vectorize Index
         * @param {VectorizeUpdateIndexRequest} body 
         * @param {VectorizeIdentifier} accountIdentifier 
         * @param {VectorizeIndexName} indexName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vectorizeUpdateVectorizeIndex: async (body: VectorizeUpdateIndexRequest, accountIdentifier: VectorizeIdentifier, indexName: VectorizeIndexName, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling vectorizeUpdateVectorizeIndex.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling vectorizeUpdateVectorizeIndex.');
            }
            // verify required parameter 'indexName' is not null or undefined
            if (indexName === null || indexName === undefined) {
                throw new RequiredError('indexName','Required parameter indexName was null or undefined when calling vectorizeUpdateVectorizeIndex.');
            }
            const localVarPath = `/accounts/{account_identifier}/vectorize/indexes/{index_name}`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)))
                .replace(`{${"index_name"}}`, encodeURIComponent(String(indexName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VectorizeIndexApi - functional programming interface
 * @export
 */
export const VectorizeIndexApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates and returns a new Vectorize Index.
         * @summary Create Vectorize Index
         * @param {VectorizeCreateIndexRequest} body 
         * @param {VectorizeIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vectorizeCreateVectorizeIndex(body: VectorizeCreateIndexRequest, accountIdentifier: VectorizeIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200175>>> {
            const localVarAxiosArgs = await VectorizeIndexApiAxiosParamCreator(configuration).vectorizeCreateVectorizeIndex(body, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes the specified Vectorize Index.
         * @summary Delete Vectorize Index
         * @param {VectorizeIdentifier} accountIdentifier 
         * @param {VectorizeIndexName} indexName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vectorizeDeleteVectorizeIndex(accountIdentifier: VectorizeIdentifier, indexName: VectorizeIndexName, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200176>>> {
            const localVarAxiosArgs = await VectorizeIndexApiAxiosParamCreator(configuration).vectorizeDeleteVectorizeIndex(accountIdentifier, indexName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the specified Vectorize Index.
         * @summary Get Vectorize Index
         * @param {VectorizeIdentifier} accountIdentifier 
         * @param {VectorizeIndexName} indexName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vectorizeGetVectorizeIndex(accountIdentifier: VectorizeIdentifier, indexName: VectorizeIndexName, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200175>>> {
            const localVarAxiosArgs = await VectorizeIndexApiAxiosParamCreator(configuration).vectorizeGetVectorizeIndex(accountIdentifier, indexName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Inserts vectors into the specified index and returns the count of values and ids successfuly inserted.
         * @summary Insert Vectors
         * @param {Object} body 
         * @param {VectorizeIdentifier} accountIdentifier 
         * @param {VectorizeIndexName} indexName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vectorizeInsertVector(body: Object, accountIdentifier: VectorizeIdentifier, indexName: VectorizeIndexName, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200177>>> {
            const localVarAxiosArgs = await VectorizeIndexApiAxiosParamCreator(configuration).vectorizeInsertVector(body, accountIdentifier, indexName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a list of Vectorize Indexes
         * @summary List Vectorize Indexes
         * @param {VectorizeIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vectorizeListVectorizeIndexes(accountIdentifier: VectorizeIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200174>>> {
            const localVarAxiosArgs = await VectorizeIndexApiAxiosParamCreator(configuration).vectorizeListVectorizeIndexes(accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates and returns the specified Vectorize Index.
         * @summary Update Vectorize Index
         * @param {VectorizeUpdateIndexRequest} body 
         * @param {VectorizeIdentifier} accountIdentifier 
         * @param {VectorizeIndexName} indexName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vectorizeUpdateVectorizeIndex(body: VectorizeUpdateIndexRequest, accountIdentifier: VectorizeIdentifier, indexName: VectorizeIndexName, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200175>>> {
            const localVarAxiosArgs = await VectorizeIndexApiAxiosParamCreator(configuration).vectorizeUpdateVectorizeIndex(body, accountIdentifier, indexName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * VectorizeIndexApi - factory interface
 * @export
 */
export const VectorizeIndexApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Creates and returns a new Vectorize Index.
         * @summary Create Vectorize Index
         * @param {VectorizeCreateIndexRequest} body 
         * @param {VectorizeIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vectorizeCreateVectorizeIndex(body: VectorizeCreateIndexRequest, accountIdentifier: VectorizeIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200175>> {
            return VectorizeIndexApiFp(configuration).vectorizeCreateVectorizeIndex(body, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes the specified Vectorize Index.
         * @summary Delete Vectorize Index
         * @param {VectorizeIdentifier} accountIdentifier 
         * @param {VectorizeIndexName} indexName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vectorizeDeleteVectorizeIndex(accountIdentifier: VectorizeIdentifier, indexName: VectorizeIndexName, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200176>> {
            return VectorizeIndexApiFp(configuration).vectorizeDeleteVectorizeIndex(accountIdentifier, indexName, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the specified Vectorize Index.
         * @summary Get Vectorize Index
         * @param {VectorizeIdentifier} accountIdentifier 
         * @param {VectorizeIndexName} indexName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vectorizeGetVectorizeIndex(accountIdentifier: VectorizeIdentifier, indexName: VectorizeIndexName, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200175>> {
            return VectorizeIndexApiFp(configuration).vectorizeGetVectorizeIndex(accountIdentifier, indexName, options).then((request) => request(axios, basePath));
        },
        /**
         * Inserts vectors into the specified index and returns the count of values and ids successfuly inserted.
         * @summary Insert Vectors
         * @param {Object} body 
         * @param {VectorizeIdentifier} accountIdentifier 
         * @param {VectorizeIndexName} indexName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vectorizeInsertVector(body: Object, accountIdentifier: VectorizeIdentifier, indexName: VectorizeIndexName, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200177>> {
            return VectorizeIndexApiFp(configuration).vectorizeInsertVector(body, accountIdentifier, indexName, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of Vectorize Indexes
         * @summary List Vectorize Indexes
         * @param {VectorizeIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vectorizeListVectorizeIndexes(accountIdentifier: VectorizeIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200174>> {
            return VectorizeIndexApiFp(configuration).vectorizeListVectorizeIndexes(accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates and returns the specified Vectorize Index.
         * @summary Update Vectorize Index
         * @param {VectorizeUpdateIndexRequest} body 
         * @param {VectorizeIdentifier} accountIdentifier 
         * @param {VectorizeIndexName} indexName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vectorizeUpdateVectorizeIndex(body: VectorizeUpdateIndexRequest, accountIdentifier: VectorizeIdentifier, indexName: VectorizeIndexName, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200175>> {
            return VectorizeIndexApiFp(configuration).vectorizeUpdateVectorizeIndex(body, accountIdentifier, indexName, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VectorizeIndexApi - object-oriented interface
 * @export
 * @class VectorizeIndexApi
 * @extends {BaseAPI}
 */
export class VectorizeIndexApi extends BaseAPI {
    /**
     * Creates and returns a new Vectorize Index.
     * @summary Create Vectorize Index
     * @param {VectorizeCreateIndexRequest} body 
     * @param {VectorizeIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VectorizeIndexApi
     */
    public async vectorizeCreateVectorizeIndex(body: VectorizeCreateIndexRequest, accountIdentifier: VectorizeIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200175>> {
        return VectorizeIndexApiFp(this.configuration).vectorizeCreateVectorizeIndex(body, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes the specified Vectorize Index.
     * @summary Delete Vectorize Index
     * @param {VectorizeIdentifier} accountIdentifier 
     * @param {VectorizeIndexName} indexName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VectorizeIndexApi
     */
    public async vectorizeDeleteVectorizeIndex(accountIdentifier: VectorizeIdentifier, indexName: VectorizeIndexName, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200176>> {
        return VectorizeIndexApiFp(this.configuration).vectorizeDeleteVectorizeIndex(accountIdentifier, indexName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns the specified Vectorize Index.
     * @summary Get Vectorize Index
     * @param {VectorizeIdentifier} accountIdentifier 
     * @param {VectorizeIndexName} indexName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VectorizeIndexApi
     */
    public async vectorizeGetVectorizeIndex(accountIdentifier: VectorizeIdentifier, indexName: VectorizeIndexName, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200175>> {
        return VectorizeIndexApiFp(this.configuration).vectorizeGetVectorizeIndex(accountIdentifier, indexName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Inserts vectors into the specified index and returns the count of values and ids successfuly inserted.
     * @summary Insert Vectors
     * @param {Object} body 
     * @param {VectorizeIdentifier} accountIdentifier 
     * @param {VectorizeIndexName} indexName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VectorizeIndexApi
     */
    public async vectorizeInsertVector(body: Object, accountIdentifier: VectorizeIdentifier, indexName: VectorizeIndexName, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200177>> {
        return VectorizeIndexApiFp(this.configuration).vectorizeInsertVector(body, accountIdentifier, indexName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a list of Vectorize Indexes
     * @summary List Vectorize Indexes
     * @param {VectorizeIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VectorizeIndexApi
     */
    public async vectorizeListVectorizeIndexes(accountIdentifier: VectorizeIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200174>> {
        return VectorizeIndexApiFp(this.configuration).vectorizeListVectorizeIndexes(accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates and returns the specified Vectorize Index.
     * @summary Update Vectorize Index
     * @param {VectorizeUpdateIndexRequest} body 
     * @param {VectorizeIdentifier} accountIdentifier 
     * @param {VectorizeIndexName} indexName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VectorizeIndexApi
     */
    public async vectorizeUpdateVectorizeIndex(body: VectorizeUpdateIndexRequest, accountIdentifier: VectorizeIdentifier, indexName: VectorizeIndexName, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200175>> {
        return VectorizeIndexApiFp(this.configuration).vectorizeUpdateVectorizeIndex(body, accountIdentifier, indexName, options).then((request) => request(this.axios, this.basePath));
    }
}
