/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponseDefault } from '../models';
import { InlineResponseDefault1 } from '../models';
import { InlineResponseDefault2 } from '../models';
import { InlineResponseDefault3 } from '../models';
import { SBsg0yYSIdentifier } from '../models';
import { SBsg0yYSPcapsCollectionResponse } from '../models';
import { SBsg0yYSPcapsOwnershipCollection } from '../models';
import { SBsg0yYSPcapsOwnershipRequest } from '../models';
import { SBsg0yYSPcapsOwnershipSingleResponse } from '../models';
import { SBsg0yYSPcapsOwnershipValidateRequest } from '../models';
import { SBsg0yYSPcapsRequestPcap } from '../models';
import { SBsg0yYSPcapsSingleResponse } from '../models';
/**
 * MagicPCAPCollectionApi - axios parameter creator
 * @export
 */
export const MagicPCAPCollectionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds an AWS or GCP bucket to use with full packet captures.
         * @summary Add buckets for full packet captures
         * @param {SBsg0yYSPcapsOwnershipRequest} body 
         * @param {SBsg0yYSIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        magicPcapCollectionAddBucketsForFullPacketCaptures: async (body: SBsg0yYSPcapsOwnershipRequest, accountIdentifier: SBsg0yYSIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling magicPcapCollectionAddBucketsForFullPacketCaptures.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling magicPcapCollectionAddBucketsForFullPacketCaptures.');
            }
            const localVarPath = `/accounts/{account_identifier}/pcaps/ownership`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create new PCAP request for account.
         * @summary Create PCAP request
         * @param {SBsg0yYSPcapsRequestPcap} body 
         * @param {SBsg0yYSIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        magicPcapCollectionCreatePcapRequest: async (body: SBsg0yYSPcapsRequestPcap, accountIdentifier: SBsg0yYSIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling magicPcapCollectionCreatePcapRequest.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling magicPcapCollectionCreatePcapRequest.');
            }
            const localVarPath = `/accounts/{account_identifier}/pcaps`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes buckets added to the packet captures API.
         * @summary Delete buckets for full packet captures
         * @param {SBsg0yYSIdentifier} identifier 
         * @param {SBsg0yYSIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        magicPcapCollectionDeleteBucketsForFullPacketCaptures: async (identifier: SBsg0yYSIdentifier, accountIdentifier: SBsg0yYSIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling magicPcapCollectionDeleteBucketsForFullPacketCaptures.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling magicPcapCollectionDeleteBucketsForFullPacketCaptures.');
            }
            const localVarPath = `/accounts/{account_identifier}/pcaps/ownership/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Download PCAP information into a file. Response is a binary PCAP file.
         * @summary Download Simple PCAP
         * @param {SBsg0yYSIdentifier} identifier 
         * @param {SBsg0yYSIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        magicPcapCollectionDownloadSimplePcap: async (identifier: SBsg0yYSIdentifier, accountIdentifier: SBsg0yYSIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling magicPcapCollectionDownloadSimplePcap.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling magicPcapCollectionDownloadSimplePcap.');
            }
            const localVarPath = `/accounts/{account_identifier}/pcaps/{identifier}/download`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information for a PCAP request by id.
         * @summary Get PCAP request
         * @param {SBsg0yYSIdentifier} identifier 
         * @param {SBsg0yYSIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        magicPcapCollectionGetPcapRequest: async (identifier: SBsg0yYSIdentifier, accountIdentifier: SBsg0yYSIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling magicPcapCollectionGetPcapRequest.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling magicPcapCollectionGetPcapRequest.');
            }
            const localVarPath = `/accounts/{account_identifier}/pcaps/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all packet capture requests for an account.
         * @summary List packet capture requests
         * @param {SBsg0yYSIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        magicPcapCollectionListPacketCaptureRequests: async (accountIdentifier: SBsg0yYSIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling magicPcapCollectionListPacketCaptureRequests.');
            }
            const localVarPath = `/accounts/{account_identifier}/pcaps`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List all buckets configured for use with PCAPs API.
         * @summary List PCAPs Bucket Ownership
         * @param {SBsg0yYSIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        magicPcapCollectionListPcaPsBucketOwnership: async (accountIdentifier: SBsg0yYSIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling magicPcapCollectionListPcaPsBucketOwnership.');
            }
            const localVarPath = `/accounts/{account_identifier}/pcaps/ownership`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Validates buckets added to the packet captures API.
         * @summary Validate buckets for full packet captures
         * @param {SBsg0yYSPcapsOwnershipValidateRequest} body 
         * @param {SBsg0yYSIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        magicPcapCollectionValidateBucketsForFullPacketCaptures: async (body: SBsg0yYSPcapsOwnershipValidateRequest, accountIdentifier: SBsg0yYSIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling magicPcapCollectionValidateBucketsForFullPacketCaptures.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling magicPcapCollectionValidateBucketsForFullPacketCaptures.');
            }
            const localVarPath = `/accounts/{account_identifier}/pcaps/ownership/validate`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MagicPCAPCollectionApi - functional programming interface
 * @export
 */
export const MagicPCAPCollectionApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Adds an AWS or GCP bucket to use with full packet captures.
         * @summary Add buckets for full packet captures
         * @param {SBsg0yYSPcapsOwnershipRequest} body 
         * @param {SBsg0yYSIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicPcapCollectionAddBucketsForFullPacketCaptures(body: SBsg0yYSPcapsOwnershipRequest, accountIdentifier: SBsg0yYSIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SBsg0yYSPcapsOwnershipSingleResponse>>> {
            const localVarAxiosArgs = await MagicPCAPCollectionApiAxiosParamCreator(configuration).magicPcapCollectionAddBucketsForFullPacketCaptures(body, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create new PCAP request for account.
         * @summary Create PCAP request
         * @param {SBsg0yYSPcapsRequestPcap} body 
         * @param {SBsg0yYSIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicPcapCollectionCreatePcapRequest(body: SBsg0yYSPcapsRequestPcap, accountIdentifier: SBsg0yYSIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SBsg0yYSPcapsSingleResponse>>> {
            const localVarAxiosArgs = await MagicPCAPCollectionApiAxiosParamCreator(configuration).magicPcapCollectionCreatePcapRequest(body, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes buckets added to the packet captures API.
         * @summary Delete buckets for full packet captures
         * @param {SBsg0yYSIdentifier} identifier 
         * @param {SBsg0yYSIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicPcapCollectionDeleteBucketsForFullPacketCaptures(identifier: SBsg0yYSIdentifier, accountIdentifier: SBsg0yYSIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await MagicPCAPCollectionApiAxiosParamCreator(configuration).magicPcapCollectionDeleteBucketsForFullPacketCaptures(identifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Download PCAP information into a file. Response is a binary PCAP file.
         * @summary Download Simple PCAP
         * @param {SBsg0yYSIdentifier} identifier 
         * @param {SBsg0yYSIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicPcapCollectionDownloadSimplePcap(identifier: SBsg0yYSIdentifier, accountIdentifier: SBsg0yYSIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await MagicPCAPCollectionApiAxiosParamCreator(configuration).magicPcapCollectionDownloadSimplePcap(identifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get information for a PCAP request by id.
         * @summary Get PCAP request
         * @param {SBsg0yYSIdentifier} identifier 
         * @param {SBsg0yYSIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicPcapCollectionGetPcapRequest(identifier: SBsg0yYSIdentifier, accountIdentifier: SBsg0yYSIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SBsg0yYSPcapsSingleResponse>>> {
            const localVarAxiosArgs = await MagicPCAPCollectionApiAxiosParamCreator(configuration).magicPcapCollectionGetPcapRequest(identifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Lists all packet capture requests for an account.
         * @summary List packet capture requests
         * @param {SBsg0yYSIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicPcapCollectionListPacketCaptureRequests(accountIdentifier: SBsg0yYSIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SBsg0yYSPcapsCollectionResponse>>> {
            const localVarAxiosArgs = await MagicPCAPCollectionApiAxiosParamCreator(configuration).magicPcapCollectionListPacketCaptureRequests(accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List all buckets configured for use with PCAPs API.
         * @summary List PCAPs Bucket Ownership
         * @param {SBsg0yYSIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicPcapCollectionListPcaPsBucketOwnership(accountIdentifier: SBsg0yYSIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SBsg0yYSPcapsOwnershipCollection>>> {
            const localVarAxiosArgs = await MagicPCAPCollectionApiAxiosParamCreator(configuration).magicPcapCollectionListPcaPsBucketOwnership(accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Validates buckets added to the packet captures API.
         * @summary Validate buckets for full packet captures
         * @param {SBsg0yYSPcapsOwnershipValidateRequest} body 
         * @param {SBsg0yYSIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicPcapCollectionValidateBucketsForFullPacketCaptures(body: SBsg0yYSPcapsOwnershipValidateRequest, accountIdentifier: SBsg0yYSIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SBsg0yYSPcapsOwnershipSingleResponse>>> {
            const localVarAxiosArgs = await MagicPCAPCollectionApiAxiosParamCreator(configuration).magicPcapCollectionValidateBucketsForFullPacketCaptures(body, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * MagicPCAPCollectionApi - factory interface
 * @export
 */
export const MagicPCAPCollectionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Adds an AWS or GCP bucket to use with full packet captures.
         * @summary Add buckets for full packet captures
         * @param {SBsg0yYSPcapsOwnershipRequest} body 
         * @param {SBsg0yYSIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicPcapCollectionAddBucketsForFullPacketCaptures(body: SBsg0yYSPcapsOwnershipRequest, accountIdentifier: SBsg0yYSIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<SBsg0yYSPcapsOwnershipSingleResponse>> {
            return MagicPCAPCollectionApiFp(configuration).magicPcapCollectionAddBucketsForFullPacketCaptures(body, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Create new PCAP request for account.
         * @summary Create PCAP request
         * @param {SBsg0yYSPcapsRequestPcap} body 
         * @param {SBsg0yYSIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicPcapCollectionCreatePcapRequest(body: SBsg0yYSPcapsRequestPcap, accountIdentifier: SBsg0yYSIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<SBsg0yYSPcapsSingleResponse>> {
            return MagicPCAPCollectionApiFp(configuration).magicPcapCollectionCreatePcapRequest(body, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes buckets added to the packet captures API.
         * @summary Delete buckets for full packet captures
         * @param {SBsg0yYSIdentifier} identifier 
         * @param {SBsg0yYSIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicPcapCollectionDeleteBucketsForFullPacketCaptures(identifier: SBsg0yYSIdentifier, accountIdentifier: SBsg0yYSIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return MagicPCAPCollectionApiFp(configuration).magicPcapCollectionDeleteBucketsForFullPacketCaptures(identifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Download PCAP information into a file. Response is a binary PCAP file.
         * @summary Download Simple PCAP
         * @param {SBsg0yYSIdentifier} identifier 
         * @param {SBsg0yYSIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicPcapCollectionDownloadSimplePcap(identifier: SBsg0yYSIdentifier, accountIdentifier: SBsg0yYSIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return MagicPCAPCollectionApiFp(configuration).magicPcapCollectionDownloadSimplePcap(identifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information for a PCAP request by id.
         * @summary Get PCAP request
         * @param {SBsg0yYSIdentifier} identifier 
         * @param {SBsg0yYSIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicPcapCollectionGetPcapRequest(identifier: SBsg0yYSIdentifier, accountIdentifier: SBsg0yYSIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<SBsg0yYSPcapsSingleResponse>> {
            return MagicPCAPCollectionApiFp(configuration).magicPcapCollectionGetPcapRequest(identifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists all packet capture requests for an account.
         * @summary List packet capture requests
         * @param {SBsg0yYSIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicPcapCollectionListPacketCaptureRequests(accountIdentifier: SBsg0yYSIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<SBsg0yYSPcapsCollectionResponse>> {
            return MagicPCAPCollectionApiFp(configuration).magicPcapCollectionListPacketCaptureRequests(accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * List all buckets configured for use with PCAPs API.
         * @summary List PCAPs Bucket Ownership
         * @param {SBsg0yYSIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicPcapCollectionListPcaPsBucketOwnership(accountIdentifier: SBsg0yYSIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<SBsg0yYSPcapsOwnershipCollection>> {
            return MagicPCAPCollectionApiFp(configuration).magicPcapCollectionListPcaPsBucketOwnership(accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Validates buckets added to the packet captures API.
         * @summary Validate buckets for full packet captures
         * @param {SBsg0yYSPcapsOwnershipValidateRequest} body 
         * @param {SBsg0yYSIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicPcapCollectionValidateBucketsForFullPacketCaptures(body: SBsg0yYSPcapsOwnershipValidateRequest, accountIdentifier: SBsg0yYSIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<SBsg0yYSPcapsOwnershipSingleResponse>> {
            return MagicPCAPCollectionApiFp(configuration).magicPcapCollectionValidateBucketsForFullPacketCaptures(body, accountIdentifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MagicPCAPCollectionApi - object-oriented interface
 * @export
 * @class MagicPCAPCollectionApi
 * @extends {BaseAPI}
 */
export class MagicPCAPCollectionApi extends BaseAPI {
    /**
     * Adds an AWS or GCP bucket to use with full packet captures.
     * @summary Add buckets for full packet captures
     * @param {SBsg0yYSPcapsOwnershipRequest} body 
     * @param {SBsg0yYSIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MagicPCAPCollectionApi
     */
    public async magicPcapCollectionAddBucketsForFullPacketCaptures(body: SBsg0yYSPcapsOwnershipRequest, accountIdentifier: SBsg0yYSIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<SBsg0yYSPcapsOwnershipSingleResponse>> {
        return MagicPCAPCollectionApiFp(this.configuration).magicPcapCollectionAddBucketsForFullPacketCaptures(body, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create new PCAP request for account.
     * @summary Create PCAP request
     * @param {SBsg0yYSPcapsRequestPcap} body 
     * @param {SBsg0yYSIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MagicPCAPCollectionApi
     */
    public async magicPcapCollectionCreatePcapRequest(body: SBsg0yYSPcapsRequestPcap, accountIdentifier: SBsg0yYSIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<SBsg0yYSPcapsSingleResponse>> {
        return MagicPCAPCollectionApiFp(this.configuration).magicPcapCollectionCreatePcapRequest(body, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes buckets added to the packet captures API.
     * @summary Delete buckets for full packet captures
     * @param {SBsg0yYSIdentifier} identifier 
     * @param {SBsg0yYSIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MagicPCAPCollectionApi
     */
    public async magicPcapCollectionDeleteBucketsForFullPacketCaptures(identifier: SBsg0yYSIdentifier, accountIdentifier: SBsg0yYSIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return MagicPCAPCollectionApiFp(this.configuration).magicPcapCollectionDeleteBucketsForFullPacketCaptures(identifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Download PCAP information into a file. Response is a binary PCAP file.
     * @summary Download Simple PCAP
     * @param {SBsg0yYSIdentifier} identifier 
     * @param {SBsg0yYSIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MagicPCAPCollectionApi
     */
    public async magicPcapCollectionDownloadSimplePcap(identifier: SBsg0yYSIdentifier, accountIdentifier: SBsg0yYSIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return MagicPCAPCollectionApiFp(this.configuration).magicPcapCollectionDownloadSimplePcap(identifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get information for a PCAP request by id.
     * @summary Get PCAP request
     * @param {SBsg0yYSIdentifier} identifier 
     * @param {SBsg0yYSIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MagicPCAPCollectionApi
     */
    public async magicPcapCollectionGetPcapRequest(identifier: SBsg0yYSIdentifier, accountIdentifier: SBsg0yYSIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<SBsg0yYSPcapsSingleResponse>> {
        return MagicPCAPCollectionApiFp(this.configuration).magicPcapCollectionGetPcapRequest(identifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists all packet capture requests for an account.
     * @summary List packet capture requests
     * @param {SBsg0yYSIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MagicPCAPCollectionApi
     */
    public async magicPcapCollectionListPacketCaptureRequests(accountIdentifier: SBsg0yYSIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<SBsg0yYSPcapsCollectionResponse>> {
        return MagicPCAPCollectionApiFp(this.configuration).magicPcapCollectionListPacketCaptureRequests(accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List all buckets configured for use with PCAPs API.
     * @summary List PCAPs Bucket Ownership
     * @param {SBsg0yYSIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MagicPCAPCollectionApi
     */
    public async magicPcapCollectionListPcaPsBucketOwnership(accountIdentifier: SBsg0yYSIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<SBsg0yYSPcapsOwnershipCollection>> {
        return MagicPCAPCollectionApiFp(this.configuration).magicPcapCollectionListPcaPsBucketOwnership(accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Validates buckets added to the packet captures API.
     * @summary Validate buckets for full packet captures
     * @param {SBsg0yYSPcapsOwnershipValidateRequest} body 
     * @param {SBsg0yYSIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MagicPCAPCollectionApi
     */
    public async magicPcapCollectionValidateBucketsForFullPacketCaptures(body: SBsg0yYSPcapsOwnershipValidateRequest, accountIdentifier: SBsg0yYSIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<SBsg0yYSPcapsOwnershipSingleResponse>> {
        return MagicPCAPCollectionApiFp(this.configuration).magicPcapCollectionValidateBucketsForFullPacketCaptures(body, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
}
