/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { GatewayProxyEndpointsBody } from '../models';
import { InlineResponse4XX344 } from '../models';
import { InlineResponse4XX345 } from '../models';
import { InlineResponse4XX346 } from '../models';
import { Ir4bTFI2EmptyResponse } from '../models';
import { Ir4bTFI2Identifier } from '../models';
import { Ir4bTFI2ProxyEndpointsComponentsSchemasResponseCollection } from '../models';
import { Ir4bTFI2ProxyEndpointsComponentsSchemasSingleResponse } from '../models';
import { Ir4bTFI2SchemasUuid } from '../models';
import { ProxyEndpointsUuidBody } from '../models';
/**
 * ZeroTrustGatewayProxyEndpointsApi - axios parameter creator
 * @export
 */
export const ZeroTrustGatewayProxyEndpointsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new Zero Trust Gateway proxy endpoint.
         * @summary Create a proxy endpoint
         * @param {GatewayProxyEndpointsBody} body 
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zeroTrustGatewayProxyEndpointsCreateProxyEndpoint: async (body: GatewayProxyEndpointsBody, identifier: Ir4bTFI2Identifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling zeroTrustGatewayProxyEndpointsCreateProxyEndpoint.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling zeroTrustGatewayProxyEndpointsCreateProxyEndpoint.');
            }
            const localVarPath = `/accounts/{identifier}/gateway/proxy_endpoints`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a configured Zero Trust Gateway proxy endpoint.
         * @summary Delete a proxy endpoint
         * @param {Ir4bTFI2SchemasUuid} uuid 
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zeroTrustGatewayProxyEndpointsDeleteProxyEndpoint: async (uuid: Ir4bTFI2SchemasUuid, identifier: Ir4bTFI2Identifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling zeroTrustGatewayProxyEndpointsDeleteProxyEndpoint.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling zeroTrustGatewayProxyEndpointsDeleteProxyEndpoint.');
            }
            const localVarPath = `/accounts/{identifier}/gateway/proxy_endpoints/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)))
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches a single Zero Trust Gateway proxy endpoint.
         * @summary Get a proxy endpoint
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zeroTrustGatewayProxyEndpointsListProxyEndpoints: async (identifier: Ir4bTFI2Identifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling zeroTrustGatewayProxyEndpointsListProxyEndpoints.');
            }
            const localVarPath = `/accounts/{identifier}/gateway/proxy_endpoints`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches all Zero Trust Gateway proxy endpoints for an account.
         * @summary List proxy endpoints
         * @param {Ir4bTFI2SchemasUuid} uuid 
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zeroTrustGatewayProxyEndpointsProxyEndpointDetails: async (uuid: Ir4bTFI2SchemasUuid, identifier: Ir4bTFI2Identifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling zeroTrustGatewayProxyEndpointsProxyEndpointDetails.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling zeroTrustGatewayProxyEndpointsProxyEndpointDetails.');
            }
            const localVarPath = `/accounts/{identifier}/gateway/proxy_endpoints/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)))
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a configured Zero Trust Gateway proxy endpoint.
         * @summary Update a proxy endpoint
         * @param {ProxyEndpointsUuidBody} body 
         * @param {Ir4bTFI2SchemasUuid} uuid 
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zeroTrustGatewayProxyEndpointsUpdateProxyEndpoint: async (body: ProxyEndpointsUuidBody, uuid: Ir4bTFI2SchemasUuid, identifier: Ir4bTFI2Identifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling zeroTrustGatewayProxyEndpointsUpdateProxyEndpoint.');
            }
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling zeroTrustGatewayProxyEndpointsUpdateProxyEndpoint.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling zeroTrustGatewayProxyEndpointsUpdateProxyEndpoint.');
            }
            const localVarPath = `/accounts/{identifier}/gateway/proxy_endpoints/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)))
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ZeroTrustGatewayProxyEndpointsApi - functional programming interface
 * @export
 */
export const ZeroTrustGatewayProxyEndpointsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates a new Zero Trust Gateway proxy endpoint.
         * @summary Create a proxy endpoint
         * @param {GatewayProxyEndpointsBody} body 
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zeroTrustGatewayProxyEndpointsCreateProxyEndpoint(body: GatewayProxyEndpointsBody, identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Ir4bTFI2ProxyEndpointsComponentsSchemasSingleResponse>>> {
            const localVarAxiosArgs = await ZeroTrustGatewayProxyEndpointsApiAxiosParamCreator(configuration).zeroTrustGatewayProxyEndpointsCreateProxyEndpoint(body, identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes a configured Zero Trust Gateway proxy endpoint.
         * @summary Delete a proxy endpoint
         * @param {Ir4bTFI2SchemasUuid} uuid 
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zeroTrustGatewayProxyEndpointsDeleteProxyEndpoint(uuid: Ir4bTFI2SchemasUuid, identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Ir4bTFI2EmptyResponse>>> {
            const localVarAxiosArgs = await ZeroTrustGatewayProxyEndpointsApiAxiosParamCreator(configuration).zeroTrustGatewayProxyEndpointsDeleteProxyEndpoint(uuid, identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetches a single Zero Trust Gateway proxy endpoint.
         * @summary Get a proxy endpoint
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zeroTrustGatewayProxyEndpointsListProxyEndpoints(identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Ir4bTFI2ProxyEndpointsComponentsSchemasResponseCollection>>> {
            const localVarAxiosArgs = await ZeroTrustGatewayProxyEndpointsApiAxiosParamCreator(configuration).zeroTrustGatewayProxyEndpointsListProxyEndpoints(identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetches all Zero Trust Gateway proxy endpoints for an account.
         * @summary List proxy endpoints
         * @param {Ir4bTFI2SchemasUuid} uuid 
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zeroTrustGatewayProxyEndpointsProxyEndpointDetails(uuid: Ir4bTFI2SchemasUuid, identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Ir4bTFI2ProxyEndpointsComponentsSchemasSingleResponse>>> {
            const localVarAxiosArgs = await ZeroTrustGatewayProxyEndpointsApiAxiosParamCreator(configuration).zeroTrustGatewayProxyEndpointsProxyEndpointDetails(uuid, identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates a configured Zero Trust Gateway proxy endpoint.
         * @summary Update a proxy endpoint
         * @param {ProxyEndpointsUuidBody} body 
         * @param {Ir4bTFI2SchemasUuid} uuid 
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zeroTrustGatewayProxyEndpointsUpdateProxyEndpoint(body: ProxyEndpointsUuidBody, uuid: Ir4bTFI2SchemasUuid, identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Ir4bTFI2ProxyEndpointsComponentsSchemasSingleResponse>>> {
            const localVarAxiosArgs = await ZeroTrustGatewayProxyEndpointsApiAxiosParamCreator(configuration).zeroTrustGatewayProxyEndpointsUpdateProxyEndpoint(body, uuid, identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ZeroTrustGatewayProxyEndpointsApi - factory interface
 * @export
 */
export const ZeroTrustGatewayProxyEndpointsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Creates a new Zero Trust Gateway proxy endpoint.
         * @summary Create a proxy endpoint
         * @param {GatewayProxyEndpointsBody} body 
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zeroTrustGatewayProxyEndpointsCreateProxyEndpoint(body: GatewayProxyEndpointsBody, identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Ir4bTFI2ProxyEndpointsComponentsSchemasSingleResponse>> {
            return ZeroTrustGatewayProxyEndpointsApiFp(configuration).zeroTrustGatewayProxyEndpointsCreateProxyEndpoint(body, identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a configured Zero Trust Gateway proxy endpoint.
         * @summary Delete a proxy endpoint
         * @param {Ir4bTFI2SchemasUuid} uuid 
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zeroTrustGatewayProxyEndpointsDeleteProxyEndpoint(uuid: Ir4bTFI2SchemasUuid, identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Ir4bTFI2EmptyResponse>> {
            return ZeroTrustGatewayProxyEndpointsApiFp(configuration).zeroTrustGatewayProxyEndpointsDeleteProxyEndpoint(uuid, identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches a single Zero Trust Gateway proxy endpoint.
         * @summary Get a proxy endpoint
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zeroTrustGatewayProxyEndpointsListProxyEndpoints(identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Ir4bTFI2ProxyEndpointsComponentsSchemasResponseCollection>> {
            return ZeroTrustGatewayProxyEndpointsApiFp(configuration).zeroTrustGatewayProxyEndpointsListProxyEndpoints(identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches all Zero Trust Gateway proxy endpoints for an account.
         * @summary List proxy endpoints
         * @param {Ir4bTFI2SchemasUuid} uuid 
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zeroTrustGatewayProxyEndpointsProxyEndpointDetails(uuid: Ir4bTFI2SchemasUuid, identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Ir4bTFI2ProxyEndpointsComponentsSchemasSingleResponse>> {
            return ZeroTrustGatewayProxyEndpointsApiFp(configuration).zeroTrustGatewayProxyEndpointsProxyEndpointDetails(uuid, identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a configured Zero Trust Gateway proxy endpoint.
         * @summary Update a proxy endpoint
         * @param {ProxyEndpointsUuidBody} body 
         * @param {Ir4bTFI2SchemasUuid} uuid 
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zeroTrustGatewayProxyEndpointsUpdateProxyEndpoint(body: ProxyEndpointsUuidBody, uuid: Ir4bTFI2SchemasUuid, identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Ir4bTFI2ProxyEndpointsComponentsSchemasSingleResponse>> {
            return ZeroTrustGatewayProxyEndpointsApiFp(configuration).zeroTrustGatewayProxyEndpointsUpdateProxyEndpoint(body, uuid, identifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ZeroTrustGatewayProxyEndpointsApi - object-oriented interface
 * @export
 * @class ZeroTrustGatewayProxyEndpointsApi
 * @extends {BaseAPI}
 */
export class ZeroTrustGatewayProxyEndpointsApi extends BaseAPI {
    /**
     * Creates a new Zero Trust Gateway proxy endpoint.
     * @summary Create a proxy endpoint
     * @param {GatewayProxyEndpointsBody} body 
     * @param {Ir4bTFI2Identifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZeroTrustGatewayProxyEndpointsApi
     */
    public async zeroTrustGatewayProxyEndpointsCreateProxyEndpoint(body: GatewayProxyEndpointsBody, identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Ir4bTFI2ProxyEndpointsComponentsSchemasSingleResponse>> {
        return ZeroTrustGatewayProxyEndpointsApiFp(this.configuration).zeroTrustGatewayProxyEndpointsCreateProxyEndpoint(body, identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes a configured Zero Trust Gateway proxy endpoint.
     * @summary Delete a proxy endpoint
     * @param {Ir4bTFI2SchemasUuid} uuid 
     * @param {Ir4bTFI2Identifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZeroTrustGatewayProxyEndpointsApi
     */
    public async zeroTrustGatewayProxyEndpointsDeleteProxyEndpoint(uuid: Ir4bTFI2SchemasUuid, identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Ir4bTFI2EmptyResponse>> {
        return ZeroTrustGatewayProxyEndpointsApiFp(this.configuration).zeroTrustGatewayProxyEndpointsDeleteProxyEndpoint(uuid, identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches a single Zero Trust Gateway proxy endpoint.
     * @summary Get a proxy endpoint
     * @param {Ir4bTFI2Identifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZeroTrustGatewayProxyEndpointsApi
     */
    public async zeroTrustGatewayProxyEndpointsListProxyEndpoints(identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Ir4bTFI2ProxyEndpointsComponentsSchemasResponseCollection>> {
        return ZeroTrustGatewayProxyEndpointsApiFp(this.configuration).zeroTrustGatewayProxyEndpointsListProxyEndpoints(identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches all Zero Trust Gateway proxy endpoints for an account.
     * @summary List proxy endpoints
     * @param {Ir4bTFI2SchemasUuid} uuid 
     * @param {Ir4bTFI2Identifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZeroTrustGatewayProxyEndpointsApi
     */
    public async zeroTrustGatewayProxyEndpointsProxyEndpointDetails(uuid: Ir4bTFI2SchemasUuid, identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Ir4bTFI2ProxyEndpointsComponentsSchemasSingleResponse>> {
        return ZeroTrustGatewayProxyEndpointsApiFp(this.configuration).zeroTrustGatewayProxyEndpointsProxyEndpointDetails(uuid, identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates a configured Zero Trust Gateway proxy endpoint.
     * @summary Update a proxy endpoint
     * @param {ProxyEndpointsUuidBody} body 
     * @param {Ir4bTFI2SchemasUuid} uuid 
     * @param {Ir4bTFI2Identifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZeroTrustGatewayProxyEndpointsApi
     */
    public async zeroTrustGatewayProxyEndpointsUpdateProxyEndpoint(body: ProxyEndpointsUuidBody, uuid: Ir4bTFI2SchemasUuid, identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Ir4bTFI2ProxyEndpointsComponentsSchemasSingleResponse>> {
        return ZeroTrustGatewayProxyEndpointsApiFp(this.configuration).zeroTrustGatewayProxyEndpointsUpdateProxyEndpoint(body, uuid, identifier, options).then((request) => request(this.axios, this.basePath));
    }
}
