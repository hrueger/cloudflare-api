/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse4XX257 } from '../models';
import { InlineResponse4XX258 } from '../models';
import { InlineResponse4XX259 } from '../models';
import { KNYM3FIhComponentsSchemasHostname } from '../models';
import { KNYM3FIhIdentifier } from '../models';
import { KNYM3FIhPerHostnameSettingsResponse } from '../models';
import { KNYM3FIhPerHostnameSettingsResponseCollection } from '../models';
import { KNYM3FIhPerHostnameSettingsResponseDelete } from '../models';
import { KNYM3FIhTlsSetting } from '../models';
import { TlsSettingHostnameBody } from '../models';
/**
 * PerHostnameTLSSettingsApi - axios parameter creator
 * @export
 */
export const PerHostnameTLSSettingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete the tls setting value for the hostname.
         * @summary Delete TLS setting for hostname
         * @param {KNYM3FIhIdentifier} zoneIdentifier 
         * @param {KNYM3FIhTlsSetting} tlsSetting 
         * @param {KNYM3FIhComponentsSchemasHostname} hostname 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        perHostnameTlsSettingsDelete: async (zoneIdentifier: KNYM3FIhIdentifier, tlsSetting: KNYM3FIhTlsSetting, hostname: KNYM3FIhComponentsSchemasHostname, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling perHostnameTlsSettingsDelete.');
            }
            // verify required parameter 'tlsSetting' is not null or undefined
            if (tlsSetting === null || tlsSetting === undefined) {
                throw new RequiredError('tlsSetting','Required parameter tlsSetting was null or undefined when calling perHostnameTlsSettingsDelete.');
            }
            // verify required parameter 'hostname' is not null or undefined
            if (hostname === null || hostname === undefined) {
                throw new RequiredError('hostname','Required parameter hostname was null or undefined when calling perHostnameTlsSettingsDelete.');
            }
            const localVarPath = `/zones/{zone_identifier}/hostnames/settings/{tls_setting}/{hostname}`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)))
                .replace(`{${"tls_setting"}}`, encodeURIComponent(String(tlsSetting)))
                .replace(`{${"hostname"}}`, encodeURIComponent(String(hostname)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List the requested TLS setting for the hostnames under this zone.
         * @summary List TLS setting for hostnames
         * @param {KNYM3FIhIdentifier} zoneIdentifier 
         * @param {KNYM3FIhTlsSetting} tlsSetting 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        perHostnameTlsSettingsList: async (zoneIdentifier: KNYM3FIhIdentifier, tlsSetting: KNYM3FIhTlsSetting, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling perHostnameTlsSettingsList.');
            }
            // verify required parameter 'tlsSetting' is not null or undefined
            if (tlsSetting === null || tlsSetting === undefined) {
                throw new RequiredError('tlsSetting','Required parameter tlsSetting was null or undefined when calling perHostnameTlsSettingsList.');
            }
            const localVarPath = `/zones/{zone_identifier}/hostnames/settings/{tls_setting}`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)))
                .replace(`{${"tls_setting"}}`, encodeURIComponent(String(tlsSetting)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the tls setting value for the hostname.
         * @summary Edit TLS setting for hostname
         * @param {TlsSettingHostnameBody} body 
         * @param {KNYM3FIhIdentifier} zoneIdentifier 
         * @param {KNYM3FIhTlsSetting} tlsSetting 
         * @param {KNYM3FIhComponentsSchemasHostname} hostname 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        perHostnameTlsSettingsPut: async (body: TlsSettingHostnameBody, zoneIdentifier: KNYM3FIhIdentifier, tlsSetting: KNYM3FIhTlsSetting, hostname: KNYM3FIhComponentsSchemasHostname, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling perHostnameTlsSettingsPut.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling perHostnameTlsSettingsPut.');
            }
            // verify required parameter 'tlsSetting' is not null or undefined
            if (tlsSetting === null || tlsSetting === undefined) {
                throw new RequiredError('tlsSetting','Required parameter tlsSetting was null or undefined when calling perHostnameTlsSettingsPut.');
            }
            // verify required parameter 'hostname' is not null or undefined
            if (hostname === null || hostname === undefined) {
                throw new RequiredError('hostname','Required parameter hostname was null or undefined when calling perHostnameTlsSettingsPut.');
            }
            const localVarPath = `/zones/{zone_identifier}/hostnames/settings/{tls_setting}/{hostname}`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)))
                .replace(`{${"tls_setting"}}`, encodeURIComponent(String(tlsSetting)))
                .replace(`{${"hostname"}}`, encodeURIComponent(String(hostname)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PerHostnameTLSSettingsApi - functional programming interface
 * @export
 */
export const PerHostnameTLSSettingsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Delete the tls setting value for the hostname.
         * @summary Delete TLS setting for hostname
         * @param {KNYM3FIhIdentifier} zoneIdentifier 
         * @param {KNYM3FIhTlsSetting} tlsSetting 
         * @param {KNYM3FIhComponentsSchemasHostname} hostname 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async perHostnameTlsSettingsDelete(zoneIdentifier: KNYM3FIhIdentifier, tlsSetting: KNYM3FIhTlsSetting, hostname: KNYM3FIhComponentsSchemasHostname, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<KNYM3FIhPerHostnameSettingsResponseDelete>>> {
            const localVarAxiosArgs = await PerHostnameTLSSettingsApiAxiosParamCreator(configuration).perHostnameTlsSettingsDelete(zoneIdentifier, tlsSetting, hostname, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List the requested TLS setting for the hostnames under this zone.
         * @summary List TLS setting for hostnames
         * @param {KNYM3FIhIdentifier} zoneIdentifier 
         * @param {KNYM3FIhTlsSetting} tlsSetting 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async perHostnameTlsSettingsList(zoneIdentifier: KNYM3FIhIdentifier, tlsSetting: KNYM3FIhTlsSetting, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<KNYM3FIhPerHostnameSettingsResponseCollection>>> {
            const localVarAxiosArgs = await PerHostnameTLSSettingsApiAxiosParamCreator(configuration).perHostnameTlsSettingsList(zoneIdentifier, tlsSetting, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update the tls setting value for the hostname.
         * @summary Edit TLS setting for hostname
         * @param {TlsSettingHostnameBody} body 
         * @param {KNYM3FIhIdentifier} zoneIdentifier 
         * @param {KNYM3FIhTlsSetting} tlsSetting 
         * @param {KNYM3FIhComponentsSchemasHostname} hostname 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async perHostnameTlsSettingsPut(body: TlsSettingHostnameBody, zoneIdentifier: KNYM3FIhIdentifier, tlsSetting: KNYM3FIhTlsSetting, hostname: KNYM3FIhComponentsSchemasHostname, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<KNYM3FIhPerHostnameSettingsResponse>>> {
            const localVarAxiosArgs = await PerHostnameTLSSettingsApiAxiosParamCreator(configuration).perHostnameTlsSettingsPut(body, zoneIdentifier, tlsSetting, hostname, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PerHostnameTLSSettingsApi - factory interface
 * @export
 */
export const PerHostnameTLSSettingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Delete the tls setting value for the hostname.
         * @summary Delete TLS setting for hostname
         * @param {KNYM3FIhIdentifier} zoneIdentifier 
         * @param {KNYM3FIhTlsSetting} tlsSetting 
         * @param {KNYM3FIhComponentsSchemasHostname} hostname 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async perHostnameTlsSettingsDelete(zoneIdentifier: KNYM3FIhIdentifier, tlsSetting: KNYM3FIhTlsSetting, hostname: KNYM3FIhComponentsSchemasHostname, options?: AxiosRequestConfig): Promise<AxiosResponse<KNYM3FIhPerHostnameSettingsResponseDelete>> {
            return PerHostnameTLSSettingsApiFp(configuration).perHostnameTlsSettingsDelete(zoneIdentifier, tlsSetting, hostname, options).then((request) => request(axios, basePath));
        },
        /**
         * List the requested TLS setting for the hostnames under this zone.
         * @summary List TLS setting for hostnames
         * @param {KNYM3FIhIdentifier} zoneIdentifier 
         * @param {KNYM3FIhTlsSetting} tlsSetting 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async perHostnameTlsSettingsList(zoneIdentifier: KNYM3FIhIdentifier, tlsSetting: KNYM3FIhTlsSetting, options?: AxiosRequestConfig): Promise<AxiosResponse<KNYM3FIhPerHostnameSettingsResponseCollection>> {
            return PerHostnameTLSSettingsApiFp(configuration).perHostnameTlsSettingsList(zoneIdentifier, tlsSetting, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the tls setting value for the hostname.
         * @summary Edit TLS setting for hostname
         * @param {TlsSettingHostnameBody} body 
         * @param {KNYM3FIhIdentifier} zoneIdentifier 
         * @param {KNYM3FIhTlsSetting} tlsSetting 
         * @param {KNYM3FIhComponentsSchemasHostname} hostname 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async perHostnameTlsSettingsPut(body: TlsSettingHostnameBody, zoneIdentifier: KNYM3FIhIdentifier, tlsSetting: KNYM3FIhTlsSetting, hostname: KNYM3FIhComponentsSchemasHostname, options?: AxiosRequestConfig): Promise<AxiosResponse<KNYM3FIhPerHostnameSettingsResponse>> {
            return PerHostnameTLSSettingsApiFp(configuration).perHostnameTlsSettingsPut(body, zoneIdentifier, tlsSetting, hostname, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PerHostnameTLSSettingsApi - object-oriented interface
 * @export
 * @class PerHostnameTLSSettingsApi
 * @extends {BaseAPI}
 */
export class PerHostnameTLSSettingsApi extends BaseAPI {
    /**
     * Delete the tls setting value for the hostname.
     * @summary Delete TLS setting for hostname
     * @param {KNYM3FIhIdentifier} zoneIdentifier 
     * @param {KNYM3FIhTlsSetting} tlsSetting 
     * @param {KNYM3FIhComponentsSchemasHostname} hostname 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerHostnameTLSSettingsApi
     */
    public async perHostnameTlsSettingsDelete(zoneIdentifier: KNYM3FIhIdentifier, tlsSetting: KNYM3FIhTlsSetting, hostname: KNYM3FIhComponentsSchemasHostname, options?: AxiosRequestConfig) : Promise<AxiosResponse<KNYM3FIhPerHostnameSettingsResponseDelete>> {
        return PerHostnameTLSSettingsApiFp(this.configuration).perHostnameTlsSettingsDelete(zoneIdentifier, tlsSetting, hostname, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List the requested TLS setting for the hostnames under this zone.
     * @summary List TLS setting for hostnames
     * @param {KNYM3FIhIdentifier} zoneIdentifier 
     * @param {KNYM3FIhTlsSetting} tlsSetting 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerHostnameTLSSettingsApi
     */
    public async perHostnameTlsSettingsList(zoneIdentifier: KNYM3FIhIdentifier, tlsSetting: KNYM3FIhTlsSetting, options?: AxiosRequestConfig) : Promise<AxiosResponse<KNYM3FIhPerHostnameSettingsResponseCollection>> {
        return PerHostnameTLSSettingsApiFp(this.configuration).perHostnameTlsSettingsList(zoneIdentifier, tlsSetting, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update the tls setting value for the hostname.
     * @summary Edit TLS setting for hostname
     * @param {TlsSettingHostnameBody} body 
     * @param {KNYM3FIhIdentifier} zoneIdentifier 
     * @param {KNYM3FIhTlsSetting} tlsSetting 
     * @param {KNYM3FIhComponentsSchemasHostname} hostname 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerHostnameTLSSettingsApi
     */
    public async perHostnameTlsSettingsPut(body: TlsSettingHostnameBody, zoneIdentifier: KNYM3FIhIdentifier, tlsSetting: KNYM3FIhTlsSetting, hostname: KNYM3FIhComponentsSchemasHostname, options?: AxiosRequestConfig) : Promise<AxiosResponse<KNYM3FIhPerHostnameSettingsResponse>> {
        return PerHostnameTLSSettingsApiFp(this.configuration).perHostnameTlsSettingsPut(body, zoneIdentifier, tlsSetting, hostname, options).then((request) => request(this.axios, this.basePath));
    }
}
