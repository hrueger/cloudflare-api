/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { HostnamesCertificatesBody } from '../models';
import { InlineResponse4XX260 } from '../models';
import { InlineResponse4XX261 } from '../models';
import { InlineResponse4XX262 } from '../models';
import { InlineResponse4XX263 } from '../models';
import { KNYM3FIhComponentsSchemasCertificateResponseSingle } from '../models';
import { KNYM3FIhHostnameAopResponseCollection } from '../models';
import { KNYM3FIhHostnameAopSingleResponse } from '../models';
import { KNYM3FIhHostnameAuthenticatedOriginPullComponentsSchemasCertificateResponseCollection } from '../models';
import { KNYM3FIhIdentifier } from '../models';
import { KNYM3FIhSchemasHostname } from '../models';
import { OriginTlsClientAuthHostnamesBody } from '../models';
/**
 * PerHostnameAuthenticatedOriginPullApi - axios parameter creator
 * @export
 */
export const PerHostnameAuthenticatedOriginPullApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete Hostname Client Certificate
         * @param {KNYM3FIhIdentifier} identifier 
         * @param {KNYM3FIhIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        perHostnameAuthenticatedOriginPullDeleteHostnameClientCertificate: async (identifier: KNYM3FIhIdentifier, zoneIdentifier: KNYM3FIhIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling perHostnameAuthenticatedOriginPullDeleteHostnameClientCertificate.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling perHostnameAuthenticatedOriginPullDeleteHostnameClientCertificate.');
            }
            const localVarPath = `/zones/{zone_identifier}/origin_tls_client_auth/hostnames/certificates/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Associate a hostname to a certificate and enable, disable or invalidate the association. If disabled, client certificate will not be sent to the hostname even if activated at the zone level. 100 maximum associations on a single certificate are allowed. Note: Use a null value for parameter *enabled* to invalidate the association.
         * @summary Enable or Disable a Hostname for Client Authentication
         * @param {OriginTlsClientAuthHostnamesBody} body 
         * @param {KNYM3FIhIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        perHostnameAuthenticatedOriginPullEnableOrDisableAHostnameForClientAuthentication: async (body: OriginTlsClientAuthHostnamesBody, zoneIdentifier: KNYM3FIhIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling perHostnameAuthenticatedOriginPullEnableOrDisableAHostnameForClientAuthentication.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling perHostnameAuthenticatedOriginPullEnableOrDisableAHostnameForClientAuthentication.');
            }
            const localVarPath = `/zones/{zone_identifier}/origin_tls_client_auth/hostnames`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the certificate by ID to be used for client authentication on a hostname.
         * @summary Get the Hostname Client Certificate
         * @param {KNYM3FIhIdentifier} identifier 
         * @param {KNYM3FIhIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        perHostnameAuthenticatedOriginPullGetTheHostnameClientCertificate: async (identifier: KNYM3FIhIdentifier, zoneIdentifier: KNYM3FIhIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling perHostnameAuthenticatedOriginPullGetTheHostnameClientCertificate.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling perHostnameAuthenticatedOriginPullGetTheHostnameClientCertificate.');
            }
            const localVarPath = `/zones/{zone_identifier}/origin_tls_client_auth/hostnames/certificates/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the Hostname Status for Client Authentication
         * @param {KNYM3FIhSchemasHostname} hostname 
         * @param {KNYM3FIhIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        perHostnameAuthenticatedOriginPullGetTheHostnameStatusForClientAuthentication: async (hostname: KNYM3FIhSchemasHostname, zoneIdentifier: KNYM3FIhIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hostname' is not null or undefined
            if (hostname === null || hostname === undefined) {
                throw new RequiredError('hostname','Required parameter hostname was null or undefined when calling perHostnameAuthenticatedOriginPullGetTheHostnameStatusForClientAuthentication.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling perHostnameAuthenticatedOriginPullGetTheHostnameStatusForClientAuthentication.');
            }
            const localVarPath = `/zones/{zone_identifier}/origin_tls_client_auth/hostnames/{hostname}`
                .replace(`{${"hostname"}}`, encodeURIComponent(String(hostname)))
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Certificates
         * @param {KNYM3FIhIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        perHostnameAuthenticatedOriginPullListCertificates: async (zoneIdentifier: KNYM3FIhIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling perHostnameAuthenticatedOriginPullListCertificates.');
            }
            const localVarPath = `/zones/{zone_identifier}/origin_tls_client_auth/hostnames/certificates`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Upload a certificate to be used for client authentication on a hostname. 10 hostname certificates per zone are allowed.
         * @summary Upload a Hostname Client Certificate
         * @param {HostnamesCertificatesBody} body 
         * @param {KNYM3FIhIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        perHostnameAuthenticatedOriginPullUploadAHostnameClientCertificate: async (body: HostnamesCertificatesBody, zoneIdentifier: KNYM3FIhIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling perHostnameAuthenticatedOriginPullUploadAHostnameClientCertificate.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling perHostnameAuthenticatedOriginPullUploadAHostnameClientCertificate.');
            }
            const localVarPath = `/zones/{zone_identifier}/origin_tls_client_auth/hostnames/certificates`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PerHostnameAuthenticatedOriginPullApi - functional programming interface
 * @export
 */
export const PerHostnameAuthenticatedOriginPullApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete Hostname Client Certificate
         * @param {KNYM3FIhIdentifier} identifier 
         * @param {KNYM3FIhIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async perHostnameAuthenticatedOriginPullDeleteHostnameClientCertificate(identifier: KNYM3FIhIdentifier, zoneIdentifier: KNYM3FIhIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<KNYM3FIhComponentsSchemasCertificateResponseSingle>>> {
            const localVarAxiosArgs = await PerHostnameAuthenticatedOriginPullApiAxiosParamCreator(configuration).perHostnameAuthenticatedOriginPullDeleteHostnameClientCertificate(identifier, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Associate a hostname to a certificate and enable, disable or invalidate the association. If disabled, client certificate will not be sent to the hostname even if activated at the zone level. 100 maximum associations on a single certificate are allowed. Note: Use a null value for parameter *enabled* to invalidate the association.
         * @summary Enable or Disable a Hostname for Client Authentication
         * @param {OriginTlsClientAuthHostnamesBody} body 
         * @param {KNYM3FIhIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async perHostnameAuthenticatedOriginPullEnableOrDisableAHostnameForClientAuthentication(body: OriginTlsClientAuthHostnamesBody, zoneIdentifier: KNYM3FIhIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<KNYM3FIhHostnameAopResponseCollection>>> {
            const localVarAxiosArgs = await PerHostnameAuthenticatedOriginPullApiAxiosParamCreator(configuration).perHostnameAuthenticatedOriginPullEnableOrDisableAHostnameForClientAuthentication(body, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the certificate by ID to be used for client authentication on a hostname.
         * @summary Get the Hostname Client Certificate
         * @param {KNYM3FIhIdentifier} identifier 
         * @param {KNYM3FIhIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async perHostnameAuthenticatedOriginPullGetTheHostnameClientCertificate(identifier: KNYM3FIhIdentifier, zoneIdentifier: KNYM3FIhIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<KNYM3FIhComponentsSchemasCertificateResponseSingle>>> {
            const localVarAxiosArgs = await PerHostnameAuthenticatedOriginPullApiAxiosParamCreator(configuration).perHostnameAuthenticatedOriginPullGetTheHostnameClientCertificate(identifier, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get the Hostname Status for Client Authentication
         * @param {KNYM3FIhSchemasHostname} hostname 
         * @param {KNYM3FIhIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async perHostnameAuthenticatedOriginPullGetTheHostnameStatusForClientAuthentication(hostname: KNYM3FIhSchemasHostname, zoneIdentifier: KNYM3FIhIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<KNYM3FIhHostnameAopSingleResponse>>> {
            const localVarAxiosArgs = await PerHostnameAuthenticatedOriginPullApiAxiosParamCreator(configuration).perHostnameAuthenticatedOriginPullGetTheHostnameStatusForClientAuthentication(hostname, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary List Certificates
         * @param {KNYM3FIhIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async perHostnameAuthenticatedOriginPullListCertificates(zoneIdentifier: KNYM3FIhIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<KNYM3FIhHostnameAuthenticatedOriginPullComponentsSchemasCertificateResponseCollection>>> {
            const localVarAxiosArgs = await PerHostnameAuthenticatedOriginPullApiAxiosParamCreator(configuration).perHostnameAuthenticatedOriginPullListCertificates(zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Upload a certificate to be used for client authentication on a hostname. 10 hostname certificates per zone are allowed.
         * @summary Upload a Hostname Client Certificate
         * @param {HostnamesCertificatesBody} body 
         * @param {KNYM3FIhIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async perHostnameAuthenticatedOriginPullUploadAHostnameClientCertificate(body: HostnamesCertificatesBody, zoneIdentifier: KNYM3FIhIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<KNYM3FIhComponentsSchemasCertificateResponseSingle>>> {
            const localVarAxiosArgs = await PerHostnameAuthenticatedOriginPullApiAxiosParamCreator(configuration).perHostnameAuthenticatedOriginPullUploadAHostnameClientCertificate(body, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PerHostnameAuthenticatedOriginPullApi - factory interface
 * @export
 */
export const PerHostnameAuthenticatedOriginPullApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Delete Hostname Client Certificate
         * @param {KNYM3FIhIdentifier} identifier 
         * @param {KNYM3FIhIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async perHostnameAuthenticatedOriginPullDeleteHostnameClientCertificate(identifier: KNYM3FIhIdentifier, zoneIdentifier: KNYM3FIhIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<KNYM3FIhComponentsSchemasCertificateResponseSingle>> {
            return PerHostnameAuthenticatedOriginPullApiFp(configuration).perHostnameAuthenticatedOriginPullDeleteHostnameClientCertificate(identifier, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Associate a hostname to a certificate and enable, disable or invalidate the association. If disabled, client certificate will not be sent to the hostname even if activated at the zone level. 100 maximum associations on a single certificate are allowed. Note: Use a null value for parameter *enabled* to invalidate the association.
         * @summary Enable or Disable a Hostname for Client Authentication
         * @param {OriginTlsClientAuthHostnamesBody} body 
         * @param {KNYM3FIhIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async perHostnameAuthenticatedOriginPullEnableOrDisableAHostnameForClientAuthentication(body: OriginTlsClientAuthHostnamesBody, zoneIdentifier: KNYM3FIhIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<KNYM3FIhHostnameAopResponseCollection>> {
            return PerHostnameAuthenticatedOriginPullApiFp(configuration).perHostnameAuthenticatedOriginPullEnableOrDisableAHostnameForClientAuthentication(body, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the certificate by ID to be used for client authentication on a hostname.
         * @summary Get the Hostname Client Certificate
         * @param {KNYM3FIhIdentifier} identifier 
         * @param {KNYM3FIhIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async perHostnameAuthenticatedOriginPullGetTheHostnameClientCertificate(identifier: KNYM3FIhIdentifier, zoneIdentifier: KNYM3FIhIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<KNYM3FIhComponentsSchemasCertificateResponseSingle>> {
            return PerHostnameAuthenticatedOriginPullApiFp(configuration).perHostnameAuthenticatedOriginPullGetTheHostnameClientCertificate(identifier, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the Hostname Status for Client Authentication
         * @param {KNYM3FIhSchemasHostname} hostname 
         * @param {KNYM3FIhIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async perHostnameAuthenticatedOriginPullGetTheHostnameStatusForClientAuthentication(hostname: KNYM3FIhSchemasHostname, zoneIdentifier: KNYM3FIhIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<KNYM3FIhHostnameAopSingleResponse>> {
            return PerHostnameAuthenticatedOriginPullApiFp(configuration).perHostnameAuthenticatedOriginPullGetTheHostnameStatusForClientAuthentication(hostname, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Certificates
         * @param {KNYM3FIhIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async perHostnameAuthenticatedOriginPullListCertificates(zoneIdentifier: KNYM3FIhIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<KNYM3FIhHostnameAuthenticatedOriginPullComponentsSchemasCertificateResponseCollection>> {
            return PerHostnameAuthenticatedOriginPullApiFp(configuration).perHostnameAuthenticatedOriginPullListCertificates(zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Upload a certificate to be used for client authentication on a hostname. 10 hostname certificates per zone are allowed.
         * @summary Upload a Hostname Client Certificate
         * @param {HostnamesCertificatesBody} body 
         * @param {KNYM3FIhIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async perHostnameAuthenticatedOriginPullUploadAHostnameClientCertificate(body: HostnamesCertificatesBody, zoneIdentifier: KNYM3FIhIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<KNYM3FIhComponentsSchemasCertificateResponseSingle>> {
            return PerHostnameAuthenticatedOriginPullApiFp(configuration).perHostnameAuthenticatedOriginPullUploadAHostnameClientCertificate(body, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PerHostnameAuthenticatedOriginPullApi - object-oriented interface
 * @export
 * @class PerHostnameAuthenticatedOriginPullApi
 * @extends {BaseAPI}
 */
export class PerHostnameAuthenticatedOriginPullApi extends BaseAPI {
    /**
     * 
     * @summary Delete Hostname Client Certificate
     * @param {KNYM3FIhIdentifier} identifier 
     * @param {KNYM3FIhIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerHostnameAuthenticatedOriginPullApi
     */
    public async perHostnameAuthenticatedOriginPullDeleteHostnameClientCertificate(identifier: KNYM3FIhIdentifier, zoneIdentifier: KNYM3FIhIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<KNYM3FIhComponentsSchemasCertificateResponseSingle>> {
        return PerHostnameAuthenticatedOriginPullApiFp(this.configuration).perHostnameAuthenticatedOriginPullDeleteHostnameClientCertificate(identifier, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Associate a hostname to a certificate and enable, disable or invalidate the association. If disabled, client certificate will not be sent to the hostname even if activated at the zone level. 100 maximum associations on a single certificate are allowed. Note: Use a null value for parameter *enabled* to invalidate the association.
     * @summary Enable or Disable a Hostname for Client Authentication
     * @param {OriginTlsClientAuthHostnamesBody} body 
     * @param {KNYM3FIhIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerHostnameAuthenticatedOriginPullApi
     */
    public async perHostnameAuthenticatedOriginPullEnableOrDisableAHostnameForClientAuthentication(body: OriginTlsClientAuthHostnamesBody, zoneIdentifier: KNYM3FIhIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<KNYM3FIhHostnameAopResponseCollection>> {
        return PerHostnameAuthenticatedOriginPullApiFp(this.configuration).perHostnameAuthenticatedOriginPullEnableOrDisableAHostnameForClientAuthentication(body, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the certificate by ID to be used for client authentication on a hostname.
     * @summary Get the Hostname Client Certificate
     * @param {KNYM3FIhIdentifier} identifier 
     * @param {KNYM3FIhIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerHostnameAuthenticatedOriginPullApi
     */
    public async perHostnameAuthenticatedOriginPullGetTheHostnameClientCertificate(identifier: KNYM3FIhIdentifier, zoneIdentifier: KNYM3FIhIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<KNYM3FIhComponentsSchemasCertificateResponseSingle>> {
        return PerHostnameAuthenticatedOriginPullApiFp(this.configuration).perHostnameAuthenticatedOriginPullGetTheHostnameClientCertificate(identifier, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get the Hostname Status for Client Authentication
     * @param {KNYM3FIhSchemasHostname} hostname 
     * @param {KNYM3FIhIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerHostnameAuthenticatedOriginPullApi
     */
    public async perHostnameAuthenticatedOriginPullGetTheHostnameStatusForClientAuthentication(hostname: KNYM3FIhSchemasHostname, zoneIdentifier: KNYM3FIhIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<KNYM3FIhHostnameAopSingleResponse>> {
        return PerHostnameAuthenticatedOriginPullApiFp(this.configuration).perHostnameAuthenticatedOriginPullGetTheHostnameStatusForClientAuthentication(hostname, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary List Certificates
     * @param {KNYM3FIhIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerHostnameAuthenticatedOriginPullApi
     */
    public async perHostnameAuthenticatedOriginPullListCertificates(zoneIdentifier: KNYM3FIhIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<KNYM3FIhHostnameAuthenticatedOriginPullComponentsSchemasCertificateResponseCollection>> {
        return PerHostnameAuthenticatedOriginPullApiFp(this.configuration).perHostnameAuthenticatedOriginPullListCertificates(zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Upload a certificate to be used for client authentication on a hostname. 10 hostname certificates per zone are allowed.
     * @summary Upload a Hostname Client Certificate
     * @param {HostnamesCertificatesBody} body 
     * @param {KNYM3FIhIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerHostnameAuthenticatedOriginPullApi
     */
    public async perHostnameAuthenticatedOriginPullUploadAHostnameClientCertificate(body: HostnamesCertificatesBody, zoneIdentifier: KNYM3FIhIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<KNYM3FIhComponentsSchemasCertificateResponseSingle>> {
        return PerHostnameAuthenticatedOriginPullApiFp(this.configuration).perHostnameAuthenticatedOriginPullUploadAHostnameClientCertificate(body, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
}
