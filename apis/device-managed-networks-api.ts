/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { DevicesNetworksBody } from '../models';
import { InlineResponse4XX131 } from '../models';
import { InlineResponse4XX132 } from '../models';
import { NetworksUuidBody } from '../models';
import { ZzQH0lDwComponentsSchemasResponseCollection } from '../models';
import { ZzQH0lDwComponentsSchemasSingleResponse } from '../models';
import { ZzQH0lDwIdentifier } from '../models';
import { ZzQH0lDwUuid } from '../models';
/**
 * DeviceManagedNetworksApi - axios parameter creator
 * @export
 */
export const DeviceManagedNetworksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new device managed network.
         * @summary Create a device managed network
         * @param {DevicesNetworksBody} body 
         * @param {ZzQH0lDwIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceManagedNetworksCreateDeviceManagedNetwork: async (body: DevicesNetworksBody, identifier: ZzQH0lDwIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling deviceManagedNetworksCreateDeviceManagedNetwork.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling deviceManagedNetworksCreateDeviceManagedNetwork.');
            }
            const localVarPath = `/accounts/{identifier}/devices/networks`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a device managed network and fetches a list of the remaining device managed networks for an account.
         * @summary Delete a device managed network
         * @param {ZzQH0lDwUuid} uuid 
         * @param {ZzQH0lDwIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceManagedNetworksDeleteDeviceManagedNetwork: async (uuid: ZzQH0lDwUuid, identifier: ZzQH0lDwIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling deviceManagedNetworksDeleteDeviceManagedNetwork.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling deviceManagedNetworksDeleteDeviceManagedNetwork.');
            }
            const localVarPath = `/accounts/{identifier}/devices/networks/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)))
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches details for a single managed network.
         * @summary Get device managed network details
         * @param {ZzQH0lDwUuid} uuid 
         * @param {ZzQH0lDwIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceManagedNetworksDeviceManagedNetworkDetails: async (uuid: ZzQH0lDwUuid, identifier: ZzQH0lDwIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling deviceManagedNetworksDeviceManagedNetworkDetails.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling deviceManagedNetworksDeviceManagedNetworkDetails.');
            }
            const localVarPath = `/accounts/{identifier}/devices/networks/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)))
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches a list of managed networks for an account.
         * @summary List your device managed networks
         * @param {ZzQH0lDwIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceManagedNetworksListDeviceManagedNetworks: async (identifier: ZzQH0lDwIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling deviceManagedNetworksListDeviceManagedNetworks.');
            }
            const localVarPath = `/accounts/{identifier}/devices/networks`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a configured device managed network.
         * @summary Update a device managed network
         * @param {NetworksUuidBody} body 
         * @param {ZzQH0lDwUuid} uuid 
         * @param {ZzQH0lDwIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceManagedNetworksUpdateDeviceManagedNetwork: async (body: NetworksUuidBody, uuid: ZzQH0lDwUuid, identifier: ZzQH0lDwIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling deviceManagedNetworksUpdateDeviceManagedNetwork.');
            }
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling deviceManagedNetworksUpdateDeviceManagedNetwork.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling deviceManagedNetworksUpdateDeviceManagedNetwork.');
            }
            const localVarPath = `/accounts/{identifier}/devices/networks/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)))
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DeviceManagedNetworksApi - functional programming interface
 * @export
 */
export const DeviceManagedNetworksApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates a new device managed network.
         * @summary Create a device managed network
         * @param {DevicesNetworksBody} body 
         * @param {ZzQH0lDwIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deviceManagedNetworksCreateDeviceManagedNetwork(body: DevicesNetworksBody, identifier: ZzQH0lDwIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ZzQH0lDwComponentsSchemasSingleResponse>>> {
            const localVarAxiosArgs = await DeviceManagedNetworksApiAxiosParamCreator(configuration).deviceManagedNetworksCreateDeviceManagedNetwork(body, identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes a device managed network and fetches a list of the remaining device managed networks for an account.
         * @summary Delete a device managed network
         * @param {ZzQH0lDwUuid} uuid 
         * @param {ZzQH0lDwIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deviceManagedNetworksDeleteDeviceManagedNetwork(uuid: ZzQH0lDwUuid, identifier: ZzQH0lDwIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ZzQH0lDwComponentsSchemasResponseCollection>>> {
            const localVarAxiosArgs = await DeviceManagedNetworksApiAxiosParamCreator(configuration).deviceManagedNetworksDeleteDeviceManagedNetwork(uuid, identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetches details for a single managed network.
         * @summary Get device managed network details
         * @param {ZzQH0lDwUuid} uuid 
         * @param {ZzQH0lDwIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deviceManagedNetworksDeviceManagedNetworkDetails(uuid: ZzQH0lDwUuid, identifier: ZzQH0lDwIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ZzQH0lDwComponentsSchemasSingleResponse>>> {
            const localVarAxiosArgs = await DeviceManagedNetworksApiAxiosParamCreator(configuration).deviceManagedNetworksDeviceManagedNetworkDetails(uuid, identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetches a list of managed networks for an account.
         * @summary List your device managed networks
         * @param {ZzQH0lDwIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deviceManagedNetworksListDeviceManagedNetworks(identifier: ZzQH0lDwIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ZzQH0lDwComponentsSchemasResponseCollection>>> {
            const localVarAxiosArgs = await DeviceManagedNetworksApiAxiosParamCreator(configuration).deviceManagedNetworksListDeviceManagedNetworks(identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates a configured device managed network.
         * @summary Update a device managed network
         * @param {NetworksUuidBody} body 
         * @param {ZzQH0lDwUuid} uuid 
         * @param {ZzQH0lDwIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deviceManagedNetworksUpdateDeviceManagedNetwork(body: NetworksUuidBody, uuid: ZzQH0lDwUuid, identifier: ZzQH0lDwIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ZzQH0lDwComponentsSchemasSingleResponse>>> {
            const localVarAxiosArgs = await DeviceManagedNetworksApiAxiosParamCreator(configuration).deviceManagedNetworksUpdateDeviceManagedNetwork(body, uuid, identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DeviceManagedNetworksApi - factory interface
 * @export
 */
export const DeviceManagedNetworksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Creates a new device managed network.
         * @summary Create a device managed network
         * @param {DevicesNetworksBody} body 
         * @param {ZzQH0lDwIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deviceManagedNetworksCreateDeviceManagedNetwork(body: DevicesNetworksBody, identifier: ZzQH0lDwIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<ZzQH0lDwComponentsSchemasSingleResponse>> {
            return DeviceManagedNetworksApiFp(configuration).deviceManagedNetworksCreateDeviceManagedNetwork(body, identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a device managed network and fetches a list of the remaining device managed networks for an account.
         * @summary Delete a device managed network
         * @param {ZzQH0lDwUuid} uuid 
         * @param {ZzQH0lDwIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deviceManagedNetworksDeleteDeviceManagedNetwork(uuid: ZzQH0lDwUuid, identifier: ZzQH0lDwIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<ZzQH0lDwComponentsSchemasResponseCollection>> {
            return DeviceManagedNetworksApiFp(configuration).deviceManagedNetworksDeleteDeviceManagedNetwork(uuid, identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches details for a single managed network.
         * @summary Get device managed network details
         * @param {ZzQH0lDwUuid} uuid 
         * @param {ZzQH0lDwIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deviceManagedNetworksDeviceManagedNetworkDetails(uuid: ZzQH0lDwUuid, identifier: ZzQH0lDwIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<ZzQH0lDwComponentsSchemasSingleResponse>> {
            return DeviceManagedNetworksApiFp(configuration).deviceManagedNetworksDeviceManagedNetworkDetails(uuid, identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches a list of managed networks for an account.
         * @summary List your device managed networks
         * @param {ZzQH0lDwIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deviceManagedNetworksListDeviceManagedNetworks(identifier: ZzQH0lDwIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<ZzQH0lDwComponentsSchemasResponseCollection>> {
            return DeviceManagedNetworksApiFp(configuration).deviceManagedNetworksListDeviceManagedNetworks(identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a configured device managed network.
         * @summary Update a device managed network
         * @param {NetworksUuidBody} body 
         * @param {ZzQH0lDwUuid} uuid 
         * @param {ZzQH0lDwIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deviceManagedNetworksUpdateDeviceManagedNetwork(body: NetworksUuidBody, uuid: ZzQH0lDwUuid, identifier: ZzQH0lDwIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<ZzQH0lDwComponentsSchemasSingleResponse>> {
            return DeviceManagedNetworksApiFp(configuration).deviceManagedNetworksUpdateDeviceManagedNetwork(body, uuid, identifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DeviceManagedNetworksApi - object-oriented interface
 * @export
 * @class DeviceManagedNetworksApi
 * @extends {BaseAPI}
 */
export class DeviceManagedNetworksApi extends BaseAPI {
    /**
     * Creates a new device managed network.
     * @summary Create a device managed network
     * @param {DevicesNetworksBody} body 
     * @param {ZzQH0lDwIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceManagedNetworksApi
     */
    public async deviceManagedNetworksCreateDeviceManagedNetwork(body: DevicesNetworksBody, identifier: ZzQH0lDwIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<ZzQH0lDwComponentsSchemasSingleResponse>> {
        return DeviceManagedNetworksApiFp(this.configuration).deviceManagedNetworksCreateDeviceManagedNetwork(body, identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes a device managed network and fetches a list of the remaining device managed networks for an account.
     * @summary Delete a device managed network
     * @param {ZzQH0lDwUuid} uuid 
     * @param {ZzQH0lDwIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceManagedNetworksApi
     */
    public async deviceManagedNetworksDeleteDeviceManagedNetwork(uuid: ZzQH0lDwUuid, identifier: ZzQH0lDwIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<ZzQH0lDwComponentsSchemasResponseCollection>> {
        return DeviceManagedNetworksApiFp(this.configuration).deviceManagedNetworksDeleteDeviceManagedNetwork(uuid, identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches details for a single managed network.
     * @summary Get device managed network details
     * @param {ZzQH0lDwUuid} uuid 
     * @param {ZzQH0lDwIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceManagedNetworksApi
     */
    public async deviceManagedNetworksDeviceManagedNetworkDetails(uuid: ZzQH0lDwUuid, identifier: ZzQH0lDwIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<ZzQH0lDwComponentsSchemasSingleResponse>> {
        return DeviceManagedNetworksApiFp(this.configuration).deviceManagedNetworksDeviceManagedNetworkDetails(uuid, identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches a list of managed networks for an account.
     * @summary List your device managed networks
     * @param {ZzQH0lDwIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceManagedNetworksApi
     */
    public async deviceManagedNetworksListDeviceManagedNetworks(identifier: ZzQH0lDwIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<ZzQH0lDwComponentsSchemasResponseCollection>> {
        return DeviceManagedNetworksApiFp(this.configuration).deviceManagedNetworksListDeviceManagedNetworks(identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates a configured device managed network.
     * @summary Update a device managed network
     * @param {NetworksUuidBody} body 
     * @param {ZzQH0lDwUuid} uuid 
     * @param {ZzQH0lDwIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceManagedNetworksApi
     */
    public async deviceManagedNetworksUpdateDeviceManagedNetwork(body: NetworksUuidBody, uuid: ZzQH0lDwUuid, identifier: ZzQH0lDwIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<ZzQH0lDwComponentsSchemasSingleResponse>> {
        return DeviceManagedNetworksApiFp(this.configuration).deviceManagedNetworksUpdateDeviceManagedNetwork(body, uuid, identifier, options).then((request) => request(this.axios, this.basePath));
    }
}
