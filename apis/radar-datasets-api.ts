/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { DatasetsDownloadBody } from '../models';
import { InlineResponse200109 } from '../models';
import { InlineResponse200110 } from '../models';
import { InlineResponse400 } from '../models';
/**
 * RadarDatasetsApi - axios parameter creator
 * @export
 */
export const RadarDatasetsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get the csv content of a given dataset by alias or id. When getting the content by alias the latest dataset is returned, optionally filtered by the latest available at a given date.
         * @summary Get Dataset csv Stream
         * @param {string} alias 
         * @param {string} [date] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        radarGetReportsDatasetDownload: async (alias: string, date?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'alias' is not null or undefined
            if (alias === null || alias === undefined) {
                throw new RequiredError('alias','Required parameter alias was null or undefined when calling radarGetReportsDatasetDownload.');
            }
            const localVarPath = `/radar/datasets/{alias}`
                .replace(`{${"alias"}}`, encodeURIComponent(String(alias)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            if (date !== undefined) {
                localVarQueryParameter['date'] = date;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of datasets.
         * @summary Get Datasets
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [datasetType] 
         * @param {string} [format] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        radarGetReportsDatasets: async (limit?: number, offset?: number, datasetType?: string, format?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/radar/datasets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (datasetType !== undefined) {
                localVarQueryParameter['datasetType'] = datasetType;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a url to download a single dataset.
         * @summary Get Dataset download url
         * @param {DatasetsDownloadBody} [body] 
         * @param {string} [format] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        radarPostReportsDatasetDownloadUrl: async (body?: DatasetsDownloadBody, format?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/radar/datasets/download`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RadarDatasetsApi - functional programming interface
 * @export
 */
export const RadarDatasetsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get the csv content of a given dataset by alias or id. When getting the content by alias the latest dataset is returned, optionally filtered by the latest available at a given date.
         * @summary Get Dataset csv Stream
         * @param {string} alias 
         * @param {string} [date] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async radarGetReportsDatasetDownload(alias: string, date?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await RadarDatasetsApiAxiosParamCreator(configuration).radarGetReportsDatasetDownload(alias, date, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a list of datasets.
         * @summary Get Datasets
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [datasetType] 
         * @param {string} [format] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async radarGetReportsDatasets(limit?: number, offset?: number, datasetType?: string, format?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200109>>> {
            const localVarAxiosArgs = await RadarDatasetsApiAxiosParamCreator(configuration).radarGetReportsDatasets(limit, offset, datasetType, format, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a url to download a single dataset.
         * @summary Get Dataset download url
         * @param {DatasetsDownloadBody} [body] 
         * @param {string} [format] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async radarPostReportsDatasetDownloadUrl(body?: DatasetsDownloadBody, format?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200110>>> {
            const localVarAxiosArgs = await RadarDatasetsApiAxiosParamCreator(configuration).radarPostReportsDatasetDownloadUrl(body, format, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * RadarDatasetsApi - factory interface
 * @export
 */
export const RadarDatasetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Get the csv content of a given dataset by alias or id. When getting the content by alias the latest dataset is returned, optionally filtered by the latest available at a given date.
         * @summary Get Dataset csv Stream
         * @param {string} alias 
         * @param {string} [date] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async radarGetReportsDatasetDownload(alias: string, date?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return RadarDatasetsApiFp(configuration).radarGetReportsDatasetDownload(alias, date, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of datasets.
         * @summary Get Datasets
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [datasetType] 
         * @param {string} [format] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async radarGetReportsDatasets(limit?: number, offset?: number, datasetType?: string, format?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200109>> {
            return RadarDatasetsApiFp(configuration).radarGetReportsDatasets(limit, offset, datasetType, format, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a url to download a single dataset.
         * @summary Get Dataset download url
         * @param {DatasetsDownloadBody} [body] 
         * @param {string} [format] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async radarPostReportsDatasetDownloadUrl(body?: DatasetsDownloadBody, format?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200110>> {
            return RadarDatasetsApiFp(configuration).radarPostReportsDatasetDownloadUrl(body, format, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RadarDatasetsApi - object-oriented interface
 * @export
 * @class RadarDatasetsApi
 * @extends {BaseAPI}
 */
export class RadarDatasetsApi extends BaseAPI {
    /**
     * Get the csv content of a given dataset by alias or id. When getting the content by alias the latest dataset is returned, optionally filtered by the latest available at a given date.
     * @summary Get Dataset csv Stream
     * @param {string} alias 
     * @param {string} [date] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RadarDatasetsApi
     */
    public async radarGetReportsDatasetDownload(alias: string, date?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return RadarDatasetsApiFp(this.configuration).radarGetReportsDatasetDownload(alias, date, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a list of datasets.
     * @summary Get Datasets
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {string} [datasetType] 
     * @param {string} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RadarDatasetsApi
     */
    public async radarGetReportsDatasets(limit?: number, offset?: number, datasetType?: string, format?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200109>> {
        return RadarDatasetsApiFp(this.configuration).radarGetReportsDatasets(limit, offset, datasetType, format, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a url to download a single dataset.
     * @summary Get Dataset download url
     * @param {DatasetsDownloadBody} [body] 
     * @param {string} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RadarDatasetsApi
     */
    public async radarPostReportsDatasetDownloadUrl(body?: DatasetsDownloadBody, format?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200110>> {
        return RadarDatasetsApiFp(this.configuration).radarPostReportsDatasetDownloadUrl(body, format, options).then((request) => request(this.axios, this.basePath));
    }
}
