/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse4XX327 } from '../models';
import { InlineResponse4XX328 } from '../models';
import { InlineResponse4XX329 } from '../models';
import { MepUEAgcApiResponseSingle } from '../models';
import { MepUEAgcIdentifier } from '../models';
import { MepUEAgcRouteNoId } from '../models';
import { MepUEAgcRouteResponseCollection } from '../models';
import { MepUEAgcRouteResponseSingle } from '../models';
/**
 * WorkerRoutesApi - axios parameter creator
 * @export
 */
export const WorkerRoutesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a route that maps a URL pattern to a Worker.
         * @summary Create Route
         * @param {MepUEAgcRouteNoId} body 
         * @param {MepUEAgcIdentifier} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workerRoutesCreateRoute: async (body: MepUEAgcRouteNoId, zoneId: MepUEAgcIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling workerRoutesCreateRoute.');
            }
            // verify required parameter 'zoneId' is not null or undefined
            if (zoneId === null || zoneId === undefined) {
                throw new RequiredError('zoneId','Required parameter zoneId was null or undefined when calling workerRoutesCreateRoute.');
            }
            const localVarPath = `/zones/{zone_id}/workers/routes`
                .replace(`{${"zone_id"}}`, encodeURIComponent(String(zoneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a route.
         * @summary Delete Route
         * @param {MepUEAgcIdentifier} routeId 
         * @param {MepUEAgcIdentifier} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workerRoutesDeleteRoute: async (routeId: MepUEAgcIdentifier, zoneId: MepUEAgcIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'routeId' is not null or undefined
            if (routeId === null || routeId === undefined) {
                throw new RequiredError('routeId','Required parameter routeId was null or undefined when calling workerRoutesDeleteRoute.');
            }
            // verify required parameter 'zoneId' is not null or undefined
            if (zoneId === null || zoneId === undefined) {
                throw new RequiredError('zoneId','Required parameter zoneId was null or undefined when calling workerRoutesDeleteRoute.');
            }
            const localVarPath = `/zones/{zone_id}/workers/routes/{route_id}`
                .replace(`{${"route_id"}}`, encodeURIComponent(String(routeId)))
                .replace(`{${"zone_id"}}`, encodeURIComponent(String(zoneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns information about a route, including URL pattern and Worker.
         * @summary Get Route
         * @param {MepUEAgcIdentifier} routeId 
         * @param {MepUEAgcIdentifier} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workerRoutesGetRoute: async (routeId: MepUEAgcIdentifier, zoneId: MepUEAgcIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'routeId' is not null or undefined
            if (routeId === null || routeId === undefined) {
                throw new RequiredError('routeId','Required parameter routeId was null or undefined when calling workerRoutesGetRoute.');
            }
            // verify required parameter 'zoneId' is not null or undefined
            if (zoneId === null || zoneId === undefined) {
                throw new RequiredError('zoneId','Required parameter zoneId was null or undefined when calling workerRoutesGetRoute.');
            }
            const localVarPath = `/zones/{zone_id}/workers/routes/{route_id}`
                .replace(`{${"route_id"}}`, encodeURIComponent(String(routeId)))
                .replace(`{${"zone_id"}}`, encodeURIComponent(String(zoneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns routes for a zone.
         * @summary List Routes
         * @param {MepUEAgcIdentifier} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workerRoutesListRoutes: async (zoneId: MepUEAgcIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneId' is not null or undefined
            if (zoneId === null || zoneId === undefined) {
                throw new RequiredError('zoneId','Required parameter zoneId was null or undefined when calling workerRoutesListRoutes.');
            }
            const localVarPath = `/zones/{zone_id}/workers/routes`
                .replace(`{${"zone_id"}}`, encodeURIComponent(String(zoneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the URL pattern or Worker associated with a route.
         * @summary Update Route
         * @param {MepUEAgcRouteNoId} body 
         * @param {MepUEAgcIdentifier} routeId 
         * @param {MepUEAgcIdentifier} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workerRoutesUpdateRoute: async (body: MepUEAgcRouteNoId, routeId: MepUEAgcIdentifier, zoneId: MepUEAgcIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling workerRoutesUpdateRoute.');
            }
            // verify required parameter 'routeId' is not null or undefined
            if (routeId === null || routeId === undefined) {
                throw new RequiredError('routeId','Required parameter routeId was null or undefined when calling workerRoutesUpdateRoute.');
            }
            // verify required parameter 'zoneId' is not null or undefined
            if (zoneId === null || zoneId === undefined) {
                throw new RequiredError('zoneId','Required parameter zoneId was null or undefined when calling workerRoutesUpdateRoute.');
            }
            const localVarPath = `/zones/{zone_id}/workers/routes/{route_id}`
                .replace(`{${"route_id"}}`, encodeURIComponent(String(routeId)))
                .replace(`{${"zone_id"}}`, encodeURIComponent(String(zoneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkerRoutesApi - functional programming interface
 * @export
 */
export const WorkerRoutesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates a route that maps a URL pattern to a Worker.
         * @summary Create Route
         * @param {MepUEAgcRouteNoId} body 
         * @param {MepUEAgcIdentifier} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workerRoutesCreateRoute(body: MepUEAgcRouteNoId, zoneId: MepUEAgcIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<MepUEAgcApiResponseSingle>>> {
            const localVarAxiosArgs = await WorkerRoutesApiAxiosParamCreator(configuration).workerRoutesCreateRoute(body, zoneId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes a route.
         * @summary Delete Route
         * @param {MepUEAgcIdentifier} routeId 
         * @param {MepUEAgcIdentifier} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workerRoutesDeleteRoute(routeId: MepUEAgcIdentifier, zoneId: MepUEAgcIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<MepUEAgcApiResponseSingle>>> {
            const localVarAxiosArgs = await WorkerRoutesApiAxiosParamCreator(configuration).workerRoutesDeleteRoute(routeId, zoneId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns information about a route, including URL pattern and Worker.
         * @summary Get Route
         * @param {MepUEAgcIdentifier} routeId 
         * @param {MepUEAgcIdentifier} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workerRoutesGetRoute(routeId: MepUEAgcIdentifier, zoneId: MepUEAgcIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<MepUEAgcRouteResponseSingle>>> {
            const localVarAxiosArgs = await WorkerRoutesApiAxiosParamCreator(configuration).workerRoutesGetRoute(routeId, zoneId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns routes for a zone.
         * @summary List Routes
         * @param {MepUEAgcIdentifier} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workerRoutesListRoutes(zoneId: MepUEAgcIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<MepUEAgcRouteResponseCollection>>> {
            const localVarAxiosArgs = await WorkerRoutesApiAxiosParamCreator(configuration).workerRoutesListRoutes(zoneId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates the URL pattern or Worker associated with a route.
         * @summary Update Route
         * @param {MepUEAgcRouteNoId} body 
         * @param {MepUEAgcIdentifier} routeId 
         * @param {MepUEAgcIdentifier} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workerRoutesUpdateRoute(body: MepUEAgcRouteNoId, routeId: MepUEAgcIdentifier, zoneId: MepUEAgcIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<MepUEAgcRouteResponseSingle>>> {
            const localVarAxiosArgs = await WorkerRoutesApiAxiosParamCreator(configuration).workerRoutesUpdateRoute(body, routeId, zoneId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * WorkerRoutesApi - factory interface
 * @export
 */
export const WorkerRoutesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Creates a route that maps a URL pattern to a Worker.
         * @summary Create Route
         * @param {MepUEAgcRouteNoId} body 
         * @param {MepUEAgcIdentifier} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workerRoutesCreateRoute(body: MepUEAgcRouteNoId, zoneId: MepUEAgcIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<MepUEAgcApiResponseSingle>> {
            return WorkerRoutesApiFp(configuration).workerRoutesCreateRoute(body, zoneId, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a route.
         * @summary Delete Route
         * @param {MepUEAgcIdentifier} routeId 
         * @param {MepUEAgcIdentifier} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workerRoutesDeleteRoute(routeId: MepUEAgcIdentifier, zoneId: MepUEAgcIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<MepUEAgcApiResponseSingle>> {
            return WorkerRoutesApiFp(configuration).workerRoutesDeleteRoute(routeId, zoneId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns information about a route, including URL pattern and Worker.
         * @summary Get Route
         * @param {MepUEAgcIdentifier} routeId 
         * @param {MepUEAgcIdentifier} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workerRoutesGetRoute(routeId: MepUEAgcIdentifier, zoneId: MepUEAgcIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<MepUEAgcRouteResponseSingle>> {
            return WorkerRoutesApiFp(configuration).workerRoutesGetRoute(routeId, zoneId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns routes for a zone.
         * @summary List Routes
         * @param {MepUEAgcIdentifier} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workerRoutesListRoutes(zoneId: MepUEAgcIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<MepUEAgcRouteResponseCollection>> {
            return WorkerRoutesApiFp(configuration).workerRoutesListRoutes(zoneId, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the URL pattern or Worker associated with a route.
         * @summary Update Route
         * @param {MepUEAgcRouteNoId} body 
         * @param {MepUEAgcIdentifier} routeId 
         * @param {MepUEAgcIdentifier} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workerRoutesUpdateRoute(body: MepUEAgcRouteNoId, routeId: MepUEAgcIdentifier, zoneId: MepUEAgcIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<MepUEAgcRouteResponseSingle>> {
            return WorkerRoutesApiFp(configuration).workerRoutesUpdateRoute(body, routeId, zoneId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WorkerRoutesApi - object-oriented interface
 * @export
 * @class WorkerRoutesApi
 * @extends {BaseAPI}
 */
export class WorkerRoutesApi extends BaseAPI {
    /**
     * Creates a route that maps a URL pattern to a Worker.
     * @summary Create Route
     * @param {MepUEAgcRouteNoId} body 
     * @param {MepUEAgcIdentifier} zoneId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerRoutesApi
     */
    public async workerRoutesCreateRoute(body: MepUEAgcRouteNoId, zoneId: MepUEAgcIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<MepUEAgcApiResponseSingle>> {
        return WorkerRoutesApiFp(this.configuration).workerRoutesCreateRoute(body, zoneId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes a route.
     * @summary Delete Route
     * @param {MepUEAgcIdentifier} routeId 
     * @param {MepUEAgcIdentifier} zoneId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerRoutesApi
     */
    public async workerRoutesDeleteRoute(routeId: MepUEAgcIdentifier, zoneId: MepUEAgcIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<MepUEAgcApiResponseSingle>> {
        return WorkerRoutesApiFp(this.configuration).workerRoutesDeleteRoute(routeId, zoneId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns information about a route, including URL pattern and Worker.
     * @summary Get Route
     * @param {MepUEAgcIdentifier} routeId 
     * @param {MepUEAgcIdentifier} zoneId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerRoutesApi
     */
    public async workerRoutesGetRoute(routeId: MepUEAgcIdentifier, zoneId: MepUEAgcIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<MepUEAgcRouteResponseSingle>> {
        return WorkerRoutesApiFp(this.configuration).workerRoutesGetRoute(routeId, zoneId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns routes for a zone.
     * @summary List Routes
     * @param {MepUEAgcIdentifier} zoneId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerRoutesApi
     */
    public async workerRoutesListRoutes(zoneId: MepUEAgcIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<MepUEAgcRouteResponseCollection>> {
        return WorkerRoutesApiFp(this.configuration).workerRoutesListRoutes(zoneId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates the URL pattern or Worker associated with a route.
     * @summary Update Route
     * @param {MepUEAgcRouteNoId} body 
     * @param {MepUEAgcIdentifier} routeId 
     * @param {MepUEAgcIdentifier} zoneId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerRoutesApi
     */
    public async workerRoutesUpdateRoute(body: MepUEAgcRouteNoId, routeId: MepUEAgcIdentifier, zoneId: MepUEAgcIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<MepUEAgcRouteResponseSingle>> {
        return WorkerRoutesApiFp(this.configuration).workerRoutesUpdateRoute(body, routeId, zoneId, options).then((request) => request(this.axios, this.basePath));
    }
}
