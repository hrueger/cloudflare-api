/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { UrlTestsBody } from '../models';
import { YPqzrK6GApiResponseCommonFailure } from '../models';
import { YPqzrK6GAvailabilitiesResponse } from '../models';
import { YPqzrK6GCountResponse } from '../models';
import { YPqzrK6GCreateScheduleResponse } from '../models';
import { YPqzrK6GDeviceType } from '../models';
import { YPqzrK6GIdentifier } from '../models';
import { YPqzrK6GPageTestResponseCollection } from '../models';
import { YPqzrK6GPageTestResponseSingle } from '../models';
import { YPqzrK6GPagesResponseCollection } from '../models';
import { YPqzrK6GRegion } from '../models';
import { YPqzrK6GScheduleResponseSingle } from '../models';
import { YPqzrK6GTimestamp } from '../models';
import { YPqzrK6GTrendResponse } from '../models';
import { YPqzrK6GUrl } from '../models';
/**
 * ObservatoryApi - axios parameter creator
 * @export
 */
export const ObservatoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a scheduled test for a page.
         * @summary Create scheduled page test
         * @param {YPqzrK6GIdentifier} zoneIdentifier 
         * @param {YPqzrK6GUrl} url 
         * @param {YPqzrK6GRegion} [region] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        speedCreateScheduledTest: async (zoneIdentifier: YPqzrK6GIdentifier, url: YPqzrK6GUrl, region?: YPqzrK6GRegion, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling speedCreateScheduledTest.');
            }
            // verify required parameter 'url' is not null or undefined
            if (url === null || url === undefined) {
                throw new RequiredError('url','Required parameter url was null or undefined when calling speedCreateScheduledTest.');
            }
            const localVarPath = `/zones/{zone_identifier}/speed_api/schedule/{url}`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)))
                .replace(`{${"url"}}`, encodeURIComponent(String(url)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            if (region !== undefined) {
                localVarQueryParameter['region'] = region;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Starts a test for a specific webpage, in a specific region.
         * @summary Start page test
         * @param {YPqzrK6GIdentifier} zoneIdentifier 
         * @param {YPqzrK6GUrl} url 
         * @param {UrlTestsBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        speedCreateTest: async (zoneIdentifier: YPqzrK6GIdentifier, url: YPqzrK6GUrl, body?: UrlTestsBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling speedCreateTest.');
            }
            // verify required parameter 'url' is not null or undefined
            if (url === null || url === undefined) {
                throw new RequiredError('url','Required parameter url was null or undefined when calling speedCreateTest.');
            }
            const localVarPath = `/zones/{zone_identifier}/speed_api/pages/{url}/tests`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)))
                .replace(`{${"url"}}`, encodeURIComponent(String(url)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a scheduled test for a page.
         * @summary Delete scheduled page test
         * @param {YPqzrK6GIdentifier} zoneIdentifier 
         * @param {YPqzrK6GUrl} url 
         * @param {YPqzrK6GRegion} [region] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        speedDeleteTestSchedule: async (zoneIdentifier: YPqzrK6GIdentifier, url: YPqzrK6GUrl, region?: YPqzrK6GRegion, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling speedDeleteTestSchedule.');
            }
            // verify required parameter 'url' is not null or undefined
            if (url === null || url === undefined) {
                throw new RequiredError('url','Required parameter url was null or undefined when calling speedDeleteTestSchedule.');
            }
            const localVarPath = `/zones/{zone_identifier}/speed_api/schedule/{url}`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)))
                .replace(`{${"url"}}`, encodeURIComponent(String(url)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            if (region !== undefined) {
                localVarQueryParameter['region'] = region;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes all tests for a specific webpage from a specific region. Deleted tests are still counted as part of the quota.
         * @summary Delete all page tests
         * @param {YPqzrK6GIdentifier} zoneIdentifier 
         * @param {YPqzrK6GUrl} url 
         * @param {YPqzrK6GRegion} [region] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        speedDeleteTests: async (zoneIdentifier: YPqzrK6GIdentifier, url: YPqzrK6GUrl, region?: YPqzrK6GRegion, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling speedDeleteTests.');
            }
            // verify required parameter 'url' is not null or undefined
            if (url === null || url === undefined) {
                throw new RequiredError('url','Required parameter url was null or undefined when calling speedDeleteTests.');
            }
            const localVarPath = `/zones/{zone_identifier}/speed_api/pages/{url}/tests`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)))
                .replace(`{${"url"}}`, encodeURIComponent(String(url)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            if (region !== undefined) {
                localVarQueryParameter['region'] = region;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves quota for all plans, as well as the current zone quota.
         * @summary Get quota and availability
         * @param {YPqzrK6GIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        speedGetAvailabilities: async (zoneIdentifier: YPqzrK6GIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling speedGetAvailabilities.');
            }
            const localVarPath = `/zones/{zone_identifier}/speed_api/availabilities`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the test schedule for a page in a specific region.
         * @summary Get a page test schedule
         * @param {YPqzrK6GIdentifier} zoneIdentifier 
         * @param {YPqzrK6GUrl} url 
         * @param {YPqzrK6GRegion} [region] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        speedGetScheduledTest: async (zoneIdentifier: YPqzrK6GIdentifier, url: YPqzrK6GUrl, region?: YPqzrK6GRegion, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling speedGetScheduledTest.');
            }
            // verify required parameter 'url' is not null or undefined
            if (url === null || url === undefined) {
                throw new RequiredError('url','Required parameter url was null or undefined when calling speedGetScheduledTest.');
            }
            const localVarPath = `/zones/{zone_identifier}/speed_api/schedule/{url}`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)))
                .replace(`{${"url"}}`, encodeURIComponent(String(url)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            if (region !== undefined) {
                localVarQueryParameter['region'] = region;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the result of a specific test.
         * @summary Get a page test result
         * @param {YPqzrK6GIdentifier} zoneIdentifier 
         * @param {YPqzrK6GUrl} url 
         * @param {string} testIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        speedGetTest: async (zoneIdentifier: YPqzrK6GIdentifier, url: YPqzrK6GUrl, testIdentifier: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling speedGetTest.');
            }
            // verify required parameter 'url' is not null or undefined
            if (url === null || url === undefined) {
                throw new RequiredError('url','Required parameter url was null or undefined when calling speedGetTest.');
            }
            // verify required parameter 'testIdentifier' is not null or undefined
            if (testIdentifier === null || testIdentifier === undefined) {
                throw new RequiredError('testIdentifier','Required parameter testIdentifier was null or undefined when calling speedGetTest.');
            }
            const localVarPath = `/zones/{zone_identifier}/speed_api/pages/{url}/tests/{test_identifier}`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)))
                .replace(`{${"url"}}`, encodeURIComponent(String(url)))
                .replace(`{${"test_identifier"}}`, encodeURIComponent(String(testIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists the core web vital metrics trend over time for a specific page.
         * @summary List core web vital metrics trend
         * @param {YPqzrK6GIdentifier} zoneIdentifier 
         * @param {YPqzrK6GUrl} url 
         * @param {YPqzrK6GRegion} region 
         * @param {YPqzrK6GDeviceType} deviceType 
         * @param {YPqzrK6GTimestamp} start 
         * @param {string} tz The timezone of the start and end timestamps.
         * @param {string} metrics A comma-separated list of metrics to include in the results.
         * @param {YPqzrK6GTimestamp} [end] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        speedListPageTrend: async (zoneIdentifier: YPqzrK6GIdentifier, url: YPqzrK6GUrl, region: YPqzrK6GRegion, deviceType: YPqzrK6GDeviceType, start: YPqzrK6GTimestamp, tz: string, metrics: string, end?: YPqzrK6GTimestamp, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling speedListPageTrend.');
            }
            // verify required parameter 'url' is not null or undefined
            if (url === null || url === undefined) {
                throw new RequiredError('url','Required parameter url was null or undefined when calling speedListPageTrend.');
            }
            // verify required parameter 'region' is not null or undefined
            if (region === null || region === undefined) {
                throw new RequiredError('region','Required parameter region was null or undefined when calling speedListPageTrend.');
            }
            // verify required parameter 'deviceType' is not null or undefined
            if (deviceType === null || deviceType === undefined) {
                throw new RequiredError('deviceType','Required parameter deviceType was null or undefined when calling speedListPageTrend.');
            }
            // verify required parameter 'start' is not null or undefined
            if (start === null || start === undefined) {
                throw new RequiredError('start','Required parameter start was null or undefined when calling speedListPageTrend.');
            }
            // verify required parameter 'tz' is not null or undefined
            if (tz === null || tz === undefined) {
                throw new RequiredError('tz','Required parameter tz was null or undefined when calling speedListPageTrend.');
            }
            // verify required parameter 'metrics' is not null or undefined
            if (metrics === null || metrics === undefined) {
                throw new RequiredError('metrics','Required parameter metrics was null or undefined when calling speedListPageTrend.');
            }
            const localVarPath = `/zones/{zone_identifier}/speed_api/pages/{url}/trend`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)))
                .replace(`{${"url"}}`, encodeURIComponent(String(url)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            if (region !== undefined) {
                localVarQueryParameter['region'] = region;
            }

            if (deviceType !== undefined) {
                localVarQueryParameter['deviceType'] = deviceType;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = end;
            }

            if (tz !== undefined) {
                localVarQueryParameter['tz'] = tz;
            }

            if (metrics !== undefined) {
                localVarQueryParameter['metrics'] = metrics;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all webpages which have been tested.
         * @summary List tested webpages
         * @param {YPqzrK6GIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        speedListPages: async (zoneIdentifier: YPqzrK6GIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling speedListPages.');
            }
            const localVarPath = `/zones/{zone_identifier}/speed_api/pages`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Test history (list of tests) for a specific webpage.
         * @summary List page test history
         * @param {YPqzrK6GIdentifier} zoneIdentifier 
         * @param {YPqzrK6GUrl} url 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {YPqzrK6GRegion} [region] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        speedListTestHistory: async (zoneIdentifier: YPqzrK6GIdentifier, url: YPqzrK6GUrl, page?: number, perPage?: number, region?: YPqzrK6GRegion, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling speedListTestHistory.');
            }
            // verify required parameter 'url' is not null or undefined
            if (url === null || url === undefined) {
                throw new RequiredError('url','Required parameter url was null or undefined when calling speedListTestHistory.');
            }
            const localVarPath = `/zones/{zone_identifier}/speed_api/pages/{url}/tests`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)))
                .replace(`{${"url"}}`, encodeURIComponent(String(url)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (region !== undefined) {
                localVarQueryParameter['region'] = region;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ObservatoryApi - functional programming interface
 * @export
 */
export const ObservatoryApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates a scheduled test for a page.
         * @summary Create scheduled page test
         * @param {YPqzrK6GIdentifier} zoneIdentifier 
         * @param {YPqzrK6GUrl} url 
         * @param {YPqzrK6GRegion} [region] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async speedCreateScheduledTest(zoneIdentifier: YPqzrK6GIdentifier, url: YPqzrK6GUrl, region?: YPqzrK6GRegion, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<YPqzrK6GCreateScheduleResponse>>> {
            const localVarAxiosArgs = await ObservatoryApiAxiosParamCreator(configuration).speedCreateScheduledTest(zoneIdentifier, url, region, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Starts a test for a specific webpage, in a specific region.
         * @summary Start page test
         * @param {YPqzrK6GIdentifier} zoneIdentifier 
         * @param {YPqzrK6GUrl} url 
         * @param {UrlTestsBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async speedCreateTest(zoneIdentifier: YPqzrK6GIdentifier, url: YPqzrK6GUrl, body?: UrlTestsBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<YPqzrK6GPageTestResponseSingle>>> {
            const localVarAxiosArgs = await ObservatoryApiAxiosParamCreator(configuration).speedCreateTest(zoneIdentifier, url, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes a scheduled test for a page.
         * @summary Delete scheduled page test
         * @param {YPqzrK6GIdentifier} zoneIdentifier 
         * @param {YPqzrK6GUrl} url 
         * @param {YPqzrK6GRegion} [region] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async speedDeleteTestSchedule(zoneIdentifier: YPqzrK6GIdentifier, url: YPqzrK6GUrl, region?: YPqzrK6GRegion, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<YPqzrK6GCountResponse>>> {
            const localVarAxiosArgs = await ObservatoryApiAxiosParamCreator(configuration).speedDeleteTestSchedule(zoneIdentifier, url, region, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes all tests for a specific webpage from a specific region. Deleted tests are still counted as part of the quota.
         * @summary Delete all page tests
         * @param {YPqzrK6GIdentifier} zoneIdentifier 
         * @param {YPqzrK6GUrl} url 
         * @param {YPqzrK6GRegion} [region] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async speedDeleteTests(zoneIdentifier: YPqzrK6GIdentifier, url: YPqzrK6GUrl, region?: YPqzrK6GRegion, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<YPqzrK6GCountResponse>>> {
            const localVarAxiosArgs = await ObservatoryApiAxiosParamCreator(configuration).speedDeleteTests(zoneIdentifier, url, region, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves quota for all plans, as well as the current zone quota.
         * @summary Get quota and availability
         * @param {YPqzrK6GIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async speedGetAvailabilities(zoneIdentifier: YPqzrK6GIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<YPqzrK6GAvailabilitiesResponse>>> {
            const localVarAxiosArgs = await ObservatoryApiAxiosParamCreator(configuration).speedGetAvailabilities(zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the test schedule for a page in a specific region.
         * @summary Get a page test schedule
         * @param {YPqzrK6GIdentifier} zoneIdentifier 
         * @param {YPqzrK6GUrl} url 
         * @param {YPqzrK6GRegion} [region] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async speedGetScheduledTest(zoneIdentifier: YPqzrK6GIdentifier, url: YPqzrK6GUrl, region?: YPqzrK6GRegion, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<YPqzrK6GScheduleResponseSingle>>> {
            const localVarAxiosArgs = await ObservatoryApiAxiosParamCreator(configuration).speedGetScheduledTest(zoneIdentifier, url, region, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the result of a specific test.
         * @summary Get a page test result
         * @param {YPqzrK6GIdentifier} zoneIdentifier 
         * @param {YPqzrK6GUrl} url 
         * @param {string} testIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async speedGetTest(zoneIdentifier: YPqzrK6GIdentifier, url: YPqzrK6GUrl, testIdentifier: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<YPqzrK6GPageTestResponseSingle>>> {
            const localVarAxiosArgs = await ObservatoryApiAxiosParamCreator(configuration).speedGetTest(zoneIdentifier, url, testIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Lists the core web vital metrics trend over time for a specific page.
         * @summary List core web vital metrics trend
         * @param {YPqzrK6GIdentifier} zoneIdentifier 
         * @param {YPqzrK6GUrl} url 
         * @param {YPqzrK6GRegion} region 
         * @param {YPqzrK6GDeviceType} deviceType 
         * @param {YPqzrK6GTimestamp} start 
         * @param {string} tz The timezone of the start and end timestamps.
         * @param {string} metrics A comma-separated list of metrics to include in the results.
         * @param {YPqzrK6GTimestamp} [end] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async speedListPageTrend(zoneIdentifier: YPqzrK6GIdentifier, url: YPqzrK6GUrl, region: YPqzrK6GRegion, deviceType: YPqzrK6GDeviceType, start: YPqzrK6GTimestamp, tz: string, metrics: string, end?: YPqzrK6GTimestamp, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<YPqzrK6GTrendResponse>>> {
            const localVarAxiosArgs = await ObservatoryApiAxiosParamCreator(configuration).speedListPageTrend(zoneIdentifier, url, region, deviceType, start, tz, metrics, end, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Lists all webpages which have been tested.
         * @summary List tested webpages
         * @param {YPqzrK6GIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async speedListPages(zoneIdentifier: YPqzrK6GIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<YPqzrK6GPagesResponseCollection>>> {
            const localVarAxiosArgs = await ObservatoryApiAxiosParamCreator(configuration).speedListPages(zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Test history (list of tests) for a specific webpage.
         * @summary List page test history
         * @param {YPqzrK6GIdentifier} zoneIdentifier 
         * @param {YPqzrK6GUrl} url 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {YPqzrK6GRegion} [region] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async speedListTestHistory(zoneIdentifier: YPqzrK6GIdentifier, url: YPqzrK6GUrl, page?: number, perPage?: number, region?: YPqzrK6GRegion, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<YPqzrK6GPageTestResponseCollection>>> {
            const localVarAxiosArgs = await ObservatoryApiAxiosParamCreator(configuration).speedListTestHistory(zoneIdentifier, url, page, perPage, region, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ObservatoryApi - factory interface
 * @export
 */
export const ObservatoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Creates a scheduled test for a page.
         * @summary Create scheduled page test
         * @param {YPqzrK6GIdentifier} zoneIdentifier 
         * @param {YPqzrK6GUrl} url 
         * @param {YPqzrK6GRegion} [region] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async speedCreateScheduledTest(zoneIdentifier: YPqzrK6GIdentifier, url: YPqzrK6GUrl, region?: YPqzrK6GRegion, options?: AxiosRequestConfig): Promise<AxiosResponse<YPqzrK6GCreateScheduleResponse>> {
            return ObservatoryApiFp(configuration).speedCreateScheduledTest(zoneIdentifier, url, region, options).then((request) => request(axios, basePath));
        },
        /**
         * Starts a test for a specific webpage, in a specific region.
         * @summary Start page test
         * @param {YPqzrK6GIdentifier} zoneIdentifier 
         * @param {YPqzrK6GUrl} url 
         * @param {UrlTestsBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async speedCreateTest(zoneIdentifier: YPqzrK6GIdentifier, url: YPqzrK6GUrl, body?: UrlTestsBody, options?: AxiosRequestConfig): Promise<AxiosResponse<YPqzrK6GPageTestResponseSingle>> {
            return ObservatoryApiFp(configuration).speedCreateTest(zoneIdentifier, url, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a scheduled test for a page.
         * @summary Delete scheduled page test
         * @param {YPqzrK6GIdentifier} zoneIdentifier 
         * @param {YPqzrK6GUrl} url 
         * @param {YPqzrK6GRegion} [region] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async speedDeleteTestSchedule(zoneIdentifier: YPqzrK6GIdentifier, url: YPqzrK6GUrl, region?: YPqzrK6GRegion, options?: AxiosRequestConfig): Promise<AxiosResponse<YPqzrK6GCountResponse>> {
            return ObservatoryApiFp(configuration).speedDeleteTestSchedule(zoneIdentifier, url, region, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes all tests for a specific webpage from a specific region. Deleted tests are still counted as part of the quota.
         * @summary Delete all page tests
         * @param {YPqzrK6GIdentifier} zoneIdentifier 
         * @param {YPqzrK6GUrl} url 
         * @param {YPqzrK6GRegion} [region] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async speedDeleteTests(zoneIdentifier: YPqzrK6GIdentifier, url: YPqzrK6GUrl, region?: YPqzrK6GRegion, options?: AxiosRequestConfig): Promise<AxiosResponse<YPqzrK6GCountResponse>> {
            return ObservatoryApiFp(configuration).speedDeleteTests(zoneIdentifier, url, region, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves quota for all plans, as well as the current zone quota.
         * @summary Get quota and availability
         * @param {YPqzrK6GIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async speedGetAvailabilities(zoneIdentifier: YPqzrK6GIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<YPqzrK6GAvailabilitiesResponse>> {
            return ObservatoryApiFp(configuration).speedGetAvailabilities(zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the test schedule for a page in a specific region.
         * @summary Get a page test schedule
         * @param {YPqzrK6GIdentifier} zoneIdentifier 
         * @param {YPqzrK6GUrl} url 
         * @param {YPqzrK6GRegion} [region] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async speedGetScheduledTest(zoneIdentifier: YPqzrK6GIdentifier, url: YPqzrK6GUrl, region?: YPqzrK6GRegion, options?: AxiosRequestConfig): Promise<AxiosResponse<YPqzrK6GScheduleResponseSingle>> {
            return ObservatoryApiFp(configuration).speedGetScheduledTest(zoneIdentifier, url, region, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the result of a specific test.
         * @summary Get a page test result
         * @param {YPqzrK6GIdentifier} zoneIdentifier 
         * @param {YPqzrK6GUrl} url 
         * @param {string} testIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async speedGetTest(zoneIdentifier: YPqzrK6GIdentifier, url: YPqzrK6GUrl, testIdentifier: string, options?: AxiosRequestConfig): Promise<AxiosResponse<YPqzrK6GPageTestResponseSingle>> {
            return ObservatoryApiFp(configuration).speedGetTest(zoneIdentifier, url, testIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists the core web vital metrics trend over time for a specific page.
         * @summary List core web vital metrics trend
         * @param {YPqzrK6GIdentifier} zoneIdentifier 
         * @param {YPqzrK6GUrl} url 
         * @param {YPqzrK6GRegion} region 
         * @param {YPqzrK6GDeviceType} deviceType 
         * @param {YPqzrK6GTimestamp} start 
         * @param {string} tz The timezone of the start and end timestamps.
         * @param {string} metrics A comma-separated list of metrics to include in the results.
         * @param {YPqzrK6GTimestamp} [end] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async speedListPageTrend(zoneIdentifier: YPqzrK6GIdentifier, url: YPqzrK6GUrl, region: YPqzrK6GRegion, deviceType: YPqzrK6GDeviceType, start: YPqzrK6GTimestamp, tz: string, metrics: string, end?: YPqzrK6GTimestamp, options?: AxiosRequestConfig): Promise<AxiosResponse<YPqzrK6GTrendResponse>> {
            return ObservatoryApiFp(configuration).speedListPageTrend(zoneIdentifier, url, region, deviceType, start, tz, metrics, end, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists all webpages which have been tested.
         * @summary List tested webpages
         * @param {YPqzrK6GIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async speedListPages(zoneIdentifier: YPqzrK6GIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<YPqzrK6GPagesResponseCollection>> {
            return ObservatoryApiFp(configuration).speedListPages(zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Test history (list of tests) for a specific webpage.
         * @summary List page test history
         * @param {YPqzrK6GIdentifier} zoneIdentifier 
         * @param {YPqzrK6GUrl} url 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {YPqzrK6GRegion} [region] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async speedListTestHistory(zoneIdentifier: YPqzrK6GIdentifier, url: YPqzrK6GUrl, page?: number, perPage?: number, region?: YPqzrK6GRegion, options?: AxiosRequestConfig): Promise<AxiosResponse<YPqzrK6GPageTestResponseCollection>> {
            return ObservatoryApiFp(configuration).speedListTestHistory(zoneIdentifier, url, page, perPage, region, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ObservatoryApi - object-oriented interface
 * @export
 * @class ObservatoryApi
 * @extends {BaseAPI}
 */
export class ObservatoryApi extends BaseAPI {
    /**
     * Creates a scheduled test for a page.
     * @summary Create scheduled page test
     * @param {YPqzrK6GIdentifier} zoneIdentifier 
     * @param {YPqzrK6GUrl} url 
     * @param {YPqzrK6GRegion} [region] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObservatoryApi
     */
    public async speedCreateScheduledTest(zoneIdentifier: YPqzrK6GIdentifier, url: YPqzrK6GUrl, region?: YPqzrK6GRegion, options?: AxiosRequestConfig) : Promise<AxiosResponse<YPqzrK6GCreateScheduleResponse>> {
        return ObservatoryApiFp(this.configuration).speedCreateScheduledTest(zoneIdentifier, url, region, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Starts a test for a specific webpage, in a specific region.
     * @summary Start page test
     * @param {YPqzrK6GIdentifier} zoneIdentifier 
     * @param {YPqzrK6GUrl} url 
     * @param {UrlTestsBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObservatoryApi
     */
    public async speedCreateTest(zoneIdentifier: YPqzrK6GIdentifier, url: YPqzrK6GUrl, body?: UrlTestsBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<YPqzrK6GPageTestResponseSingle>> {
        return ObservatoryApiFp(this.configuration).speedCreateTest(zoneIdentifier, url, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes a scheduled test for a page.
     * @summary Delete scheduled page test
     * @param {YPqzrK6GIdentifier} zoneIdentifier 
     * @param {YPqzrK6GUrl} url 
     * @param {YPqzrK6GRegion} [region] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObservatoryApi
     */
    public async speedDeleteTestSchedule(zoneIdentifier: YPqzrK6GIdentifier, url: YPqzrK6GUrl, region?: YPqzrK6GRegion, options?: AxiosRequestConfig) : Promise<AxiosResponse<YPqzrK6GCountResponse>> {
        return ObservatoryApiFp(this.configuration).speedDeleteTestSchedule(zoneIdentifier, url, region, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes all tests for a specific webpage from a specific region. Deleted tests are still counted as part of the quota.
     * @summary Delete all page tests
     * @param {YPqzrK6GIdentifier} zoneIdentifier 
     * @param {YPqzrK6GUrl} url 
     * @param {YPqzrK6GRegion} [region] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObservatoryApi
     */
    public async speedDeleteTests(zoneIdentifier: YPqzrK6GIdentifier, url: YPqzrK6GUrl, region?: YPqzrK6GRegion, options?: AxiosRequestConfig) : Promise<AxiosResponse<YPqzrK6GCountResponse>> {
        return ObservatoryApiFp(this.configuration).speedDeleteTests(zoneIdentifier, url, region, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves quota for all plans, as well as the current zone quota.
     * @summary Get quota and availability
     * @param {YPqzrK6GIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObservatoryApi
     */
    public async speedGetAvailabilities(zoneIdentifier: YPqzrK6GIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<YPqzrK6GAvailabilitiesResponse>> {
        return ObservatoryApiFp(this.configuration).speedGetAvailabilities(zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves the test schedule for a page in a specific region.
     * @summary Get a page test schedule
     * @param {YPqzrK6GIdentifier} zoneIdentifier 
     * @param {YPqzrK6GUrl} url 
     * @param {YPqzrK6GRegion} [region] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObservatoryApi
     */
    public async speedGetScheduledTest(zoneIdentifier: YPqzrK6GIdentifier, url: YPqzrK6GUrl, region?: YPqzrK6GRegion, options?: AxiosRequestConfig) : Promise<AxiosResponse<YPqzrK6GScheduleResponseSingle>> {
        return ObservatoryApiFp(this.configuration).speedGetScheduledTest(zoneIdentifier, url, region, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves the result of a specific test.
     * @summary Get a page test result
     * @param {YPqzrK6GIdentifier} zoneIdentifier 
     * @param {YPqzrK6GUrl} url 
     * @param {string} testIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObservatoryApi
     */
    public async speedGetTest(zoneIdentifier: YPqzrK6GIdentifier, url: YPqzrK6GUrl, testIdentifier: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<YPqzrK6GPageTestResponseSingle>> {
        return ObservatoryApiFp(this.configuration).speedGetTest(zoneIdentifier, url, testIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists the core web vital metrics trend over time for a specific page.
     * @summary List core web vital metrics trend
     * @param {YPqzrK6GIdentifier} zoneIdentifier 
     * @param {YPqzrK6GUrl} url 
     * @param {YPqzrK6GRegion} region 
     * @param {YPqzrK6GDeviceType} deviceType 
     * @param {YPqzrK6GTimestamp} start 
     * @param {string} tz The timezone of the start and end timestamps.
     * @param {string} metrics A comma-separated list of metrics to include in the results.
     * @param {YPqzrK6GTimestamp} [end] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObservatoryApi
     */
    public async speedListPageTrend(zoneIdentifier: YPqzrK6GIdentifier, url: YPqzrK6GUrl, region: YPqzrK6GRegion, deviceType: YPqzrK6GDeviceType, start: YPqzrK6GTimestamp, tz: string, metrics: string, end?: YPqzrK6GTimestamp, options?: AxiosRequestConfig) : Promise<AxiosResponse<YPqzrK6GTrendResponse>> {
        return ObservatoryApiFp(this.configuration).speedListPageTrend(zoneIdentifier, url, region, deviceType, start, tz, metrics, end, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists all webpages which have been tested.
     * @summary List tested webpages
     * @param {YPqzrK6GIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObservatoryApi
     */
    public async speedListPages(zoneIdentifier: YPqzrK6GIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<YPqzrK6GPagesResponseCollection>> {
        return ObservatoryApiFp(this.configuration).speedListPages(zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Test history (list of tests) for a specific webpage.
     * @summary List page test history
     * @param {YPqzrK6GIdentifier} zoneIdentifier 
     * @param {YPqzrK6GUrl} url 
     * @param {number} [page] 
     * @param {number} [perPage] 
     * @param {YPqzrK6GRegion} [region] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObservatoryApi
     */
    public async speedListTestHistory(zoneIdentifier: YPqzrK6GIdentifier, url: YPqzrK6GUrl, page?: number, perPage?: number, region?: YPqzrK6GRegion, options?: AxiosRequestConfig) : Promise<AxiosResponse<YPqzrK6GPageTestResponseCollection>> {
        return ObservatoryApiFp(this.configuration).speedListTestHistory(zoneIdentifier, url, page, perPage, region, options).then((request) => request(this.axios, this.basePath));
    }
}
