/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse4XX296 } from '../models';
import { InlineResponse4XX297 } from '../models';
import { InlineResponse4XX298 } from '../models';
import { InlineResponse4xx2 } from '../models';
import { InlineResponse4xx3 } from '../models';
import { InlineResponse4xx4 } from '../models';
import { Model6KaSmMdRApiResponseSingleId } from '../models';
import { Model6KaSmMdRCreatePayload } from '../models';
import { Model6KaSmMdRResponseCollection } from '../models';
import { Model6KaSmMdRResponseCreate } from '../models';
import { Model6KaSmMdRResponseSingle } from '../models';
import { Model6KaSmMdRResponseSingleSegment } from '../models';
import { Model6KaSmMdRResponseSingleValue } from '../models';
import { Model6KaSmMdRSchemasIdentifier } from '../models';
import { Model6KaSmMdRSchemasToken } from '../models';
/**
 * UserAPITokensApi - axios parameter creator
 * @export
 */
export const UserAPITokensApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new access token.
         * @summary Create Token
         * @param {Model6KaSmMdRCreatePayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userApiTokensCreateToken: async (body: Model6KaSmMdRCreatePayload, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling userApiTokensCreateToken.');
            }
            const localVarPath = `/user/tokens`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Destroy a token.
         * @summary Delete Token
         * @param {Model6KaSmMdRSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userApiTokensDeleteToken: async (identifier: Model6KaSmMdRSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling userApiTokensDeleteToken.');
            }
            const localVarPath = `/user/tokens/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List all access tokens you created.
         * @summary List Tokens
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {string} [direction] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userApiTokensListTokens: async (page?: number, perPage?: number, direction?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/tokens`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Roll the token secret.
         * @summary Roll Token
         * @param {any} body 
         * @param {Model6KaSmMdRSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userApiTokensRollToken: async (body: any, identifier: Model6KaSmMdRSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling userApiTokensRollToken.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling userApiTokensRollToken.');
            }
            const localVarPath = `/user/tokens/{identifier}/value`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about a specific token.
         * @summary Token Details
         * @param {Model6KaSmMdRSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userApiTokensTokenDetails: async (identifier: Model6KaSmMdRSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling userApiTokensTokenDetails.');
            }
            const localVarPath = `/user/tokens/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing token.
         * @summary Update Token
         * @param {Model6KaSmMdRSchemasToken} body 
         * @param {Model6KaSmMdRSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userApiTokensUpdateToken: async (body: Model6KaSmMdRSchemasToken, identifier: Model6KaSmMdRSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling userApiTokensUpdateToken.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling userApiTokensUpdateToken.');
            }
            const localVarPath = `/user/tokens/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Test whether a token works.
         * @summary Verify Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userApiTokensVerifyToken: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/tokens/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserAPITokensApi - functional programming interface
 * @export
 */
export const UserAPITokensApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create a new access token.
         * @summary Create Token
         * @param {Model6KaSmMdRCreatePayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userApiTokensCreateToken(body: Model6KaSmMdRCreatePayload, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model6KaSmMdRResponseCreate>>> {
            const localVarAxiosArgs = await UserAPITokensApiAxiosParamCreator(configuration).userApiTokensCreateToken(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Destroy a token.
         * @summary Delete Token
         * @param {Model6KaSmMdRSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userApiTokensDeleteToken(identifier: Model6KaSmMdRSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model6KaSmMdRApiResponseSingleId>>> {
            const localVarAxiosArgs = await UserAPITokensApiAxiosParamCreator(configuration).userApiTokensDeleteToken(identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List all access tokens you created.
         * @summary List Tokens
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {string} [direction] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userApiTokensListTokens(page?: number, perPage?: number, direction?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model6KaSmMdRResponseCollection>>> {
            const localVarAxiosArgs = await UserAPITokensApiAxiosParamCreator(configuration).userApiTokensListTokens(page, perPage, direction, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Roll the token secret.
         * @summary Roll Token
         * @param {any} body 
         * @param {Model6KaSmMdRSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userApiTokensRollToken(body: any, identifier: Model6KaSmMdRSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model6KaSmMdRResponseSingleValue>>> {
            const localVarAxiosArgs = await UserAPITokensApiAxiosParamCreator(configuration).userApiTokensRollToken(body, identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get information about a specific token.
         * @summary Token Details
         * @param {Model6KaSmMdRSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userApiTokensTokenDetails(identifier: Model6KaSmMdRSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model6KaSmMdRResponseSingle>>> {
            const localVarAxiosArgs = await UserAPITokensApiAxiosParamCreator(configuration).userApiTokensTokenDetails(identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update an existing token.
         * @summary Update Token
         * @param {Model6KaSmMdRSchemasToken} body 
         * @param {Model6KaSmMdRSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userApiTokensUpdateToken(body: Model6KaSmMdRSchemasToken, identifier: Model6KaSmMdRSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model6KaSmMdRResponseSingle>>> {
            const localVarAxiosArgs = await UserAPITokensApiAxiosParamCreator(configuration).userApiTokensUpdateToken(body, identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Test whether a token works.
         * @summary Verify Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userApiTokensVerifyToken(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model6KaSmMdRResponseSingleSegment>>> {
            const localVarAxiosArgs = await UserAPITokensApiAxiosParamCreator(configuration).userApiTokensVerifyToken(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UserAPITokensApi - factory interface
 * @export
 */
export const UserAPITokensApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create a new access token.
         * @summary Create Token
         * @param {Model6KaSmMdRCreatePayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userApiTokensCreateToken(body: Model6KaSmMdRCreatePayload, options?: AxiosRequestConfig): Promise<AxiosResponse<Model6KaSmMdRResponseCreate>> {
            return UserAPITokensApiFp(configuration).userApiTokensCreateToken(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Destroy a token.
         * @summary Delete Token
         * @param {Model6KaSmMdRSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userApiTokensDeleteToken(identifier: Model6KaSmMdRSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model6KaSmMdRApiResponseSingleId>> {
            return UserAPITokensApiFp(configuration).userApiTokensDeleteToken(identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * List all access tokens you created.
         * @summary List Tokens
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {string} [direction] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userApiTokensListTokens(page?: number, perPage?: number, direction?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Model6KaSmMdRResponseCollection>> {
            return UserAPITokensApiFp(configuration).userApiTokensListTokens(page, perPage, direction, options).then((request) => request(axios, basePath));
        },
        /**
         * Roll the token secret.
         * @summary Roll Token
         * @param {any} body 
         * @param {Model6KaSmMdRSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userApiTokensRollToken(body: any, identifier: Model6KaSmMdRSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model6KaSmMdRResponseSingleValue>> {
            return UserAPITokensApiFp(configuration).userApiTokensRollToken(body, identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about a specific token.
         * @summary Token Details
         * @param {Model6KaSmMdRSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userApiTokensTokenDetails(identifier: Model6KaSmMdRSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model6KaSmMdRResponseSingle>> {
            return UserAPITokensApiFp(configuration).userApiTokensTokenDetails(identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing token.
         * @summary Update Token
         * @param {Model6KaSmMdRSchemasToken} body 
         * @param {Model6KaSmMdRSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userApiTokensUpdateToken(body: Model6KaSmMdRSchemasToken, identifier: Model6KaSmMdRSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model6KaSmMdRResponseSingle>> {
            return UserAPITokensApiFp(configuration).userApiTokensUpdateToken(body, identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Test whether a token works.
         * @summary Verify Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userApiTokensVerifyToken(options?: AxiosRequestConfig): Promise<AxiosResponse<Model6KaSmMdRResponseSingleSegment>> {
            return UserAPITokensApiFp(configuration).userApiTokensVerifyToken(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserAPITokensApi - object-oriented interface
 * @export
 * @class UserAPITokensApi
 * @extends {BaseAPI}
 */
export class UserAPITokensApi extends BaseAPI {
    /**
     * Create a new access token.
     * @summary Create Token
     * @param {Model6KaSmMdRCreatePayload} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAPITokensApi
     */
    public async userApiTokensCreateToken(body: Model6KaSmMdRCreatePayload, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model6KaSmMdRResponseCreate>> {
        return UserAPITokensApiFp(this.configuration).userApiTokensCreateToken(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Destroy a token.
     * @summary Delete Token
     * @param {Model6KaSmMdRSchemasIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAPITokensApi
     */
    public async userApiTokensDeleteToken(identifier: Model6KaSmMdRSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model6KaSmMdRApiResponseSingleId>> {
        return UserAPITokensApiFp(this.configuration).userApiTokensDeleteToken(identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List all access tokens you created.
     * @summary List Tokens
     * @param {number} [page] 
     * @param {number} [perPage] 
     * @param {string} [direction] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAPITokensApi
     */
    public async userApiTokensListTokens(page?: number, perPage?: number, direction?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model6KaSmMdRResponseCollection>> {
        return UserAPITokensApiFp(this.configuration).userApiTokensListTokens(page, perPage, direction, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Roll the token secret.
     * @summary Roll Token
     * @param {any} body 
     * @param {Model6KaSmMdRSchemasIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAPITokensApi
     */
    public async userApiTokensRollToken(body: any, identifier: Model6KaSmMdRSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model6KaSmMdRResponseSingleValue>> {
        return UserAPITokensApiFp(this.configuration).userApiTokensRollToken(body, identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get information about a specific token.
     * @summary Token Details
     * @param {Model6KaSmMdRSchemasIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAPITokensApi
     */
    public async userApiTokensTokenDetails(identifier: Model6KaSmMdRSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model6KaSmMdRResponseSingle>> {
        return UserAPITokensApiFp(this.configuration).userApiTokensTokenDetails(identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update an existing token.
     * @summary Update Token
     * @param {Model6KaSmMdRSchemasToken} body 
     * @param {Model6KaSmMdRSchemasIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAPITokensApi
     */
    public async userApiTokensUpdateToken(body: Model6KaSmMdRSchemasToken, identifier: Model6KaSmMdRSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model6KaSmMdRResponseSingle>> {
        return UserAPITokensApiFp(this.configuration).userApiTokensUpdateToken(body, identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Test whether a token works.
     * @summary Verify Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAPITokensApi
     */
    public async userApiTokensVerifyToken(options?: AxiosRequestConfig) : Promise<AxiosResponse<Model6KaSmMdRResponseSingleSegment>> {
        return UserAPITokensApiFp(this.configuration).userApiTokensVerifyToken(options).then((request) => request(this.axios, this.basePath));
    }
}
