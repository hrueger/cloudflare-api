/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse200154 } from '../models';
import { InlineResponse200155 } from '../models';
import { InlineResponse400 } from '../models';
/**
 * RadarTrafficAnomaliesApi - axios parameter creator
 * @export
 */
export const RadarTrafficAnomaliesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Internet traffic anomalies are signals that might point to an outage,         These alerts are automatically detected by Radar and then manually verified by our team.         This endpoint returns the latest alerts.         
         * @summary Get latest Internet traffic anomalies.
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [dateRange] 
         * @param {Date} [dateStart] 
         * @param {Date} [dateEnd] 
         * @param {string} [status] 
         * @param {number} [asn] 
         * @param {string} [location] 
         * @param {string} [format] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        radarGetTrafficAnomalies: async (limit?: number, offset?: number, dateRange?: string, dateStart?: Date, dateEnd?: Date, status?: string, asn?: number, location?: string, format?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/radar/traffic_anomalies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (dateRange !== undefined) {
                localVarQueryParameter['dateRange'] = dateRange;
            }

            if (dateStart !== undefined) {
                localVarQueryParameter['dateStart'] = (dateStart as any instanceof Date) ?
                    (dateStart as any).toISOString() :
                    dateStart;
            }

            if (dateEnd !== undefined) {
                localVarQueryParameter['dateEnd'] = (dateEnd as any instanceof Date) ?
                    (dateEnd as any).toISOString() :
                    dateEnd;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (asn !== undefined) {
                localVarQueryParameter['asn'] = asn;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Internet traffic anomalies are signals that might point to an outage,         These alerts are automatically detected by Radar and then manually verified by our team.         This endpoint returns the sum of alerts grouped by location.         
         * @summary Get top locations by total traffic anomalies generated.
         * @param {number} [limit] 
         * @param {string} [dateRange] 
         * @param {Date} [dateStart] 
         * @param {Date} [dateEnd] 
         * @param {string} [status] 
         * @param {string} [format] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        radarGetTrafficAnomaliesTop: async (limit?: number, dateRange?: string, dateStart?: Date, dateEnd?: Date, status?: string, format?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/radar/traffic_anomalies/locations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (dateRange !== undefined) {
                localVarQueryParameter['dateRange'] = dateRange;
            }

            if (dateStart !== undefined) {
                localVarQueryParameter['dateStart'] = (dateStart as any instanceof Date) ?
                    (dateStart as any).toISOString() :
                    dateStart;
            }

            if (dateEnd !== undefined) {
                localVarQueryParameter['dateEnd'] = (dateEnd as any instanceof Date) ?
                    (dateEnd as any).toISOString() :
                    dateEnd;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RadarTrafficAnomaliesApi - functional programming interface
 * @export
 */
export const RadarTrafficAnomaliesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Internet traffic anomalies are signals that might point to an outage,         These alerts are automatically detected by Radar and then manually verified by our team.         This endpoint returns the latest alerts.         
         * @summary Get latest Internet traffic anomalies.
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [dateRange] 
         * @param {Date} [dateStart] 
         * @param {Date} [dateEnd] 
         * @param {string} [status] 
         * @param {number} [asn] 
         * @param {string} [location] 
         * @param {string} [format] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async radarGetTrafficAnomalies(limit?: number, offset?: number, dateRange?: string, dateStart?: Date, dateEnd?: Date, status?: string, asn?: number, location?: string, format?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200154>>> {
            const localVarAxiosArgs = await RadarTrafficAnomaliesApiAxiosParamCreator(configuration).radarGetTrafficAnomalies(limit, offset, dateRange, dateStart, dateEnd, status, asn, location, format, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Internet traffic anomalies are signals that might point to an outage,         These alerts are automatically detected by Radar and then manually verified by our team.         This endpoint returns the sum of alerts grouped by location.         
         * @summary Get top locations by total traffic anomalies generated.
         * @param {number} [limit] 
         * @param {string} [dateRange] 
         * @param {Date} [dateStart] 
         * @param {Date} [dateEnd] 
         * @param {string} [status] 
         * @param {string} [format] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async radarGetTrafficAnomaliesTop(limit?: number, dateRange?: string, dateStart?: Date, dateEnd?: Date, status?: string, format?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200155>>> {
            const localVarAxiosArgs = await RadarTrafficAnomaliesApiAxiosParamCreator(configuration).radarGetTrafficAnomaliesTop(limit, dateRange, dateStart, dateEnd, status, format, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * RadarTrafficAnomaliesApi - factory interface
 * @export
 */
export const RadarTrafficAnomaliesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Internet traffic anomalies are signals that might point to an outage,         These alerts are automatically detected by Radar and then manually verified by our team.         This endpoint returns the latest alerts.         
         * @summary Get latest Internet traffic anomalies.
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [dateRange] 
         * @param {Date} [dateStart] 
         * @param {Date} [dateEnd] 
         * @param {string} [status] 
         * @param {number} [asn] 
         * @param {string} [location] 
         * @param {string} [format] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async radarGetTrafficAnomalies(limit?: number, offset?: number, dateRange?: string, dateStart?: Date, dateEnd?: Date, status?: string, asn?: number, location?: string, format?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200154>> {
            return RadarTrafficAnomaliesApiFp(configuration).radarGetTrafficAnomalies(limit, offset, dateRange, dateStart, dateEnd, status, asn, location, format, options).then((request) => request(axios, basePath));
        },
        /**
         * Internet traffic anomalies are signals that might point to an outage,         These alerts are automatically detected by Radar and then manually verified by our team.         This endpoint returns the sum of alerts grouped by location.         
         * @summary Get top locations by total traffic anomalies generated.
         * @param {number} [limit] 
         * @param {string} [dateRange] 
         * @param {Date} [dateStart] 
         * @param {Date} [dateEnd] 
         * @param {string} [status] 
         * @param {string} [format] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async radarGetTrafficAnomaliesTop(limit?: number, dateRange?: string, dateStart?: Date, dateEnd?: Date, status?: string, format?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200155>> {
            return RadarTrafficAnomaliesApiFp(configuration).radarGetTrafficAnomaliesTop(limit, dateRange, dateStart, dateEnd, status, format, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RadarTrafficAnomaliesApi - object-oriented interface
 * @export
 * @class RadarTrafficAnomaliesApi
 * @extends {BaseAPI}
 */
export class RadarTrafficAnomaliesApi extends BaseAPI {
    /**
     * Internet traffic anomalies are signals that might point to an outage,         These alerts are automatically detected by Radar and then manually verified by our team.         This endpoint returns the latest alerts.         
     * @summary Get latest Internet traffic anomalies.
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {string} [dateRange] 
     * @param {Date} [dateStart] 
     * @param {Date} [dateEnd] 
     * @param {string} [status] 
     * @param {number} [asn] 
     * @param {string} [location] 
     * @param {string} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RadarTrafficAnomaliesApi
     */
    public async radarGetTrafficAnomalies(limit?: number, offset?: number, dateRange?: string, dateStart?: Date, dateEnd?: Date, status?: string, asn?: number, location?: string, format?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200154>> {
        return RadarTrafficAnomaliesApiFp(this.configuration).radarGetTrafficAnomalies(limit, offset, dateRange, dateStart, dateEnd, status, asn, location, format, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Internet traffic anomalies are signals that might point to an outage,         These alerts are automatically detected by Radar and then manually verified by our team.         This endpoint returns the sum of alerts grouped by location.         
     * @summary Get top locations by total traffic anomalies generated.
     * @param {number} [limit] 
     * @param {string} [dateRange] 
     * @param {Date} [dateStart] 
     * @param {Date} [dateEnd] 
     * @param {string} [status] 
     * @param {string} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RadarTrafficAnomaliesApi
     */
    public async radarGetTrafficAnomaliesTop(limit?: number, dateRange?: string, dateStart?: Date, dateEnd?: Date, status?: string, format?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200155>> {
        return RadarTrafficAnomaliesApiFp(this.configuration).radarGetTrafficAnomaliesTop(limit, dateRange, dateStart, dateEnd, status, format, options).then((request) => request(this.axios, this.basePath));
    }
}
