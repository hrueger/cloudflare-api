/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AddressMapsAddressMapIdentifierBody } from '../models';
import { AddressingAddressMapsBody } from '../models';
import { InlineResponse4XX157 } from '../models';
import { InlineResponse4XX158 } from '../models';
import { InlineResponse4XX159 } from '../models';
import { InlineResponse4XX160 } from '../models';
import { VmrjA5DJApiResponseCollection } from '../models';
import { VmrjA5DJComponentsSchemasResponseCollection } from '../models';
import { VmrjA5DJComponentsSchemasSingleResponse } from '../models';
import { VmrjA5DJFullResponse } from '../models';
import { VmrjA5DJIdentifier } from '../models';
import { VmrjA5DJIpAddress } from '../models';
/**
 * IPAddressManagementAddressMapsApi - axios parameter creator
 * @export
 */
export const IPAddressManagementAddressMapsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a zone as a member of a particular address map.
         * @summary Add a zone membership to an Address Map
         * @param {VmrjA5DJIdentifier} zoneIdentifier 
         * @param {VmrjA5DJIdentifier} addressMapIdentifier 
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipAddressManagementAddressMapsAddAZoneMembershipToAnAddressMap: async (zoneIdentifier: VmrjA5DJIdentifier, addressMapIdentifier: VmrjA5DJIdentifier, accountIdentifier: VmrjA5DJIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling ipAddressManagementAddressMapsAddAZoneMembershipToAnAddressMap.');
            }
            // verify required parameter 'addressMapIdentifier' is not null or undefined
            if (addressMapIdentifier === null || addressMapIdentifier === undefined) {
                throw new RequiredError('addressMapIdentifier','Required parameter addressMapIdentifier was null or undefined when calling ipAddressManagementAddressMapsAddAZoneMembershipToAnAddressMap.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling ipAddressManagementAddressMapsAddAZoneMembershipToAnAddressMap.');
            }
            const localVarPath = `/accounts/{account_identifier}/addressing/address_maps/{address_map_identifier}/zones/{zone_identifier}`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)))
                .replace(`{${"address_map_identifier"}}`, encodeURIComponent(String(addressMapIdentifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Add an account as a member of a particular address map.
         * @summary Add an account membership to an Address Map
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {VmrjA5DJIdentifier} addressMapIdentifier 
         * @param {VmrjA5DJIdentifier} accountIdentifier1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipAddressManagementAddressMapsAddAnAccountMembershipToAnAddressMap: async (accountIdentifier: VmrjA5DJIdentifier, addressMapIdentifier: VmrjA5DJIdentifier, accountIdentifier1: VmrjA5DJIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling ipAddressManagementAddressMapsAddAnAccountMembershipToAnAddressMap.');
            }
            // verify required parameter 'addressMapIdentifier' is not null or undefined
            if (addressMapIdentifier === null || addressMapIdentifier === undefined) {
                throw new RequiredError('addressMapIdentifier','Required parameter addressMapIdentifier was null or undefined when calling ipAddressManagementAddressMapsAddAnAccountMembershipToAnAddressMap.');
            }
            // verify required parameter 'accountIdentifier1' is not null or undefined
            if (accountIdentifier1 === null || accountIdentifier1 === undefined) {
                throw new RequiredError('accountIdentifier1','Required parameter accountIdentifier1 was null or undefined when calling ipAddressManagementAddressMapsAddAnAccountMembershipToAnAddressMap.');
            }
            const localVarPath = `/accounts/{account_identifier1}/addressing/address_maps/{address_map_identifier}/accounts/{account_identifier}`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)))
                .replace(`{${"address_map_identifier"}}`, encodeURIComponent(String(addressMapIdentifier)))
                .replace(`{${"account_identifier1"}}`, encodeURIComponent(String(accountIdentifier1)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Add an IP from a prefix owned by the account to a particular address map.
         * @summary Add an IP to an Address Map
         * @param {VmrjA5DJIpAddress} ipAddress 
         * @param {VmrjA5DJIdentifier} addressMapIdentifier 
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipAddressManagementAddressMapsAddAnIpToAnAddressMap: async (ipAddress: VmrjA5DJIpAddress, addressMapIdentifier: VmrjA5DJIdentifier, accountIdentifier: VmrjA5DJIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ipAddress' is not null or undefined
            if (ipAddress === null || ipAddress === undefined) {
                throw new RequiredError('ipAddress','Required parameter ipAddress was null or undefined when calling ipAddressManagementAddressMapsAddAnIpToAnAddressMap.');
            }
            // verify required parameter 'addressMapIdentifier' is not null or undefined
            if (addressMapIdentifier === null || addressMapIdentifier === undefined) {
                throw new RequiredError('addressMapIdentifier','Required parameter addressMapIdentifier was null or undefined when calling ipAddressManagementAddressMapsAddAnIpToAnAddressMap.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling ipAddressManagementAddressMapsAddAnIpToAnAddressMap.');
            }
            const localVarPath = `/accounts/{account_identifier}/addressing/address_maps/{address_map_identifier}/ips/{ip_address}`
                .replace(`{${"ip_address"}}`, encodeURIComponent(String(ipAddress)))
                .replace(`{${"address_map_identifier"}}`, encodeURIComponent(String(addressMapIdentifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Show a particular address map owned by the account.
         * @summary Address Map Details
         * @param {VmrjA5DJIdentifier} addressMapIdentifier 
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipAddressManagementAddressMapsAddressMapDetails: async (addressMapIdentifier: VmrjA5DJIdentifier, accountIdentifier: VmrjA5DJIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addressMapIdentifier' is not null or undefined
            if (addressMapIdentifier === null || addressMapIdentifier === undefined) {
                throw new RequiredError('addressMapIdentifier','Required parameter addressMapIdentifier was null or undefined when calling ipAddressManagementAddressMapsAddressMapDetails.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling ipAddressManagementAddressMapsAddressMapDetails.');
            }
            const localVarPath = `/accounts/{account_identifier}/addressing/address_maps/{address_map_identifier}`
                .replace(`{${"address_map_identifier"}}`, encodeURIComponent(String(addressMapIdentifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new address map under the account.
         * @summary Create Address Map
         * @param {AddressingAddressMapsBody} body 
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipAddressManagementAddressMapsCreateAddressMap: async (body: AddressingAddressMapsBody, accountIdentifier: VmrjA5DJIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling ipAddressManagementAddressMapsCreateAddressMap.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling ipAddressManagementAddressMapsCreateAddressMap.');
            }
            const localVarPath = `/accounts/{account_identifier}/addressing/address_maps`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a particular address map owned by the account. An Address Map must be disabled before it can be deleted.
         * @summary Delete Address Map
         * @param {VmrjA5DJIdentifier} addressMapIdentifier 
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipAddressManagementAddressMapsDeleteAddressMap: async (addressMapIdentifier: VmrjA5DJIdentifier, accountIdentifier: VmrjA5DJIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addressMapIdentifier' is not null or undefined
            if (addressMapIdentifier === null || addressMapIdentifier === undefined) {
                throw new RequiredError('addressMapIdentifier','Required parameter addressMapIdentifier was null or undefined when calling ipAddressManagementAddressMapsDeleteAddressMap.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling ipAddressManagementAddressMapsDeleteAddressMap.');
            }
            const localVarPath = `/accounts/{account_identifier}/addressing/address_maps/{address_map_identifier}`
                .replace(`{${"address_map_identifier"}}`, encodeURIComponent(String(addressMapIdentifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List all address maps owned by the account.
         * @summary List Address Maps
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipAddressManagementAddressMapsListAddressMaps: async (accountIdentifier: VmrjA5DJIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling ipAddressManagementAddressMapsListAddressMaps.');
            }
            const localVarPath = `/accounts/{account_identifier}/addressing/address_maps`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a zone as a member of a particular address map.
         * @summary Remove a zone membership from an Address Map
         * @param {VmrjA5DJIdentifier} zoneIdentifier 
         * @param {VmrjA5DJIdentifier} addressMapIdentifier 
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipAddressManagementAddressMapsRemoveAZoneMembershipFromAnAddressMap: async (zoneIdentifier: VmrjA5DJIdentifier, addressMapIdentifier: VmrjA5DJIdentifier, accountIdentifier: VmrjA5DJIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling ipAddressManagementAddressMapsRemoveAZoneMembershipFromAnAddressMap.');
            }
            // verify required parameter 'addressMapIdentifier' is not null or undefined
            if (addressMapIdentifier === null || addressMapIdentifier === undefined) {
                throw new RequiredError('addressMapIdentifier','Required parameter addressMapIdentifier was null or undefined when calling ipAddressManagementAddressMapsRemoveAZoneMembershipFromAnAddressMap.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling ipAddressManagementAddressMapsRemoveAZoneMembershipFromAnAddressMap.');
            }
            const localVarPath = `/accounts/{account_identifier}/addressing/address_maps/{address_map_identifier}/zones/{zone_identifier}`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)))
                .replace(`{${"address_map_identifier"}}`, encodeURIComponent(String(addressMapIdentifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove an account as a member of a particular address map.
         * @summary Remove an account membership from an Address Map
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {VmrjA5DJIdentifier} addressMapIdentifier 
         * @param {VmrjA5DJIdentifier} accountIdentifier1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipAddressManagementAddressMapsRemoveAnAccountMembershipFromAnAddressMap: async (accountIdentifier: VmrjA5DJIdentifier, addressMapIdentifier: VmrjA5DJIdentifier, accountIdentifier1: VmrjA5DJIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling ipAddressManagementAddressMapsRemoveAnAccountMembershipFromAnAddressMap.');
            }
            // verify required parameter 'addressMapIdentifier' is not null or undefined
            if (addressMapIdentifier === null || addressMapIdentifier === undefined) {
                throw new RequiredError('addressMapIdentifier','Required parameter addressMapIdentifier was null or undefined when calling ipAddressManagementAddressMapsRemoveAnAccountMembershipFromAnAddressMap.');
            }
            // verify required parameter 'accountIdentifier1' is not null or undefined
            if (accountIdentifier1 === null || accountIdentifier1 === undefined) {
                throw new RequiredError('accountIdentifier1','Required parameter accountIdentifier1 was null or undefined when calling ipAddressManagementAddressMapsRemoveAnAccountMembershipFromAnAddressMap.');
            }
            const localVarPath = `/accounts/{account_identifier1}/addressing/address_maps/{address_map_identifier}/accounts/{account_identifier}`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)))
                .replace(`{${"address_map_identifier"}}`, encodeURIComponent(String(addressMapIdentifier)))
                .replace(`{${"account_identifier1"}}`, encodeURIComponent(String(accountIdentifier1)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove an IP from a particular address map.
         * @summary Remove an IP from an Address Map
         * @param {VmrjA5DJIpAddress} ipAddress 
         * @param {VmrjA5DJIdentifier} addressMapIdentifier 
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipAddressManagementAddressMapsRemoveAnIpFromAnAddressMap: async (ipAddress: VmrjA5DJIpAddress, addressMapIdentifier: VmrjA5DJIdentifier, accountIdentifier: VmrjA5DJIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ipAddress' is not null or undefined
            if (ipAddress === null || ipAddress === undefined) {
                throw new RequiredError('ipAddress','Required parameter ipAddress was null or undefined when calling ipAddressManagementAddressMapsRemoveAnIpFromAnAddressMap.');
            }
            // verify required parameter 'addressMapIdentifier' is not null or undefined
            if (addressMapIdentifier === null || addressMapIdentifier === undefined) {
                throw new RequiredError('addressMapIdentifier','Required parameter addressMapIdentifier was null or undefined when calling ipAddressManagementAddressMapsRemoveAnIpFromAnAddressMap.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling ipAddressManagementAddressMapsRemoveAnIpFromAnAddressMap.');
            }
            const localVarPath = `/accounts/{account_identifier}/addressing/address_maps/{address_map_identifier}/ips/{ip_address}`
                .replace(`{${"ip_address"}}`, encodeURIComponent(String(ipAddress)))
                .replace(`{${"address_map_identifier"}}`, encodeURIComponent(String(addressMapIdentifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify properties of an address map owned by the account.
         * @summary Update Address Map
         * @param {AddressMapsAddressMapIdentifierBody} body 
         * @param {VmrjA5DJIdentifier} addressMapIdentifier 
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipAddressManagementAddressMapsUpdateAddressMap: async (body: AddressMapsAddressMapIdentifierBody, addressMapIdentifier: VmrjA5DJIdentifier, accountIdentifier: VmrjA5DJIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling ipAddressManagementAddressMapsUpdateAddressMap.');
            }
            // verify required parameter 'addressMapIdentifier' is not null or undefined
            if (addressMapIdentifier === null || addressMapIdentifier === undefined) {
                throw new RequiredError('addressMapIdentifier','Required parameter addressMapIdentifier was null or undefined when calling ipAddressManagementAddressMapsUpdateAddressMap.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling ipAddressManagementAddressMapsUpdateAddressMap.');
            }
            const localVarPath = `/accounts/{account_identifier}/addressing/address_maps/{address_map_identifier}`
                .replace(`{${"address_map_identifier"}}`, encodeURIComponent(String(addressMapIdentifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IPAddressManagementAddressMapsApi - functional programming interface
 * @export
 */
export const IPAddressManagementAddressMapsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Add a zone as a member of a particular address map.
         * @summary Add a zone membership to an Address Map
         * @param {VmrjA5DJIdentifier} zoneIdentifier 
         * @param {VmrjA5DJIdentifier} addressMapIdentifier 
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAddressManagementAddressMapsAddAZoneMembershipToAnAddressMap(zoneIdentifier: VmrjA5DJIdentifier, addressMapIdentifier: VmrjA5DJIdentifier, accountIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<VmrjA5DJApiResponseCollection>>> {
            const localVarAxiosArgs = await IPAddressManagementAddressMapsApiAxiosParamCreator(configuration).ipAddressManagementAddressMapsAddAZoneMembershipToAnAddressMap(zoneIdentifier, addressMapIdentifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Add an account as a member of a particular address map.
         * @summary Add an account membership to an Address Map
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {VmrjA5DJIdentifier} addressMapIdentifier 
         * @param {VmrjA5DJIdentifier} accountIdentifier1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAddressManagementAddressMapsAddAnAccountMembershipToAnAddressMap(accountIdentifier: VmrjA5DJIdentifier, addressMapIdentifier: VmrjA5DJIdentifier, accountIdentifier1: VmrjA5DJIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<VmrjA5DJApiResponseCollection>>> {
            const localVarAxiosArgs = await IPAddressManagementAddressMapsApiAxiosParamCreator(configuration).ipAddressManagementAddressMapsAddAnAccountMembershipToAnAddressMap(accountIdentifier, addressMapIdentifier, accountIdentifier1, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Add an IP from a prefix owned by the account to a particular address map.
         * @summary Add an IP to an Address Map
         * @param {VmrjA5DJIpAddress} ipAddress 
         * @param {VmrjA5DJIdentifier} addressMapIdentifier 
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAddressManagementAddressMapsAddAnIpToAnAddressMap(ipAddress: VmrjA5DJIpAddress, addressMapIdentifier: VmrjA5DJIdentifier, accountIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<VmrjA5DJApiResponseCollection>>> {
            const localVarAxiosArgs = await IPAddressManagementAddressMapsApiAxiosParamCreator(configuration).ipAddressManagementAddressMapsAddAnIpToAnAddressMap(ipAddress, addressMapIdentifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Show a particular address map owned by the account.
         * @summary Address Map Details
         * @param {VmrjA5DJIdentifier} addressMapIdentifier 
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAddressManagementAddressMapsAddressMapDetails(addressMapIdentifier: VmrjA5DJIdentifier, accountIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<VmrjA5DJFullResponse>>> {
            const localVarAxiosArgs = await IPAddressManagementAddressMapsApiAxiosParamCreator(configuration).ipAddressManagementAddressMapsAddressMapDetails(addressMapIdentifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new address map under the account.
         * @summary Create Address Map
         * @param {AddressingAddressMapsBody} body 
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAddressManagementAddressMapsCreateAddressMap(body: AddressingAddressMapsBody, accountIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<VmrjA5DJFullResponse>>> {
            const localVarAxiosArgs = await IPAddressManagementAddressMapsApiAxiosParamCreator(configuration).ipAddressManagementAddressMapsCreateAddressMap(body, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a particular address map owned by the account. An Address Map must be disabled before it can be deleted.
         * @summary Delete Address Map
         * @param {VmrjA5DJIdentifier} addressMapIdentifier 
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAddressManagementAddressMapsDeleteAddressMap(addressMapIdentifier: VmrjA5DJIdentifier, accountIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<VmrjA5DJApiResponseCollection>>> {
            const localVarAxiosArgs = await IPAddressManagementAddressMapsApiAxiosParamCreator(configuration).ipAddressManagementAddressMapsDeleteAddressMap(addressMapIdentifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List all address maps owned by the account.
         * @summary List Address Maps
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAddressManagementAddressMapsListAddressMaps(accountIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<VmrjA5DJComponentsSchemasResponseCollection>>> {
            const localVarAxiosArgs = await IPAddressManagementAddressMapsApiAxiosParamCreator(configuration).ipAddressManagementAddressMapsListAddressMaps(accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Remove a zone as a member of a particular address map.
         * @summary Remove a zone membership from an Address Map
         * @param {VmrjA5DJIdentifier} zoneIdentifier 
         * @param {VmrjA5DJIdentifier} addressMapIdentifier 
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAddressManagementAddressMapsRemoveAZoneMembershipFromAnAddressMap(zoneIdentifier: VmrjA5DJIdentifier, addressMapIdentifier: VmrjA5DJIdentifier, accountIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<VmrjA5DJApiResponseCollection>>> {
            const localVarAxiosArgs = await IPAddressManagementAddressMapsApiAxiosParamCreator(configuration).ipAddressManagementAddressMapsRemoveAZoneMembershipFromAnAddressMap(zoneIdentifier, addressMapIdentifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Remove an account as a member of a particular address map.
         * @summary Remove an account membership from an Address Map
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {VmrjA5DJIdentifier} addressMapIdentifier 
         * @param {VmrjA5DJIdentifier} accountIdentifier1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAddressManagementAddressMapsRemoveAnAccountMembershipFromAnAddressMap(accountIdentifier: VmrjA5DJIdentifier, addressMapIdentifier: VmrjA5DJIdentifier, accountIdentifier1: VmrjA5DJIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<VmrjA5DJApiResponseCollection>>> {
            const localVarAxiosArgs = await IPAddressManagementAddressMapsApiAxiosParamCreator(configuration).ipAddressManagementAddressMapsRemoveAnAccountMembershipFromAnAddressMap(accountIdentifier, addressMapIdentifier, accountIdentifier1, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Remove an IP from a particular address map.
         * @summary Remove an IP from an Address Map
         * @param {VmrjA5DJIpAddress} ipAddress 
         * @param {VmrjA5DJIdentifier} addressMapIdentifier 
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAddressManagementAddressMapsRemoveAnIpFromAnAddressMap(ipAddress: VmrjA5DJIpAddress, addressMapIdentifier: VmrjA5DJIdentifier, accountIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<VmrjA5DJApiResponseCollection>>> {
            const localVarAxiosArgs = await IPAddressManagementAddressMapsApiAxiosParamCreator(configuration).ipAddressManagementAddressMapsRemoveAnIpFromAnAddressMap(ipAddress, addressMapIdentifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Modify properties of an address map owned by the account.
         * @summary Update Address Map
         * @param {AddressMapsAddressMapIdentifierBody} body 
         * @param {VmrjA5DJIdentifier} addressMapIdentifier 
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAddressManagementAddressMapsUpdateAddressMap(body: AddressMapsAddressMapIdentifierBody, addressMapIdentifier: VmrjA5DJIdentifier, accountIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<VmrjA5DJComponentsSchemasSingleResponse>>> {
            const localVarAxiosArgs = await IPAddressManagementAddressMapsApiAxiosParamCreator(configuration).ipAddressManagementAddressMapsUpdateAddressMap(body, addressMapIdentifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * IPAddressManagementAddressMapsApi - factory interface
 * @export
 */
export const IPAddressManagementAddressMapsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Add a zone as a member of a particular address map.
         * @summary Add a zone membership to an Address Map
         * @param {VmrjA5DJIdentifier} zoneIdentifier 
         * @param {VmrjA5DJIdentifier} addressMapIdentifier 
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAddressManagementAddressMapsAddAZoneMembershipToAnAddressMap(zoneIdentifier: VmrjA5DJIdentifier, addressMapIdentifier: VmrjA5DJIdentifier, accountIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<VmrjA5DJApiResponseCollection>> {
            return IPAddressManagementAddressMapsApiFp(configuration).ipAddressManagementAddressMapsAddAZoneMembershipToAnAddressMap(zoneIdentifier, addressMapIdentifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Add an account as a member of a particular address map.
         * @summary Add an account membership to an Address Map
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {VmrjA5DJIdentifier} addressMapIdentifier 
         * @param {VmrjA5DJIdentifier} accountIdentifier1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAddressManagementAddressMapsAddAnAccountMembershipToAnAddressMap(accountIdentifier: VmrjA5DJIdentifier, addressMapIdentifier: VmrjA5DJIdentifier, accountIdentifier1: VmrjA5DJIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<VmrjA5DJApiResponseCollection>> {
            return IPAddressManagementAddressMapsApiFp(configuration).ipAddressManagementAddressMapsAddAnAccountMembershipToAnAddressMap(accountIdentifier, addressMapIdentifier, accountIdentifier1, options).then((request) => request(axios, basePath));
        },
        /**
         * Add an IP from a prefix owned by the account to a particular address map.
         * @summary Add an IP to an Address Map
         * @param {VmrjA5DJIpAddress} ipAddress 
         * @param {VmrjA5DJIdentifier} addressMapIdentifier 
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAddressManagementAddressMapsAddAnIpToAnAddressMap(ipAddress: VmrjA5DJIpAddress, addressMapIdentifier: VmrjA5DJIdentifier, accountIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<VmrjA5DJApiResponseCollection>> {
            return IPAddressManagementAddressMapsApiFp(configuration).ipAddressManagementAddressMapsAddAnIpToAnAddressMap(ipAddress, addressMapIdentifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Show a particular address map owned by the account.
         * @summary Address Map Details
         * @param {VmrjA5DJIdentifier} addressMapIdentifier 
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAddressManagementAddressMapsAddressMapDetails(addressMapIdentifier: VmrjA5DJIdentifier, accountIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<VmrjA5DJFullResponse>> {
            return IPAddressManagementAddressMapsApiFp(configuration).ipAddressManagementAddressMapsAddressMapDetails(addressMapIdentifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new address map under the account.
         * @summary Create Address Map
         * @param {AddressingAddressMapsBody} body 
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAddressManagementAddressMapsCreateAddressMap(body: AddressingAddressMapsBody, accountIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<VmrjA5DJFullResponse>> {
            return IPAddressManagementAddressMapsApiFp(configuration).ipAddressManagementAddressMapsCreateAddressMap(body, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a particular address map owned by the account. An Address Map must be disabled before it can be deleted.
         * @summary Delete Address Map
         * @param {VmrjA5DJIdentifier} addressMapIdentifier 
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAddressManagementAddressMapsDeleteAddressMap(addressMapIdentifier: VmrjA5DJIdentifier, accountIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<VmrjA5DJApiResponseCollection>> {
            return IPAddressManagementAddressMapsApiFp(configuration).ipAddressManagementAddressMapsDeleteAddressMap(addressMapIdentifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * List all address maps owned by the account.
         * @summary List Address Maps
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAddressManagementAddressMapsListAddressMaps(accountIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<VmrjA5DJComponentsSchemasResponseCollection>> {
            return IPAddressManagementAddressMapsApiFp(configuration).ipAddressManagementAddressMapsListAddressMaps(accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a zone as a member of a particular address map.
         * @summary Remove a zone membership from an Address Map
         * @param {VmrjA5DJIdentifier} zoneIdentifier 
         * @param {VmrjA5DJIdentifier} addressMapIdentifier 
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAddressManagementAddressMapsRemoveAZoneMembershipFromAnAddressMap(zoneIdentifier: VmrjA5DJIdentifier, addressMapIdentifier: VmrjA5DJIdentifier, accountIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<VmrjA5DJApiResponseCollection>> {
            return IPAddressManagementAddressMapsApiFp(configuration).ipAddressManagementAddressMapsRemoveAZoneMembershipFromAnAddressMap(zoneIdentifier, addressMapIdentifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove an account as a member of a particular address map.
         * @summary Remove an account membership from an Address Map
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {VmrjA5DJIdentifier} addressMapIdentifier 
         * @param {VmrjA5DJIdentifier} accountIdentifier1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAddressManagementAddressMapsRemoveAnAccountMembershipFromAnAddressMap(accountIdentifier: VmrjA5DJIdentifier, addressMapIdentifier: VmrjA5DJIdentifier, accountIdentifier1: VmrjA5DJIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<VmrjA5DJApiResponseCollection>> {
            return IPAddressManagementAddressMapsApiFp(configuration).ipAddressManagementAddressMapsRemoveAnAccountMembershipFromAnAddressMap(accountIdentifier, addressMapIdentifier, accountIdentifier1, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove an IP from a particular address map.
         * @summary Remove an IP from an Address Map
         * @param {VmrjA5DJIpAddress} ipAddress 
         * @param {VmrjA5DJIdentifier} addressMapIdentifier 
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAddressManagementAddressMapsRemoveAnIpFromAnAddressMap(ipAddress: VmrjA5DJIpAddress, addressMapIdentifier: VmrjA5DJIdentifier, accountIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<VmrjA5DJApiResponseCollection>> {
            return IPAddressManagementAddressMapsApiFp(configuration).ipAddressManagementAddressMapsRemoveAnIpFromAnAddressMap(ipAddress, addressMapIdentifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify properties of an address map owned by the account.
         * @summary Update Address Map
         * @param {AddressMapsAddressMapIdentifierBody} body 
         * @param {VmrjA5DJIdentifier} addressMapIdentifier 
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAddressManagementAddressMapsUpdateAddressMap(body: AddressMapsAddressMapIdentifierBody, addressMapIdentifier: VmrjA5DJIdentifier, accountIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<VmrjA5DJComponentsSchemasSingleResponse>> {
            return IPAddressManagementAddressMapsApiFp(configuration).ipAddressManagementAddressMapsUpdateAddressMap(body, addressMapIdentifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IPAddressManagementAddressMapsApi - object-oriented interface
 * @export
 * @class IPAddressManagementAddressMapsApi
 * @extends {BaseAPI}
 */
export class IPAddressManagementAddressMapsApi extends BaseAPI {
    /**
     * Add a zone as a member of a particular address map.
     * @summary Add a zone membership to an Address Map
     * @param {VmrjA5DJIdentifier} zoneIdentifier 
     * @param {VmrjA5DJIdentifier} addressMapIdentifier 
     * @param {VmrjA5DJIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IPAddressManagementAddressMapsApi
     */
    public async ipAddressManagementAddressMapsAddAZoneMembershipToAnAddressMap(zoneIdentifier: VmrjA5DJIdentifier, addressMapIdentifier: VmrjA5DJIdentifier, accountIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<VmrjA5DJApiResponseCollection>> {
        return IPAddressManagementAddressMapsApiFp(this.configuration).ipAddressManagementAddressMapsAddAZoneMembershipToAnAddressMap(zoneIdentifier, addressMapIdentifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add an account as a member of a particular address map.
     * @summary Add an account membership to an Address Map
     * @param {VmrjA5DJIdentifier} accountIdentifier 
     * @param {VmrjA5DJIdentifier} addressMapIdentifier 
     * @param {VmrjA5DJIdentifier} accountIdentifier1 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IPAddressManagementAddressMapsApi
     */
    public async ipAddressManagementAddressMapsAddAnAccountMembershipToAnAddressMap(accountIdentifier: VmrjA5DJIdentifier, addressMapIdentifier: VmrjA5DJIdentifier, accountIdentifier1: VmrjA5DJIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<VmrjA5DJApiResponseCollection>> {
        return IPAddressManagementAddressMapsApiFp(this.configuration).ipAddressManagementAddressMapsAddAnAccountMembershipToAnAddressMap(accountIdentifier, addressMapIdentifier, accountIdentifier1, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add an IP from a prefix owned by the account to a particular address map.
     * @summary Add an IP to an Address Map
     * @param {VmrjA5DJIpAddress} ipAddress 
     * @param {VmrjA5DJIdentifier} addressMapIdentifier 
     * @param {VmrjA5DJIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IPAddressManagementAddressMapsApi
     */
    public async ipAddressManagementAddressMapsAddAnIpToAnAddressMap(ipAddress: VmrjA5DJIpAddress, addressMapIdentifier: VmrjA5DJIdentifier, accountIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<VmrjA5DJApiResponseCollection>> {
        return IPAddressManagementAddressMapsApiFp(this.configuration).ipAddressManagementAddressMapsAddAnIpToAnAddressMap(ipAddress, addressMapIdentifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Show a particular address map owned by the account.
     * @summary Address Map Details
     * @param {VmrjA5DJIdentifier} addressMapIdentifier 
     * @param {VmrjA5DJIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IPAddressManagementAddressMapsApi
     */
    public async ipAddressManagementAddressMapsAddressMapDetails(addressMapIdentifier: VmrjA5DJIdentifier, accountIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<VmrjA5DJFullResponse>> {
        return IPAddressManagementAddressMapsApiFp(this.configuration).ipAddressManagementAddressMapsAddressMapDetails(addressMapIdentifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new address map under the account.
     * @summary Create Address Map
     * @param {AddressingAddressMapsBody} body 
     * @param {VmrjA5DJIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IPAddressManagementAddressMapsApi
     */
    public async ipAddressManagementAddressMapsCreateAddressMap(body: AddressingAddressMapsBody, accountIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<VmrjA5DJFullResponse>> {
        return IPAddressManagementAddressMapsApiFp(this.configuration).ipAddressManagementAddressMapsCreateAddressMap(body, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a particular address map owned by the account. An Address Map must be disabled before it can be deleted.
     * @summary Delete Address Map
     * @param {VmrjA5DJIdentifier} addressMapIdentifier 
     * @param {VmrjA5DJIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IPAddressManagementAddressMapsApi
     */
    public async ipAddressManagementAddressMapsDeleteAddressMap(addressMapIdentifier: VmrjA5DJIdentifier, accountIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<VmrjA5DJApiResponseCollection>> {
        return IPAddressManagementAddressMapsApiFp(this.configuration).ipAddressManagementAddressMapsDeleteAddressMap(addressMapIdentifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List all address maps owned by the account.
     * @summary List Address Maps
     * @param {VmrjA5DJIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IPAddressManagementAddressMapsApi
     */
    public async ipAddressManagementAddressMapsListAddressMaps(accountIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<VmrjA5DJComponentsSchemasResponseCollection>> {
        return IPAddressManagementAddressMapsApiFp(this.configuration).ipAddressManagementAddressMapsListAddressMaps(accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove a zone as a member of a particular address map.
     * @summary Remove a zone membership from an Address Map
     * @param {VmrjA5DJIdentifier} zoneIdentifier 
     * @param {VmrjA5DJIdentifier} addressMapIdentifier 
     * @param {VmrjA5DJIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IPAddressManagementAddressMapsApi
     */
    public async ipAddressManagementAddressMapsRemoveAZoneMembershipFromAnAddressMap(zoneIdentifier: VmrjA5DJIdentifier, addressMapIdentifier: VmrjA5DJIdentifier, accountIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<VmrjA5DJApiResponseCollection>> {
        return IPAddressManagementAddressMapsApiFp(this.configuration).ipAddressManagementAddressMapsRemoveAZoneMembershipFromAnAddressMap(zoneIdentifier, addressMapIdentifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove an account as a member of a particular address map.
     * @summary Remove an account membership from an Address Map
     * @param {VmrjA5DJIdentifier} accountIdentifier 
     * @param {VmrjA5DJIdentifier} addressMapIdentifier 
     * @param {VmrjA5DJIdentifier} accountIdentifier1 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IPAddressManagementAddressMapsApi
     */
    public async ipAddressManagementAddressMapsRemoveAnAccountMembershipFromAnAddressMap(accountIdentifier: VmrjA5DJIdentifier, addressMapIdentifier: VmrjA5DJIdentifier, accountIdentifier1: VmrjA5DJIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<VmrjA5DJApiResponseCollection>> {
        return IPAddressManagementAddressMapsApiFp(this.configuration).ipAddressManagementAddressMapsRemoveAnAccountMembershipFromAnAddressMap(accountIdentifier, addressMapIdentifier, accountIdentifier1, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove an IP from a particular address map.
     * @summary Remove an IP from an Address Map
     * @param {VmrjA5DJIpAddress} ipAddress 
     * @param {VmrjA5DJIdentifier} addressMapIdentifier 
     * @param {VmrjA5DJIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IPAddressManagementAddressMapsApi
     */
    public async ipAddressManagementAddressMapsRemoveAnIpFromAnAddressMap(ipAddress: VmrjA5DJIpAddress, addressMapIdentifier: VmrjA5DJIdentifier, accountIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<VmrjA5DJApiResponseCollection>> {
        return IPAddressManagementAddressMapsApiFp(this.configuration).ipAddressManagementAddressMapsRemoveAnIpFromAnAddressMap(ipAddress, addressMapIdentifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify properties of an address map owned by the account.
     * @summary Update Address Map
     * @param {AddressMapsAddressMapIdentifierBody} body 
     * @param {VmrjA5DJIdentifier} addressMapIdentifier 
     * @param {VmrjA5DJIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IPAddressManagementAddressMapsApi
     */
    public async ipAddressManagementAddressMapsUpdateAddressMap(body: AddressMapsAddressMapIdentifierBody, addressMapIdentifier: VmrjA5DJIdentifier, accountIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<VmrjA5DJComponentsSchemasSingleResponse>> {
        return IPAddressManagementAddressMapsApiFp(this.configuration).ipAddressManagementAddressMapsUpdateAddressMap(body, addressMapIdentifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
}
