/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse4XX100 } from '../models';
import { InlineResponse4XX95 } from '../models';
import { InlineResponse4XX96 } from '../models';
import { InlineResponse4XX97 } from '../models';
import { InlineResponse4XX98 } from '../models';
import { InlineResponse4XX99 } from '../models';
import { R8DzB06NCreateFeed } from '../models';
import { R8DzB06NCreateFeedResponse } from '../models';
import { R8DzB06NFeedId } from '../models';
import { R8DzB06NIdentifier } from '../models';
import { R8DzB06NIndicatorFeedMetadataResponse } from '../models';
import { R8DzB06NIndicatorFeedResponse } from '../models';
import { R8DzB06NPermissionListItemResponse } from '../models';
import { R8DzB06NPermissionsRequest } from '../models';
import { R8DzB06NPermissionsResponse } from '../models';
import { R8DzB06NUpdateFeedResponse } from '../models';
/**
 * CustomIndicatorFeedsApi - axios parameter creator
 * @export
 */
export const CustomIndicatorFeedsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Grant permission to indicator feed
         * @param {R8DzB06NPermissionsRequest} body 
         * @param {R8DzB06NIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customIndicatorFeedsAddPermission: async (body: R8DzB06NPermissionsRequest, accountIdentifier: R8DzB06NIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling customIndicatorFeedsAddPermission.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling customIndicatorFeedsAddPermission.');
            }
            const localVarPath = `/accounts/{account_identifier}/intel/indicator-feeds/permissions/add`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create new indicator feed
         * @param {R8DzB06NCreateFeed} body 
         * @param {R8DzB06NIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customIndicatorFeedsCreateIndicatorFeeds: async (body: R8DzB06NCreateFeed, accountIdentifier: R8DzB06NIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling customIndicatorFeedsCreateIndicatorFeeds.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling customIndicatorFeedsCreateIndicatorFeeds.');
            }
            const localVarPath = `/accounts/{account_identifier}/intel/indicator-feeds`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get indicator feed data
         * @param {R8DzB06NIdentifier} accountIdentifier 
         * @param {R8DzB06NFeedId} feedId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customIndicatorFeedsGetIndicatorFeedData: async (accountIdentifier: R8DzB06NIdentifier, feedId: R8DzB06NFeedId, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling customIndicatorFeedsGetIndicatorFeedData.');
            }
            // verify required parameter 'feedId' is not null or undefined
            if (feedId === null || feedId === undefined) {
                throw new RequiredError('feedId','Required parameter feedId was null or undefined when calling customIndicatorFeedsGetIndicatorFeedData.');
            }
            const localVarPath = `/accounts/{account_identifier}/intel/indicator-feeds/{feed_id}/data`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)))
                .replace(`{${"feed_id"}}`, encodeURIComponent(String(feedId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get indicator feed metadata
         * @param {R8DzB06NIdentifier} accountIdentifier 
         * @param {R8DzB06NFeedId} feedId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customIndicatorFeedsGetIndicatorFeedMetadata: async (accountIdentifier: R8DzB06NIdentifier, feedId: R8DzB06NFeedId, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling customIndicatorFeedsGetIndicatorFeedMetadata.');
            }
            // verify required parameter 'feedId' is not null or undefined
            if (feedId === null || feedId === undefined) {
                throw new RequiredError('feedId','Required parameter feedId was null or undefined when calling customIndicatorFeedsGetIndicatorFeedMetadata.');
            }
            const localVarPath = `/accounts/{account_identifier}/intel/indicator-feeds/{feed_id}`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)))
                .replace(`{${"feed_id"}}`, encodeURIComponent(String(feedId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get indicator feeds owned by this account
         * @param {R8DzB06NIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customIndicatorFeedsGetIndicatorFeeds: async (accountIdentifier: R8DzB06NIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling customIndicatorFeedsGetIndicatorFeeds.');
            }
            const localVarPath = `/accounts/{account_identifier}/intel/indicator-feeds`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Revoke permission to indicator feed
         * @param {R8DzB06NPermissionsRequest} body 
         * @param {R8DzB06NIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customIndicatorFeedsRemovePermission: async (body: R8DzB06NPermissionsRequest, accountIdentifier: R8DzB06NIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling customIndicatorFeedsRemovePermission.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling customIndicatorFeedsRemovePermission.');
            }
            const localVarPath = `/accounts/{account_identifier}/intel/indicator-feeds/permissions/remove`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update indicator feed data
         * @param {string} source 
         * @param {R8DzB06NIdentifier} accountIdentifier 
         * @param {R8DzB06NFeedId} feedId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customIndicatorFeedsUpdateIndicatorFeedDataForm: async (source: string, accountIdentifier: R8DzB06NIdentifier, feedId: R8DzB06NFeedId, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'source' is not null or undefined
            if (source === null || source === undefined) {
                throw new RequiredError('source','Required parameter source was null or undefined when calling customIndicatorFeedsUpdateIndicatorFeedDataForm.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling customIndicatorFeedsUpdateIndicatorFeedDataForm.');
            }
            // verify required parameter 'feedId' is not null or undefined
            if (feedId === null || feedId === undefined) {
                throw new RequiredError('feedId','Required parameter feedId was null or undefined when calling customIndicatorFeedsUpdateIndicatorFeedDataForm.');
            }
            const localVarPath = `/accounts/{account_identifier}/intel/indicator-feeds/{feed_id}/snapshot`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)))
                .replace(`{${"feed_id"}}`, encodeURIComponent(String(feedId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }


            if (source !== undefined) { 
                localVarFormParams.append('source', source as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List indicator feed permissions
         * @param {R8DzB06NIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customIndicatorFeedsViewPermissions: async (accountIdentifier: R8DzB06NIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling customIndicatorFeedsViewPermissions.');
            }
            const localVarPath = `/accounts/{account_identifier}/intel/indicator-feeds/permissions/view`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomIndicatorFeedsApi - functional programming interface
 * @export
 */
export const CustomIndicatorFeedsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Grant permission to indicator feed
         * @param {R8DzB06NPermissionsRequest} body 
         * @param {R8DzB06NIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customIndicatorFeedsAddPermission(body: R8DzB06NPermissionsRequest, accountIdentifier: R8DzB06NIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<R8DzB06NPermissionsResponse>>> {
            const localVarAxiosArgs = await CustomIndicatorFeedsApiAxiosParamCreator(configuration).customIndicatorFeedsAddPermission(body, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Create new indicator feed
         * @param {R8DzB06NCreateFeed} body 
         * @param {R8DzB06NIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customIndicatorFeedsCreateIndicatorFeeds(body: R8DzB06NCreateFeed, accountIdentifier: R8DzB06NIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<R8DzB06NCreateFeedResponse>>> {
            const localVarAxiosArgs = await CustomIndicatorFeedsApiAxiosParamCreator(configuration).customIndicatorFeedsCreateIndicatorFeeds(body, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get indicator feed data
         * @param {R8DzB06NIdentifier} accountIdentifier 
         * @param {R8DzB06NFeedId} feedId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customIndicatorFeedsGetIndicatorFeedData(accountIdentifier: R8DzB06NIdentifier, feedId: R8DzB06NFeedId, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await CustomIndicatorFeedsApiAxiosParamCreator(configuration).customIndicatorFeedsGetIndicatorFeedData(accountIdentifier, feedId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get indicator feed metadata
         * @param {R8DzB06NIdentifier} accountIdentifier 
         * @param {R8DzB06NFeedId} feedId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customIndicatorFeedsGetIndicatorFeedMetadata(accountIdentifier: R8DzB06NIdentifier, feedId: R8DzB06NFeedId, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<R8DzB06NIndicatorFeedMetadataResponse>>> {
            const localVarAxiosArgs = await CustomIndicatorFeedsApiAxiosParamCreator(configuration).customIndicatorFeedsGetIndicatorFeedMetadata(accountIdentifier, feedId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get indicator feeds owned by this account
         * @param {R8DzB06NIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customIndicatorFeedsGetIndicatorFeeds(accountIdentifier: R8DzB06NIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<R8DzB06NIndicatorFeedResponse>>> {
            const localVarAxiosArgs = await CustomIndicatorFeedsApiAxiosParamCreator(configuration).customIndicatorFeedsGetIndicatorFeeds(accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Revoke permission to indicator feed
         * @param {R8DzB06NPermissionsRequest} body 
         * @param {R8DzB06NIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customIndicatorFeedsRemovePermission(body: R8DzB06NPermissionsRequest, accountIdentifier: R8DzB06NIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<R8DzB06NPermissionsResponse>>> {
            const localVarAxiosArgs = await CustomIndicatorFeedsApiAxiosParamCreator(configuration).customIndicatorFeedsRemovePermission(body, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update indicator feed data
         * @param {string} source 
         * @param {R8DzB06NIdentifier} accountIdentifier 
         * @param {R8DzB06NFeedId} feedId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customIndicatorFeedsUpdateIndicatorFeedDataForm(source: string, accountIdentifier: R8DzB06NIdentifier, feedId: R8DzB06NFeedId, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<R8DzB06NUpdateFeedResponse>>> {
            const localVarAxiosArgs = await CustomIndicatorFeedsApiAxiosParamCreator(configuration).customIndicatorFeedsUpdateIndicatorFeedDataForm(source, accountIdentifier, feedId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary List indicator feed permissions
         * @param {R8DzB06NIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customIndicatorFeedsViewPermissions(accountIdentifier: R8DzB06NIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<R8DzB06NPermissionListItemResponse>>> {
            const localVarAxiosArgs = await CustomIndicatorFeedsApiAxiosParamCreator(configuration).customIndicatorFeedsViewPermissions(accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CustomIndicatorFeedsApi - factory interface
 * @export
 */
export const CustomIndicatorFeedsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Grant permission to indicator feed
         * @param {R8DzB06NPermissionsRequest} body 
         * @param {R8DzB06NIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customIndicatorFeedsAddPermission(body: R8DzB06NPermissionsRequest, accountIdentifier: R8DzB06NIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<R8DzB06NPermissionsResponse>> {
            return CustomIndicatorFeedsApiFp(configuration).customIndicatorFeedsAddPermission(body, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create new indicator feed
         * @param {R8DzB06NCreateFeed} body 
         * @param {R8DzB06NIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customIndicatorFeedsCreateIndicatorFeeds(body: R8DzB06NCreateFeed, accountIdentifier: R8DzB06NIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<R8DzB06NCreateFeedResponse>> {
            return CustomIndicatorFeedsApiFp(configuration).customIndicatorFeedsCreateIndicatorFeeds(body, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get indicator feed data
         * @param {R8DzB06NIdentifier} accountIdentifier 
         * @param {R8DzB06NFeedId} feedId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customIndicatorFeedsGetIndicatorFeedData(accountIdentifier: R8DzB06NIdentifier, feedId: R8DzB06NFeedId, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return CustomIndicatorFeedsApiFp(configuration).customIndicatorFeedsGetIndicatorFeedData(accountIdentifier, feedId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get indicator feed metadata
         * @param {R8DzB06NIdentifier} accountIdentifier 
         * @param {R8DzB06NFeedId} feedId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customIndicatorFeedsGetIndicatorFeedMetadata(accountIdentifier: R8DzB06NIdentifier, feedId: R8DzB06NFeedId, options?: AxiosRequestConfig): Promise<AxiosResponse<R8DzB06NIndicatorFeedMetadataResponse>> {
            return CustomIndicatorFeedsApiFp(configuration).customIndicatorFeedsGetIndicatorFeedMetadata(accountIdentifier, feedId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get indicator feeds owned by this account
         * @param {R8DzB06NIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customIndicatorFeedsGetIndicatorFeeds(accountIdentifier: R8DzB06NIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<R8DzB06NIndicatorFeedResponse>> {
            return CustomIndicatorFeedsApiFp(configuration).customIndicatorFeedsGetIndicatorFeeds(accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Revoke permission to indicator feed
         * @param {R8DzB06NPermissionsRequest} body 
         * @param {R8DzB06NIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customIndicatorFeedsRemovePermission(body: R8DzB06NPermissionsRequest, accountIdentifier: R8DzB06NIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<R8DzB06NPermissionsResponse>> {
            return CustomIndicatorFeedsApiFp(configuration).customIndicatorFeedsRemovePermission(body, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update indicator feed data
         * @param {string} source 
         * @param {R8DzB06NIdentifier} accountIdentifier 
         * @param {R8DzB06NFeedId} feedId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customIndicatorFeedsUpdateIndicatorFeedDataForm(source: string, accountIdentifier: R8DzB06NIdentifier, feedId: R8DzB06NFeedId, options?: AxiosRequestConfig): Promise<AxiosResponse<R8DzB06NUpdateFeedResponse>> {
            return CustomIndicatorFeedsApiFp(configuration).customIndicatorFeedsUpdateIndicatorFeedDataForm(source, accountIdentifier, feedId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List indicator feed permissions
         * @param {R8DzB06NIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customIndicatorFeedsViewPermissions(accountIdentifier: R8DzB06NIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<R8DzB06NPermissionListItemResponse>> {
            return CustomIndicatorFeedsApiFp(configuration).customIndicatorFeedsViewPermissions(accountIdentifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomIndicatorFeedsApi - object-oriented interface
 * @export
 * @class CustomIndicatorFeedsApi
 * @extends {BaseAPI}
 */
export class CustomIndicatorFeedsApi extends BaseAPI {
    /**
     * 
     * @summary Grant permission to indicator feed
     * @param {R8DzB06NPermissionsRequest} body 
     * @param {R8DzB06NIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomIndicatorFeedsApi
     */
    public async customIndicatorFeedsAddPermission(body: R8DzB06NPermissionsRequest, accountIdentifier: R8DzB06NIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<R8DzB06NPermissionsResponse>> {
        return CustomIndicatorFeedsApiFp(this.configuration).customIndicatorFeedsAddPermission(body, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Create new indicator feed
     * @param {R8DzB06NCreateFeed} body 
     * @param {R8DzB06NIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomIndicatorFeedsApi
     */
    public async customIndicatorFeedsCreateIndicatorFeeds(body: R8DzB06NCreateFeed, accountIdentifier: R8DzB06NIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<R8DzB06NCreateFeedResponse>> {
        return CustomIndicatorFeedsApiFp(this.configuration).customIndicatorFeedsCreateIndicatorFeeds(body, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get indicator feed data
     * @param {R8DzB06NIdentifier} accountIdentifier 
     * @param {R8DzB06NFeedId} feedId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomIndicatorFeedsApi
     */
    public async customIndicatorFeedsGetIndicatorFeedData(accountIdentifier: R8DzB06NIdentifier, feedId: R8DzB06NFeedId, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return CustomIndicatorFeedsApiFp(this.configuration).customIndicatorFeedsGetIndicatorFeedData(accountIdentifier, feedId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get indicator feed metadata
     * @param {R8DzB06NIdentifier} accountIdentifier 
     * @param {R8DzB06NFeedId} feedId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomIndicatorFeedsApi
     */
    public async customIndicatorFeedsGetIndicatorFeedMetadata(accountIdentifier: R8DzB06NIdentifier, feedId: R8DzB06NFeedId, options?: AxiosRequestConfig) : Promise<AxiosResponse<R8DzB06NIndicatorFeedMetadataResponse>> {
        return CustomIndicatorFeedsApiFp(this.configuration).customIndicatorFeedsGetIndicatorFeedMetadata(accountIdentifier, feedId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get indicator feeds owned by this account
     * @param {R8DzB06NIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomIndicatorFeedsApi
     */
    public async customIndicatorFeedsGetIndicatorFeeds(accountIdentifier: R8DzB06NIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<R8DzB06NIndicatorFeedResponse>> {
        return CustomIndicatorFeedsApiFp(this.configuration).customIndicatorFeedsGetIndicatorFeeds(accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Revoke permission to indicator feed
     * @param {R8DzB06NPermissionsRequest} body 
     * @param {R8DzB06NIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomIndicatorFeedsApi
     */
    public async customIndicatorFeedsRemovePermission(body: R8DzB06NPermissionsRequest, accountIdentifier: R8DzB06NIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<R8DzB06NPermissionsResponse>> {
        return CustomIndicatorFeedsApiFp(this.configuration).customIndicatorFeedsRemovePermission(body, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Update indicator feed data
     * @param {string} source 
     * @param {R8DzB06NIdentifier} accountIdentifier 
     * @param {R8DzB06NFeedId} feedId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomIndicatorFeedsApi
     */
    public async customIndicatorFeedsUpdateIndicatorFeedDataForm(source: string, accountIdentifier: R8DzB06NIdentifier, feedId: R8DzB06NFeedId, options?: AxiosRequestConfig) : Promise<AxiosResponse<R8DzB06NUpdateFeedResponse>> {
        return CustomIndicatorFeedsApiFp(this.configuration).customIndicatorFeedsUpdateIndicatorFeedDataForm(source, accountIdentifier, feedId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary List indicator feed permissions
     * @param {R8DzB06NIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomIndicatorFeedsApi
     */
    public async customIndicatorFeedsViewPermissions(accountIdentifier: R8DzB06NIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<R8DzB06NPermissionListItemResponse>> {
        return CustomIndicatorFeedsApiFp(this.configuration).customIndicatorFeedsViewPermissions(accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
}
