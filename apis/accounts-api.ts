/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse4xx2 } from '../models';
import { InlineResponse4xx3 } from '../models';
import { Model6KaSmMdRComponentsSchemasAccount } from '../models';
import { Model6KaSmMdRResponseCollection } from '../models';
import { Model6KaSmMdRResponseSingle } from '../models';
import { Model6KaSmMdRSchemasIdentifier } from '../models';
/**
 * AccountsApi - axios parameter creator
 * @export
 */
export const AccountsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get information about a specific account that you are a member of.
         * @summary Account Details
         * @param {Model6KaSmMdRSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountDetails: async (identifier: Model6KaSmMdRSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling accountsAccountDetails.');
            }
            const localVarPath = `/accounts/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List all accounts you have ownership or verified access to.
         * @summary List Accounts
         * @param {string} [name] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {string} [direction] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsListAccounts: async (name?: string, page?: number, perPage?: number, direction?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing account.
         * @summary Update Account
         * @param {Model6KaSmMdRComponentsSchemasAccount} body 
         * @param {Model6KaSmMdRSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUpdateAccount: async (body: Model6KaSmMdRComponentsSchemasAccount, identifier: Model6KaSmMdRSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling accountsUpdateAccount.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling accountsUpdateAccount.');
            }
            const localVarPath = `/accounts/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountsApi - functional programming interface
 * @export
 */
export const AccountsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get information about a specific account that you are a member of.
         * @summary Account Details
         * @param {Model6KaSmMdRSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsAccountDetails(identifier: Model6KaSmMdRSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model6KaSmMdRResponseSingle>>> {
            const localVarAxiosArgs = await AccountsApiAxiosParamCreator(configuration).accountsAccountDetails(identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List all accounts you have ownership or verified access to.
         * @summary List Accounts
         * @param {string} [name] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {string} [direction] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsListAccounts(name?: string, page?: number, perPage?: number, direction?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model6KaSmMdRResponseCollection>>> {
            const localVarAxiosArgs = await AccountsApiAxiosParamCreator(configuration).accountsListAccounts(name, page, perPage, direction, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update an existing account.
         * @summary Update Account
         * @param {Model6KaSmMdRComponentsSchemasAccount} body 
         * @param {Model6KaSmMdRSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsUpdateAccount(body: Model6KaSmMdRComponentsSchemasAccount, identifier: Model6KaSmMdRSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model6KaSmMdRResponseSingle>>> {
            const localVarAxiosArgs = await AccountsApiAxiosParamCreator(configuration).accountsUpdateAccount(body, identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AccountsApi - factory interface
 * @export
 */
export const AccountsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Get information about a specific account that you are a member of.
         * @summary Account Details
         * @param {Model6KaSmMdRSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsAccountDetails(identifier: Model6KaSmMdRSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model6KaSmMdRResponseSingle>> {
            return AccountsApiFp(configuration).accountsAccountDetails(identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * List all accounts you have ownership or verified access to.
         * @summary List Accounts
         * @param {string} [name] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {string} [direction] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsListAccounts(name?: string, page?: number, perPage?: number, direction?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Model6KaSmMdRResponseCollection>> {
            return AccountsApiFp(configuration).accountsListAccounts(name, page, perPage, direction, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing account.
         * @summary Update Account
         * @param {Model6KaSmMdRComponentsSchemasAccount} body 
         * @param {Model6KaSmMdRSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsUpdateAccount(body: Model6KaSmMdRComponentsSchemasAccount, identifier: Model6KaSmMdRSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model6KaSmMdRResponseSingle>> {
            return AccountsApiFp(configuration).accountsUpdateAccount(body, identifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountsApi - object-oriented interface
 * @export
 * @class AccountsApi
 * @extends {BaseAPI}
 */
export class AccountsApi extends BaseAPI {
    /**
     * Get information about a specific account that you are a member of.
     * @summary Account Details
     * @param {Model6KaSmMdRSchemasIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public async accountsAccountDetails(identifier: Model6KaSmMdRSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model6KaSmMdRResponseSingle>> {
        return AccountsApiFp(this.configuration).accountsAccountDetails(identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List all accounts you have ownership or verified access to.
     * @summary List Accounts
     * @param {string} [name] 
     * @param {number} [page] 
     * @param {number} [perPage] 
     * @param {string} [direction] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public async accountsListAccounts(name?: string, page?: number, perPage?: number, direction?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model6KaSmMdRResponseCollection>> {
        return AccountsApiFp(this.configuration).accountsListAccounts(name, page, perPage, direction, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update an existing account.
     * @summary Update Account
     * @param {Model6KaSmMdRComponentsSchemasAccount} body 
     * @param {Model6KaSmMdRSchemasIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public async accountsUpdateAccount(body: Model6KaSmMdRComponentsSchemasAccount, identifier: Model6KaSmMdRSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model6KaSmMdRResponseSingle>> {
        return AccountsApiFp(this.configuration).accountsUpdateAccount(body, identifier, options).then((request) => request(this.axios, this.basePath));
    }
}
