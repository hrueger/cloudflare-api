/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { DlpDatasetArrayResponse } from '../models';
import { DlpDatasetCreationResponse } from '../models';
import { DlpDatasetNewVersionResponse } from '../models';
import { DlpDatasetResponse } from '../models';
import { DlpDatasetUpdate } from '../models';
import { DlpIdentifier } from '../models';
import { DlpNewDataset } from '../models';
import { DlpV4ResponseError } from '../models';
/**
 * DLPDatasetsApi - axios parameter creator
 * @export
 */
export const DLPDatasetsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new dataset.
         * @summary Create a new dataset.
         * @param {DlpNewDataset} body Dataset description
         * @param {DlpIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dlpDatasetsCreate: async (body: DlpNewDataset, accountIdentifier: DlpIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling dlpDatasetsCreate.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling dlpDatasetsCreate.');
            }
            const localVarPath = `/accounts/{account_identifier}/dlp/datasets`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Prepare to upload a new version of a dataset.
         * @summary Prepare to upload a new version of a dataset.
         * @param {DlpIdentifier} accountIdentifier 
         * @param {string} datasetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dlpDatasetsCreateVersion: async (accountIdentifier: DlpIdentifier, datasetId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling dlpDatasetsCreateVersion.');
            }
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new RequiredError('datasetId','Required parameter datasetId was null or undefined when calling dlpDatasetsCreateVersion.');
            }
            const localVarPath = `/accounts/{account_identifier}/dlp/datasets/{dataset_id}/upload`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a dataset.  This deletes all versions of the dataset.
         * @summary Delete a dataset.
         * @param {DlpIdentifier} accountIdentifier 
         * @param {string} datasetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dlpDatasetsDelete: async (accountIdentifier: DlpIdentifier, datasetId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling dlpDatasetsDelete.');
            }
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new RequiredError('datasetId','Required parameter datasetId was null or undefined when calling dlpDatasetsDelete.');
            }
            const localVarPath = `/accounts/{account_identifier}/dlp/datasets/{dataset_id}`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch a specific dataset with information about available versions.
         * @summary Fetch a specific dataset with information about available versions.
         * @param {DlpIdentifier} accountIdentifier 
         * @param {string} datasetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dlpDatasetsRead: async (accountIdentifier: DlpIdentifier, datasetId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling dlpDatasetsRead.');
            }
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new RequiredError('datasetId','Required parameter datasetId was null or undefined when calling dlpDatasetsRead.');
            }
            const localVarPath = `/accounts/{account_identifier}/dlp/datasets/{dataset_id}`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch all datasets with information about available versions.
         * @summary Fetch all datasets with information about available versions.
         * @param {DlpIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dlpDatasetsReadAll: async (accountIdentifier: DlpIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling dlpDatasetsReadAll.');
            }
            const localVarPath = `/accounts/{account_identifier}/dlp/datasets`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update details about a dataset.
         * @summary Update details about a dataset.
         * @param {DlpDatasetUpdate} body Dataset description
         * @param {DlpIdentifier} accountIdentifier 
         * @param {string} datasetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dlpDatasetsUpdate: async (body: DlpDatasetUpdate, accountIdentifier: DlpIdentifier, datasetId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling dlpDatasetsUpdate.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling dlpDatasetsUpdate.');
            }
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new RequiredError('datasetId','Required parameter datasetId was null or undefined when calling dlpDatasetsUpdate.');
            }
            const localVarPath = `/accounts/{account_identifier}/dlp/datasets/{dataset_id}`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Upload a new version of a dataset.
         * @summary Upload a new version of a dataset.
         * @param {string} body Dataset as binary
         * @param {DlpIdentifier} accountIdentifier 
         * @param {string} datasetId 
         * @param {string} version 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dlpDatasetsUploadVersion: async (body: string, accountIdentifier: DlpIdentifier, datasetId: string, version: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling dlpDatasetsUploadVersion.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling dlpDatasetsUploadVersion.');
            }
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new RequiredError('datasetId','Required parameter datasetId was null or undefined when calling dlpDatasetsUploadVersion.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling dlpDatasetsUploadVersion.');
            }
            const localVarPath = `/accounts/{account_identifier}/dlp/datasets/{dataset_id}/upload/{version}`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)))
                .replace(`{${"dataset_id"}}`, encodeURIComponent(String(datasetId)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/octet-stream';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DLPDatasetsApi - functional programming interface
 * @export
 */
export const DLPDatasetsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create a new dataset.
         * @summary Create a new dataset.
         * @param {DlpNewDataset} body Dataset description
         * @param {DlpIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dlpDatasetsCreate(body: DlpNewDataset, accountIdentifier: DlpIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DlpDatasetCreationResponse>>> {
            const localVarAxiosArgs = await DLPDatasetsApiAxiosParamCreator(configuration).dlpDatasetsCreate(body, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Prepare to upload a new version of a dataset.
         * @summary Prepare to upload a new version of a dataset.
         * @param {DlpIdentifier} accountIdentifier 
         * @param {string} datasetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dlpDatasetsCreateVersion(accountIdentifier: DlpIdentifier, datasetId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DlpDatasetNewVersionResponse>>> {
            const localVarAxiosArgs = await DLPDatasetsApiAxiosParamCreator(configuration).dlpDatasetsCreateVersion(accountIdentifier, datasetId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a dataset.  This deletes all versions of the dataset.
         * @summary Delete a dataset.
         * @param {DlpIdentifier} accountIdentifier 
         * @param {string} datasetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dlpDatasetsDelete(accountIdentifier: DlpIdentifier, datasetId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await DLPDatasetsApiAxiosParamCreator(configuration).dlpDatasetsDelete(accountIdentifier, datasetId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetch a specific dataset with information about available versions.
         * @summary Fetch a specific dataset with information about available versions.
         * @param {DlpIdentifier} accountIdentifier 
         * @param {string} datasetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dlpDatasetsRead(accountIdentifier: DlpIdentifier, datasetId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DlpDatasetResponse>>> {
            const localVarAxiosArgs = await DLPDatasetsApiAxiosParamCreator(configuration).dlpDatasetsRead(accountIdentifier, datasetId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetch all datasets with information about available versions.
         * @summary Fetch all datasets with information about available versions.
         * @param {DlpIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dlpDatasetsReadAll(accountIdentifier: DlpIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DlpDatasetArrayResponse>>> {
            const localVarAxiosArgs = await DLPDatasetsApiAxiosParamCreator(configuration).dlpDatasetsReadAll(accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update details about a dataset.
         * @summary Update details about a dataset.
         * @param {DlpDatasetUpdate} body Dataset description
         * @param {DlpIdentifier} accountIdentifier 
         * @param {string} datasetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dlpDatasetsUpdate(body: DlpDatasetUpdate, accountIdentifier: DlpIdentifier, datasetId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DlpDatasetResponse>>> {
            const localVarAxiosArgs = await DLPDatasetsApiAxiosParamCreator(configuration).dlpDatasetsUpdate(body, accountIdentifier, datasetId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Upload a new version of a dataset.
         * @summary Upload a new version of a dataset.
         * @param {string} body Dataset as binary
         * @param {DlpIdentifier} accountIdentifier 
         * @param {string} datasetId 
         * @param {string} version 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dlpDatasetsUploadVersion(body: string, accountIdentifier: DlpIdentifier, datasetId: string, version: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DlpDatasetResponse>>> {
            const localVarAxiosArgs = await DLPDatasetsApiAxiosParamCreator(configuration).dlpDatasetsUploadVersion(body, accountIdentifier, datasetId, version, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DLPDatasetsApi - factory interface
 * @export
 */
export const DLPDatasetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create a new dataset.
         * @summary Create a new dataset.
         * @param {DlpNewDataset} body Dataset description
         * @param {DlpIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dlpDatasetsCreate(body: DlpNewDataset, accountIdentifier: DlpIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<DlpDatasetCreationResponse>> {
            return DLPDatasetsApiFp(configuration).dlpDatasetsCreate(body, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Prepare to upload a new version of a dataset.
         * @summary Prepare to upload a new version of a dataset.
         * @param {DlpIdentifier} accountIdentifier 
         * @param {string} datasetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dlpDatasetsCreateVersion(accountIdentifier: DlpIdentifier, datasetId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<DlpDatasetNewVersionResponse>> {
            return DLPDatasetsApiFp(configuration).dlpDatasetsCreateVersion(accountIdentifier, datasetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a dataset.  This deletes all versions of the dataset.
         * @summary Delete a dataset.
         * @param {DlpIdentifier} accountIdentifier 
         * @param {string} datasetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dlpDatasetsDelete(accountIdentifier: DlpIdentifier, datasetId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return DLPDatasetsApiFp(configuration).dlpDatasetsDelete(accountIdentifier, datasetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a specific dataset with information about available versions.
         * @summary Fetch a specific dataset with information about available versions.
         * @param {DlpIdentifier} accountIdentifier 
         * @param {string} datasetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dlpDatasetsRead(accountIdentifier: DlpIdentifier, datasetId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<DlpDatasetResponse>> {
            return DLPDatasetsApiFp(configuration).dlpDatasetsRead(accountIdentifier, datasetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch all datasets with information about available versions.
         * @summary Fetch all datasets with information about available versions.
         * @param {DlpIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dlpDatasetsReadAll(accountIdentifier: DlpIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<DlpDatasetArrayResponse>> {
            return DLPDatasetsApiFp(configuration).dlpDatasetsReadAll(accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Update details about a dataset.
         * @summary Update details about a dataset.
         * @param {DlpDatasetUpdate} body Dataset description
         * @param {DlpIdentifier} accountIdentifier 
         * @param {string} datasetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dlpDatasetsUpdate(body: DlpDatasetUpdate, accountIdentifier: DlpIdentifier, datasetId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<DlpDatasetResponse>> {
            return DLPDatasetsApiFp(configuration).dlpDatasetsUpdate(body, accountIdentifier, datasetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Upload a new version of a dataset.
         * @summary Upload a new version of a dataset.
         * @param {string} body Dataset as binary
         * @param {DlpIdentifier} accountIdentifier 
         * @param {string} datasetId 
         * @param {string} version 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dlpDatasetsUploadVersion(body: string, accountIdentifier: DlpIdentifier, datasetId: string, version: string, options?: AxiosRequestConfig): Promise<AxiosResponse<DlpDatasetResponse>> {
            return DLPDatasetsApiFp(configuration).dlpDatasetsUploadVersion(body, accountIdentifier, datasetId, version, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DLPDatasetsApi - object-oriented interface
 * @export
 * @class DLPDatasetsApi
 * @extends {BaseAPI}
 */
export class DLPDatasetsApi extends BaseAPI {
    /**
     * Create a new dataset.
     * @summary Create a new dataset.
     * @param {DlpNewDataset} body Dataset description
     * @param {DlpIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DLPDatasetsApi
     */
    public async dlpDatasetsCreate(body: DlpNewDataset, accountIdentifier: DlpIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<DlpDatasetCreationResponse>> {
        return DLPDatasetsApiFp(this.configuration).dlpDatasetsCreate(body, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Prepare to upload a new version of a dataset.
     * @summary Prepare to upload a new version of a dataset.
     * @param {DlpIdentifier} accountIdentifier 
     * @param {string} datasetId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DLPDatasetsApi
     */
    public async dlpDatasetsCreateVersion(accountIdentifier: DlpIdentifier, datasetId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<DlpDatasetNewVersionResponse>> {
        return DLPDatasetsApiFp(this.configuration).dlpDatasetsCreateVersion(accountIdentifier, datasetId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a dataset.  This deletes all versions of the dataset.
     * @summary Delete a dataset.
     * @param {DlpIdentifier} accountIdentifier 
     * @param {string} datasetId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DLPDatasetsApi
     */
    public async dlpDatasetsDelete(accountIdentifier: DlpIdentifier, datasetId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return DLPDatasetsApiFp(this.configuration).dlpDatasetsDelete(accountIdentifier, datasetId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch a specific dataset with information about available versions.
     * @summary Fetch a specific dataset with information about available versions.
     * @param {DlpIdentifier} accountIdentifier 
     * @param {string} datasetId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DLPDatasetsApi
     */
    public async dlpDatasetsRead(accountIdentifier: DlpIdentifier, datasetId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<DlpDatasetResponse>> {
        return DLPDatasetsApiFp(this.configuration).dlpDatasetsRead(accountIdentifier, datasetId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch all datasets with information about available versions.
     * @summary Fetch all datasets with information about available versions.
     * @param {DlpIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DLPDatasetsApi
     */
    public async dlpDatasetsReadAll(accountIdentifier: DlpIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<DlpDatasetArrayResponse>> {
        return DLPDatasetsApiFp(this.configuration).dlpDatasetsReadAll(accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update details about a dataset.
     * @summary Update details about a dataset.
     * @param {DlpDatasetUpdate} body Dataset description
     * @param {DlpIdentifier} accountIdentifier 
     * @param {string} datasetId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DLPDatasetsApi
     */
    public async dlpDatasetsUpdate(body: DlpDatasetUpdate, accountIdentifier: DlpIdentifier, datasetId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<DlpDatasetResponse>> {
        return DLPDatasetsApiFp(this.configuration).dlpDatasetsUpdate(body, accountIdentifier, datasetId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Upload a new version of a dataset.
     * @summary Upload a new version of a dataset.
     * @param {string} body Dataset as binary
     * @param {DlpIdentifier} accountIdentifier 
     * @param {string} datasetId 
     * @param {string} version 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DLPDatasetsApi
     */
    public async dlpDatasetsUploadVersion(body: string, accountIdentifier: DlpIdentifier, datasetId: string, version: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<DlpDatasetResponse>> {
        return DLPDatasetsApiFp(this.configuration).dlpDatasetsUploadVersion(body, accountIdentifier, datasetId, version, options).then((request) => request(this.axios, this.basePath));
    }
}
