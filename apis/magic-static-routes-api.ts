/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse4XX208 } from '../models';
import { InlineResponse4XX209 } from '../models';
import { InlineResponse4XX210 } from '../models';
import { InlineResponse4XX211 } from '../models';
import { InlineResponse4XX212 } from '../models';
import { InlineResponse4XX213 } from '../models';
import { Mpo6O2coIdentifier } from '../models';
import { Mpo6O2coMultipleRouteDeleteResponse } from '../models';
import { Mpo6O2coMultipleRouteModifiedResponse } from '../models';
import { Mpo6O2coRouteDeleteManyRequest } from '../models';
import { Mpo6O2coRouteDeletedResponse } from '../models';
import { Mpo6O2coRouteModifiedResponse } from '../models';
import { Mpo6O2coRouteSingleResponse } from '../models';
import { Mpo6O2coRouteUpdateManyRequest } from '../models';
import { Mpo6O2coRouteUpdateRequest } from '../models';
import { Mpo6O2coRoutesCollectionResponse } from '../models';
/**
 * MagicStaticRoutesApi - axios parameter creator
 * @export
 */
export const MagicStaticRoutesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new Magic static route. Use `?validate_only=true` as an optional query parameter to run validation only without persisting changes.
         * @summary Create Routes
         * @param {any} body 
         * @param {Mpo6O2coIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        magicStaticRoutesCreateRoutes: async (body: any, accountIdentifier: Mpo6O2coIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling magicStaticRoutesCreateRoutes.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling magicStaticRoutesCreateRoutes.');
            }
            const localVarPath = `/accounts/{account_identifier}/magic/routes`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete multiple Magic static routes.
         * @summary Delete Many Routes
         * @param {Mpo6O2coRouteDeleteManyRequest} body 
         * @param {Mpo6O2coIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        magicStaticRoutesDeleteManyRoutes: async (body: Mpo6O2coRouteDeleteManyRequest, accountIdentifier: Mpo6O2coIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling magicStaticRoutesDeleteManyRoutes.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling magicStaticRoutesDeleteManyRoutes.');
            }
            const localVarPath = `/accounts/{account_identifier}/magic/routes`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Disable and remove a specific Magic static route.
         * @summary Delete Route
         * @param {Mpo6O2coIdentifier} routeIdentifier 
         * @param {Mpo6O2coIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        magicStaticRoutesDeleteRoute: async (routeIdentifier: Mpo6O2coIdentifier, accountIdentifier: Mpo6O2coIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'routeIdentifier' is not null or undefined
            if (routeIdentifier === null || routeIdentifier === undefined) {
                throw new RequiredError('routeIdentifier','Required parameter routeIdentifier was null or undefined when calling magicStaticRoutesDeleteRoute.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling magicStaticRoutesDeleteRoute.');
            }
            const localVarPath = `/accounts/{account_identifier}/magic/routes/{route_identifier}`
                .replace(`{${"route_identifier"}}`, encodeURIComponent(String(routeIdentifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List all Magic static routes.
         * @summary List Routes
         * @param {Mpo6O2coIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        magicStaticRoutesListRoutes: async (accountIdentifier: Mpo6O2coIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling magicStaticRoutesListRoutes.');
            }
            const localVarPath = `/accounts/{account_identifier}/magic/routes`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific Magic static route.
         * @summary Route Details
         * @param {Mpo6O2coIdentifier} routeIdentifier 
         * @param {Mpo6O2coIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        magicStaticRoutesRouteDetails: async (routeIdentifier: Mpo6O2coIdentifier, accountIdentifier: Mpo6O2coIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'routeIdentifier' is not null or undefined
            if (routeIdentifier === null || routeIdentifier === undefined) {
                throw new RequiredError('routeIdentifier','Required parameter routeIdentifier was null or undefined when calling magicStaticRoutesRouteDetails.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling magicStaticRoutesRouteDetails.');
            }
            const localVarPath = `/accounts/{account_identifier}/magic/routes/{route_identifier}`
                .replace(`{${"route_identifier"}}`, encodeURIComponent(String(routeIdentifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update multiple Magic static routes. Use `?validate_only=true` as an optional query parameter to run validation only without persisting changes. Only fields for a route that need to be changed need be provided.
         * @summary Update Many Routes
         * @param {Mpo6O2coRouteUpdateManyRequest} body 
         * @param {Mpo6O2coIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        magicStaticRoutesUpdateManyRoutes: async (body: Mpo6O2coRouteUpdateManyRequest, accountIdentifier: Mpo6O2coIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling magicStaticRoutesUpdateManyRoutes.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling magicStaticRoutesUpdateManyRoutes.');
            }
            const localVarPath = `/accounts/{account_identifier}/magic/routes`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a specific Magic static route. Use `?validate_only=true` as an optional query parameter to run validation only without persisting changes.
         * @summary Update Route
         * @param {Mpo6O2coRouteUpdateRequest} body 
         * @param {Mpo6O2coIdentifier} routeIdentifier 
         * @param {Mpo6O2coIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        magicStaticRoutesUpdateRoute: async (body: Mpo6O2coRouteUpdateRequest, routeIdentifier: Mpo6O2coIdentifier, accountIdentifier: Mpo6O2coIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling magicStaticRoutesUpdateRoute.');
            }
            // verify required parameter 'routeIdentifier' is not null or undefined
            if (routeIdentifier === null || routeIdentifier === undefined) {
                throw new RequiredError('routeIdentifier','Required parameter routeIdentifier was null or undefined when calling magicStaticRoutesUpdateRoute.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling magicStaticRoutesUpdateRoute.');
            }
            const localVarPath = `/accounts/{account_identifier}/magic/routes/{route_identifier}`
                .replace(`{${"route_identifier"}}`, encodeURIComponent(String(routeIdentifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MagicStaticRoutesApi - functional programming interface
 * @export
 */
export const MagicStaticRoutesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates a new Magic static route. Use `?validate_only=true` as an optional query parameter to run validation only without persisting changes.
         * @summary Create Routes
         * @param {any} body 
         * @param {Mpo6O2coIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicStaticRoutesCreateRoutes(body: any, accountIdentifier: Mpo6O2coIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Mpo6O2coRoutesCollectionResponse>>> {
            const localVarAxiosArgs = await MagicStaticRoutesApiAxiosParamCreator(configuration).magicStaticRoutesCreateRoutes(body, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete multiple Magic static routes.
         * @summary Delete Many Routes
         * @param {Mpo6O2coRouteDeleteManyRequest} body 
         * @param {Mpo6O2coIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicStaticRoutesDeleteManyRoutes(body: Mpo6O2coRouteDeleteManyRequest, accountIdentifier: Mpo6O2coIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Mpo6O2coMultipleRouteDeleteResponse>>> {
            const localVarAxiosArgs = await MagicStaticRoutesApiAxiosParamCreator(configuration).magicStaticRoutesDeleteManyRoutes(body, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Disable and remove a specific Magic static route.
         * @summary Delete Route
         * @param {Mpo6O2coIdentifier} routeIdentifier 
         * @param {Mpo6O2coIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicStaticRoutesDeleteRoute(routeIdentifier: Mpo6O2coIdentifier, accountIdentifier: Mpo6O2coIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Mpo6O2coRouteDeletedResponse>>> {
            const localVarAxiosArgs = await MagicStaticRoutesApiAxiosParamCreator(configuration).magicStaticRoutesDeleteRoute(routeIdentifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List all Magic static routes.
         * @summary List Routes
         * @param {Mpo6O2coIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicStaticRoutesListRoutes(accountIdentifier: Mpo6O2coIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Mpo6O2coRoutesCollectionResponse>>> {
            const localVarAxiosArgs = await MagicStaticRoutesApiAxiosParamCreator(configuration).magicStaticRoutesListRoutes(accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a specific Magic static route.
         * @summary Route Details
         * @param {Mpo6O2coIdentifier} routeIdentifier 
         * @param {Mpo6O2coIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicStaticRoutesRouteDetails(routeIdentifier: Mpo6O2coIdentifier, accountIdentifier: Mpo6O2coIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Mpo6O2coRouteSingleResponse>>> {
            const localVarAxiosArgs = await MagicStaticRoutesApiAxiosParamCreator(configuration).magicStaticRoutesRouteDetails(routeIdentifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update multiple Magic static routes. Use `?validate_only=true` as an optional query parameter to run validation only without persisting changes. Only fields for a route that need to be changed need be provided.
         * @summary Update Many Routes
         * @param {Mpo6O2coRouteUpdateManyRequest} body 
         * @param {Mpo6O2coIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicStaticRoutesUpdateManyRoutes(body: Mpo6O2coRouteUpdateManyRequest, accountIdentifier: Mpo6O2coIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Mpo6O2coMultipleRouteModifiedResponse>>> {
            const localVarAxiosArgs = await MagicStaticRoutesApiAxiosParamCreator(configuration).magicStaticRoutesUpdateManyRoutes(body, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a specific Magic static route. Use `?validate_only=true` as an optional query parameter to run validation only without persisting changes.
         * @summary Update Route
         * @param {Mpo6O2coRouteUpdateRequest} body 
         * @param {Mpo6O2coIdentifier} routeIdentifier 
         * @param {Mpo6O2coIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicStaticRoutesUpdateRoute(body: Mpo6O2coRouteUpdateRequest, routeIdentifier: Mpo6O2coIdentifier, accountIdentifier: Mpo6O2coIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Mpo6O2coRouteModifiedResponse>>> {
            const localVarAxiosArgs = await MagicStaticRoutesApiAxiosParamCreator(configuration).magicStaticRoutesUpdateRoute(body, routeIdentifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * MagicStaticRoutesApi - factory interface
 * @export
 */
export const MagicStaticRoutesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Creates a new Magic static route. Use `?validate_only=true` as an optional query parameter to run validation only without persisting changes.
         * @summary Create Routes
         * @param {any} body 
         * @param {Mpo6O2coIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicStaticRoutesCreateRoutes(body: any, accountIdentifier: Mpo6O2coIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Mpo6O2coRoutesCollectionResponse>> {
            return MagicStaticRoutesApiFp(configuration).magicStaticRoutesCreateRoutes(body, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete multiple Magic static routes.
         * @summary Delete Many Routes
         * @param {Mpo6O2coRouteDeleteManyRequest} body 
         * @param {Mpo6O2coIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicStaticRoutesDeleteManyRoutes(body: Mpo6O2coRouteDeleteManyRequest, accountIdentifier: Mpo6O2coIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Mpo6O2coMultipleRouteDeleteResponse>> {
            return MagicStaticRoutesApiFp(configuration).magicStaticRoutesDeleteManyRoutes(body, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Disable and remove a specific Magic static route.
         * @summary Delete Route
         * @param {Mpo6O2coIdentifier} routeIdentifier 
         * @param {Mpo6O2coIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicStaticRoutesDeleteRoute(routeIdentifier: Mpo6O2coIdentifier, accountIdentifier: Mpo6O2coIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Mpo6O2coRouteDeletedResponse>> {
            return MagicStaticRoutesApiFp(configuration).magicStaticRoutesDeleteRoute(routeIdentifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * List all Magic static routes.
         * @summary List Routes
         * @param {Mpo6O2coIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicStaticRoutesListRoutes(accountIdentifier: Mpo6O2coIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Mpo6O2coRoutesCollectionResponse>> {
            return MagicStaticRoutesApiFp(configuration).magicStaticRoutesListRoutes(accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a specific Magic static route.
         * @summary Route Details
         * @param {Mpo6O2coIdentifier} routeIdentifier 
         * @param {Mpo6O2coIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicStaticRoutesRouteDetails(routeIdentifier: Mpo6O2coIdentifier, accountIdentifier: Mpo6O2coIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Mpo6O2coRouteSingleResponse>> {
            return MagicStaticRoutesApiFp(configuration).magicStaticRoutesRouteDetails(routeIdentifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Update multiple Magic static routes. Use `?validate_only=true` as an optional query parameter to run validation only without persisting changes. Only fields for a route that need to be changed need be provided.
         * @summary Update Many Routes
         * @param {Mpo6O2coRouteUpdateManyRequest} body 
         * @param {Mpo6O2coIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicStaticRoutesUpdateManyRoutes(body: Mpo6O2coRouteUpdateManyRequest, accountIdentifier: Mpo6O2coIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Mpo6O2coMultipleRouteModifiedResponse>> {
            return MagicStaticRoutesApiFp(configuration).magicStaticRoutesUpdateManyRoutes(body, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a specific Magic static route. Use `?validate_only=true` as an optional query parameter to run validation only without persisting changes.
         * @summary Update Route
         * @param {Mpo6O2coRouteUpdateRequest} body 
         * @param {Mpo6O2coIdentifier} routeIdentifier 
         * @param {Mpo6O2coIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicStaticRoutesUpdateRoute(body: Mpo6O2coRouteUpdateRequest, routeIdentifier: Mpo6O2coIdentifier, accountIdentifier: Mpo6O2coIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Mpo6O2coRouteModifiedResponse>> {
            return MagicStaticRoutesApiFp(configuration).magicStaticRoutesUpdateRoute(body, routeIdentifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MagicStaticRoutesApi - object-oriented interface
 * @export
 * @class MagicStaticRoutesApi
 * @extends {BaseAPI}
 */
export class MagicStaticRoutesApi extends BaseAPI {
    /**
     * Creates a new Magic static route. Use `?validate_only=true` as an optional query parameter to run validation only without persisting changes.
     * @summary Create Routes
     * @param {any} body 
     * @param {Mpo6O2coIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MagicStaticRoutesApi
     */
    public async magicStaticRoutesCreateRoutes(body: any, accountIdentifier: Mpo6O2coIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Mpo6O2coRoutesCollectionResponse>> {
        return MagicStaticRoutesApiFp(this.configuration).magicStaticRoutesCreateRoutes(body, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete multiple Magic static routes.
     * @summary Delete Many Routes
     * @param {Mpo6O2coRouteDeleteManyRequest} body 
     * @param {Mpo6O2coIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MagicStaticRoutesApi
     */
    public async magicStaticRoutesDeleteManyRoutes(body: Mpo6O2coRouteDeleteManyRequest, accountIdentifier: Mpo6O2coIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Mpo6O2coMultipleRouteDeleteResponse>> {
        return MagicStaticRoutesApiFp(this.configuration).magicStaticRoutesDeleteManyRoutes(body, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Disable and remove a specific Magic static route.
     * @summary Delete Route
     * @param {Mpo6O2coIdentifier} routeIdentifier 
     * @param {Mpo6O2coIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MagicStaticRoutesApi
     */
    public async magicStaticRoutesDeleteRoute(routeIdentifier: Mpo6O2coIdentifier, accountIdentifier: Mpo6O2coIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Mpo6O2coRouteDeletedResponse>> {
        return MagicStaticRoutesApiFp(this.configuration).magicStaticRoutesDeleteRoute(routeIdentifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List all Magic static routes.
     * @summary List Routes
     * @param {Mpo6O2coIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MagicStaticRoutesApi
     */
    public async magicStaticRoutesListRoutes(accountIdentifier: Mpo6O2coIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Mpo6O2coRoutesCollectionResponse>> {
        return MagicStaticRoutesApiFp(this.configuration).magicStaticRoutesListRoutes(accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a specific Magic static route.
     * @summary Route Details
     * @param {Mpo6O2coIdentifier} routeIdentifier 
     * @param {Mpo6O2coIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MagicStaticRoutesApi
     */
    public async magicStaticRoutesRouteDetails(routeIdentifier: Mpo6O2coIdentifier, accountIdentifier: Mpo6O2coIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Mpo6O2coRouteSingleResponse>> {
        return MagicStaticRoutesApiFp(this.configuration).magicStaticRoutesRouteDetails(routeIdentifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update multiple Magic static routes. Use `?validate_only=true` as an optional query parameter to run validation only without persisting changes. Only fields for a route that need to be changed need be provided.
     * @summary Update Many Routes
     * @param {Mpo6O2coRouteUpdateManyRequest} body 
     * @param {Mpo6O2coIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MagicStaticRoutesApi
     */
    public async magicStaticRoutesUpdateManyRoutes(body: Mpo6O2coRouteUpdateManyRequest, accountIdentifier: Mpo6O2coIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Mpo6O2coMultipleRouteModifiedResponse>> {
        return MagicStaticRoutesApiFp(this.configuration).magicStaticRoutesUpdateManyRoutes(body, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update a specific Magic static route. Use `?validate_only=true` as an optional query parameter to run validation only without persisting changes.
     * @summary Update Route
     * @param {Mpo6O2coRouteUpdateRequest} body 
     * @param {Mpo6O2coIdentifier} routeIdentifier 
     * @param {Mpo6O2coIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MagicStaticRoutesApi
     */
    public async magicStaticRoutesUpdateRoute(body: Mpo6O2coRouteUpdateRequest, routeIdentifier: Mpo6O2coIdentifier, accountIdentifier: Mpo6O2coIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Mpo6O2coRouteModifiedResponse>> {
        return MagicStaticRoutesApiFp(this.configuration).magicStaticRoutesUpdateRoute(body, routeIdentifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
}
