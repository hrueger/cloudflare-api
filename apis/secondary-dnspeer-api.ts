/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse4XX273 } from '../models';
import { InlineResponse4XX274 } from '../models';
import { InlineResponse4XX275 } from '../models';
import { Model2UOufITZAccountIdentifier } from '../models';
import { Model2UOufITZComponentsSchemasIdResponse } from '../models';
import { Model2UOufITZComponentsSchemasIdentifier } from '../models';
import { Model2UOufITZPeer } from '../models';
import { Model2UOufITZSchemasResponseCollection } from '../models';
import { Model2UOufITZSchemasSingleResponse } from '../models';
/**
 * SecondaryDNSPeerApi - axios parameter creator
 * @export
 */
export const SecondaryDNSPeerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create Peer.
         * @summary Create Peer
         * @param {any} body 
         * @param {Model2UOufITZAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secondaryDnsPeerCreatePeer: async (body: any, accountIdentifier: Model2UOufITZAccountIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling secondaryDnsPeerCreatePeer.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling secondaryDnsPeerCreatePeer.');
            }
            const localVarPath = `/accounts/{account_identifier}/secondary_dns/peers`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete Peer.
         * @summary Delete Peer
         * @param {Model2UOufITZComponentsSchemasIdentifier} identifier 
         * @param {Model2UOufITZAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secondaryDnsPeerDeletePeer: async (identifier: Model2UOufITZComponentsSchemasIdentifier, accountIdentifier: Model2UOufITZAccountIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling secondaryDnsPeerDeletePeer.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling secondaryDnsPeerDeletePeer.');
            }
            const localVarPath = `/accounts/{account_identifier}/secondary_dns/peers/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List Peers.
         * @summary List Peers
         * @param {Model2UOufITZAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secondaryDnsPeerListPeers: async (accountIdentifier: Model2UOufITZAccountIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling secondaryDnsPeerListPeers.');
            }
            const localVarPath = `/accounts/{account_identifier}/secondary_dns/peers`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Peer.
         * @summary Peer Details
         * @param {Model2UOufITZComponentsSchemasIdentifier} identifier 
         * @param {Model2UOufITZAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secondaryDnsPeerPeerDetails: async (identifier: Model2UOufITZComponentsSchemasIdentifier, accountIdentifier: Model2UOufITZAccountIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling secondaryDnsPeerPeerDetails.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling secondaryDnsPeerPeerDetails.');
            }
            const localVarPath = `/accounts/{account_identifier}/secondary_dns/peers/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify Peer.
         * @summary Update Peer
         * @param {Model2UOufITZPeer} body 
         * @param {Model2UOufITZComponentsSchemasIdentifier} identifier 
         * @param {Model2UOufITZAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secondaryDnsPeerUpdatePeer: async (body: Model2UOufITZPeer, identifier: Model2UOufITZComponentsSchemasIdentifier, accountIdentifier: Model2UOufITZAccountIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling secondaryDnsPeerUpdatePeer.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling secondaryDnsPeerUpdatePeer.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling secondaryDnsPeerUpdatePeer.');
            }
            const localVarPath = `/accounts/{account_identifier}/secondary_dns/peers/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SecondaryDNSPeerApi - functional programming interface
 * @export
 */
export const SecondaryDNSPeerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create Peer.
         * @summary Create Peer
         * @param {any} body 
         * @param {Model2UOufITZAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secondaryDnsPeerCreatePeer(body: any, accountIdentifier: Model2UOufITZAccountIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model2UOufITZSchemasSingleResponse>>> {
            const localVarAxiosArgs = await SecondaryDNSPeerApiAxiosParamCreator(configuration).secondaryDnsPeerCreatePeer(body, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete Peer.
         * @summary Delete Peer
         * @param {Model2UOufITZComponentsSchemasIdentifier} identifier 
         * @param {Model2UOufITZAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secondaryDnsPeerDeletePeer(identifier: Model2UOufITZComponentsSchemasIdentifier, accountIdentifier: Model2UOufITZAccountIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model2UOufITZComponentsSchemasIdResponse>>> {
            const localVarAxiosArgs = await SecondaryDNSPeerApiAxiosParamCreator(configuration).secondaryDnsPeerDeletePeer(identifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List Peers.
         * @summary List Peers
         * @param {Model2UOufITZAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secondaryDnsPeerListPeers(accountIdentifier: Model2UOufITZAccountIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model2UOufITZSchemasResponseCollection>>> {
            const localVarAxiosArgs = await SecondaryDNSPeerApiAxiosParamCreator(configuration).secondaryDnsPeerListPeers(accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get Peer.
         * @summary Peer Details
         * @param {Model2UOufITZComponentsSchemasIdentifier} identifier 
         * @param {Model2UOufITZAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secondaryDnsPeerPeerDetails(identifier: Model2UOufITZComponentsSchemasIdentifier, accountIdentifier: Model2UOufITZAccountIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model2UOufITZSchemasSingleResponse>>> {
            const localVarAxiosArgs = await SecondaryDNSPeerApiAxiosParamCreator(configuration).secondaryDnsPeerPeerDetails(identifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Modify Peer.
         * @summary Update Peer
         * @param {Model2UOufITZPeer} body 
         * @param {Model2UOufITZComponentsSchemasIdentifier} identifier 
         * @param {Model2UOufITZAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secondaryDnsPeerUpdatePeer(body: Model2UOufITZPeer, identifier: Model2UOufITZComponentsSchemasIdentifier, accountIdentifier: Model2UOufITZAccountIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model2UOufITZSchemasSingleResponse>>> {
            const localVarAxiosArgs = await SecondaryDNSPeerApiAxiosParamCreator(configuration).secondaryDnsPeerUpdatePeer(body, identifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SecondaryDNSPeerApi - factory interface
 * @export
 */
export const SecondaryDNSPeerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create Peer.
         * @summary Create Peer
         * @param {any} body 
         * @param {Model2UOufITZAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secondaryDnsPeerCreatePeer(body: any, accountIdentifier: Model2UOufITZAccountIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model2UOufITZSchemasSingleResponse>> {
            return SecondaryDNSPeerApiFp(configuration).secondaryDnsPeerCreatePeer(body, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete Peer.
         * @summary Delete Peer
         * @param {Model2UOufITZComponentsSchemasIdentifier} identifier 
         * @param {Model2UOufITZAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secondaryDnsPeerDeletePeer(identifier: Model2UOufITZComponentsSchemasIdentifier, accountIdentifier: Model2UOufITZAccountIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model2UOufITZComponentsSchemasIdResponse>> {
            return SecondaryDNSPeerApiFp(configuration).secondaryDnsPeerDeletePeer(identifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * List Peers.
         * @summary List Peers
         * @param {Model2UOufITZAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secondaryDnsPeerListPeers(accountIdentifier: Model2UOufITZAccountIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model2UOufITZSchemasResponseCollection>> {
            return SecondaryDNSPeerApiFp(configuration).secondaryDnsPeerListPeers(accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Peer.
         * @summary Peer Details
         * @param {Model2UOufITZComponentsSchemasIdentifier} identifier 
         * @param {Model2UOufITZAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secondaryDnsPeerPeerDetails(identifier: Model2UOufITZComponentsSchemasIdentifier, accountIdentifier: Model2UOufITZAccountIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model2UOufITZSchemasSingleResponse>> {
            return SecondaryDNSPeerApiFp(configuration).secondaryDnsPeerPeerDetails(identifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify Peer.
         * @summary Update Peer
         * @param {Model2UOufITZPeer} body 
         * @param {Model2UOufITZComponentsSchemasIdentifier} identifier 
         * @param {Model2UOufITZAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secondaryDnsPeerUpdatePeer(body: Model2UOufITZPeer, identifier: Model2UOufITZComponentsSchemasIdentifier, accountIdentifier: Model2UOufITZAccountIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model2UOufITZSchemasSingleResponse>> {
            return SecondaryDNSPeerApiFp(configuration).secondaryDnsPeerUpdatePeer(body, identifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SecondaryDNSPeerApi - object-oriented interface
 * @export
 * @class SecondaryDNSPeerApi
 * @extends {BaseAPI}
 */
export class SecondaryDNSPeerApi extends BaseAPI {
    /**
     * Create Peer.
     * @summary Create Peer
     * @param {any} body 
     * @param {Model2UOufITZAccountIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecondaryDNSPeerApi
     */
    public async secondaryDnsPeerCreatePeer(body: any, accountIdentifier: Model2UOufITZAccountIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model2UOufITZSchemasSingleResponse>> {
        return SecondaryDNSPeerApiFp(this.configuration).secondaryDnsPeerCreatePeer(body, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete Peer.
     * @summary Delete Peer
     * @param {Model2UOufITZComponentsSchemasIdentifier} identifier 
     * @param {Model2UOufITZAccountIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecondaryDNSPeerApi
     */
    public async secondaryDnsPeerDeletePeer(identifier: Model2UOufITZComponentsSchemasIdentifier, accountIdentifier: Model2UOufITZAccountIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model2UOufITZComponentsSchemasIdResponse>> {
        return SecondaryDNSPeerApiFp(this.configuration).secondaryDnsPeerDeletePeer(identifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Peers.
     * @summary List Peers
     * @param {Model2UOufITZAccountIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecondaryDNSPeerApi
     */
    public async secondaryDnsPeerListPeers(accountIdentifier: Model2UOufITZAccountIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model2UOufITZSchemasResponseCollection>> {
        return SecondaryDNSPeerApiFp(this.configuration).secondaryDnsPeerListPeers(accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Peer.
     * @summary Peer Details
     * @param {Model2UOufITZComponentsSchemasIdentifier} identifier 
     * @param {Model2UOufITZAccountIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecondaryDNSPeerApi
     */
    public async secondaryDnsPeerPeerDetails(identifier: Model2UOufITZComponentsSchemasIdentifier, accountIdentifier: Model2UOufITZAccountIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model2UOufITZSchemasSingleResponse>> {
        return SecondaryDNSPeerApiFp(this.configuration).secondaryDnsPeerPeerDetails(identifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify Peer.
     * @summary Update Peer
     * @param {Model2UOufITZPeer} body 
     * @param {Model2UOufITZComponentsSchemasIdentifier} identifier 
     * @param {Model2UOufITZAccountIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecondaryDNSPeerApi
     */
    public async secondaryDnsPeerUpdatePeer(body: Model2UOufITZPeer, identifier: Model2UOufITZComponentsSchemasIdentifier, accountIdentifier: Model2UOufITZAccountIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model2UOufITZSchemasSingleResponse>> {
        return SecondaryDNSPeerApiFp(this.configuration).secondaryDnsPeerUpdatePeer(body, identifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
}
