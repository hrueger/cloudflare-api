/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse4XX30 } from '../models';
import { InlineResponse4XX31 } from '../models';
import { InlineResponse4XX32 } from '../models';
import { PoliciesUuidBody } from '../models';
import { Tm1HTKEcComponentsSchemasUuid } from '../models';
import { Tm1HTKEcIdentifier } from '../models';
import { Tm1HTKEcPoliciesComponentsSchemasIdResponse } from '../models';
import { Tm1HTKEcPoliciesComponentsSchemasResponseCollection } from '../models';
import { Tm1HTKEcPoliciesComponentsSchemasSingleResponse } from '../models';
import { UuidPoliciesBody } from '../models';
/**
 * AccessPoliciesApi - axios parameter creator
 * @export
 */
export const AccessPoliciesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new Access policy for an application.
         * @summary Create an Access policy
         * @param {UuidPoliciesBody} body 
         * @param {Tm1HTKEcComponentsSchemasUuid} uuid 
         * @param {Tm1HTKEcIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accessPoliciesCreateAnAccessPolicy: async (body: UuidPoliciesBody, uuid: Tm1HTKEcComponentsSchemasUuid, identifier: Tm1HTKEcIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling accessPoliciesCreateAnAccessPolicy.');
            }
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling accessPoliciesCreateAnAccessPolicy.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling accessPoliciesCreateAnAccessPolicy.');
            }
            const localVarPath = `/accounts/{identifier}/access/apps/{uuid}/policies`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)))
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an Access policy.
         * @summary Delete an Access policy
         * @param {Tm1HTKEcComponentsSchemasUuid} uuid 
         * @param {Tm1HTKEcComponentsSchemasUuid} uuid1 
         * @param {Tm1HTKEcIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accessPoliciesDeleteAnAccessPolicy: async (uuid: Tm1HTKEcComponentsSchemasUuid, uuid1: Tm1HTKEcComponentsSchemasUuid, identifier: Tm1HTKEcIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling accessPoliciesDeleteAnAccessPolicy.');
            }
            // verify required parameter 'uuid1' is not null or undefined
            if (uuid1 === null || uuid1 === undefined) {
                throw new RequiredError('uuid1','Required parameter uuid1 was null or undefined when calling accessPoliciesDeleteAnAccessPolicy.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling accessPoliciesDeleteAnAccessPolicy.');
            }
            const localVarPath = `/accounts/{identifier}/access/apps/{uuid1}/policies/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)))
                .replace(`{${"uuid1"}}`, encodeURIComponent(String(uuid1)))
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches a single Access policy.
         * @summary Get an Access policy
         * @param {Tm1HTKEcComponentsSchemasUuid} uuid 
         * @param {Tm1HTKEcComponentsSchemasUuid} uuid1 
         * @param {Tm1HTKEcIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accessPoliciesGetAnAccessPolicy: async (uuid: Tm1HTKEcComponentsSchemasUuid, uuid1: Tm1HTKEcComponentsSchemasUuid, identifier: Tm1HTKEcIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling accessPoliciesGetAnAccessPolicy.');
            }
            // verify required parameter 'uuid1' is not null or undefined
            if (uuid1 === null || uuid1 === undefined) {
                throw new RequiredError('uuid1','Required parameter uuid1 was null or undefined when calling accessPoliciesGetAnAccessPolicy.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling accessPoliciesGetAnAccessPolicy.');
            }
            const localVarPath = `/accounts/{identifier}/access/apps/{uuid1}/policies/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)))
                .replace(`{${"uuid1"}}`, encodeURIComponent(String(uuid1)))
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists Access policies configured for an application.
         * @summary List Access policies
         * @param {Tm1HTKEcComponentsSchemasUuid} uuid 
         * @param {Tm1HTKEcIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accessPoliciesListAccessPolicies: async (uuid: Tm1HTKEcComponentsSchemasUuid, identifier: Tm1HTKEcIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling accessPoliciesListAccessPolicies.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling accessPoliciesListAccessPolicies.');
            }
            const localVarPath = `/accounts/{identifier}/access/apps/{uuid}/policies`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)))
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a configured Access policy.
         * @summary Update an Access policy
         * @param {PoliciesUuidBody} body 
         * @param {Tm1HTKEcComponentsSchemasUuid} uuid 
         * @param {Tm1HTKEcComponentsSchemasUuid} uuid1 
         * @param {Tm1HTKEcIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accessPoliciesUpdateAnAccessPolicy: async (body: PoliciesUuidBody, uuid: Tm1HTKEcComponentsSchemasUuid, uuid1: Tm1HTKEcComponentsSchemasUuid, identifier: Tm1HTKEcIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling accessPoliciesUpdateAnAccessPolicy.');
            }
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling accessPoliciesUpdateAnAccessPolicy.');
            }
            // verify required parameter 'uuid1' is not null or undefined
            if (uuid1 === null || uuid1 === undefined) {
                throw new RequiredError('uuid1','Required parameter uuid1 was null or undefined when calling accessPoliciesUpdateAnAccessPolicy.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling accessPoliciesUpdateAnAccessPolicy.');
            }
            const localVarPath = `/accounts/{identifier}/access/apps/{uuid1}/policies/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)))
                .replace(`{${"uuid1"}}`, encodeURIComponent(String(uuid1)))
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccessPoliciesApi - functional programming interface
 * @export
 */
export const AccessPoliciesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create a new Access policy for an application.
         * @summary Create an Access policy
         * @param {UuidPoliciesBody} body 
         * @param {Tm1HTKEcComponentsSchemasUuid} uuid 
         * @param {Tm1HTKEcIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accessPoliciesCreateAnAccessPolicy(body: UuidPoliciesBody, uuid: Tm1HTKEcComponentsSchemasUuid, identifier: Tm1HTKEcIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Tm1HTKEcPoliciesComponentsSchemasSingleResponse>>> {
            const localVarAxiosArgs = await AccessPoliciesApiAxiosParamCreator(configuration).accessPoliciesCreateAnAccessPolicy(body, uuid, identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete an Access policy.
         * @summary Delete an Access policy
         * @param {Tm1HTKEcComponentsSchemasUuid} uuid 
         * @param {Tm1HTKEcComponentsSchemasUuid} uuid1 
         * @param {Tm1HTKEcIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accessPoliciesDeleteAnAccessPolicy(uuid: Tm1HTKEcComponentsSchemasUuid, uuid1: Tm1HTKEcComponentsSchemasUuid, identifier: Tm1HTKEcIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Tm1HTKEcPoliciesComponentsSchemasIdResponse>>> {
            const localVarAxiosArgs = await AccessPoliciesApiAxiosParamCreator(configuration).accessPoliciesDeleteAnAccessPolicy(uuid, uuid1, identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetches a single Access policy.
         * @summary Get an Access policy
         * @param {Tm1HTKEcComponentsSchemasUuid} uuid 
         * @param {Tm1HTKEcComponentsSchemasUuid} uuid1 
         * @param {Tm1HTKEcIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accessPoliciesGetAnAccessPolicy(uuid: Tm1HTKEcComponentsSchemasUuid, uuid1: Tm1HTKEcComponentsSchemasUuid, identifier: Tm1HTKEcIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Tm1HTKEcPoliciesComponentsSchemasSingleResponse>>> {
            const localVarAxiosArgs = await AccessPoliciesApiAxiosParamCreator(configuration).accessPoliciesGetAnAccessPolicy(uuid, uuid1, identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Lists Access policies configured for an application.
         * @summary List Access policies
         * @param {Tm1HTKEcComponentsSchemasUuid} uuid 
         * @param {Tm1HTKEcIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accessPoliciesListAccessPolicies(uuid: Tm1HTKEcComponentsSchemasUuid, identifier: Tm1HTKEcIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Tm1HTKEcPoliciesComponentsSchemasResponseCollection>>> {
            const localVarAxiosArgs = await AccessPoliciesApiAxiosParamCreator(configuration).accessPoliciesListAccessPolicies(uuid, identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a configured Access policy.
         * @summary Update an Access policy
         * @param {PoliciesUuidBody} body 
         * @param {Tm1HTKEcComponentsSchemasUuid} uuid 
         * @param {Tm1HTKEcComponentsSchemasUuid} uuid1 
         * @param {Tm1HTKEcIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accessPoliciesUpdateAnAccessPolicy(body: PoliciesUuidBody, uuid: Tm1HTKEcComponentsSchemasUuid, uuid1: Tm1HTKEcComponentsSchemasUuid, identifier: Tm1HTKEcIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Tm1HTKEcPoliciesComponentsSchemasSingleResponse>>> {
            const localVarAxiosArgs = await AccessPoliciesApiAxiosParamCreator(configuration).accessPoliciesUpdateAnAccessPolicy(body, uuid, uuid1, identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AccessPoliciesApi - factory interface
 * @export
 */
export const AccessPoliciesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create a new Access policy for an application.
         * @summary Create an Access policy
         * @param {UuidPoliciesBody} body 
         * @param {Tm1HTKEcComponentsSchemasUuid} uuid 
         * @param {Tm1HTKEcIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accessPoliciesCreateAnAccessPolicy(body: UuidPoliciesBody, uuid: Tm1HTKEcComponentsSchemasUuid, identifier: Tm1HTKEcIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Tm1HTKEcPoliciesComponentsSchemasSingleResponse>> {
            return AccessPoliciesApiFp(configuration).accessPoliciesCreateAnAccessPolicy(body, uuid, identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an Access policy.
         * @summary Delete an Access policy
         * @param {Tm1HTKEcComponentsSchemasUuid} uuid 
         * @param {Tm1HTKEcComponentsSchemasUuid} uuid1 
         * @param {Tm1HTKEcIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accessPoliciesDeleteAnAccessPolicy(uuid: Tm1HTKEcComponentsSchemasUuid, uuid1: Tm1HTKEcComponentsSchemasUuid, identifier: Tm1HTKEcIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Tm1HTKEcPoliciesComponentsSchemasIdResponse>> {
            return AccessPoliciesApiFp(configuration).accessPoliciesDeleteAnAccessPolicy(uuid, uuid1, identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches a single Access policy.
         * @summary Get an Access policy
         * @param {Tm1HTKEcComponentsSchemasUuid} uuid 
         * @param {Tm1HTKEcComponentsSchemasUuid} uuid1 
         * @param {Tm1HTKEcIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accessPoliciesGetAnAccessPolicy(uuid: Tm1HTKEcComponentsSchemasUuid, uuid1: Tm1HTKEcComponentsSchemasUuid, identifier: Tm1HTKEcIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Tm1HTKEcPoliciesComponentsSchemasSingleResponse>> {
            return AccessPoliciesApiFp(configuration).accessPoliciesGetAnAccessPolicy(uuid, uuid1, identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists Access policies configured for an application.
         * @summary List Access policies
         * @param {Tm1HTKEcComponentsSchemasUuid} uuid 
         * @param {Tm1HTKEcIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accessPoliciesListAccessPolicies(uuid: Tm1HTKEcComponentsSchemasUuid, identifier: Tm1HTKEcIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Tm1HTKEcPoliciesComponentsSchemasResponseCollection>> {
            return AccessPoliciesApiFp(configuration).accessPoliciesListAccessPolicies(uuid, identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a configured Access policy.
         * @summary Update an Access policy
         * @param {PoliciesUuidBody} body 
         * @param {Tm1HTKEcComponentsSchemasUuid} uuid 
         * @param {Tm1HTKEcComponentsSchemasUuid} uuid1 
         * @param {Tm1HTKEcIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accessPoliciesUpdateAnAccessPolicy(body: PoliciesUuidBody, uuid: Tm1HTKEcComponentsSchemasUuid, uuid1: Tm1HTKEcComponentsSchemasUuid, identifier: Tm1HTKEcIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Tm1HTKEcPoliciesComponentsSchemasSingleResponse>> {
            return AccessPoliciesApiFp(configuration).accessPoliciesUpdateAnAccessPolicy(body, uuid, uuid1, identifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccessPoliciesApi - object-oriented interface
 * @export
 * @class AccessPoliciesApi
 * @extends {BaseAPI}
 */
export class AccessPoliciesApi extends BaseAPI {
    /**
     * Create a new Access policy for an application.
     * @summary Create an Access policy
     * @param {UuidPoliciesBody} body 
     * @param {Tm1HTKEcComponentsSchemasUuid} uuid 
     * @param {Tm1HTKEcIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessPoliciesApi
     */
    public async accessPoliciesCreateAnAccessPolicy(body: UuidPoliciesBody, uuid: Tm1HTKEcComponentsSchemasUuid, identifier: Tm1HTKEcIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Tm1HTKEcPoliciesComponentsSchemasSingleResponse>> {
        return AccessPoliciesApiFp(this.configuration).accessPoliciesCreateAnAccessPolicy(body, uuid, identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete an Access policy.
     * @summary Delete an Access policy
     * @param {Tm1HTKEcComponentsSchemasUuid} uuid 
     * @param {Tm1HTKEcComponentsSchemasUuid} uuid1 
     * @param {Tm1HTKEcIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessPoliciesApi
     */
    public async accessPoliciesDeleteAnAccessPolicy(uuid: Tm1HTKEcComponentsSchemasUuid, uuid1: Tm1HTKEcComponentsSchemasUuid, identifier: Tm1HTKEcIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Tm1HTKEcPoliciesComponentsSchemasIdResponse>> {
        return AccessPoliciesApiFp(this.configuration).accessPoliciesDeleteAnAccessPolicy(uuid, uuid1, identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches a single Access policy.
     * @summary Get an Access policy
     * @param {Tm1HTKEcComponentsSchemasUuid} uuid 
     * @param {Tm1HTKEcComponentsSchemasUuid} uuid1 
     * @param {Tm1HTKEcIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessPoliciesApi
     */
    public async accessPoliciesGetAnAccessPolicy(uuid: Tm1HTKEcComponentsSchemasUuid, uuid1: Tm1HTKEcComponentsSchemasUuid, identifier: Tm1HTKEcIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Tm1HTKEcPoliciesComponentsSchemasSingleResponse>> {
        return AccessPoliciesApiFp(this.configuration).accessPoliciesGetAnAccessPolicy(uuid, uuid1, identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists Access policies configured for an application.
     * @summary List Access policies
     * @param {Tm1HTKEcComponentsSchemasUuid} uuid 
     * @param {Tm1HTKEcIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessPoliciesApi
     */
    public async accessPoliciesListAccessPolicies(uuid: Tm1HTKEcComponentsSchemasUuid, identifier: Tm1HTKEcIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Tm1HTKEcPoliciesComponentsSchemasResponseCollection>> {
        return AccessPoliciesApiFp(this.configuration).accessPoliciesListAccessPolicies(uuid, identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update a configured Access policy.
     * @summary Update an Access policy
     * @param {PoliciesUuidBody} body 
     * @param {Tm1HTKEcComponentsSchemasUuid} uuid 
     * @param {Tm1HTKEcComponentsSchemasUuid} uuid1 
     * @param {Tm1HTKEcIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessPoliciesApi
     */
    public async accessPoliciesUpdateAnAccessPolicy(body: PoliciesUuidBody, uuid: Tm1HTKEcComponentsSchemasUuid, uuid1: Tm1HTKEcComponentsSchemasUuid, identifier: Tm1HTKEcIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Tm1HTKEcPoliciesComponentsSchemasSingleResponse>> {
        return AccessPoliciesApiFp(this.configuration).accessPoliciesUpdateAnAccessPolicy(body, uuid, uuid1, identifier, options).then((request) => request(this.axios, this.basePath));
    }
}
