/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AuJBhWMyGetZoneConnectionResponse } from '../models';
import { AuJBhWMyGetZonePolicyResponse } from '../models';
import { AuJBhWMyGetZoneScriptResponse } from '../models';
import { AuJBhWMyIdentifier } from '../models';
import { AuJBhWMyListZoneConnectionsResponse } from '../models';
import { AuJBhWMyListZonePoliciesResponse } from '../models';
import { AuJBhWMyListZoneScriptsResponse } from '../models';
import { AuJBhWMyPolicyId } from '../models';
import { AuJBhWMyResourceId } from '../models';
import { InlineResponse20046 } from '../models';
import { InlineResponse20047 } from '../models';
import { InlineResponse4XX237 } from '../models';
import { InlineResponse4XX238 } from '../models';
import { InlineResponse4XX239 } from '../models';
import { InlineResponse4XX240 } from '../models';
import { InlineResponse4XX241 } from '../models';
import { InlineResponse4XX242 } from '../models';
import { InlineResponse4XX243 } from '../models';
import { InlineResponse4XX244 } from '../models';
import { PageShieldPoliciesBody } from '../models';
import { PoliciesPolicyIdBody } from '../models';
import { ZoneIdPageShieldBody } from '../models';
/**
 * PageShieldApi - axios parameter creator
 * @export
 */
export const PageShieldApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a Page Shield policy.
         * @summary Create a Page Shield policy
         * @param {PageShieldPoliciesBody} body 
         * @param {AuJBhWMyIdentifier} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pageShieldCreateAPageShieldPolicy: async (body: PageShieldPoliciesBody, zoneId: AuJBhWMyIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling pageShieldCreateAPageShieldPolicy.');
            }
            // verify required parameter 'zoneId' is not null or undefined
            if (zoneId === null || zoneId === undefined) {
                throw new RequiredError('zoneId','Required parameter zoneId was null or undefined when calling pageShieldCreateAPageShieldPolicy.');
            }
            const localVarPath = `/zones/{zone_id}/page_shield/policies`
                .replace(`{${"zone_id"}}`, encodeURIComponent(String(zoneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Page Shield policy by ID.
         * @summary Delete a Page Shield policy
         * @param {AuJBhWMyIdentifier} zoneId 
         * @param {AuJBhWMyPolicyId} policyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pageShieldDeleteAPageShieldPolicy: async (zoneId: AuJBhWMyIdentifier, policyId: AuJBhWMyPolicyId, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneId' is not null or undefined
            if (zoneId === null || zoneId === undefined) {
                throw new RequiredError('zoneId','Required parameter zoneId was null or undefined when calling pageShieldDeleteAPageShieldPolicy.');
            }
            // verify required parameter 'policyId' is not null or undefined
            if (policyId === null || policyId === undefined) {
                throw new RequiredError('policyId','Required parameter policyId was null or undefined when calling pageShieldDeleteAPageShieldPolicy.');
            }
            const localVarPath = `/zones/{zone_id}/page_shield/policies/{policy_id}`
                .replace(`{${"zone_id"}}`, encodeURIComponent(String(zoneId)))
                .replace(`{${"policy_id"}}`, encodeURIComponent(String(policyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches a connection detected by Page Shield by connection ID.
         * @summary Get a Page Shield connection
         * @param {AuJBhWMyIdentifier} zoneId 
         * @param {AuJBhWMyResourceId} connectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pageShieldGetAPageShieldConnection: async (zoneId: AuJBhWMyIdentifier, connectionId: AuJBhWMyResourceId, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneId' is not null or undefined
            if (zoneId === null || zoneId === undefined) {
                throw new RequiredError('zoneId','Required parameter zoneId was null or undefined when calling pageShieldGetAPageShieldConnection.');
            }
            // verify required parameter 'connectionId' is not null or undefined
            if (connectionId === null || connectionId === undefined) {
                throw new RequiredError('connectionId','Required parameter connectionId was null or undefined when calling pageShieldGetAPageShieldConnection.');
            }
            const localVarPath = `/zones/{zone_id}/page_shield/connections/{connection_id}`
                .replace(`{${"zone_id"}}`, encodeURIComponent(String(zoneId)))
                .replace(`{${"connection_id"}}`, encodeURIComponent(String(connectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches a Page Shield policy by ID.
         * @summary Get a Page Shield policy
         * @param {AuJBhWMyIdentifier} zoneId 
         * @param {AuJBhWMyPolicyId} policyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pageShieldGetAPageShieldPolicy: async (zoneId: AuJBhWMyIdentifier, policyId: AuJBhWMyPolicyId, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneId' is not null or undefined
            if (zoneId === null || zoneId === undefined) {
                throw new RequiredError('zoneId','Required parameter zoneId was null or undefined when calling pageShieldGetAPageShieldPolicy.');
            }
            // verify required parameter 'policyId' is not null or undefined
            if (policyId === null || policyId === undefined) {
                throw new RequiredError('policyId','Required parameter policyId was null or undefined when calling pageShieldGetAPageShieldPolicy.');
            }
            const localVarPath = `/zones/{zone_id}/page_shield/policies/{policy_id}`
                .replace(`{${"zone_id"}}`, encodeURIComponent(String(zoneId)))
                .replace(`{${"policy_id"}}`, encodeURIComponent(String(policyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches a script detected by Page Shield by script ID.
         * @summary Get a Page Shield script
         * @param {AuJBhWMyIdentifier} zoneId 
         * @param {AuJBhWMyResourceId} scriptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pageShieldGetAPageShieldScript: async (zoneId: AuJBhWMyIdentifier, scriptId: AuJBhWMyResourceId, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneId' is not null or undefined
            if (zoneId === null || zoneId === undefined) {
                throw new RequiredError('zoneId','Required parameter zoneId was null or undefined when calling pageShieldGetAPageShieldScript.');
            }
            // verify required parameter 'scriptId' is not null or undefined
            if (scriptId === null || scriptId === undefined) {
                throw new RequiredError('scriptId','Required parameter scriptId was null or undefined when calling pageShieldGetAPageShieldScript.');
            }
            const localVarPath = `/zones/{zone_id}/page_shield/scripts/{script_id}`
                .replace(`{${"zone_id"}}`, encodeURIComponent(String(zoneId)))
                .replace(`{${"script_id"}}`, encodeURIComponent(String(scriptId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches the Page Shield settings.
         * @summary Get Page Shield settings
         * @param {AuJBhWMyIdentifier} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pageShieldGetPageShieldSettings: async (zoneId: AuJBhWMyIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneId' is not null or undefined
            if (zoneId === null || zoneId === undefined) {
                throw new RequiredError('zoneId','Required parameter zoneId was null or undefined when calling pageShieldGetPageShieldSettings.');
            }
            const localVarPath = `/zones/{zone_id}/page_shield`
                .replace(`{${"zone_id"}}`, encodeURIComponent(String(zoneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all connections detected by Page Shield.
         * @summary List Page Shield connections
         * @param {AuJBhWMyIdentifier} zoneId 
         * @param {string} [excludeUrls] 
         * @param {string} [urls] 
         * @param {string} [hosts] 
         * @param {string} [page] 
         * @param {number} [perPage] 
         * @param {string} [orderBy] 
         * @param {string} [direction] 
         * @param {boolean} [prioritizeMalicious] 
         * @param {boolean} [excludeCdnCgi] 
         * @param {string} [status] 
         * @param {string} [pageUrl] 
         * @param {string} [_export] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pageShieldListPageShieldConnections: async (zoneId: AuJBhWMyIdentifier, excludeUrls?: string, urls?: string, hosts?: string, page?: string, perPage?: number, orderBy?: string, direction?: string, prioritizeMalicious?: boolean, excludeCdnCgi?: boolean, status?: string, pageUrl?: string, _export?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneId' is not null or undefined
            if (zoneId === null || zoneId === undefined) {
                throw new RequiredError('zoneId','Required parameter zoneId was null or undefined when calling pageShieldListPageShieldConnections.');
            }
            const localVarPath = `/zones/{zone_id}/page_shield/connections`
                .replace(`{${"zone_id"}}`, encodeURIComponent(String(zoneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            if (excludeUrls !== undefined) {
                localVarQueryParameter['exclude_urls'] = excludeUrls;
            }

            if (urls !== undefined) {
                localVarQueryParameter['urls'] = urls;
            }

            if (hosts !== undefined) {
                localVarQueryParameter['hosts'] = hosts;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (prioritizeMalicious !== undefined) {
                localVarQueryParameter['prioritize_malicious'] = prioritizeMalicious;
            }

            if (excludeCdnCgi !== undefined) {
                localVarQueryParameter['exclude_cdn_cgi'] = excludeCdnCgi;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (pageUrl !== undefined) {
                localVarQueryParameter['page_url'] = pageUrl;
            }

            if (_export !== undefined) {
                localVarQueryParameter['export'] = _export;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all Page Shield policies.
         * @summary List Page Shield policies
         * @param {AuJBhWMyIdentifier} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pageShieldListPageShieldPolicies: async (zoneId: AuJBhWMyIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneId' is not null or undefined
            if (zoneId === null || zoneId === undefined) {
                throw new RequiredError('zoneId','Required parameter zoneId was null or undefined when calling pageShieldListPageShieldPolicies.');
            }
            const localVarPath = `/zones/{zone_id}/page_shield/policies`
                .replace(`{${"zone_id"}}`, encodeURIComponent(String(zoneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all scripts detected by Page Shield.
         * @summary List Page Shield scripts
         * @param {AuJBhWMyIdentifier} zoneId 
         * @param {string} [excludeUrls] 
         * @param {string} [urls] 
         * @param {string} [hosts] 
         * @param {string} [page] 
         * @param {number} [perPage] 
         * @param {string} [orderBy] 
         * @param {string} [direction] 
         * @param {boolean} [prioritizeMalicious] 
         * @param {boolean} [excludeCdnCgi] 
         * @param {boolean} [excludeDuplicates] 
         * @param {string} [status] 
         * @param {string} [pageUrl] 
         * @param {string} [_export] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pageShieldListPageShieldScripts: async (zoneId: AuJBhWMyIdentifier, excludeUrls?: string, urls?: string, hosts?: string, page?: string, perPage?: number, orderBy?: string, direction?: string, prioritizeMalicious?: boolean, excludeCdnCgi?: boolean, excludeDuplicates?: boolean, status?: string, pageUrl?: string, _export?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneId' is not null or undefined
            if (zoneId === null || zoneId === undefined) {
                throw new RequiredError('zoneId','Required parameter zoneId was null or undefined when calling pageShieldListPageShieldScripts.');
            }
            const localVarPath = `/zones/{zone_id}/page_shield/scripts`
                .replace(`{${"zone_id"}}`, encodeURIComponent(String(zoneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            if (excludeUrls !== undefined) {
                localVarQueryParameter['exclude_urls'] = excludeUrls;
            }

            if (urls !== undefined) {
                localVarQueryParameter['urls'] = urls;
            }

            if (hosts !== undefined) {
                localVarQueryParameter['hosts'] = hosts;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (prioritizeMalicious !== undefined) {
                localVarQueryParameter['prioritize_malicious'] = prioritizeMalicious;
            }

            if (excludeCdnCgi !== undefined) {
                localVarQueryParameter['exclude_cdn_cgi'] = excludeCdnCgi;
            }

            if (excludeDuplicates !== undefined) {
                localVarQueryParameter['exclude_duplicates'] = excludeDuplicates;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (pageUrl !== undefined) {
                localVarQueryParameter['page_url'] = pageUrl;
            }

            if (_export !== undefined) {
                localVarQueryParameter['export'] = _export;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a Page Shield policy by ID.
         * @summary Update a Page Shield policy
         * @param {PoliciesPolicyIdBody} body 
         * @param {AuJBhWMyIdentifier} zoneId 
         * @param {AuJBhWMyPolicyId} policyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pageShieldUpdateAPageShieldPolicy: async (body: PoliciesPolicyIdBody, zoneId: AuJBhWMyIdentifier, policyId: AuJBhWMyPolicyId, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling pageShieldUpdateAPageShieldPolicy.');
            }
            // verify required parameter 'zoneId' is not null or undefined
            if (zoneId === null || zoneId === undefined) {
                throw new RequiredError('zoneId','Required parameter zoneId was null or undefined when calling pageShieldUpdateAPageShieldPolicy.');
            }
            // verify required parameter 'policyId' is not null or undefined
            if (policyId === null || policyId === undefined) {
                throw new RequiredError('policyId','Required parameter policyId was null or undefined when calling pageShieldUpdateAPageShieldPolicy.');
            }
            const localVarPath = `/zones/{zone_id}/page_shield/policies/{policy_id}`
                .replace(`{${"zone_id"}}`, encodeURIComponent(String(zoneId)))
                .replace(`{${"policy_id"}}`, encodeURIComponent(String(policyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates Page Shield settings.
         * @summary Update Page Shield settings
         * @param {ZoneIdPageShieldBody} body 
         * @param {AuJBhWMyIdentifier} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pageShieldUpdatePageShieldSettings: async (body: ZoneIdPageShieldBody, zoneId: AuJBhWMyIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling pageShieldUpdatePageShieldSettings.');
            }
            // verify required parameter 'zoneId' is not null or undefined
            if (zoneId === null || zoneId === undefined) {
                throw new RequiredError('zoneId','Required parameter zoneId was null or undefined when calling pageShieldUpdatePageShieldSettings.');
            }
            const localVarPath = `/zones/{zone_id}/page_shield`
                .replace(`{${"zone_id"}}`, encodeURIComponent(String(zoneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PageShieldApi - functional programming interface
 * @export
 */
export const PageShieldApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create a Page Shield policy.
         * @summary Create a Page Shield policy
         * @param {PageShieldPoliciesBody} body 
         * @param {AuJBhWMyIdentifier} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pageShieldCreateAPageShieldPolicy(body: PageShieldPoliciesBody, zoneId: AuJBhWMyIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AuJBhWMyGetZonePolicyResponse>>> {
            const localVarAxiosArgs = await PageShieldApiAxiosParamCreator(configuration).pageShieldCreateAPageShieldPolicy(body, zoneId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a Page Shield policy by ID.
         * @summary Delete a Page Shield policy
         * @param {AuJBhWMyIdentifier} zoneId 
         * @param {AuJBhWMyPolicyId} policyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pageShieldDeleteAPageShieldPolicy(zoneId: AuJBhWMyIdentifier, policyId: AuJBhWMyPolicyId, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await PageShieldApiAxiosParamCreator(configuration).pageShieldDeleteAPageShieldPolicy(zoneId, policyId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetches a connection detected by Page Shield by connection ID.
         * @summary Get a Page Shield connection
         * @param {AuJBhWMyIdentifier} zoneId 
         * @param {AuJBhWMyResourceId} connectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pageShieldGetAPageShieldConnection(zoneId: AuJBhWMyIdentifier, connectionId: AuJBhWMyResourceId, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AuJBhWMyGetZoneConnectionResponse>>> {
            const localVarAxiosArgs = await PageShieldApiAxiosParamCreator(configuration).pageShieldGetAPageShieldConnection(zoneId, connectionId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetches a Page Shield policy by ID.
         * @summary Get a Page Shield policy
         * @param {AuJBhWMyIdentifier} zoneId 
         * @param {AuJBhWMyPolicyId} policyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pageShieldGetAPageShieldPolicy(zoneId: AuJBhWMyIdentifier, policyId: AuJBhWMyPolicyId, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AuJBhWMyGetZonePolicyResponse>>> {
            const localVarAxiosArgs = await PageShieldApiAxiosParamCreator(configuration).pageShieldGetAPageShieldPolicy(zoneId, policyId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetches a script detected by Page Shield by script ID.
         * @summary Get a Page Shield script
         * @param {AuJBhWMyIdentifier} zoneId 
         * @param {AuJBhWMyResourceId} scriptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pageShieldGetAPageShieldScript(zoneId: AuJBhWMyIdentifier, scriptId: AuJBhWMyResourceId, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AuJBhWMyGetZoneScriptResponse>>> {
            const localVarAxiosArgs = await PageShieldApiAxiosParamCreator(configuration).pageShieldGetAPageShieldScript(zoneId, scriptId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetches the Page Shield settings.
         * @summary Get Page Shield settings
         * @param {AuJBhWMyIdentifier} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pageShieldGetPageShieldSettings(zoneId: AuJBhWMyIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20046>>> {
            const localVarAxiosArgs = await PageShieldApiAxiosParamCreator(configuration).pageShieldGetPageShieldSettings(zoneId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Lists all connections detected by Page Shield.
         * @summary List Page Shield connections
         * @param {AuJBhWMyIdentifier} zoneId 
         * @param {string} [excludeUrls] 
         * @param {string} [urls] 
         * @param {string} [hosts] 
         * @param {string} [page] 
         * @param {number} [perPage] 
         * @param {string} [orderBy] 
         * @param {string} [direction] 
         * @param {boolean} [prioritizeMalicious] 
         * @param {boolean} [excludeCdnCgi] 
         * @param {string} [status] 
         * @param {string} [pageUrl] 
         * @param {string} [_export] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pageShieldListPageShieldConnections(zoneId: AuJBhWMyIdentifier, excludeUrls?: string, urls?: string, hosts?: string, page?: string, perPage?: number, orderBy?: string, direction?: string, prioritizeMalicious?: boolean, excludeCdnCgi?: boolean, status?: string, pageUrl?: string, _export?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AuJBhWMyListZoneConnectionsResponse>>> {
            const localVarAxiosArgs = await PageShieldApiAxiosParamCreator(configuration).pageShieldListPageShieldConnections(zoneId, excludeUrls, urls, hosts, page, perPage, orderBy, direction, prioritizeMalicious, excludeCdnCgi, status, pageUrl, _export, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Lists all Page Shield policies.
         * @summary List Page Shield policies
         * @param {AuJBhWMyIdentifier} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pageShieldListPageShieldPolicies(zoneId: AuJBhWMyIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AuJBhWMyListZonePoliciesResponse>>> {
            const localVarAxiosArgs = await PageShieldApiAxiosParamCreator(configuration).pageShieldListPageShieldPolicies(zoneId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Lists all scripts detected by Page Shield.
         * @summary List Page Shield scripts
         * @param {AuJBhWMyIdentifier} zoneId 
         * @param {string} [excludeUrls] 
         * @param {string} [urls] 
         * @param {string} [hosts] 
         * @param {string} [page] 
         * @param {number} [perPage] 
         * @param {string} [orderBy] 
         * @param {string} [direction] 
         * @param {boolean} [prioritizeMalicious] 
         * @param {boolean} [excludeCdnCgi] 
         * @param {boolean} [excludeDuplicates] 
         * @param {string} [status] 
         * @param {string} [pageUrl] 
         * @param {string} [_export] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pageShieldListPageShieldScripts(zoneId: AuJBhWMyIdentifier, excludeUrls?: string, urls?: string, hosts?: string, page?: string, perPage?: number, orderBy?: string, direction?: string, prioritizeMalicious?: boolean, excludeCdnCgi?: boolean, excludeDuplicates?: boolean, status?: string, pageUrl?: string, _export?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AuJBhWMyListZoneScriptsResponse>>> {
            const localVarAxiosArgs = await PageShieldApiAxiosParamCreator(configuration).pageShieldListPageShieldScripts(zoneId, excludeUrls, urls, hosts, page, perPage, orderBy, direction, prioritizeMalicious, excludeCdnCgi, excludeDuplicates, status, pageUrl, _export, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a Page Shield policy by ID.
         * @summary Update a Page Shield policy
         * @param {PoliciesPolicyIdBody} body 
         * @param {AuJBhWMyIdentifier} zoneId 
         * @param {AuJBhWMyPolicyId} policyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pageShieldUpdateAPageShieldPolicy(body: PoliciesPolicyIdBody, zoneId: AuJBhWMyIdentifier, policyId: AuJBhWMyPolicyId, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AuJBhWMyGetZonePolicyResponse>>> {
            const localVarAxiosArgs = await PageShieldApiAxiosParamCreator(configuration).pageShieldUpdateAPageShieldPolicy(body, zoneId, policyId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates Page Shield settings.
         * @summary Update Page Shield settings
         * @param {ZoneIdPageShieldBody} body 
         * @param {AuJBhWMyIdentifier} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pageShieldUpdatePageShieldSettings(body: ZoneIdPageShieldBody, zoneId: AuJBhWMyIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20047>>> {
            const localVarAxiosArgs = await PageShieldApiAxiosParamCreator(configuration).pageShieldUpdatePageShieldSettings(body, zoneId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PageShieldApi - factory interface
 * @export
 */
export const PageShieldApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create a Page Shield policy.
         * @summary Create a Page Shield policy
         * @param {PageShieldPoliciesBody} body 
         * @param {AuJBhWMyIdentifier} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pageShieldCreateAPageShieldPolicy(body: PageShieldPoliciesBody, zoneId: AuJBhWMyIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<AuJBhWMyGetZonePolicyResponse>> {
            return PageShieldApiFp(configuration).pageShieldCreateAPageShieldPolicy(body, zoneId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Page Shield policy by ID.
         * @summary Delete a Page Shield policy
         * @param {AuJBhWMyIdentifier} zoneId 
         * @param {AuJBhWMyPolicyId} policyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pageShieldDeleteAPageShieldPolicy(zoneId: AuJBhWMyIdentifier, policyId: AuJBhWMyPolicyId, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return PageShieldApiFp(configuration).pageShieldDeleteAPageShieldPolicy(zoneId, policyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches a connection detected by Page Shield by connection ID.
         * @summary Get a Page Shield connection
         * @param {AuJBhWMyIdentifier} zoneId 
         * @param {AuJBhWMyResourceId} connectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pageShieldGetAPageShieldConnection(zoneId: AuJBhWMyIdentifier, connectionId: AuJBhWMyResourceId, options?: AxiosRequestConfig): Promise<AxiosResponse<AuJBhWMyGetZoneConnectionResponse>> {
            return PageShieldApiFp(configuration).pageShieldGetAPageShieldConnection(zoneId, connectionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches a Page Shield policy by ID.
         * @summary Get a Page Shield policy
         * @param {AuJBhWMyIdentifier} zoneId 
         * @param {AuJBhWMyPolicyId} policyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pageShieldGetAPageShieldPolicy(zoneId: AuJBhWMyIdentifier, policyId: AuJBhWMyPolicyId, options?: AxiosRequestConfig): Promise<AxiosResponse<AuJBhWMyGetZonePolicyResponse>> {
            return PageShieldApiFp(configuration).pageShieldGetAPageShieldPolicy(zoneId, policyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches a script detected by Page Shield by script ID.
         * @summary Get a Page Shield script
         * @param {AuJBhWMyIdentifier} zoneId 
         * @param {AuJBhWMyResourceId} scriptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pageShieldGetAPageShieldScript(zoneId: AuJBhWMyIdentifier, scriptId: AuJBhWMyResourceId, options?: AxiosRequestConfig): Promise<AxiosResponse<AuJBhWMyGetZoneScriptResponse>> {
            return PageShieldApiFp(configuration).pageShieldGetAPageShieldScript(zoneId, scriptId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches the Page Shield settings.
         * @summary Get Page Shield settings
         * @param {AuJBhWMyIdentifier} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pageShieldGetPageShieldSettings(zoneId: AuJBhWMyIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20046>> {
            return PageShieldApiFp(configuration).pageShieldGetPageShieldSettings(zoneId, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists all connections detected by Page Shield.
         * @summary List Page Shield connections
         * @param {AuJBhWMyIdentifier} zoneId 
         * @param {string} [excludeUrls] 
         * @param {string} [urls] 
         * @param {string} [hosts] 
         * @param {string} [page] 
         * @param {number} [perPage] 
         * @param {string} [orderBy] 
         * @param {string} [direction] 
         * @param {boolean} [prioritizeMalicious] 
         * @param {boolean} [excludeCdnCgi] 
         * @param {string} [status] 
         * @param {string} [pageUrl] 
         * @param {string} [_export] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pageShieldListPageShieldConnections(zoneId: AuJBhWMyIdentifier, excludeUrls?: string, urls?: string, hosts?: string, page?: string, perPage?: number, orderBy?: string, direction?: string, prioritizeMalicious?: boolean, excludeCdnCgi?: boolean, status?: string, pageUrl?: string, _export?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<AuJBhWMyListZoneConnectionsResponse>> {
            return PageShieldApiFp(configuration).pageShieldListPageShieldConnections(zoneId, excludeUrls, urls, hosts, page, perPage, orderBy, direction, prioritizeMalicious, excludeCdnCgi, status, pageUrl, _export, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists all Page Shield policies.
         * @summary List Page Shield policies
         * @param {AuJBhWMyIdentifier} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pageShieldListPageShieldPolicies(zoneId: AuJBhWMyIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<AuJBhWMyListZonePoliciesResponse>> {
            return PageShieldApiFp(configuration).pageShieldListPageShieldPolicies(zoneId, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists all scripts detected by Page Shield.
         * @summary List Page Shield scripts
         * @param {AuJBhWMyIdentifier} zoneId 
         * @param {string} [excludeUrls] 
         * @param {string} [urls] 
         * @param {string} [hosts] 
         * @param {string} [page] 
         * @param {number} [perPage] 
         * @param {string} [orderBy] 
         * @param {string} [direction] 
         * @param {boolean} [prioritizeMalicious] 
         * @param {boolean} [excludeCdnCgi] 
         * @param {boolean} [excludeDuplicates] 
         * @param {string} [status] 
         * @param {string} [pageUrl] 
         * @param {string} [_export] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pageShieldListPageShieldScripts(zoneId: AuJBhWMyIdentifier, excludeUrls?: string, urls?: string, hosts?: string, page?: string, perPage?: number, orderBy?: string, direction?: string, prioritizeMalicious?: boolean, excludeCdnCgi?: boolean, excludeDuplicates?: boolean, status?: string, pageUrl?: string, _export?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<AuJBhWMyListZoneScriptsResponse>> {
            return PageShieldApiFp(configuration).pageShieldListPageShieldScripts(zoneId, excludeUrls, urls, hosts, page, perPage, orderBy, direction, prioritizeMalicious, excludeCdnCgi, excludeDuplicates, status, pageUrl, _export, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a Page Shield policy by ID.
         * @summary Update a Page Shield policy
         * @param {PoliciesPolicyIdBody} body 
         * @param {AuJBhWMyIdentifier} zoneId 
         * @param {AuJBhWMyPolicyId} policyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pageShieldUpdateAPageShieldPolicy(body: PoliciesPolicyIdBody, zoneId: AuJBhWMyIdentifier, policyId: AuJBhWMyPolicyId, options?: AxiosRequestConfig): Promise<AxiosResponse<AuJBhWMyGetZonePolicyResponse>> {
            return PageShieldApiFp(configuration).pageShieldUpdateAPageShieldPolicy(body, zoneId, policyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates Page Shield settings.
         * @summary Update Page Shield settings
         * @param {ZoneIdPageShieldBody} body 
         * @param {AuJBhWMyIdentifier} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pageShieldUpdatePageShieldSettings(body: ZoneIdPageShieldBody, zoneId: AuJBhWMyIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20047>> {
            return PageShieldApiFp(configuration).pageShieldUpdatePageShieldSettings(body, zoneId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PageShieldApi - object-oriented interface
 * @export
 * @class PageShieldApi
 * @extends {BaseAPI}
 */
export class PageShieldApi extends BaseAPI {
    /**
     * Create a Page Shield policy.
     * @summary Create a Page Shield policy
     * @param {PageShieldPoliciesBody} body 
     * @param {AuJBhWMyIdentifier} zoneId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageShieldApi
     */
    public async pageShieldCreateAPageShieldPolicy(body: PageShieldPoliciesBody, zoneId: AuJBhWMyIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<AuJBhWMyGetZonePolicyResponse>> {
        return PageShieldApiFp(this.configuration).pageShieldCreateAPageShieldPolicy(body, zoneId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a Page Shield policy by ID.
     * @summary Delete a Page Shield policy
     * @param {AuJBhWMyIdentifier} zoneId 
     * @param {AuJBhWMyPolicyId} policyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageShieldApi
     */
    public async pageShieldDeleteAPageShieldPolicy(zoneId: AuJBhWMyIdentifier, policyId: AuJBhWMyPolicyId, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return PageShieldApiFp(this.configuration).pageShieldDeleteAPageShieldPolicy(zoneId, policyId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches a connection detected by Page Shield by connection ID.
     * @summary Get a Page Shield connection
     * @param {AuJBhWMyIdentifier} zoneId 
     * @param {AuJBhWMyResourceId} connectionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageShieldApi
     */
    public async pageShieldGetAPageShieldConnection(zoneId: AuJBhWMyIdentifier, connectionId: AuJBhWMyResourceId, options?: AxiosRequestConfig) : Promise<AxiosResponse<AuJBhWMyGetZoneConnectionResponse>> {
        return PageShieldApiFp(this.configuration).pageShieldGetAPageShieldConnection(zoneId, connectionId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches a Page Shield policy by ID.
     * @summary Get a Page Shield policy
     * @param {AuJBhWMyIdentifier} zoneId 
     * @param {AuJBhWMyPolicyId} policyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageShieldApi
     */
    public async pageShieldGetAPageShieldPolicy(zoneId: AuJBhWMyIdentifier, policyId: AuJBhWMyPolicyId, options?: AxiosRequestConfig) : Promise<AxiosResponse<AuJBhWMyGetZonePolicyResponse>> {
        return PageShieldApiFp(this.configuration).pageShieldGetAPageShieldPolicy(zoneId, policyId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches a script detected by Page Shield by script ID.
     * @summary Get a Page Shield script
     * @param {AuJBhWMyIdentifier} zoneId 
     * @param {AuJBhWMyResourceId} scriptId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageShieldApi
     */
    public async pageShieldGetAPageShieldScript(zoneId: AuJBhWMyIdentifier, scriptId: AuJBhWMyResourceId, options?: AxiosRequestConfig) : Promise<AxiosResponse<AuJBhWMyGetZoneScriptResponse>> {
        return PageShieldApiFp(this.configuration).pageShieldGetAPageShieldScript(zoneId, scriptId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches the Page Shield settings.
     * @summary Get Page Shield settings
     * @param {AuJBhWMyIdentifier} zoneId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageShieldApi
     */
    public async pageShieldGetPageShieldSettings(zoneId: AuJBhWMyIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20046>> {
        return PageShieldApiFp(this.configuration).pageShieldGetPageShieldSettings(zoneId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists all connections detected by Page Shield.
     * @summary List Page Shield connections
     * @param {AuJBhWMyIdentifier} zoneId 
     * @param {string} [excludeUrls] 
     * @param {string} [urls] 
     * @param {string} [hosts] 
     * @param {string} [page] 
     * @param {number} [perPage] 
     * @param {string} [orderBy] 
     * @param {string} [direction] 
     * @param {boolean} [prioritizeMalicious] 
     * @param {boolean} [excludeCdnCgi] 
     * @param {string} [status] 
     * @param {string} [pageUrl] 
     * @param {string} [_export] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageShieldApi
     */
    public async pageShieldListPageShieldConnections(zoneId: AuJBhWMyIdentifier, excludeUrls?: string, urls?: string, hosts?: string, page?: string, perPage?: number, orderBy?: string, direction?: string, prioritizeMalicious?: boolean, excludeCdnCgi?: boolean, status?: string, pageUrl?: string, _export?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<AuJBhWMyListZoneConnectionsResponse>> {
        return PageShieldApiFp(this.configuration).pageShieldListPageShieldConnections(zoneId, excludeUrls, urls, hosts, page, perPage, orderBy, direction, prioritizeMalicious, excludeCdnCgi, status, pageUrl, _export, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists all Page Shield policies.
     * @summary List Page Shield policies
     * @param {AuJBhWMyIdentifier} zoneId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageShieldApi
     */
    public async pageShieldListPageShieldPolicies(zoneId: AuJBhWMyIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<AuJBhWMyListZonePoliciesResponse>> {
        return PageShieldApiFp(this.configuration).pageShieldListPageShieldPolicies(zoneId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists all scripts detected by Page Shield.
     * @summary List Page Shield scripts
     * @param {AuJBhWMyIdentifier} zoneId 
     * @param {string} [excludeUrls] 
     * @param {string} [urls] 
     * @param {string} [hosts] 
     * @param {string} [page] 
     * @param {number} [perPage] 
     * @param {string} [orderBy] 
     * @param {string} [direction] 
     * @param {boolean} [prioritizeMalicious] 
     * @param {boolean} [excludeCdnCgi] 
     * @param {boolean} [excludeDuplicates] 
     * @param {string} [status] 
     * @param {string} [pageUrl] 
     * @param {string} [_export] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageShieldApi
     */
    public async pageShieldListPageShieldScripts(zoneId: AuJBhWMyIdentifier, excludeUrls?: string, urls?: string, hosts?: string, page?: string, perPage?: number, orderBy?: string, direction?: string, prioritizeMalicious?: boolean, excludeCdnCgi?: boolean, excludeDuplicates?: boolean, status?: string, pageUrl?: string, _export?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<AuJBhWMyListZoneScriptsResponse>> {
        return PageShieldApiFp(this.configuration).pageShieldListPageShieldScripts(zoneId, excludeUrls, urls, hosts, page, perPage, orderBy, direction, prioritizeMalicious, excludeCdnCgi, excludeDuplicates, status, pageUrl, _export, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update a Page Shield policy by ID.
     * @summary Update a Page Shield policy
     * @param {PoliciesPolicyIdBody} body 
     * @param {AuJBhWMyIdentifier} zoneId 
     * @param {AuJBhWMyPolicyId} policyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageShieldApi
     */
    public async pageShieldUpdateAPageShieldPolicy(body: PoliciesPolicyIdBody, zoneId: AuJBhWMyIdentifier, policyId: AuJBhWMyPolicyId, options?: AxiosRequestConfig) : Promise<AxiosResponse<AuJBhWMyGetZonePolicyResponse>> {
        return PageShieldApiFp(this.configuration).pageShieldUpdateAPageShieldPolicy(body, zoneId, policyId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates Page Shield settings.
     * @summary Update Page Shield settings
     * @param {ZoneIdPageShieldBody} body 
     * @param {AuJBhWMyIdentifier} zoneId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageShieldApi
     */
    public async pageShieldUpdatePageShieldSettings(body: ZoneIdPageShieldBody, zoneId: AuJBhWMyIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20047>> {
        return PageShieldApiFp(this.configuration).pageShieldUpdatePageShieldSettings(body, zoneId, options).then((request) => request(this.axios, this.basePath));
    }
}
