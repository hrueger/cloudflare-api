/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse4XX4 } from '../models';
import { InlineResponse4XX6 } from '../models';
import { OoPdFtgXConfiguration } from '../models';
import { OoPdFtgXDefaultResponse } from '../models';
import { OoPdFtgXIdentifier } from '../models';
import { OoPdFtgXProperties } from '../models';
import { OoPdFtgXSingleResponse } from '../models';
/**
 * APIShieldSettingsApi - axios parameter creator
 * @export
 */
export const APIShieldSettingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieve information about specific configuration properties
         * @param {OoPdFtgXIdentifier} zoneId 
         * @param {OoPdFtgXProperties} [properties] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShieldSettingsRetrieveInformationAboutSpecificConfigurationProperties: async (zoneId: OoPdFtgXIdentifier, properties?: OoPdFtgXProperties, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneId' is not null or undefined
            if (zoneId === null || zoneId === undefined) {
                throw new RequiredError('zoneId','Required parameter zoneId was null or undefined when calling apiShieldSettingsRetrieveInformationAboutSpecificConfigurationProperties.');
            }
            const localVarPath = `/zones/{zone_id}/api_gateway/configuration`
                .replace(`{${"zone_id"}}`, encodeURIComponent(String(zoneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            if (properties !== undefined) {
                localVarQueryParameter['properties'] = properties;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set configuration properties
         * @param {OoPdFtgXConfiguration} body 
         * @param {OoPdFtgXIdentifier} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShieldSettingsSetConfigurationProperties: async (body: OoPdFtgXConfiguration, zoneId: OoPdFtgXIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling apiShieldSettingsSetConfigurationProperties.');
            }
            // verify required parameter 'zoneId' is not null or undefined
            if (zoneId === null || zoneId === undefined) {
                throw new RequiredError('zoneId','Required parameter zoneId was null or undefined when calling apiShieldSettingsSetConfigurationProperties.');
            }
            const localVarPath = `/zones/{zone_id}/api_gateway/configuration`
                .replace(`{${"zone_id"}}`, encodeURIComponent(String(zoneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * APIShieldSettingsApi - functional programming interface
 * @export
 */
export const APIShieldSettingsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieve information about specific configuration properties
         * @param {OoPdFtgXIdentifier} zoneId 
         * @param {OoPdFtgXProperties} [properties] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiShieldSettingsRetrieveInformationAboutSpecificConfigurationProperties(zoneId: OoPdFtgXIdentifier, properties?: OoPdFtgXProperties, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<OoPdFtgXSingleResponse>>> {
            const localVarAxiosArgs = await APIShieldSettingsApiAxiosParamCreator(configuration).apiShieldSettingsRetrieveInformationAboutSpecificConfigurationProperties(zoneId, properties, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Set configuration properties
         * @param {OoPdFtgXConfiguration} body 
         * @param {OoPdFtgXIdentifier} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiShieldSettingsSetConfigurationProperties(body: OoPdFtgXConfiguration, zoneId: OoPdFtgXIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<OoPdFtgXDefaultResponse>>> {
            const localVarAxiosArgs = await APIShieldSettingsApiAxiosParamCreator(configuration).apiShieldSettingsSetConfigurationProperties(body, zoneId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * APIShieldSettingsApi - factory interface
 * @export
 */
export const APIShieldSettingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Retrieve information about specific configuration properties
         * @param {OoPdFtgXIdentifier} zoneId 
         * @param {OoPdFtgXProperties} [properties] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiShieldSettingsRetrieveInformationAboutSpecificConfigurationProperties(zoneId: OoPdFtgXIdentifier, properties?: OoPdFtgXProperties, options?: AxiosRequestConfig): Promise<AxiosResponse<OoPdFtgXSingleResponse>> {
            return APIShieldSettingsApiFp(configuration).apiShieldSettingsRetrieveInformationAboutSpecificConfigurationProperties(zoneId, properties, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set configuration properties
         * @param {OoPdFtgXConfiguration} body 
         * @param {OoPdFtgXIdentifier} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiShieldSettingsSetConfigurationProperties(body: OoPdFtgXConfiguration, zoneId: OoPdFtgXIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<OoPdFtgXDefaultResponse>> {
            return APIShieldSettingsApiFp(configuration).apiShieldSettingsSetConfigurationProperties(body, zoneId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * APIShieldSettingsApi - object-oriented interface
 * @export
 * @class APIShieldSettingsApi
 * @extends {BaseAPI}
 */
export class APIShieldSettingsApi extends BaseAPI {
    /**
     * 
     * @summary Retrieve information about specific configuration properties
     * @param {OoPdFtgXIdentifier} zoneId 
     * @param {OoPdFtgXProperties} [properties] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIShieldSettingsApi
     */
    public async apiShieldSettingsRetrieveInformationAboutSpecificConfigurationProperties(zoneId: OoPdFtgXIdentifier, properties?: OoPdFtgXProperties, options?: AxiosRequestConfig) : Promise<AxiosResponse<OoPdFtgXSingleResponse>> {
        return APIShieldSettingsApiFp(this.configuration).apiShieldSettingsRetrieveInformationAboutSpecificConfigurationProperties(zoneId, properties, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Set configuration properties
     * @param {OoPdFtgXConfiguration} body 
     * @param {OoPdFtgXIdentifier} zoneId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIShieldSettingsApi
     */
    public async apiShieldSettingsSetConfigurationProperties(body: OoPdFtgXConfiguration, zoneId: OoPdFtgXIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<OoPdFtgXDefaultResponse>> {
        return APIShieldSettingsApiFp(this.configuration).apiShieldSettingsSetConfigurationProperties(body, zoneId, options).then((request) => request(this.axios, this.basePath));
    }
}
