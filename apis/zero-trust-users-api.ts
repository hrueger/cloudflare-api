/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse4XX359 } from '../models';
import { InlineResponse4XX360 } from '../models';
import { InlineResponse4XX361 } from '../models';
import { InlineResponse4XX362 } from '../models';
import { InlineResponse4XX363 } from '../models';
import { Tm1HTKEcActiveSessionResponse } from '../models';
import { Tm1HTKEcActiveSessionsResponse } from '../models';
import { Tm1HTKEcFailedLoginResponse } from '../models';
import { Tm1HTKEcIdentifier } from '../models';
import { Tm1HTKEcLastSeenIdentityResponse } from '../models';
import { Tm1HTKEcNonce } from '../models';
import { Tm1HTKEcSchemasId } from '../models';
import { Tm1HTKEcUsersComponentsSchemasResponseCollection } from '../models';
/**
 * ZeroTrustUsersApi - axios parameter creator
 * @export
 */
export const ZeroTrustUsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get an active session for a single user.
         * @summary Get single active session
         * @param {Tm1HTKEcSchemasId} id 
         * @param {Tm1HTKEcIdentifier} identifier 
         * @param {Tm1HTKEcNonce} nonce 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zeroTrustUsersGetActiveSession: async (id: Tm1HTKEcSchemasId, identifier: Tm1HTKEcIdentifier, nonce: Tm1HTKEcNonce, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling zeroTrustUsersGetActiveSession.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling zeroTrustUsersGetActiveSession.');
            }
            // verify required parameter 'nonce' is not null or undefined
            if (nonce === null || nonce === undefined) {
                throw new RequiredError('nonce','Required parameter nonce was null or undefined when calling zeroTrustUsersGetActiveSession.');
            }
            const localVarPath = `/accounts/{identifier}/access/users/{id}/active_sessions/{nonce}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"nonce"}}`, encodeURIComponent(String(nonce)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get active sessions for a single user.
         * @summary Get active sessions
         * @param {Tm1HTKEcSchemasId} id 
         * @param {Tm1HTKEcIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zeroTrustUsersGetActiveSessions: async (id: Tm1HTKEcSchemasId, identifier: Tm1HTKEcIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling zeroTrustUsersGetActiveSessions.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling zeroTrustUsersGetActiveSessions.');
            }
            const localVarPath = `/accounts/{identifier}/access/users/{id}/active_sessions`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all failed login attempts for a single user.
         * @summary Get failed logins
         * @param {Tm1HTKEcSchemasId} id 
         * @param {Tm1HTKEcIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zeroTrustUsersGetFailedLogins: async (id: Tm1HTKEcSchemasId, identifier: Tm1HTKEcIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling zeroTrustUsersGetFailedLogins.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling zeroTrustUsersGetFailedLogins.');
            }
            const localVarPath = `/accounts/{identifier}/access/users/{id}/failed_logins`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get last seen identity for a single user.
         * @summary Get last seen identity
         * @param {Tm1HTKEcSchemasId} id 
         * @param {Tm1HTKEcIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zeroTrustUsersGetLastSeenIdentity: async (id: Tm1HTKEcSchemasId, identifier: Tm1HTKEcIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling zeroTrustUsersGetLastSeenIdentity.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling zeroTrustUsersGetLastSeenIdentity.');
            }
            const localVarPath = `/accounts/{identifier}/access/users/{id}/last_seen_identity`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a list of users for an account.
         * @summary Get users
         * @param {Tm1HTKEcIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zeroTrustUsersGetUsers: async (identifier: Tm1HTKEcIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling zeroTrustUsersGetUsers.');
            }
            const localVarPath = `/accounts/{identifier}/access/users`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ZeroTrustUsersApi - functional programming interface
 * @export
 */
export const ZeroTrustUsersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get an active session for a single user.
         * @summary Get single active session
         * @param {Tm1HTKEcSchemasId} id 
         * @param {Tm1HTKEcIdentifier} identifier 
         * @param {Tm1HTKEcNonce} nonce 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zeroTrustUsersGetActiveSession(id: Tm1HTKEcSchemasId, identifier: Tm1HTKEcIdentifier, nonce: Tm1HTKEcNonce, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Tm1HTKEcActiveSessionResponse>>> {
            const localVarAxiosArgs = await ZeroTrustUsersApiAxiosParamCreator(configuration).zeroTrustUsersGetActiveSession(id, identifier, nonce, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get active sessions for a single user.
         * @summary Get active sessions
         * @param {Tm1HTKEcSchemasId} id 
         * @param {Tm1HTKEcIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zeroTrustUsersGetActiveSessions(id: Tm1HTKEcSchemasId, identifier: Tm1HTKEcIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Tm1HTKEcActiveSessionsResponse>>> {
            const localVarAxiosArgs = await ZeroTrustUsersApiAxiosParamCreator(configuration).zeroTrustUsersGetActiveSessions(id, identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get all failed login attempts for a single user.
         * @summary Get failed logins
         * @param {Tm1HTKEcSchemasId} id 
         * @param {Tm1HTKEcIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zeroTrustUsersGetFailedLogins(id: Tm1HTKEcSchemasId, identifier: Tm1HTKEcIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Tm1HTKEcFailedLoginResponse>>> {
            const localVarAxiosArgs = await ZeroTrustUsersApiAxiosParamCreator(configuration).zeroTrustUsersGetFailedLogins(id, identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get last seen identity for a single user.
         * @summary Get last seen identity
         * @param {Tm1HTKEcSchemasId} id 
         * @param {Tm1HTKEcIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zeroTrustUsersGetLastSeenIdentity(id: Tm1HTKEcSchemasId, identifier: Tm1HTKEcIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Tm1HTKEcLastSeenIdentityResponse>>> {
            const localVarAxiosArgs = await ZeroTrustUsersApiAxiosParamCreator(configuration).zeroTrustUsersGetLastSeenIdentity(id, identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets a list of users for an account.
         * @summary Get users
         * @param {Tm1HTKEcIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zeroTrustUsersGetUsers(identifier: Tm1HTKEcIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Tm1HTKEcUsersComponentsSchemasResponseCollection>>> {
            const localVarAxiosArgs = await ZeroTrustUsersApiAxiosParamCreator(configuration).zeroTrustUsersGetUsers(identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ZeroTrustUsersApi - factory interface
 * @export
 */
export const ZeroTrustUsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Get an active session for a single user.
         * @summary Get single active session
         * @param {Tm1HTKEcSchemasId} id 
         * @param {Tm1HTKEcIdentifier} identifier 
         * @param {Tm1HTKEcNonce} nonce 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zeroTrustUsersGetActiveSession(id: Tm1HTKEcSchemasId, identifier: Tm1HTKEcIdentifier, nonce: Tm1HTKEcNonce, options?: AxiosRequestConfig): Promise<AxiosResponse<Tm1HTKEcActiveSessionResponse>> {
            return ZeroTrustUsersApiFp(configuration).zeroTrustUsersGetActiveSession(id, identifier, nonce, options).then((request) => request(axios, basePath));
        },
        /**
         * Get active sessions for a single user.
         * @summary Get active sessions
         * @param {Tm1HTKEcSchemasId} id 
         * @param {Tm1HTKEcIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zeroTrustUsersGetActiveSessions(id: Tm1HTKEcSchemasId, identifier: Tm1HTKEcIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Tm1HTKEcActiveSessionsResponse>> {
            return ZeroTrustUsersApiFp(configuration).zeroTrustUsersGetActiveSessions(id, identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all failed login attempts for a single user.
         * @summary Get failed logins
         * @param {Tm1HTKEcSchemasId} id 
         * @param {Tm1HTKEcIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zeroTrustUsersGetFailedLogins(id: Tm1HTKEcSchemasId, identifier: Tm1HTKEcIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Tm1HTKEcFailedLoginResponse>> {
            return ZeroTrustUsersApiFp(configuration).zeroTrustUsersGetFailedLogins(id, identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Get last seen identity for a single user.
         * @summary Get last seen identity
         * @param {Tm1HTKEcSchemasId} id 
         * @param {Tm1HTKEcIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zeroTrustUsersGetLastSeenIdentity(id: Tm1HTKEcSchemasId, identifier: Tm1HTKEcIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Tm1HTKEcLastSeenIdentityResponse>> {
            return ZeroTrustUsersApiFp(configuration).zeroTrustUsersGetLastSeenIdentity(id, identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a list of users for an account.
         * @summary Get users
         * @param {Tm1HTKEcIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zeroTrustUsersGetUsers(identifier: Tm1HTKEcIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Tm1HTKEcUsersComponentsSchemasResponseCollection>> {
            return ZeroTrustUsersApiFp(configuration).zeroTrustUsersGetUsers(identifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ZeroTrustUsersApi - object-oriented interface
 * @export
 * @class ZeroTrustUsersApi
 * @extends {BaseAPI}
 */
export class ZeroTrustUsersApi extends BaseAPI {
    /**
     * Get an active session for a single user.
     * @summary Get single active session
     * @param {Tm1HTKEcSchemasId} id 
     * @param {Tm1HTKEcIdentifier} identifier 
     * @param {Tm1HTKEcNonce} nonce 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZeroTrustUsersApi
     */
    public async zeroTrustUsersGetActiveSession(id: Tm1HTKEcSchemasId, identifier: Tm1HTKEcIdentifier, nonce: Tm1HTKEcNonce, options?: AxiosRequestConfig) : Promise<AxiosResponse<Tm1HTKEcActiveSessionResponse>> {
        return ZeroTrustUsersApiFp(this.configuration).zeroTrustUsersGetActiveSession(id, identifier, nonce, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get active sessions for a single user.
     * @summary Get active sessions
     * @param {Tm1HTKEcSchemasId} id 
     * @param {Tm1HTKEcIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZeroTrustUsersApi
     */
    public async zeroTrustUsersGetActiveSessions(id: Tm1HTKEcSchemasId, identifier: Tm1HTKEcIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Tm1HTKEcActiveSessionsResponse>> {
        return ZeroTrustUsersApiFp(this.configuration).zeroTrustUsersGetActiveSessions(id, identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all failed login attempts for a single user.
     * @summary Get failed logins
     * @param {Tm1HTKEcSchemasId} id 
     * @param {Tm1HTKEcIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZeroTrustUsersApi
     */
    public async zeroTrustUsersGetFailedLogins(id: Tm1HTKEcSchemasId, identifier: Tm1HTKEcIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Tm1HTKEcFailedLoginResponse>> {
        return ZeroTrustUsersApiFp(this.configuration).zeroTrustUsersGetFailedLogins(id, identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get last seen identity for a single user.
     * @summary Get last seen identity
     * @param {Tm1HTKEcSchemasId} id 
     * @param {Tm1HTKEcIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZeroTrustUsersApi
     */
    public async zeroTrustUsersGetLastSeenIdentity(id: Tm1HTKEcSchemasId, identifier: Tm1HTKEcIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Tm1HTKEcLastSeenIdentityResponse>> {
        return ZeroTrustUsersApiFp(this.configuration).zeroTrustUsersGetLastSeenIdentity(id, identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets a list of users for an account.
     * @summary Get users
     * @param {Tm1HTKEcIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZeroTrustUsersApi
     */
    public async zeroTrustUsersGetUsers(identifier: Tm1HTKEcIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Tm1HTKEcUsersComponentsSchemasResponseCollection>> {
        return ZeroTrustUsersApiFp(this.configuration).zeroTrustUsersGetUsers(identifier, options).then((request) => request(this.axios, this.basePath));
    }
}
