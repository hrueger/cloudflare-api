/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Model3ogb3aohCatchAllRuleResponseSingle } from '../models';
import { Model3ogb3aohCreateRuleProperties } from '../models';
import { Model3ogb3aohIdentifier } from '../models';
import { Model3ogb3aohRuleIdentifier } from '../models';
import { Model3ogb3aohRuleResponseSingle } from '../models';
import { Model3ogb3aohRulesResponseCollection } from '../models';
import { Model3ogb3aohUpdateCatchAllRuleProperties } from '../models';
import { Model3ogb3aohUpdateRuleProperties } from '../models';
/**
 * EmailRoutingRoutingRulesApi - axios parameter creator
 * @export
 */
export const EmailRoutingRoutingRulesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Rules consist of a set of criteria for matching emails (such as an email being sent to a specific custom email address) plus a set of actions to take on the email (like forwarding it to a specific destination address).
         * @summary Create routing rule
         * @param {Model3ogb3aohCreateRuleProperties} body 
         * @param {Model3ogb3aohIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailRoutingRoutingRulesCreateRoutingRule: async (body: Model3ogb3aohCreateRuleProperties, zoneIdentifier: Model3ogb3aohIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling emailRoutingRoutingRulesCreateRoutingRule.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling emailRoutingRoutingRulesCreateRoutingRule.');
            }
            const localVarPath = `/zones/{zone_identifier}/email/routing/rules`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a specific routing rule.
         * @summary Delete routing rule
         * @param {Model3ogb3aohRuleIdentifier} ruleIdentifier 
         * @param {Model3ogb3aohIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailRoutingRoutingRulesDeleteRoutingRule: async (ruleIdentifier: Model3ogb3aohRuleIdentifier, zoneIdentifier: Model3ogb3aohIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ruleIdentifier' is not null or undefined
            if (ruleIdentifier === null || ruleIdentifier === undefined) {
                throw new RequiredError('ruleIdentifier','Required parameter ruleIdentifier was null or undefined when calling emailRoutingRoutingRulesDeleteRoutingRule.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling emailRoutingRoutingRulesDeleteRoutingRule.');
            }
            const localVarPath = `/zones/{zone_identifier}/email/routing/rules/{rule_identifier}`
                .replace(`{${"rule_identifier"}}`, encodeURIComponent(String(ruleIdentifier)))
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information on the default catch-all routing rule.
         * @summary Get catch-all rule
         * @param {Model3ogb3aohIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailRoutingRoutingRulesGetCatchAllRule: async (zoneIdentifier: Model3ogb3aohIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling emailRoutingRoutingRulesGetCatchAllRule.');
            }
            const localVarPath = `/zones/{zone_identifier}/email/routing/rules/catch_all`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information for a specific routing rule already created.
         * @summary Get routing rule
         * @param {Model3ogb3aohRuleIdentifier} ruleIdentifier 
         * @param {Model3ogb3aohIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailRoutingRoutingRulesGetRoutingRule: async (ruleIdentifier: Model3ogb3aohRuleIdentifier, zoneIdentifier: Model3ogb3aohIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ruleIdentifier' is not null or undefined
            if (ruleIdentifier === null || ruleIdentifier === undefined) {
                throw new RequiredError('ruleIdentifier','Required parameter ruleIdentifier was null or undefined when calling emailRoutingRoutingRulesGetRoutingRule.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling emailRoutingRoutingRulesGetRoutingRule.');
            }
            const localVarPath = `/zones/{zone_identifier}/email/routing/rules/{rule_identifier}`
                .replace(`{${"rule_identifier"}}`, encodeURIComponent(String(ruleIdentifier)))
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists existing routing rules.
         * @summary List routing rules
         * @param {Model3ogb3aohIdentifier} zoneIdentifier 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {boolean} [enabled] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailRoutingRoutingRulesListRoutingRules: async (zoneIdentifier: Model3ogb3aohIdentifier, page?: number, perPage?: number, enabled?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling emailRoutingRoutingRulesListRoutingRules.');
            }
            const localVarPath = `/zones/{zone_identifier}/email/routing/rules`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (enabled !== undefined) {
                localVarQueryParameter['enabled'] = enabled;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Enable or disable catch-all routing rule, or change action to forward to specific destination address.
         * @summary Update catch-all rule
         * @param {Model3ogb3aohUpdateCatchAllRuleProperties} body 
         * @param {Model3ogb3aohIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailRoutingRoutingRulesUpdateCatchAllRule: async (body: Model3ogb3aohUpdateCatchAllRuleProperties, zoneIdentifier: Model3ogb3aohIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling emailRoutingRoutingRulesUpdateCatchAllRule.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling emailRoutingRoutingRulesUpdateCatchAllRule.');
            }
            const localVarPath = `/zones/{zone_identifier}/email/routing/rules/catch_all`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update actions and matches, or enable/disable specific routing rules.
         * @summary Update routing rule
         * @param {Model3ogb3aohUpdateRuleProperties} body 
         * @param {Model3ogb3aohRuleIdentifier} ruleIdentifier 
         * @param {Model3ogb3aohIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailRoutingRoutingRulesUpdateRoutingRule: async (body: Model3ogb3aohUpdateRuleProperties, ruleIdentifier: Model3ogb3aohRuleIdentifier, zoneIdentifier: Model3ogb3aohIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling emailRoutingRoutingRulesUpdateRoutingRule.');
            }
            // verify required parameter 'ruleIdentifier' is not null or undefined
            if (ruleIdentifier === null || ruleIdentifier === undefined) {
                throw new RequiredError('ruleIdentifier','Required parameter ruleIdentifier was null or undefined when calling emailRoutingRoutingRulesUpdateRoutingRule.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling emailRoutingRoutingRulesUpdateRoutingRule.');
            }
            const localVarPath = `/zones/{zone_identifier}/email/routing/rules/{rule_identifier}`
                .replace(`{${"rule_identifier"}}`, encodeURIComponent(String(ruleIdentifier)))
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmailRoutingRoutingRulesApi - functional programming interface
 * @export
 */
export const EmailRoutingRoutingRulesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Rules consist of a set of criteria for matching emails (such as an email being sent to a specific custom email address) plus a set of actions to take on the email (like forwarding it to a specific destination address).
         * @summary Create routing rule
         * @param {Model3ogb3aohCreateRuleProperties} body 
         * @param {Model3ogb3aohIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async emailRoutingRoutingRulesCreateRoutingRule(body: Model3ogb3aohCreateRuleProperties, zoneIdentifier: Model3ogb3aohIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model3ogb3aohRuleResponseSingle>>> {
            const localVarAxiosArgs = await EmailRoutingRoutingRulesApiAxiosParamCreator(configuration).emailRoutingRoutingRulesCreateRoutingRule(body, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a specific routing rule.
         * @summary Delete routing rule
         * @param {Model3ogb3aohRuleIdentifier} ruleIdentifier 
         * @param {Model3ogb3aohIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async emailRoutingRoutingRulesDeleteRoutingRule(ruleIdentifier: Model3ogb3aohRuleIdentifier, zoneIdentifier: Model3ogb3aohIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model3ogb3aohRuleResponseSingle>>> {
            const localVarAxiosArgs = await EmailRoutingRoutingRulesApiAxiosParamCreator(configuration).emailRoutingRoutingRulesDeleteRoutingRule(ruleIdentifier, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get information on the default catch-all routing rule.
         * @summary Get catch-all rule
         * @param {Model3ogb3aohIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async emailRoutingRoutingRulesGetCatchAllRule(zoneIdentifier: Model3ogb3aohIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model3ogb3aohCatchAllRuleResponseSingle>>> {
            const localVarAxiosArgs = await EmailRoutingRoutingRulesApiAxiosParamCreator(configuration).emailRoutingRoutingRulesGetCatchAllRule(zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get information for a specific routing rule already created.
         * @summary Get routing rule
         * @param {Model3ogb3aohRuleIdentifier} ruleIdentifier 
         * @param {Model3ogb3aohIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async emailRoutingRoutingRulesGetRoutingRule(ruleIdentifier: Model3ogb3aohRuleIdentifier, zoneIdentifier: Model3ogb3aohIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model3ogb3aohRuleResponseSingle>>> {
            const localVarAxiosArgs = await EmailRoutingRoutingRulesApiAxiosParamCreator(configuration).emailRoutingRoutingRulesGetRoutingRule(ruleIdentifier, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Lists existing routing rules.
         * @summary List routing rules
         * @param {Model3ogb3aohIdentifier} zoneIdentifier 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {boolean} [enabled] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async emailRoutingRoutingRulesListRoutingRules(zoneIdentifier: Model3ogb3aohIdentifier, page?: number, perPage?: number, enabled?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model3ogb3aohRulesResponseCollection>>> {
            const localVarAxiosArgs = await EmailRoutingRoutingRulesApiAxiosParamCreator(configuration).emailRoutingRoutingRulesListRoutingRules(zoneIdentifier, page, perPage, enabled, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Enable or disable catch-all routing rule, or change action to forward to specific destination address.
         * @summary Update catch-all rule
         * @param {Model3ogb3aohUpdateCatchAllRuleProperties} body 
         * @param {Model3ogb3aohIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async emailRoutingRoutingRulesUpdateCatchAllRule(body: Model3ogb3aohUpdateCatchAllRuleProperties, zoneIdentifier: Model3ogb3aohIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model3ogb3aohCatchAllRuleResponseSingle>>> {
            const localVarAxiosArgs = await EmailRoutingRoutingRulesApiAxiosParamCreator(configuration).emailRoutingRoutingRulesUpdateCatchAllRule(body, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update actions and matches, or enable/disable specific routing rules.
         * @summary Update routing rule
         * @param {Model3ogb3aohUpdateRuleProperties} body 
         * @param {Model3ogb3aohRuleIdentifier} ruleIdentifier 
         * @param {Model3ogb3aohIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async emailRoutingRoutingRulesUpdateRoutingRule(body: Model3ogb3aohUpdateRuleProperties, ruleIdentifier: Model3ogb3aohRuleIdentifier, zoneIdentifier: Model3ogb3aohIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model3ogb3aohRuleResponseSingle>>> {
            const localVarAxiosArgs = await EmailRoutingRoutingRulesApiAxiosParamCreator(configuration).emailRoutingRoutingRulesUpdateRoutingRule(body, ruleIdentifier, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * EmailRoutingRoutingRulesApi - factory interface
 * @export
 */
export const EmailRoutingRoutingRulesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Rules consist of a set of criteria for matching emails (such as an email being sent to a specific custom email address) plus a set of actions to take on the email (like forwarding it to a specific destination address).
         * @summary Create routing rule
         * @param {Model3ogb3aohCreateRuleProperties} body 
         * @param {Model3ogb3aohIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async emailRoutingRoutingRulesCreateRoutingRule(body: Model3ogb3aohCreateRuleProperties, zoneIdentifier: Model3ogb3aohIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model3ogb3aohRuleResponseSingle>> {
            return EmailRoutingRoutingRulesApiFp(configuration).emailRoutingRoutingRulesCreateRoutingRule(body, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a specific routing rule.
         * @summary Delete routing rule
         * @param {Model3ogb3aohRuleIdentifier} ruleIdentifier 
         * @param {Model3ogb3aohIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async emailRoutingRoutingRulesDeleteRoutingRule(ruleIdentifier: Model3ogb3aohRuleIdentifier, zoneIdentifier: Model3ogb3aohIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model3ogb3aohRuleResponseSingle>> {
            return EmailRoutingRoutingRulesApiFp(configuration).emailRoutingRoutingRulesDeleteRoutingRule(ruleIdentifier, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information on the default catch-all routing rule.
         * @summary Get catch-all rule
         * @param {Model3ogb3aohIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async emailRoutingRoutingRulesGetCatchAllRule(zoneIdentifier: Model3ogb3aohIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model3ogb3aohCatchAllRuleResponseSingle>> {
            return EmailRoutingRoutingRulesApiFp(configuration).emailRoutingRoutingRulesGetCatchAllRule(zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information for a specific routing rule already created.
         * @summary Get routing rule
         * @param {Model3ogb3aohRuleIdentifier} ruleIdentifier 
         * @param {Model3ogb3aohIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async emailRoutingRoutingRulesGetRoutingRule(ruleIdentifier: Model3ogb3aohRuleIdentifier, zoneIdentifier: Model3ogb3aohIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model3ogb3aohRuleResponseSingle>> {
            return EmailRoutingRoutingRulesApiFp(configuration).emailRoutingRoutingRulesGetRoutingRule(ruleIdentifier, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists existing routing rules.
         * @summary List routing rules
         * @param {Model3ogb3aohIdentifier} zoneIdentifier 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {boolean} [enabled] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async emailRoutingRoutingRulesListRoutingRules(zoneIdentifier: Model3ogb3aohIdentifier, page?: number, perPage?: number, enabled?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<Model3ogb3aohRulesResponseCollection>> {
            return EmailRoutingRoutingRulesApiFp(configuration).emailRoutingRoutingRulesListRoutingRules(zoneIdentifier, page, perPage, enabled, options).then((request) => request(axios, basePath));
        },
        /**
         * Enable or disable catch-all routing rule, or change action to forward to specific destination address.
         * @summary Update catch-all rule
         * @param {Model3ogb3aohUpdateCatchAllRuleProperties} body 
         * @param {Model3ogb3aohIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async emailRoutingRoutingRulesUpdateCatchAllRule(body: Model3ogb3aohUpdateCatchAllRuleProperties, zoneIdentifier: Model3ogb3aohIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model3ogb3aohCatchAllRuleResponseSingle>> {
            return EmailRoutingRoutingRulesApiFp(configuration).emailRoutingRoutingRulesUpdateCatchAllRule(body, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Update actions and matches, or enable/disable specific routing rules.
         * @summary Update routing rule
         * @param {Model3ogb3aohUpdateRuleProperties} body 
         * @param {Model3ogb3aohRuleIdentifier} ruleIdentifier 
         * @param {Model3ogb3aohIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async emailRoutingRoutingRulesUpdateRoutingRule(body: Model3ogb3aohUpdateRuleProperties, ruleIdentifier: Model3ogb3aohRuleIdentifier, zoneIdentifier: Model3ogb3aohIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model3ogb3aohRuleResponseSingle>> {
            return EmailRoutingRoutingRulesApiFp(configuration).emailRoutingRoutingRulesUpdateRoutingRule(body, ruleIdentifier, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EmailRoutingRoutingRulesApi - object-oriented interface
 * @export
 * @class EmailRoutingRoutingRulesApi
 * @extends {BaseAPI}
 */
export class EmailRoutingRoutingRulesApi extends BaseAPI {
    /**
     * Rules consist of a set of criteria for matching emails (such as an email being sent to a specific custom email address) plus a set of actions to take on the email (like forwarding it to a specific destination address).
     * @summary Create routing rule
     * @param {Model3ogb3aohCreateRuleProperties} body 
     * @param {Model3ogb3aohIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailRoutingRoutingRulesApi
     */
    public async emailRoutingRoutingRulesCreateRoutingRule(body: Model3ogb3aohCreateRuleProperties, zoneIdentifier: Model3ogb3aohIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model3ogb3aohRuleResponseSingle>> {
        return EmailRoutingRoutingRulesApiFp(this.configuration).emailRoutingRoutingRulesCreateRoutingRule(body, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a specific routing rule.
     * @summary Delete routing rule
     * @param {Model3ogb3aohRuleIdentifier} ruleIdentifier 
     * @param {Model3ogb3aohIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailRoutingRoutingRulesApi
     */
    public async emailRoutingRoutingRulesDeleteRoutingRule(ruleIdentifier: Model3ogb3aohRuleIdentifier, zoneIdentifier: Model3ogb3aohIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model3ogb3aohRuleResponseSingle>> {
        return EmailRoutingRoutingRulesApiFp(this.configuration).emailRoutingRoutingRulesDeleteRoutingRule(ruleIdentifier, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get information on the default catch-all routing rule.
     * @summary Get catch-all rule
     * @param {Model3ogb3aohIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailRoutingRoutingRulesApi
     */
    public async emailRoutingRoutingRulesGetCatchAllRule(zoneIdentifier: Model3ogb3aohIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model3ogb3aohCatchAllRuleResponseSingle>> {
        return EmailRoutingRoutingRulesApiFp(this.configuration).emailRoutingRoutingRulesGetCatchAllRule(zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get information for a specific routing rule already created.
     * @summary Get routing rule
     * @param {Model3ogb3aohRuleIdentifier} ruleIdentifier 
     * @param {Model3ogb3aohIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailRoutingRoutingRulesApi
     */
    public async emailRoutingRoutingRulesGetRoutingRule(ruleIdentifier: Model3ogb3aohRuleIdentifier, zoneIdentifier: Model3ogb3aohIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model3ogb3aohRuleResponseSingle>> {
        return EmailRoutingRoutingRulesApiFp(this.configuration).emailRoutingRoutingRulesGetRoutingRule(ruleIdentifier, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists existing routing rules.
     * @summary List routing rules
     * @param {Model3ogb3aohIdentifier} zoneIdentifier 
     * @param {number} [page] 
     * @param {number} [perPage] 
     * @param {boolean} [enabled] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailRoutingRoutingRulesApi
     */
    public async emailRoutingRoutingRulesListRoutingRules(zoneIdentifier: Model3ogb3aohIdentifier, page?: number, perPage?: number, enabled?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model3ogb3aohRulesResponseCollection>> {
        return EmailRoutingRoutingRulesApiFp(this.configuration).emailRoutingRoutingRulesListRoutingRules(zoneIdentifier, page, perPage, enabled, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Enable or disable catch-all routing rule, or change action to forward to specific destination address.
     * @summary Update catch-all rule
     * @param {Model3ogb3aohUpdateCatchAllRuleProperties} body 
     * @param {Model3ogb3aohIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailRoutingRoutingRulesApi
     */
    public async emailRoutingRoutingRulesUpdateCatchAllRule(body: Model3ogb3aohUpdateCatchAllRuleProperties, zoneIdentifier: Model3ogb3aohIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model3ogb3aohCatchAllRuleResponseSingle>> {
        return EmailRoutingRoutingRulesApiFp(this.configuration).emailRoutingRoutingRulesUpdateCatchAllRule(body, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update actions and matches, or enable/disable specific routing rules.
     * @summary Update routing rule
     * @param {Model3ogb3aohUpdateRuleProperties} body 
     * @param {Model3ogb3aohRuleIdentifier} ruleIdentifier 
     * @param {Model3ogb3aohIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailRoutingRoutingRulesApi
     */
    public async emailRoutingRoutingRulesUpdateRoutingRule(body: Model3ogb3aohUpdateRuleProperties, ruleIdentifier: Model3ogb3aohRuleIdentifier, zoneIdentifier: Model3ogb3aohIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model3ogb3aohRuleResponseSingle>> {
        return EmailRoutingRoutingRulesApiFp(this.configuration).emailRoutingRoutingRulesUpdateRoutingRule(body, ruleIdentifier, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
}
