/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse20043 } from '../models';
import { InlineResponse4XX227 } from '../models';
import { InlineResponse4xx54 } from '../models';
import { InlineResponse4xx55 } from '../models';
import { MembersIdentifierBody } from '../models';
import { Model6KaSmMdRCollectionMemberResponse } from '../models';
import { Model6KaSmMdRCommonComponentsSchemasIdentifier } from '../models';
import { Model6KaSmMdRMembershipComponentsSchemasIdentifier } from '../models';
import { Model6KaSmMdROrganizationComponentsSchemasIdentifier } from '../models';
import { Model6KaSmMdRSingleMemberResponse } from '../models';
/**
 * OrganizationMembersApi - axios parameter creator
 * @export
 */
export const OrganizationMembersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Change the Roles of an Organization's Member.
         * @summary Edit Member Roles
         * @param {MembersIdentifierBody} body 
         * @param {Model6KaSmMdRCommonComponentsSchemasIdentifier} identifier 
         * @param {Model6KaSmMdROrganizationComponentsSchemasIdentifier} organizationIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organizationMembersEditMemberRoles: async (body: MembersIdentifierBody, identifier: Model6KaSmMdRCommonComponentsSchemasIdentifier, organizationIdentifier: Model6KaSmMdROrganizationComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling organizationMembersEditMemberRoles.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling organizationMembersEditMemberRoles.');
            }
            // verify required parameter 'organizationIdentifier' is not null or undefined
            if (organizationIdentifier === null || organizationIdentifier === undefined) {
                throw new RequiredError('organizationIdentifier','Required parameter organizationIdentifier was null or undefined when calling organizationMembersEditMemberRoles.');
            }
            const localVarPath = `/organizations/{organization_identifier}/members/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"organization_identifier"}}`, encodeURIComponent(String(organizationIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List all members of a organization.
         * @summary List Members
         * @param {Model6KaSmMdROrganizationComponentsSchemasIdentifier} organizationIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organizationMembersListMembers: async (organizationIdentifier: Model6KaSmMdROrganizationComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationIdentifier' is not null or undefined
            if (organizationIdentifier === null || organizationIdentifier === undefined) {
                throw new RequiredError('organizationIdentifier','Required parameter organizationIdentifier was null or undefined when calling organizationMembersListMembers.');
            }
            const localVarPath = `/organizations/{organization_identifier}/members`
                .replace(`{${"organization_identifier"}}`, encodeURIComponent(String(organizationIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about a specific member of an organization.
         * @summary Member Details
         * @param {Model6KaSmMdRMembershipComponentsSchemasIdentifier} identifier 
         * @param {Model6KaSmMdROrganizationComponentsSchemasIdentifier} organizationIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organizationMembersMemberDetails: async (identifier: Model6KaSmMdRMembershipComponentsSchemasIdentifier, organizationIdentifier: Model6KaSmMdROrganizationComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling organizationMembersMemberDetails.');
            }
            // verify required parameter 'organizationIdentifier' is not null or undefined
            if (organizationIdentifier === null || organizationIdentifier === undefined) {
                throw new RequiredError('organizationIdentifier','Required parameter organizationIdentifier was null or undefined when calling organizationMembersMemberDetails.');
            }
            const localVarPath = `/organizations/{organization_identifier}/members/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"organization_identifier"}}`, encodeURIComponent(String(organizationIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a member from an organization.
         * @summary Remove Member
         * @param {Model6KaSmMdRCommonComponentsSchemasIdentifier} identifier 
         * @param {Model6KaSmMdROrganizationComponentsSchemasIdentifier} organizationIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organizationMembersRemoveMember: async (identifier: Model6KaSmMdRCommonComponentsSchemasIdentifier, organizationIdentifier: Model6KaSmMdROrganizationComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling organizationMembersRemoveMember.');
            }
            // verify required parameter 'organizationIdentifier' is not null or undefined
            if (organizationIdentifier === null || organizationIdentifier === undefined) {
                throw new RequiredError('organizationIdentifier','Required parameter organizationIdentifier was null or undefined when calling organizationMembersRemoveMember.');
            }
            const localVarPath = `/organizations/{organization_identifier}/members/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"organization_identifier"}}`, encodeURIComponent(String(organizationIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganizationMembersApi - functional programming interface
 * @export
 */
export const OrganizationMembersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Change the Roles of an Organization's Member.
         * @summary Edit Member Roles
         * @param {MembersIdentifierBody} body 
         * @param {Model6KaSmMdRCommonComponentsSchemasIdentifier} identifier 
         * @param {Model6KaSmMdROrganizationComponentsSchemasIdentifier} organizationIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async organizationMembersEditMemberRoles(body: MembersIdentifierBody, identifier: Model6KaSmMdRCommonComponentsSchemasIdentifier, organizationIdentifier: Model6KaSmMdROrganizationComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model6KaSmMdRSingleMemberResponse>>> {
            const localVarAxiosArgs = await OrganizationMembersApiAxiosParamCreator(configuration).organizationMembersEditMemberRoles(body, identifier, organizationIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List all members of a organization.
         * @summary List Members
         * @param {Model6KaSmMdROrganizationComponentsSchemasIdentifier} organizationIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async organizationMembersListMembers(organizationIdentifier: Model6KaSmMdROrganizationComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model6KaSmMdRCollectionMemberResponse>>> {
            const localVarAxiosArgs = await OrganizationMembersApiAxiosParamCreator(configuration).organizationMembersListMembers(organizationIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get information about a specific member of an organization.
         * @summary Member Details
         * @param {Model6KaSmMdRMembershipComponentsSchemasIdentifier} identifier 
         * @param {Model6KaSmMdROrganizationComponentsSchemasIdentifier} organizationIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async organizationMembersMemberDetails(identifier: Model6KaSmMdRMembershipComponentsSchemasIdentifier, organizationIdentifier: Model6KaSmMdROrganizationComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model6KaSmMdRSingleMemberResponse>>> {
            const localVarAxiosArgs = await OrganizationMembersApiAxiosParamCreator(configuration).organizationMembersMemberDetails(identifier, organizationIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Remove a member from an organization.
         * @summary Remove Member
         * @param {Model6KaSmMdRCommonComponentsSchemasIdentifier} identifier 
         * @param {Model6KaSmMdROrganizationComponentsSchemasIdentifier} organizationIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async organizationMembersRemoveMember(identifier: Model6KaSmMdRCommonComponentsSchemasIdentifier, organizationIdentifier: Model6KaSmMdROrganizationComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20043>>> {
            const localVarAxiosArgs = await OrganizationMembersApiAxiosParamCreator(configuration).organizationMembersRemoveMember(identifier, organizationIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * OrganizationMembersApi - factory interface
 * @export
 */
export const OrganizationMembersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Change the Roles of an Organization's Member.
         * @summary Edit Member Roles
         * @param {MembersIdentifierBody} body 
         * @param {Model6KaSmMdRCommonComponentsSchemasIdentifier} identifier 
         * @param {Model6KaSmMdROrganizationComponentsSchemasIdentifier} organizationIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async organizationMembersEditMemberRoles(body: MembersIdentifierBody, identifier: Model6KaSmMdRCommonComponentsSchemasIdentifier, organizationIdentifier: Model6KaSmMdROrganizationComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model6KaSmMdRSingleMemberResponse>> {
            return OrganizationMembersApiFp(configuration).organizationMembersEditMemberRoles(body, identifier, organizationIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * List all members of a organization.
         * @summary List Members
         * @param {Model6KaSmMdROrganizationComponentsSchemasIdentifier} organizationIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async organizationMembersListMembers(organizationIdentifier: Model6KaSmMdROrganizationComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model6KaSmMdRCollectionMemberResponse>> {
            return OrganizationMembersApiFp(configuration).organizationMembersListMembers(organizationIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about a specific member of an organization.
         * @summary Member Details
         * @param {Model6KaSmMdRMembershipComponentsSchemasIdentifier} identifier 
         * @param {Model6KaSmMdROrganizationComponentsSchemasIdentifier} organizationIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async organizationMembersMemberDetails(identifier: Model6KaSmMdRMembershipComponentsSchemasIdentifier, organizationIdentifier: Model6KaSmMdROrganizationComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model6KaSmMdRSingleMemberResponse>> {
            return OrganizationMembersApiFp(configuration).organizationMembersMemberDetails(identifier, organizationIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a member from an organization.
         * @summary Remove Member
         * @param {Model6KaSmMdRCommonComponentsSchemasIdentifier} identifier 
         * @param {Model6KaSmMdROrganizationComponentsSchemasIdentifier} organizationIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async organizationMembersRemoveMember(identifier: Model6KaSmMdRCommonComponentsSchemasIdentifier, organizationIdentifier: Model6KaSmMdROrganizationComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20043>> {
            return OrganizationMembersApiFp(configuration).organizationMembersRemoveMember(identifier, organizationIdentifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrganizationMembersApi - object-oriented interface
 * @export
 * @class OrganizationMembersApi
 * @extends {BaseAPI}
 */
export class OrganizationMembersApi extends BaseAPI {
    /**
     * Change the Roles of an Organization's Member.
     * @summary Edit Member Roles
     * @param {MembersIdentifierBody} body 
     * @param {Model6KaSmMdRCommonComponentsSchemasIdentifier} identifier 
     * @param {Model6KaSmMdROrganizationComponentsSchemasIdentifier} organizationIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationMembersApi
     */
    public async organizationMembersEditMemberRoles(body: MembersIdentifierBody, identifier: Model6KaSmMdRCommonComponentsSchemasIdentifier, organizationIdentifier: Model6KaSmMdROrganizationComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model6KaSmMdRSingleMemberResponse>> {
        return OrganizationMembersApiFp(this.configuration).organizationMembersEditMemberRoles(body, identifier, organizationIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List all members of a organization.
     * @summary List Members
     * @param {Model6KaSmMdROrganizationComponentsSchemasIdentifier} organizationIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationMembersApi
     */
    public async organizationMembersListMembers(organizationIdentifier: Model6KaSmMdROrganizationComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model6KaSmMdRCollectionMemberResponse>> {
        return OrganizationMembersApiFp(this.configuration).organizationMembersListMembers(organizationIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get information about a specific member of an organization.
     * @summary Member Details
     * @param {Model6KaSmMdRMembershipComponentsSchemasIdentifier} identifier 
     * @param {Model6KaSmMdROrganizationComponentsSchemasIdentifier} organizationIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationMembersApi
     */
    public async organizationMembersMemberDetails(identifier: Model6KaSmMdRMembershipComponentsSchemasIdentifier, organizationIdentifier: Model6KaSmMdROrganizationComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model6KaSmMdRSingleMemberResponse>> {
        return OrganizationMembersApiFp(this.configuration).organizationMembersMemberDetails(identifier, organizationIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove a member from an organization.
     * @summary Remove Member
     * @param {Model6KaSmMdRCommonComponentsSchemasIdentifier} identifier 
     * @param {Model6KaSmMdROrganizationComponentsSchemasIdentifier} organizationIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationMembersApi
     */
    public async organizationMembersRemoveMember(identifier: Model6KaSmMdRCommonComponentsSchemasIdentifier, organizationIdentifier: Model6KaSmMdROrganizationComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20043>> {
        return OrganizationMembersApiFp(this.configuration).organizationMembersRemoveMember(identifier, organizationIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
}
