/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { DomainsDomainNameBody } from '../models';
import { InlineResponse4XX267 } from '../models';
import { InlineResponse4XX268 } from '../models';
import { RegistrarApiDomainName } from '../models';
import { RegistrarApiDomainResponseCollection } from '../models';
import { RegistrarApiDomainResponseSingle } from '../models';
import { RegistrarApiIdentifier } from '../models';
/**
 * RegistrarDomainsApi - axios parameter creator
 * @export
 */
export const RegistrarDomainsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Show individual domain.
         * @summary Get domain
         * @param {RegistrarApiDomainName} domainName 
         * @param {RegistrarApiIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registrarDomainsGetDomain: async (domainName: RegistrarApiDomainName, accountIdentifier: RegistrarApiIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'domainName' is not null or undefined
            if (domainName === null || domainName === undefined) {
                throw new RequiredError('domainName','Required parameter domainName was null or undefined when calling registrarDomainsGetDomain.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling registrarDomainsGetDomain.');
            }
            const localVarPath = `/accounts/{account_identifier}/registrar/domains/{domain_name}`
                .replace(`{${"domain_name"}}`, encodeURIComponent(String(domainName)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List domains handled by Registrar.
         * @summary List domains
         * @param {RegistrarApiIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registrarDomainsListDomains: async (accountIdentifier: RegistrarApiIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling registrarDomainsListDomains.');
            }
            const localVarPath = `/accounts/{account_identifier}/registrar/domains`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update individual domain.
         * @summary Update domain
         * @param {DomainsDomainNameBody} body 
         * @param {RegistrarApiDomainName} domainName 
         * @param {RegistrarApiIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registrarDomainsUpdateDomain: async (body: DomainsDomainNameBody, domainName: RegistrarApiDomainName, accountIdentifier: RegistrarApiIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling registrarDomainsUpdateDomain.');
            }
            // verify required parameter 'domainName' is not null or undefined
            if (domainName === null || domainName === undefined) {
                throw new RequiredError('domainName','Required parameter domainName was null or undefined when calling registrarDomainsUpdateDomain.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling registrarDomainsUpdateDomain.');
            }
            const localVarPath = `/accounts/{account_identifier}/registrar/domains/{domain_name}`
                .replace(`{${"domain_name"}}`, encodeURIComponent(String(domainName)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RegistrarDomainsApi - functional programming interface
 * @export
 */
export const RegistrarDomainsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Show individual domain.
         * @summary Get domain
         * @param {RegistrarApiDomainName} domainName 
         * @param {RegistrarApiIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registrarDomainsGetDomain(domainName: RegistrarApiDomainName, accountIdentifier: RegistrarApiIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RegistrarApiDomainResponseSingle>>> {
            const localVarAxiosArgs = await RegistrarDomainsApiAxiosParamCreator(configuration).registrarDomainsGetDomain(domainName, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List domains handled by Registrar.
         * @summary List domains
         * @param {RegistrarApiIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registrarDomainsListDomains(accountIdentifier: RegistrarApiIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RegistrarApiDomainResponseCollection>>> {
            const localVarAxiosArgs = await RegistrarDomainsApiAxiosParamCreator(configuration).registrarDomainsListDomains(accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update individual domain.
         * @summary Update domain
         * @param {DomainsDomainNameBody} body 
         * @param {RegistrarApiDomainName} domainName 
         * @param {RegistrarApiIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registrarDomainsUpdateDomain(body: DomainsDomainNameBody, domainName: RegistrarApiDomainName, accountIdentifier: RegistrarApiIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RegistrarApiDomainResponseSingle>>> {
            const localVarAxiosArgs = await RegistrarDomainsApiAxiosParamCreator(configuration).registrarDomainsUpdateDomain(body, domainName, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * RegistrarDomainsApi - factory interface
 * @export
 */
export const RegistrarDomainsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Show individual domain.
         * @summary Get domain
         * @param {RegistrarApiDomainName} domainName 
         * @param {RegistrarApiIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registrarDomainsGetDomain(domainName: RegistrarApiDomainName, accountIdentifier: RegistrarApiIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<RegistrarApiDomainResponseSingle>> {
            return RegistrarDomainsApiFp(configuration).registrarDomainsGetDomain(domainName, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * List domains handled by Registrar.
         * @summary List domains
         * @param {RegistrarApiIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registrarDomainsListDomains(accountIdentifier: RegistrarApiIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<RegistrarApiDomainResponseCollection>> {
            return RegistrarDomainsApiFp(configuration).registrarDomainsListDomains(accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Update individual domain.
         * @summary Update domain
         * @param {DomainsDomainNameBody} body 
         * @param {RegistrarApiDomainName} domainName 
         * @param {RegistrarApiIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registrarDomainsUpdateDomain(body: DomainsDomainNameBody, domainName: RegistrarApiDomainName, accountIdentifier: RegistrarApiIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<RegistrarApiDomainResponseSingle>> {
            return RegistrarDomainsApiFp(configuration).registrarDomainsUpdateDomain(body, domainName, accountIdentifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RegistrarDomainsApi - object-oriented interface
 * @export
 * @class RegistrarDomainsApi
 * @extends {BaseAPI}
 */
export class RegistrarDomainsApi extends BaseAPI {
    /**
     * Show individual domain.
     * @summary Get domain
     * @param {RegistrarApiDomainName} domainName 
     * @param {RegistrarApiIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistrarDomainsApi
     */
    public async registrarDomainsGetDomain(domainName: RegistrarApiDomainName, accountIdentifier: RegistrarApiIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<RegistrarApiDomainResponseSingle>> {
        return RegistrarDomainsApiFp(this.configuration).registrarDomainsGetDomain(domainName, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List domains handled by Registrar.
     * @summary List domains
     * @param {RegistrarApiIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistrarDomainsApi
     */
    public async registrarDomainsListDomains(accountIdentifier: RegistrarApiIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<RegistrarApiDomainResponseCollection>> {
        return RegistrarDomainsApiFp(this.configuration).registrarDomainsListDomains(accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update individual domain.
     * @summary Update domain
     * @param {DomainsDomainNameBody} body 
     * @param {RegistrarApiDomainName} domainName 
     * @param {RegistrarApiIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistrarDomainsApi
     */
    public async registrarDomainsUpdateDomain(body: DomainsDomainNameBody, domainName: RegistrarApiDomainName, accountIdentifier: RegistrarApiIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<RegistrarApiDomainResponseSingle>> {
        return RegistrarDomainsApiFp(this.configuration).registrarDomainsUpdateDomain(body, domainName, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
}
