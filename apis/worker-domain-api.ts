/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { C4f8RoOSComponentsSchemasAccountIdentifier } from '../models';
import { C4f8RoOSDomainIdentifier } from '../models';
import { C4f8RoOSDomainResponseCollection } from '../models';
import { C4f8RoOSDomainResponseSingle } from '../models';
import { C4f8RoOSSchemasService } from '../models';
import { C4f8RoOSZoneIdentifier } from '../models';
import { C4f8RoOSZoneName } from '../models';
import { InlineResponse4xx100 } from '../models';
import { InlineResponse4xx101 } from '../models';
import { WorkersDomainsBody } from '../models';
/**
 * WorkerDomainApi - axios parameter creator
 * @export
 */
export const WorkerDomainApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Attaches a worker to a zone and hostname.
         * @summary Attach to Domain
         * @param {WorkersDomainsBody} body 
         * @param {C4f8RoOSComponentsSchemasAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workerDomainAttachToDomain: async (body: WorkersDomainsBody, accountIdentifier: C4f8RoOSComponentsSchemasAccountIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling workerDomainAttachToDomain.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling workerDomainAttachToDomain.');
            }
            const localVarPath = `/accounts/{account_identifier}/workers/domains`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Detaches a worker from a zone and hostname.
         * @summary Detach from Domain
         * @param {C4f8RoOSDomainIdentifier} domainIdentifier 
         * @param {C4f8RoOSComponentsSchemasAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workerDomainDetachFromDomain: async (domainIdentifier: C4f8RoOSDomainIdentifier, accountIdentifier: C4f8RoOSComponentsSchemasAccountIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'domainIdentifier' is not null or undefined
            if (domainIdentifier === null || domainIdentifier === undefined) {
                throw new RequiredError('domainIdentifier','Required parameter domainIdentifier was null or undefined when calling workerDomainDetachFromDomain.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling workerDomainDetachFromDomain.');
            }
            const localVarPath = `/accounts/{account_identifier}/workers/domains/{domain_identifier}`
                .replace(`{${"domain_identifier"}}`, encodeURIComponent(String(domainIdentifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a Worker Domain.
         * @summary Get a Domain
         * @param {C4f8RoOSDomainIdentifier} domainIdentifier 
         * @param {C4f8RoOSComponentsSchemasAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workerDomainGetADomain: async (domainIdentifier: C4f8RoOSDomainIdentifier, accountIdentifier: C4f8RoOSComponentsSchemasAccountIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'domainIdentifier' is not null or undefined
            if (domainIdentifier === null || domainIdentifier === undefined) {
                throw new RequiredError('domainIdentifier','Required parameter domainIdentifier was null or undefined when calling workerDomainGetADomain.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling workerDomainGetADomain.');
            }
            const localVarPath = `/accounts/{account_identifier}/workers/domains/{domain_identifier}`
                .replace(`{${"domain_identifier"}}`, encodeURIComponent(String(domainIdentifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all Worker Domains.
         * @summary List Domains
         * @param {C4f8RoOSComponentsSchemasAccountIdentifier} accountIdentifier 
         * @param {C4f8RoOSZoneName} [zoneName] 
         * @param {C4f8RoOSSchemasService} [service] 
         * @param {C4f8RoOSZoneIdentifier} [zoneIdentifier] 
         * @param {string} [hostname] 
         * @param {string} [environment] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workerDomainListDomains: async (accountIdentifier: C4f8RoOSComponentsSchemasAccountIdentifier, zoneName?: C4f8RoOSZoneName, service?: C4f8RoOSSchemasService, zoneIdentifier?: C4f8RoOSZoneIdentifier, hostname?: string, environment?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling workerDomainListDomains.');
            }
            const localVarPath = `/accounts/{account_identifier}/workers/domains`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (zoneName !== undefined) {
                localVarQueryParameter['zone_name'] = zoneName;
            }

            if (service !== undefined) {
                localVarQueryParameter['service'] = service;
            }

            if (zoneIdentifier !== undefined) {
                localVarQueryParameter['zone_identifier'] = zoneIdentifier;
            }

            if (hostname !== undefined) {
                localVarQueryParameter['hostname'] = hostname;
            }

            if (environment !== undefined) {
                localVarQueryParameter['environment'] = environment;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkerDomainApi - functional programming interface
 * @export
 */
export const WorkerDomainApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Attaches a worker to a zone and hostname.
         * @summary Attach to Domain
         * @param {WorkersDomainsBody} body 
         * @param {C4f8RoOSComponentsSchemasAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workerDomainAttachToDomain(body: WorkersDomainsBody, accountIdentifier: C4f8RoOSComponentsSchemasAccountIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<C4f8RoOSDomainResponseSingle>>> {
            const localVarAxiosArgs = await WorkerDomainApiAxiosParamCreator(configuration).workerDomainAttachToDomain(body, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Detaches a worker from a zone and hostname.
         * @summary Detach from Domain
         * @param {C4f8RoOSDomainIdentifier} domainIdentifier 
         * @param {C4f8RoOSComponentsSchemasAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workerDomainDetachFromDomain(domainIdentifier: C4f8RoOSDomainIdentifier, accountIdentifier: C4f8RoOSComponentsSchemasAccountIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await WorkerDomainApiAxiosParamCreator(configuration).workerDomainDetachFromDomain(domainIdentifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets a Worker Domain.
         * @summary Get a Domain
         * @param {C4f8RoOSDomainIdentifier} domainIdentifier 
         * @param {C4f8RoOSComponentsSchemasAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workerDomainGetADomain(domainIdentifier: C4f8RoOSDomainIdentifier, accountIdentifier: C4f8RoOSComponentsSchemasAccountIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<C4f8RoOSDomainResponseSingle>>> {
            const localVarAxiosArgs = await WorkerDomainApiAxiosParamCreator(configuration).workerDomainGetADomain(domainIdentifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Lists all Worker Domains.
         * @summary List Domains
         * @param {C4f8RoOSComponentsSchemasAccountIdentifier} accountIdentifier 
         * @param {C4f8RoOSZoneName} [zoneName] 
         * @param {C4f8RoOSSchemasService} [service] 
         * @param {C4f8RoOSZoneIdentifier} [zoneIdentifier] 
         * @param {string} [hostname] 
         * @param {string} [environment] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workerDomainListDomains(accountIdentifier: C4f8RoOSComponentsSchemasAccountIdentifier, zoneName?: C4f8RoOSZoneName, service?: C4f8RoOSSchemasService, zoneIdentifier?: C4f8RoOSZoneIdentifier, hostname?: string, environment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<C4f8RoOSDomainResponseCollection>>> {
            const localVarAxiosArgs = await WorkerDomainApiAxiosParamCreator(configuration).workerDomainListDomains(accountIdentifier, zoneName, service, zoneIdentifier, hostname, environment, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * WorkerDomainApi - factory interface
 * @export
 */
export const WorkerDomainApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Attaches a worker to a zone and hostname.
         * @summary Attach to Domain
         * @param {WorkersDomainsBody} body 
         * @param {C4f8RoOSComponentsSchemasAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workerDomainAttachToDomain(body: WorkersDomainsBody, accountIdentifier: C4f8RoOSComponentsSchemasAccountIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<C4f8RoOSDomainResponseSingle>> {
            return WorkerDomainApiFp(configuration).workerDomainAttachToDomain(body, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Detaches a worker from a zone and hostname.
         * @summary Detach from Domain
         * @param {C4f8RoOSDomainIdentifier} domainIdentifier 
         * @param {C4f8RoOSComponentsSchemasAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workerDomainDetachFromDomain(domainIdentifier: C4f8RoOSDomainIdentifier, accountIdentifier: C4f8RoOSComponentsSchemasAccountIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return WorkerDomainApiFp(configuration).workerDomainDetachFromDomain(domainIdentifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a Worker Domain.
         * @summary Get a Domain
         * @param {C4f8RoOSDomainIdentifier} domainIdentifier 
         * @param {C4f8RoOSComponentsSchemasAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workerDomainGetADomain(domainIdentifier: C4f8RoOSDomainIdentifier, accountIdentifier: C4f8RoOSComponentsSchemasAccountIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<C4f8RoOSDomainResponseSingle>> {
            return WorkerDomainApiFp(configuration).workerDomainGetADomain(domainIdentifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists all Worker Domains.
         * @summary List Domains
         * @param {C4f8RoOSComponentsSchemasAccountIdentifier} accountIdentifier 
         * @param {C4f8RoOSZoneName} [zoneName] 
         * @param {C4f8RoOSSchemasService} [service] 
         * @param {C4f8RoOSZoneIdentifier} [zoneIdentifier] 
         * @param {string} [hostname] 
         * @param {string} [environment] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workerDomainListDomains(accountIdentifier: C4f8RoOSComponentsSchemasAccountIdentifier, zoneName?: C4f8RoOSZoneName, service?: C4f8RoOSSchemasService, zoneIdentifier?: C4f8RoOSZoneIdentifier, hostname?: string, environment?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<C4f8RoOSDomainResponseCollection>> {
            return WorkerDomainApiFp(configuration).workerDomainListDomains(accountIdentifier, zoneName, service, zoneIdentifier, hostname, environment, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WorkerDomainApi - object-oriented interface
 * @export
 * @class WorkerDomainApi
 * @extends {BaseAPI}
 */
export class WorkerDomainApi extends BaseAPI {
    /**
     * Attaches a worker to a zone and hostname.
     * @summary Attach to Domain
     * @param {WorkersDomainsBody} body 
     * @param {C4f8RoOSComponentsSchemasAccountIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerDomainApi
     */
    public async workerDomainAttachToDomain(body: WorkersDomainsBody, accountIdentifier: C4f8RoOSComponentsSchemasAccountIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<C4f8RoOSDomainResponseSingle>> {
        return WorkerDomainApiFp(this.configuration).workerDomainAttachToDomain(body, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Detaches a worker from a zone and hostname.
     * @summary Detach from Domain
     * @param {C4f8RoOSDomainIdentifier} domainIdentifier 
     * @param {C4f8RoOSComponentsSchemasAccountIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerDomainApi
     */
    public async workerDomainDetachFromDomain(domainIdentifier: C4f8RoOSDomainIdentifier, accountIdentifier: C4f8RoOSComponentsSchemasAccountIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return WorkerDomainApiFp(this.configuration).workerDomainDetachFromDomain(domainIdentifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets a Worker Domain.
     * @summary Get a Domain
     * @param {C4f8RoOSDomainIdentifier} domainIdentifier 
     * @param {C4f8RoOSComponentsSchemasAccountIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerDomainApi
     */
    public async workerDomainGetADomain(domainIdentifier: C4f8RoOSDomainIdentifier, accountIdentifier: C4f8RoOSComponentsSchemasAccountIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<C4f8RoOSDomainResponseSingle>> {
        return WorkerDomainApiFp(this.configuration).workerDomainGetADomain(domainIdentifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists all Worker Domains.
     * @summary List Domains
     * @param {C4f8RoOSComponentsSchemasAccountIdentifier} accountIdentifier 
     * @param {C4f8RoOSZoneName} [zoneName] 
     * @param {C4f8RoOSSchemasService} [service] 
     * @param {C4f8RoOSZoneIdentifier} [zoneIdentifier] 
     * @param {string} [hostname] 
     * @param {string} [environment] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerDomainApi
     */
    public async workerDomainListDomains(accountIdentifier: C4f8RoOSComponentsSchemasAccountIdentifier, zoneName?: C4f8RoOSZoneName, service?: C4f8RoOSSchemasService, zoneIdentifier?: C4f8RoOSZoneIdentifier, hostname?: string, environment?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<C4f8RoOSDomainResponseCollection>> {
        return WorkerDomainApiFp(this.configuration).workerDomainListDomains(accountIdentifier, zoneName, service, zoneIdentifier, hostname, environment, options).then((request) => request(this.axios, this.basePath));
    }
}
