/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse200173 } from '../models';
import { InlineResponse4XX307 } from '../models';
import { InlineResponse4XX308 } from '../models';
import { InlineResponse4xx57 } from '../models';
import { Model6KaSmMdRCollectionOrganizationResponse } from '../models';
import { Model6KaSmMdRCommonComponentsSchemasIdentifier } from '../models';
import { Model6KaSmMdRSchemasName } from '../models';
import { Model6KaSmMdRSingleOrganizationResponse } from '../models';
/**
 * UsersOrganizationsApi - axios parameter creator
 * @export
 */
export const UsersOrganizationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Removes association to an organization.
         * @summary Leave Organization
         * @param {Model6KaSmMdRCommonComponentsSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userSOrganizationsLeaveOrganization: async (identifier: Model6KaSmMdRCommonComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling userSOrganizationsLeaveOrganization.');
            }
            const localVarPath = `/user/organizations/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists organizations the user is associated with.
         * @summary List Organizations
         * @param {Model6KaSmMdRSchemasName} [name] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {string} [order] 
         * @param {string} [direction] 
         * @param {string} [match] 
         * @param {string} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userSOrganizationsListOrganizations: async (name?: Model6KaSmMdRSchemasName, page?: number, perPage?: number, order?: string, direction?: string, match?: string, status?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/organizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (match !== undefined) {
                localVarQueryParameter['match'] = match;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a specific organization the user is associated with.
         * @summary Organization Details
         * @param {Model6KaSmMdRCommonComponentsSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userSOrganizationsOrganizationDetails: async (identifier: Model6KaSmMdRCommonComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling userSOrganizationsOrganizationDetails.');
            }
            const localVarPath = `/user/organizations/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersOrganizationsApi - functional programming interface
 * @export
 */
export const UsersOrganizationsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Removes association to an organization.
         * @summary Leave Organization
         * @param {Model6KaSmMdRCommonComponentsSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userSOrganizationsLeaveOrganization(identifier: Model6KaSmMdRCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200173>>> {
            const localVarAxiosArgs = await UsersOrganizationsApiAxiosParamCreator(configuration).userSOrganizationsLeaveOrganization(identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Lists organizations the user is associated with.
         * @summary List Organizations
         * @param {Model6KaSmMdRSchemasName} [name] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {string} [order] 
         * @param {string} [direction] 
         * @param {string} [match] 
         * @param {string} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userSOrganizationsListOrganizations(name?: Model6KaSmMdRSchemasName, page?: number, perPage?: number, order?: string, direction?: string, match?: string, status?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model6KaSmMdRCollectionOrganizationResponse>>> {
            const localVarAxiosArgs = await UsersOrganizationsApiAxiosParamCreator(configuration).userSOrganizationsListOrganizations(name, page, perPage, order, direction, match, status, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets a specific organization the user is associated with.
         * @summary Organization Details
         * @param {Model6KaSmMdRCommonComponentsSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userSOrganizationsOrganizationDetails(identifier: Model6KaSmMdRCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model6KaSmMdRSingleOrganizationResponse>>> {
            const localVarAxiosArgs = await UsersOrganizationsApiAxiosParamCreator(configuration).userSOrganizationsOrganizationDetails(identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UsersOrganizationsApi - factory interface
 * @export
 */
export const UsersOrganizationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Removes association to an organization.
         * @summary Leave Organization
         * @param {Model6KaSmMdRCommonComponentsSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userSOrganizationsLeaveOrganization(identifier: Model6KaSmMdRCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200173>> {
            return UsersOrganizationsApiFp(configuration).userSOrganizationsLeaveOrganization(identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists organizations the user is associated with.
         * @summary List Organizations
         * @param {Model6KaSmMdRSchemasName} [name] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {string} [order] 
         * @param {string} [direction] 
         * @param {string} [match] 
         * @param {string} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userSOrganizationsListOrganizations(name?: Model6KaSmMdRSchemasName, page?: number, perPage?: number, order?: string, direction?: string, match?: string, status?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Model6KaSmMdRCollectionOrganizationResponse>> {
            return UsersOrganizationsApiFp(configuration).userSOrganizationsListOrganizations(name, page, perPage, order, direction, match, status, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a specific organization the user is associated with.
         * @summary Organization Details
         * @param {Model6KaSmMdRCommonComponentsSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userSOrganizationsOrganizationDetails(identifier: Model6KaSmMdRCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model6KaSmMdRSingleOrganizationResponse>> {
            return UsersOrganizationsApiFp(configuration).userSOrganizationsOrganizationDetails(identifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersOrganizationsApi - object-oriented interface
 * @export
 * @class UsersOrganizationsApi
 * @extends {BaseAPI}
 */
export class UsersOrganizationsApi extends BaseAPI {
    /**
     * Removes association to an organization.
     * @summary Leave Organization
     * @param {Model6KaSmMdRCommonComponentsSchemasIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersOrganizationsApi
     */
    public async userSOrganizationsLeaveOrganization(identifier: Model6KaSmMdRCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200173>> {
        return UsersOrganizationsApiFp(this.configuration).userSOrganizationsLeaveOrganization(identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists organizations the user is associated with.
     * @summary List Organizations
     * @param {Model6KaSmMdRSchemasName} [name] 
     * @param {number} [page] 
     * @param {number} [perPage] 
     * @param {string} [order] 
     * @param {string} [direction] 
     * @param {string} [match] 
     * @param {string} [status] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersOrganizationsApi
     */
    public async userSOrganizationsListOrganizations(name?: Model6KaSmMdRSchemasName, page?: number, perPage?: number, order?: string, direction?: string, match?: string, status?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model6KaSmMdRCollectionOrganizationResponse>> {
        return UsersOrganizationsApiFp(this.configuration).userSOrganizationsListOrganizations(name, page, perPage, order, direction, match, status, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets a specific organization the user is associated with.
     * @summary Organization Details
     * @param {Model6KaSmMdRCommonComponentsSchemasIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersOrganizationsApi
     */
    public async userSOrganizationsOrganizationDetails(identifier: Model6KaSmMdRCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model6KaSmMdRSingleOrganizationResponse>> {
        return UsersOrganizationsApiFp(this.configuration).userSOrganizationsOrganizationDetails(identifier, options).then((request) => request(this.axios, this.basePath));
    }
}
