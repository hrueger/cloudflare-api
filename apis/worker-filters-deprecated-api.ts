/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { C4f8RoOSApiResponseSingleId } from '../models';
import { C4f8RoOSCommonComponentsSchemasIdentifier } from '../models';
import { C4f8RoOSFilterNoId } from '../models';
import { C4f8RoOSFilterResponseCollection } from '../models';
import { C4f8RoOSFilterResponseSingle } from '../models';
import { InlineResponse4xx102 } from '../models';
import { InlineResponse4xx103 } from '../models';
import { InlineResponse4xx35 } from '../models';
/**
 * WorkerFiltersDeprecatedApi - axios parameter creator
 * @export
 */
export const WorkerFiltersDeprecatedApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Filter
         * @param {C4f8RoOSFilterNoId} body 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workerFiltersDeprecatedCreateFilter: async (body: C4f8RoOSFilterNoId, zoneId: C4f8RoOSCommonComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling workerFiltersDeprecatedCreateFilter.');
            }
            // verify required parameter 'zoneId' is not null or undefined
            if (zoneId === null || zoneId === undefined) {
                throw new RequiredError('zoneId','Required parameter zoneId was null or undefined when calling workerFiltersDeprecatedCreateFilter.');
            }
            const localVarPath = `/zones/{zone_id}/workers/filters`
                .replace(`{${"zone_id"}}`, encodeURIComponent(String(zoneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Filter
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} filterId 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workerFiltersDeprecatedDeleteFilter: async (filterId: C4f8RoOSCommonComponentsSchemasIdentifier, zoneId: C4f8RoOSCommonComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'filterId' is not null or undefined
            if (filterId === null || filterId === undefined) {
                throw new RequiredError('filterId','Required parameter filterId was null or undefined when calling workerFiltersDeprecatedDeleteFilter.');
            }
            // verify required parameter 'zoneId' is not null or undefined
            if (zoneId === null || zoneId === undefined) {
                throw new RequiredError('zoneId','Required parameter zoneId was null or undefined when calling workerFiltersDeprecatedDeleteFilter.');
            }
            const localVarPath = `/zones/{zone_id}/workers/filters/{filter_id}`
                .replace(`{${"filter_id"}}`, encodeURIComponent(String(filterId)))
                .replace(`{${"zone_id"}}`, encodeURIComponent(String(zoneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Filters
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workerFiltersDeprecatedListFilters: async (zoneId: C4f8RoOSCommonComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneId' is not null or undefined
            if (zoneId === null || zoneId === undefined) {
                throw new RequiredError('zoneId','Required parameter zoneId was null or undefined when calling workerFiltersDeprecatedListFilters.');
            }
            const localVarPath = `/zones/{zone_id}/workers/filters`
                .replace(`{${"zone_id"}}`, encodeURIComponent(String(zoneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Filter
         * @param {C4f8RoOSFilterNoId} body 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} filterId 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workerFiltersDeprecatedUpdateFilter: async (body: C4f8RoOSFilterNoId, filterId: C4f8RoOSCommonComponentsSchemasIdentifier, zoneId: C4f8RoOSCommonComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling workerFiltersDeprecatedUpdateFilter.');
            }
            // verify required parameter 'filterId' is not null or undefined
            if (filterId === null || filterId === undefined) {
                throw new RequiredError('filterId','Required parameter filterId was null or undefined when calling workerFiltersDeprecatedUpdateFilter.');
            }
            // verify required parameter 'zoneId' is not null or undefined
            if (zoneId === null || zoneId === undefined) {
                throw new RequiredError('zoneId','Required parameter zoneId was null or undefined when calling workerFiltersDeprecatedUpdateFilter.');
            }
            const localVarPath = `/zones/{zone_id}/workers/filters/{filter_id}`
                .replace(`{${"filter_id"}}`, encodeURIComponent(String(filterId)))
                .replace(`{${"zone_id"}}`, encodeURIComponent(String(zoneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkerFiltersDeprecatedApi - functional programming interface
 * @export
 */
export const WorkerFiltersDeprecatedApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Filter
         * @param {C4f8RoOSFilterNoId} body 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workerFiltersDeprecatedCreateFilter(body: C4f8RoOSFilterNoId, zoneId: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<C4f8RoOSApiResponseSingleId>>> {
            const localVarAxiosArgs = await WorkerFiltersDeprecatedApiAxiosParamCreator(configuration).workerFiltersDeprecatedCreateFilter(body, zoneId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete Filter
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} filterId 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workerFiltersDeprecatedDeleteFilter(filterId: C4f8RoOSCommonComponentsSchemasIdentifier, zoneId: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<C4f8RoOSApiResponseSingleId>>> {
            const localVarAxiosArgs = await WorkerFiltersDeprecatedApiAxiosParamCreator(configuration).workerFiltersDeprecatedDeleteFilter(filterId, zoneId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary List Filters
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workerFiltersDeprecatedListFilters(zoneId: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<C4f8RoOSFilterResponseCollection>>> {
            const localVarAxiosArgs = await WorkerFiltersDeprecatedApiAxiosParamCreator(configuration).workerFiltersDeprecatedListFilters(zoneId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update Filter
         * @param {C4f8RoOSFilterNoId} body 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} filterId 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workerFiltersDeprecatedUpdateFilter(body: C4f8RoOSFilterNoId, filterId: C4f8RoOSCommonComponentsSchemasIdentifier, zoneId: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<C4f8RoOSFilterResponseSingle>>> {
            const localVarAxiosArgs = await WorkerFiltersDeprecatedApiAxiosParamCreator(configuration).workerFiltersDeprecatedUpdateFilter(body, filterId, zoneId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * WorkerFiltersDeprecatedApi - factory interface
 * @export
 */
export const WorkerFiltersDeprecatedApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Create Filter
         * @param {C4f8RoOSFilterNoId} body 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workerFiltersDeprecatedCreateFilter(body: C4f8RoOSFilterNoId, zoneId: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<C4f8RoOSApiResponseSingleId>> {
            return WorkerFiltersDeprecatedApiFp(configuration).workerFiltersDeprecatedCreateFilter(body, zoneId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Filter
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} filterId 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workerFiltersDeprecatedDeleteFilter(filterId: C4f8RoOSCommonComponentsSchemasIdentifier, zoneId: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<C4f8RoOSApiResponseSingleId>> {
            return WorkerFiltersDeprecatedApiFp(configuration).workerFiltersDeprecatedDeleteFilter(filterId, zoneId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Filters
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workerFiltersDeprecatedListFilters(zoneId: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<C4f8RoOSFilterResponseCollection>> {
            return WorkerFiltersDeprecatedApiFp(configuration).workerFiltersDeprecatedListFilters(zoneId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Filter
         * @param {C4f8RoOSFilterNoId} body 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} filterId 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workerFiltersDeprecatedUpdateFilter(body: C4f8RoOSFilterNoId, filterId: C4f8RoOSCommonComponentsSchemasIdentifier, zoneId: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<C4f8RoOSFilterResponseSingle>> {
            return WorkerFiltersDeprecatedApiFp(configuration).workerFiltersDeprecatedUpdateFilter(body, filterId, zoneId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WorkerFiltersDeprecatedApi - object-oriented interface
 * @export
 * @class WorkerFiltersDeprecatedApi
 * @extends {BaseAPI}
 */
export class WorkerFiltersDeprecatedApi extends BaseAPI {
    /**
     * 
     * @summary Create Filter
     * @param {C4f8RoOSFilterNoId} body 
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerFiltersDeprecatedApi
     */
    public async workerFiltersDeprecatedCreateFilter(body: C4f8RoOSFilterNoId, zoneId: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<C4f8RoOSApiResponseSingleId>> {
        return WorkerFiltersDeprecatedApiFp(this.configuration).workerFiltersDeprecatedCreateFilter(body, zoneId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Delete Filter
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} filterId 
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerFiltersDeprecatedApi
     */
    public async workerFiltersDeprecatedDeleteFilter(filterId: C4f8RoOSCommonComponentsSchemasIdentifier, zoneId: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<C4f8RoOSApiResponseSingleId>> {
        return WorkerFiltersDeprecatedApiFp(this.configuration).workerFiltersDeprecatedDeleteFilter(filterId, zoneId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary List Filters
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerFiltersDeprecatedApi
     */
    public async workerFiltersDeprecatedListFilters(zoneId: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<C4f8RoOSFilterResponseCollection>> {
        return WorkerFiltersDeprecatedApiFp(this.configuration).workerFiltersDeprecatedListFilters(zoneId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Update Filter
     * @param {C4f8RoOSFilterNoId} body 
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} filterId 
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerFiltersDeprecatedApi
     */
    public async workerFiltersDeprecatedUpdateFilter(body: C4f8RoOSFilterNoId, filterId: C4f8RoOSCommonComponentsSchemasIdentifier, zoneId: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<C4f8RoOSFilterResponseSingle>> {
        return WorkerFiltersDeprecatedApiFp(this.configuration).workerFiltersDeprecatedUpdateFilter(body, filterId, zoneId, options).then((request) => request(this.axios, this.basePath));
    }
}
