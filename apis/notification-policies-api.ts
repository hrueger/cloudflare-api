/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { HrcAXqolApiResponseCollection } from '../models';
import { HrcAXqolIdResponse } from '../models';
import { HrcAXqolIdentifier } from '../models';
import { HrcAXqolPoliciesComponentsSchemasResponseCollection } from '../models';
import { HrcAXqolSingleResponse } from '../models';
import { HrcAXqolUuid } from '../models';
import { InlineResponse4XX221 } from '../models';
import { InlineResponse4XX222 } from '../models';
import { InlineResponse4XX223 } from '../models';
import { InlineResponse4XX224 } from '../models';
import { PoliciesUuidBody1 } from '../models';
import { V3PoliciesBody } from '../models';
/**
 * NotificationPoliciesApi - axios parameter creator
 * @export
 */
export const NotificationPoliciesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new Notification policy.
         * @summary Create a Notification policy
         * @param {V3PoliciesBody} body 
         * @param {HrcAXqolIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationPoliciesCreateANotificationPolicy: async (body: V3PoliciesBody, identifier: HrcAXqolIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling notificationPoliciesCreateANotificationPolicy.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling notificationPoliciesCreateANotificationPolicy.');
            }
            const localVarPath = `/accounts/{identifier}/alerting/v3/policies`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Notification policy.
         * @summary Delete a Notification policy
         * @param {HrcAXqolUuid} uuid 
         * @param {HrcAXqolIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationPoliciesDeleteANotificationPolicy: async (uuid: HrcAXqolUuid, identifier: HrcAXqolIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling notificationPoliciesDeleteANotificationPolicy.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling notificationPoliciesDeleteANotificationPolicy.');
            }
            const localVarPath = `/accounts/{identifier}/alerting/v3/policies/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)))
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get details for a single policy.
         * @summary Get a Notification policy
         * @param {HrcAXqolUuid} uuid 
         * @param {HrcAXqolIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationPoliciesGetANotificationPolicy: async (uuid: HrcAXqolUuid, identifier: HrcAXqolIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling notificationPoliciesGetANotificationPolicy.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling notificationPoliciesGetANotificationPolicy.');
            }
            const localVarPath = `/accounts/{identifier}/alerting/v3/policies/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)))
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of all Notification policies.
         * @summary List Notification policies
         * @param {HrcAXqolIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationPoliciesListNotificationPolicies: async (identifier: HrcAXqolIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling notificationPoliciesListNotificationPolicies.');
            }
            const localVarPath = `/accounts/{identifier}/alerting/v3/policies`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a Notification policy.
         * @summary Update a Notification policy
         * @param {PoliciesUuidBody1} body 
         * @param {HrcAXqolUuid} uuid 
         * @param {HrcAXqolIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationPoliciesUpdateANotificationPolicy: async (body: PoliciesUuidBody1, uuid: HrcAXqolUuid, identifier: HrcAXqolIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling notificationPoliciesUpdateANotificationPolicy.');
            }
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling notificationPoliciesUpdateANotificationPolicy.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling notificationPoliciesUpdateANotificationPolicy.');
            }
            const localVarPath = `/accounts/{identifier}/alerting/v3/policies/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)))
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationPoliciesApi - functional programming interface
 * @export
 */
export const NotificationPoliciesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates a new Notification policy.
         * @summary Create a Notification policy
         * @param {V3PoliciesBody} body 
         * @param {HrcAXqolIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationPoliciesCreateANotificationPolicy(body: V3PoliciesBody, identifier: HrcAXqolIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<HrcAXqolIdResponse>>> {
            const localVarAxiosArgs = await NotificationPoliciesApiAxiosParamCreator(configuration).notificationPoliciesCreateANotificationPolicy(body, identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a Notification policy.
         * @summary Delete a Notification policy
         * @param {HrcAXqolUuid} uuid 
         * @param {HrcAXqolIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationPoliciesDeleteANotificationPolicy(uuid: HrcAXqolUuid, identifier: HrcAXqolIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<HrcAXqolApiResponseCollection>>> {
            const localVarAxiosArgs = await NotificationPoliciesApiAxiosParamCreator(configuration).notificationPoliciesDeleteANotificationPolicy(uuid, identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get details for a single policy.
         * @summary Get a Notification policy
         * @param {HrcAXqolUuid} uuid 
         * @param {HrcAXqolIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationPoliciesGetANotificationPolicy(uuid: HrcAXqolUuid, identifier: HrcAXqolIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<HrcAXqolSingleResponse>>> {
            const localVarAxiosArgs = await NotificationPoliciesApiAxiosParamCreator(configuration).notificationPoliciesGetANotificationPolicy(uuid, identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a list of all Notification policies.
         * @summary List Notification policies
         * @param {HrcAXqolIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationPoliciesListNotificationPolicies(identifier: HrcAXqolIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<HrcAXqolPoliciesComponentsSchemasResponseCollection>>> {
            const localVarAxiosArgs = await NotificationPoliciesApiAxiosParamCreator(configuration).notificationPoliciesListNotificationPolicies(identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a Notification policy.
         * @summary Update a Notification policy
         * @param {PoliciesUuidBody1} body 
         * @param {HrcAXqolUuid} uuid 
         * @param {HrcAXqolIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationPoliciesUpdateANotificationPolicy(body: PoliciesUuidBody1, uuid: HrcAXqolUuid, identifier: HrcAXqolIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<HrcAXqolIdResponse>>> {
            const localVarAxiosArgs = await NotificationPoliciesApiAxiosParamCreator(configuration).notificationPoliciesUpdateANotificationPolicy(body, uuid, identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * NotificationPoliciesApi - factory interface
 * @export
 */
export const NotificationPoliciesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Creates a new Notification policy.
         * @summary Create a Notification policy
         * @param {V3PoliciesBody} body 
         * @param {HrcAXqolIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationPoliciesCreateANotificationPolicy(body: V3PoliciesBody, identifier: HrcAXqolIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<HrcAXqolIdResponse>> {
            return NotificationPoliciesApiFp(configuration).notificationPoliciesCreateANotificationPolicy(body, identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Notification policy.
         * @summary Delete a Notification policy
         * @param {HrcAXqolUuid} uuid 
         * @param {HrcAXqolIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationPoliciesDeleteANotificationPolicy(uuid: HrcAXqolUuid, identifier: HrcAXqolIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<HrcAXqolApiResponseCollection>> {
            return NotificationPoliciesApiFp(configuration).notificationPoliciesDeleteANotificationPolicy(uuid, identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Get details for a single policy.
         * @summary Get a Notification policy
         * @param {HrcAXqolUuid} uuid 
         * @param {HrcAXqolIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationPoliciesGetANotificationPolicy(uuid: HrcAXqolUuid, identifier: HrcAXqolIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<HrcAXqolSingleResponse>> {
            return NotificationPoliciesApiFp(configuration).notificationPoliciesGetANotificationPolicy(uuid, identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of all Notification policies.
         * @summary List Notification policies
         * @param {HrcAXqolIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationPoliciesListNotificationPolicies(identifier: HrcAXqolIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<HrcAXqolPoliciesComponentsSchemasResponseCollection>> {
            return NotificationPoliciesApiFp(configuration).notificationPoliciesListNotificationPolicies(identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a Notification policy.
         * @summary Update a Notification policy
         * @param {PoliciesUuidBody1} body 
         * @param {HrcAXqolUuid} uuid 
         * @param {HrcAXqolIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationPoliciesUpdateANotificationPolicy(body: PoliciesUuidBody1, uuid: HrcAXqolUuid, identifier: HrcAXqolIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<HrcAXqolIdResponse>> {
            return NotificationPoliciesApiFp(configuration).notificationPoliciesUpdateANotificationPolicy(body, uuid, identifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NotificationPoliciesApi - object-oriented interface
 * @export
 * @class NotificationPoliciesApi
 * @extends {BaseAPI}
 */
export class NotificationPoliciesApi extends BaseAPI {
    /**
     * Creates a new Notification policy.
     * @summary Create a Notification policy
     * @param {V3PoliciesBody} body 
     * @param {HrcAXqolIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationPoliciesApi
     */
    public async notificationPoliciesCreateANotificationPolicy(body: V3PoliciesBody, identifier: HrcAXqolIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<HrcAXqolIdResponse>> {
        return NotificationPoliciesApiFp(this.configuration).notificationPoliciesCreateANotificationPolicy(body, identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a Notification policy.
     * @summary Delete a Notification policy
     * @param {HrcAXqolUuid} uuid 
     * @param {HrcAXqolIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationPoliciesApi
     */
    public async notificationPoliciesDeleteANotificationPolicy(uuid: HrcAXqolUuid, identifier: HrcAXqolIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<HrcAXqolApiResponseCollection>> {
        return NotificationPoliciesApiFp(this.configuration).notificationPoliciesDeleteANotificationPolicy(uuid, identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get details for a single policy.
     * @summary Get a Notification policy
     * @param {HrcAXqolUuid} uuid 
     * @param {HrcAXqolIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationPoliciesApi
     */
    public async notificationPoliciesGetANotificationPolicy(uuid: HrcAXqolUuid, identifier: HrcAXqolIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<HrcAXqolSingleResponse>> {
        return NotificationPoliciesApiFp(this.configuration).notificationPoliciesGetANotificationPolicy(uuid, identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a list of all Notification policies.
     * @summary List Notification policies
     * @param {HrcAXqolIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationPoliciesApi
     */
    public async notificationPoliciesListNotificationPolicies(identifier: HrcAXqolIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<HrcAXqolPoliciesComponentsSchemasResponseCollection>> {
        return NotificationPoliciesApiFp(this.configuration).notificationPoliciesListNotificationPolicies(identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update a Notification policy.
     * @summary Update a Notification policy
     * @param {PoliciesUuidBody1} body 
     * @param {HrcAXqolUuid} uuid 
     * @param {HrcAXqolIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationPoliciesApi
     */
    public async notificationPoliciesUpdateANotificationPolicy(body: PoliciesUuidBody1, uuid: HrcAXqolUuid, identifier: HrcAXqolIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<HrcAXqolIdResponse>> {
        return NotificationPoliciesApiFp(this.configuration).notificationPoliciesUpdateANotificationPolicy(body, uuid, identifier, options).then((request) => request(this.axios, this.basePath));
    }
}
