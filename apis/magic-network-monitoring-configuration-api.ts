/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse4XX204 } from '../models';
import { Model6BbvEZS2AccountIdentifier } from '../models';
import { Model6BbvEZS2MnmConfigSingleResponse } from '../models';
/**
 * MagicNetworkMonitoringConfigurationApi - axios parameter creator
 * @export
 */
export const MagicNetworkMonitoringConfigurationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new network monitoring configuration.
         * @summary Create account configuration
         * @param {Model6BbvEZS2AccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        magicNetworkMonitoringConfigurationCreateAccountConfiguration: async (accountIdentifier: Model6BbvEZS2AccountIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling magicNetworkMonitoringConfigurationCreateAccountConfiguration.');
            }
            const localVarPath = `/accounts/{account_identifier}/mnm/config`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an existing network monitoring configuration.
         * @summary Delete account configuration
         * @param {Model6BbvEZS2AccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        magicNetworkMonitoringConfigurationDeleteAccountConfiguration: async (accountIdentifier: Model6BbvEZS2AccountIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling magicNetworkMonitoringConfigurationDeleteAccountConfiguration.');
            }
            const localVarPath = `/accounts/{account_identifier}/mnm/config`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists default sampling and router IPs for account.
         * @summary List account configuration
         * @param {Model6BbvEZS2AccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        magicNetworkMonitoringConfigurationListAccountConfiguration: async (accountIdentifier: Model6BbvEZS2AccountIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling magicNetworkMonitoringConfigurationListAccountConfiguration.');
            }
            const localVarPath = `/accounts/{account_identifier}/mnm/config`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists default sampling, router IPs, and rules for account.
         * @summary List rules and account configuration
         * @param {Model6BbvEZS2AccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        magicNetworkMonitoringConfigurationListRulesAndAccountConfiguration: async (accountIdentifier: Model6BbvEZS2AccountIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling magicNetworkMonitoringConfigurationListRulesAndAccountConfiguration.');
            }
            const localVarPath = `/accounts/{account_identifier}/mnm/config/full`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update fields in an existing network monitoring configuration.
         * @summary Update account configuration fields
         * @param {Model6BbvEZS2AccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        magicNetworkMonitoringConfigurationUpdateAccountConfigurationFields: async (accountIdentifier: Model6BbvEZS2AccountIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling magicNetworkMonitoringConfigurationUpdateAccountConfigurationFields.');
            }
            const localVarPath = `/accounts/{account_identifier}/mnm/config`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing network monitoring configuration, requires the entire configuration to be updated at once.
         * @summary Update an entire account configuration
         * @param {Model6BbvEZS2AccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        magicNetworkMonitoringConfigurationUpdateAnEntireAccountConfiguration: async (accountIdentifier: Model6BbvEZS2AccountIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling magicNetworkMonitoringConfigurationUpdateAnEntireAccountConfiguration.');
            }
            const localVarPath = `/accounts/{account_identifier}/mnm/config`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MagicNetworkMonitoringConfigurationApi - functional programming interface
 * @export
 */
export const MagicNetworkMonitoringConfigurationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create a new network monitoring configuration.
         * @summary Create account configuration
         * @param {Model6BbvEZS2AccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicNetworkMonitoringConfigurationCreateAccountConfiguration(accountIdentifier: Model6BbvEZS2AccountIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model6BbvEZS2MnmConfigSingleResponse>>> {
            const localVarAxiosArgs = await MagicNetworkMonitoringConfigurationApiAxiosParamCreator(configuration).magicNetworkMonitoringConfigurationCreateAccountConfiguration(accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete an existing network monitoring configuration.
         * @summary Delete account configuration
         * @param {Model6BbvEZS2AccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicNetworkMonitoringConfigurationDeleteAccountConfiguration(accountIdentifier: Model6BbvEZS2AccountIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model6BbvEZS2MnmConfigSingleResponse>>> {
            const localVarAxiosArgs = await MagicNetworkMonitoringConfigurationApiAxiosParamCreator(configuration).magicNetworkMonitoringConfigurationDeleteAccountConfiguration(accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Lists default sampling and router IPs for account.
         * @summary List account configuration
         * @param {Model6BbvEZS2AccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicNetworkMonitoringConfigurationListAccountConfiguration(accountIdentifier: Model6BbvEZS2AccountIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model6BbvEZS2MnmConfigSingleResponse>>> {
            const localVarAxiosArgs = await MagicNetworkMonitoringConfigurationApiAxiosParamCreator(configuration).magicNetworkMonitoringConfigurationListAccountConfiguration(accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Lists default sampling, router IPs, and rules for account.
         * @summary List rules and account configuration
         * @param {Model6BbvEZS2AccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicNetworkMonitoringConfigurationListRulesAndAccountConfiguration(accountIdentifier: Model6BbvEZS2AccountIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model6BbvEZS2MnmConfigSingleResponse>>> {
            const localVarAxiosArgs = await MagicNetworkMonitoringConfigurationApiAxiosParamCreator(configuration).magicNetworkMonitoringConfigurationListRulesAndAccountConfiguration(accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update fields in an existing network monitoring configuration.
         * @summary Update account configuration fields
         * @param {Model6BbvEZS2AccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicNetworkMonitoringConfigurationUpdateAccountConfigurationFields(accountIdentifier: Model6BbvEZS2AccountIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model6BbvEZS2MnmConfigSingleResponse>>> {
            const localVarAxiosArgs = await MagicNetworkMonitoringConfigurationApiAxiosParamCreator(configuration).magicNetworkMonitoringConfigurationUpdateAccountConfigurationFields(accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update an existing network monitoring configuration, requires the entire configuration to be updated at once.
         * @summary Update an entire account configuration
         * @param {Model6BbvEZS2AccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicNetworkMonitoringConfigurationUpdateAnEntireAccountConfiguration(accountIdentifier: Model6BbvEZS2AccountIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model6BbvEZS2MnmConfigSingleResponse>>> {
            const localVarAxiosArgs = await MagicNetworkMonitoringConfigurationApiAxiosParamCreator(configuration).magicNetworkMonitoringConfigurationUpdateAnEntireAccountConfiguration(accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * MagicNetworkMonitoringConfigurationApi - factory interface
 * @export
 */
export const MagicNetworkMonitoringConfigurationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create a new network monitoring configuration.
         * @summary Create account configuration
         * @param {Model6BbvEZS2AccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicNetworkMonitoringConfigurationCreateAccountConfiguration(accountIdentifier: Model6BbvEZS2AccountIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model6BbvEZS2MnmConfigSingleResponse>> {
            return MagicNetworkMonitoringConfigurationApiFp(configuration).magicNetworkMonitoringConfigurationCreateAccountConfiguration(accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an existing network monitoring configuration.
         * @summary Delete account configuration
         * @param {Model6BbvEZS2AccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicNetworkMonitoringConfigurationDeleteAccountConfiguration(accountIdentifier: Model6BbvEZS2AccountIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model6BbvEZS2MnmConfigSingleResponse>> {
            return MagicNetworkMonitoringConfigurationApiFp(configuration).magicNetworkMonitoringConfigurationDeleteAccountConfiguration(accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists default sampling and router IPs for account.
         * @summary List account configuration
         * @param {Model6BbvEZS2AccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicNetworkMonitoringConfigurationListAccountConfiguration(accountIdentifier: Model6BbvEZS2AccountIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model6BbvEZS2MnmConfigSingleResponse>> {
            return MagicNetworkMonitoringConfigurationApiFp(configuration).magicNetworkMonitoringConfigurationListAccountConfiguration(accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists default sampling, router IPs, and rules for account.
         * @summary List rules and account configuration
         * @param {Model6BbvEZS2AccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicNetworkMonitoringConfigurationListRulesAndAccountConfiguration(accountIdentifier: Model6BbvEZS2AccountIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model6BbvEZS2MnmConfigSingleResponse>> {
            return MagicNetworkMonitoringConfigurationApiFp(configuration).magicNetworkMonitoringConfigurationListRulesAndAccountConfiguration(accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Update fields in an existing network monitoring configuration.
         * @summary Update account configuration fields
         * @param {Model6BbvEZS2AccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicNetworkMonitoringConfigurationUpdateAccountConfigurationFields(accountIdentifier: Model6BbvEZS2AccountIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model6BbvEZS2MnmConfigSingleResponse>> {
            return MagicNetworkMonitoringConfigurationApiFp(configuration).magicNetworkMonitoringConfigurationUpdateAccountConfigurationFields(accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing network monitoring configuration, requires the entire configuration to be updated at once.
         * @summary Update an entire account configuration
         * @param {Model6BbvEZS2AccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicNetworkMonitoringConfigurationUpdateAnEntireAccountConfiguration(accountIdentifier: Model6BbvEZS2AccountIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model6BbvEZS2MnmConfigSingleResponse>> {
            return MagicNetworkMonitoringConfigurationApiFp(configuration).magicNetworkMonitoringConfigurationUpdateAnEntireAccountConfiguration(accountIdentifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MagicNetworkMonitoringConfigurationApi - object-oriented interface
 * @export
 * @class MagicNetworkMonitoringConfigurationApi
 * @extends {BaseAPI}
 */
export class MagicNetworkMonitoringConfigurationApi extends BaseAPI {
    /**
     * Create a new network monitoring configuration.
     * @summary Create account configuration
     * @param {Model6BbvEZS2AccountIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MagicNetworkMonitoringConfigurationApi
     */
    public async magicNetworkMonitoringConfigurationCreateAccountConfiguration(accountIdentifier: Model6BbvEZS2AccountIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model6BbvEZS2MnmConfigSingleResponse>> {
        return MagicNetworkMonitoringConfigurationApiFp(this.configuration).magicNetworkMonitoringConfigurationCreateAccountConfiguration(accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete an existing network monitoring configuration.
     * @summary Delete account configuration
     * @param {Model6BbvEZS2AccountIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MagicNetworkMonitoringConfigurationApi
     */
    public async magicNetworkMonitoringConfigurationDeleteAccountConfiguration(accountIdentifier: Model6BbvEZS2AccountIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model6BbvEZS2MnmConfigSingleResponse>> {
        return MagicNetworkMonitoringConfigurationApiFp(this.configuration).magicNetworkMonitoringConfigurationDeleteAccountConfiguration(accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists default sampling and router IPs for account.
     * @summary List account configuration
     * @param {Model6BbvEZS2AccountIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MagicNetworkMonitoringConfigurationApi
     */
    public async magicNetworkMonitoringConfigurationListAccountConfiguration(accountIdentifier: Model6BbvEZS2AccountIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model6BbvEZS2MnmConfigSingleResponse>> {
        return MagicNetworkMonitoringConfigurationApiFp(this.configuration).magicNetworkMonitoringConfigurationListAccountConfiguration(accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists default sampling, router IPs, and rules for account.
     * @summary List rules and account configuration
     * @param {Model6BbvEZS2AccountIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MagicNetworkMonitoringConfigurationApi
     */
    public async magicNetworkMonitoringConfigurationListRulesAndAccountConfiguration(accountIdentifier: Model6BbvEZS2AccountIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model6BbvEZS2MnmConfigSingleResponse>> {
        return MagicNetworkMonitoringConfigurationApiFp(this.configuration).magicNetworkMonitoringConfigurationListRulesAndAccountConfiguration(accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update fields in an existing network monitoring configuration.
     * @summary Update account configuration fields
     * @param {Model6BbvEZS2AccountIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MagicNetworkMonitoringConfigurationApi
     */
    public async magicNetworkMonitoringConfigurationUpdateAccountConfigurationFields(accountIdentifier: Model6BbvEZS2AccountIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model6BbvEZS2MnmConfigSingleResponse>> {
        return MagicNetworkMonitoringConfigurationApiFp(this.configuration).magicNetworkMonitoringConfigurationUpdateAccountConfigurationFields(accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update an existing network monitoring configuration, requires the entire configuration to be updated at once.
     * @summary Update an entire account configuration
     * @param {Model6BbvEZS2AccountIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MagicNetworkMonitoringConfigurationApi
     */
    public async magicNetworkMonitoringConfigurationUpdateAnEntireAccountConfiguration(accountIdentifier: Model6BbvEZS2AccountIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model6BbvEZS2MnmConfigSingleResponse>> {
        return MagicNetworkMonitoringConfigurationApiFp(this.configuration).magicNetworkMonitoringConfigurationUpdateAnEntireAccountConfiguration(accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
}
