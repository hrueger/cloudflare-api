/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { C4f8RoOSApiResponseSingleId } from '../models';
import { C4f8RoOSCommonComponentsSchemasIdentifier } from '../models';
import { C4f8RoOSComponentsSchemasCollectionResponse } from '../models';
import { C4f8RoOSContentListDetailsResponse } from '../models';
import { C4f8RoOSContentListEntryCollectionResponse } from '../models';
import { C4f8RoOSContentListEntryCreateRequest } from '../models';
import { C4f8RoOSContentListEntrySingleResponse } from '../models';
import { C4f8RoOSContentListUpdateRequest } from '../models';
import { C4f8RoOSCreateRequest } from '../models';
import { C4f8RoOSModifyRequest } from '../models';
import { C4f8RoOSWeb3HostnameComponentsSchemasSingleResponse } from '../models';
import { InlineResponse4xx35 } from '../models';
import { InlineResponse4xx90 } from '../models';
import { InlineResponse4xx91 } from '../models';
import { InlineResponse4xx92 } from '../models';
import { InlineResponse4xx93 } from '../models';
import { InlineResponse4xx94 } from '../models';
/**
 * Web3HostnameApi - axios parameter creator
 * @export
 */
export const Web3HostnameApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create IPFS Universal Path Gateway Content List Entry
         * @param {C4f8RoOSContentListEntryCreateRequest} body 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} identifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        web3HostnameCreateIpfsUniversalPathGatewayContentListEntry: async (body: C4f8RoOSContentListEntryCreateRequest, identifier: C4f8RoOSCommonComponentsSchemasIdentifier, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling web3HostnameCreateIpfsUniversalPathGatewayContentListEntry.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling web3HostnameCreateIpfsUniversalPathGatewayContentListEntry.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling web3HostnameCreateIpfsUniversalPathGatewayContentListEntry.');
            }
            const localVarPath = `/zones/{zone_identifier}/web3/hostnames/{identifier}/ipfs_universal_path/content_list/entries`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Web3 Hostname
         * @param {C4f8RoOSCreateRequest} body 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        web3HostnameCreateWeb3Hostname: async (body: C4f8RoOSCreateRequest, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling web3HostnameCreateWeb3Hostname.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling web3HostnameCreateWeb3Hostname.');
            }
            const localVarPath = `/zones/{zone_identifier}/web3/hostnames`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete IPFS Universal Path Gateway Content List Entry
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} contentListEntryIdentifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} identifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        web3HostnameDeleteIpfsUniversalPathGatewayContentListEntry: async (contentListEntryIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, identifier: C4f8RoOSCommonComponentsSchemasIdentifier, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentListEntryIdentifier' is not null or undefined
            if (contentListEntryIdentifier === null || contentListEntryIdentifier === undefined) {
                throw new RequiredError('contentListEntryIdentifier','Required parameter contentListEntryIdentifier was null or undefined when calling web3HostnameDeleteIpfsUniversalPathGatewayContentListEntry.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling web3HostnameDeleteIpfsUniversalPathGatewayContentListEntry.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling web3HostnameDeleteIpfsUniversalPathGatewayContentListEntry.');
            }
            const localVarPath = `/zones/{zone_identifier}/web3/hostnames/{identifier}/ipfs_universal_path/content_list/entries/{content_list_entry_identifier}`
                .replace(`{${"content_list_entry_identifier"}}`, encodeURIComponent(String(contentListEntryIdentifier)))
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Web3 Hostname
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} identifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        web3HostnameDeleteWeb3Hostname: async (identifier: C4f8RoOSCommonComponentsSchemasIdentifier, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling web3HostnameDeleteWeb3Hostname.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling web3HostnameDeleteWeb3Hostname.');
            }
            const localVarPath = `/zones/{zone_identifier}/web3/hostnames/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit IPFS Universal Path Gateway Content List Entry
         * @param {C4f8RoOSContentListEntryCreateRequest} body 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} contentListEntryIdentifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} identifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        web3HostnameEditIpfsUniversalPathGatewayContentListEntry: async (body: C4f8RoOSContentListEntryCreateRequest, contentListEntryIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, identifier: C4f8RoOSCommonComponentsSchemasIdentifier, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling web3HostnameEditIpfsUniversalPathGatewayContentListEntry.');
            }
            // verify required parameter 'contentListEntryIdentifier' is not null or undefined
            if (contentListEntryIdentifier === null || contentListEntryIdentifier === undefined) {
                throw new RequiredError('contentListEntryIdentifier','Required parameter contentListEntryIdentifier was null or undefined when calling web3HostnameEditIpfsUniversalPathGatewayContentListEntry.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling web3HostnameEditIpfsUniversalPathGatewayContentListEntry.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling web3HostnameEditIpfsUniversalPathGatewayContentListEntry.');
            }
            const localVarPath = `/zones/{zone_identifier}/web3/hostnames/{identifier}/ipfs_universal_path/content_list/entries/{content_list_entry_identifier}`
                .replace(`{${"content_list_entry_identifier"}}`, encodeURIComponent(String(contentListEntryIdentifier)))
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit Web3 Hostname
         * @param {C4f8RoOSModifyRequest} body 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} identifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        web3HostnameEditWeb3Hostname: async (body: C4f8RoOSModifyRequest, identifier: C4f8RoOSCommonComponentsSchemasIdentifier, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling web3HostnameEditWeb3Hostname.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling web3HostnameEditWeb3Hostname.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling web3HostnameEditWeb3Hostname.');
            }
            const localVarPath = `/zones/{zone_identifier}/web3/hostnames/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary IPFS Universal Path Gateway Content List Details
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} identifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        web3HostnameIpfsUniversalPathGatewayContentListDetails: async (identifier: C4f8RoOSCommonComponentsSchemasIdentifier, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling web3HostnameIpfsUniversalPathGatewayContentListDetails.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling web3HostnameIpfsUniversalPathGatewayContentListDetails.');
            }
            const localVarPath = `/zones/{zone_identifier}/web3/hostnames/{identifier}/ipfs_universal_path/content_list`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary IPFS Universal Path Gateway Content List Entry Details
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} contentListEntryIdentifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} identifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        web3HostnameIpfsUniversalPathGatewayContentListEntryDetails: async (contentListEntryIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, identifier: C4f8RoOSCommonComponentsSchemasIdentifier, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentListEntryIdentifier' is not null or undefined
            if (contentListEntryIdentifier === null || contentListEntryIdentifier === undefined) {
                throw new RequiredError('contentListEntryIdentifier','Required parameter contentListEntryIdentifier was null or undefined when calling web3HostnameIpfsUniversalPathGatewayContentListEntryDetails.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling web3HostnameIpfsUniversalPathGatewayContentListEntryDetails.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling web3HostnameIpfsUniversalPathGatewayContentListEntryDetails.');
            }
            const localVarPath = `/zones/{zone_identifier}/web3/hostnames/{identifier}/ipfs_universal_path/content_list/entries/{content_list_entry_identifier}`
                .replace(`{${"content_list_entry_identifier"}}`, encodeURIComponent(String(contentListEntryIdentifier)))
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List IPFS Universal Path Gateway Content List Entries
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} identifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        web3HostnameListIpfsUniversalPathGatewayContentListEntries: async (identifier: C4f8RoOSCommonComponentsSchemasIdentifier, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling web3HostnameListIpfsUniversalPathGatewayContentListEntries.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling web3HostnameListIpfsUniversalPathGatewayContentListEntries.');
            }
            const localVarPath = `/zones/{zone_identifier}/web3/hostnames/{identifier}/ipfs_universal_path/content_list/entries`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Web3 Hostnames
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        web3HostnameListWeb3Hostnames: async (zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling web3HostnameListWeb3Hostnames.');
            }
            const localVarPath = `/zones/{zone_identifier}/web3/hostnames`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update IPFS Universal Path Gateway Content List
         * @param {C4f8RoOSContentListUpdateRequest} body 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} identifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        web3HostnameUpdateIpfsUniversalPathGatewayContentList: async (body: C4f8RoOSContentListUpdateRequest, identifier: C4f8RoOSCommonComponentsSchemasIdentifier, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling web3HostnameUpdateIpfsUniversalPathGatewayContentList.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling web3HostnameUpdateIpfsUniversalPathGatewayContentList.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling web3HostnameUpdateIpfsUniversalPathGatewayContentList.');
            }
            const localVarPath = `/zones/{zone_identifier}/web3/hostnames/{identifier}/ipfs_universal_path/content_list`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Web3 Hostname Details
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} identifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        web3HostnameWeb3HostnameDetails: async (identifier: C4f8RoOSCommonComponentsSchemasIdentifier, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling web3HostnameWeb3HostnameDetails.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling web3HostnameWeb3HostnameDetails.');
            }
            const localVarPath = `/zones/{zone_identifier}/web3/hostnames/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * Web3HostnameApi - functional programming interface
 * @export
 */
export const Web3HostnameApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create IPFS Universal Path Gateway Content List Entry
         * @param {C4f8RoOSContentListEntryCreateRequest} body 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} identifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async web3HostnameCreateIpfsUniversalPathGatewayContentListEntry(body: C4f8RoOSContentListEntryCreateRequest, identifier: C4f8RoOSCommonComponentsSchemasIdentifier, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<C4f8RoOSContentListEntrySingleResponse>>> {
            const localVarAxiosArgs = await Web3HostnameApiAxiosParamCreator(configuration).web3HostnameCreateIpfsUniversalPathGatewayContentListEntry(body, identifier, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Create Web3 Hostname
         * @param {C4f8RoOSCreateRequest} body 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async web3HostnameCreateWeb3Hostname(body: C4f8RoOSCreateRequest, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<C4f8RoOSWeb3HostnameComponentsSchemasSingleResponse>>> {
            const localVarAxiosArgs = await Web3HostnameApiAxiosParamCreator(configuration).web3HostnameCreateWeb3Hostname(body, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete IPFS Universal Path Gateway Content List Entry
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} contentListEntryIdentifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} identifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async web3HostnameDeleteIpfsUniversalPathGatewayContentListEntry(contentListEntryIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, identifier: C4f8RoOSCommonComponentsSchemasIdentifier, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<C4f8RoOSApiResponseSingleId>>> {
            const localVarAxiosArgs = await Web3HostnameApiAxiosParamCreator(configuration).web3HostnameDeleteIpfsUniversalPathGatewayContentListEntry(contentListEntryIdentifier, identifier, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete Web3 Hostname
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} identifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async web3HostnameDeleteWeb3Hostname(identifier: C4f8RoOSCommonComponentsSchemasIdentifier, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<C4f8RoOSApiResponseSingleId>>> {
            const localVarAxiosArgs = await Web3HostnameApiAxiosParamCreator(configuration).web3HostnameDeleteWeb3Hostname(identifier, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Edit IPFS Universal Path Gateway Content List Entry
         * @param {C4f8RoOSContentListEntryCreateRequest} body 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} contentListEntryIdentifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} identifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async web3HostnameEditIpfsUniversalPathGatewayContentListEntry(body: C4f8RoOSContentListEntryCreateRequest, contentListEntryIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, identifier: C4f8RoOSCommonComponentsSchemasIdentifier, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<C4f8RoOSContentListEntrySingleResponse>>> {
            const localVarAxiosArgs = await Web3HostnameApiAxiosParamCreator(configuration).web3HostnameEditIpfsUniversalPathGatewayContentListEntry(body, contentListEntryIdentifier, identifier, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Edit Web3 Hostname
         * @param {C4f8RoOSModifyRequest} body 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} identifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async web3HostnameEditWeb3Hostname(body: C4f8RoOSModifyRequest, identifier: C4f8RoOSCommonComponentsSchemasIdentifier, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<C4f8RoOSWeb3HostnameComponentsSchemasSingleResponse>>> {
            const localVarAxiosArgs = await Web3HostnameApiAxiosParamCreator(configuration).web3HostnameEditWeb3Hostname(body, identifier, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary IPFS Universal Path Gateway Content List Details
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} identifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async web3HostnameIpfsUniversalPathGatewayContentListDetails(identifier: C4f8RoOSCommonComponentsSchemasIdentifier, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<C4f8RoOSContentListDetailsResponse>>> {
            const localVarAxiosArgs = await Web3HostnameApiAxiosParamCreator(configuration).web3HostnameIpfsUniversalPathGatewayContentListDetails(identifier, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary IPFS Universal Path Gateway Content List Entry Details
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} contentListEntryIdentifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} identifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async web3HostnameIpfsUniversalPathGatewayContentListEntryDetails(contentListEntryIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, identifier: C4f8RoOSCommonComponentsSchemasIdentifier, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<C4f8RoOSContentListEntrySingleResponse>>> {
            const localVarAxiosArgs = await Web3HostnameApiAxiosParamCreator(configuration).web3HostnameIpfsUniversalPathGatewayContentListEntryDetails(contentListEntryIdentifier, identifier, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary List IPFS Universal Path Gateway Content List Entries
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} identifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async web3HostnameListIpfsUniversalPathGatewayContentListEntries(identifier: C4f8RoOSCommonComponentsSchemasIdentifier, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<C4f8RoOSContentListEntryCollectionResponse>>> {
            const localVarAxiosArgs = await Web3HostnameApiAxiosParamCreator(configuration).web3HostnameListIpfsUniversalPathGatewayContentListEntries(identifier, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary List Web3 Hostnames
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async web3HostnameListWeb3Hostnames(zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<C4f8RoOSComponentsSchemasCollectionResponse>>> {
            const localVarAxiosArgs = await Web3HostnameApiAxiosParamCreator(configuration).web3HostnameListWeb3Hostnames(zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update IPFS Universal Path Gateway Content List
         * @param {C4f8RoOSContentListUpdateRequest} body 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} identifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async web3HostnameUpdateIpfsUniversalPathGatewayContentList(body: C4f8RoOSContentListUpdateRequest, identifier: C4f8RoOSCommonComponentsSchemasIdentifier, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<C4f8RoOSContentListDetailsResponse>>> {
            const localVarAxiosArgs = await Web3HostnameApiAxiosParamCreator(configuration).web3HostnameUpdateIpfsUniversalPathGatewayContentList(body, identifier, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Web3 Hostname Details
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} identifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async web3HostnameWeb3HostnameDetails(identifier: C4f8RoOSCommonComponentsSchemasIdentifier, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<C4f8RoOSWeb3HostnameComponentsSchemasSingleResponse>>> {
            const localVarAxiosArgs = await Web3HostnameApiAxiosParamCreator(configuration).web3HostnameWeb3HostnameDetails(identifier, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * Web3HostnameApi - factory interface
 * @export
 */
export const Web3HostnameApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Create IPFS Universal Path Gateway Content List Entry
         * @param {C4f8RoOSContentListEntryCreateRequest} body 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} identifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async web3HostnameCreateIpfsUniversalPathGatewayContentListEntry(body: C4f8RoOSContentListEntryCreateRequest, identifier: C4f8RoOSCommonComponentsSchemasIdentifier, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<C4f8RoOSContentListEntrySingleResponse>> {
            return Web3HostnameApiFp(configuration).web3HostnameCreateIpfsUniversalPathGatewayContentListEntry(body, identifier, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Web3 Hostname
         * @param {C4f8RoOSCreateRequest} body 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async web3HostnameCreateWeb3Hostname(body: C4f8RoOSCreateRequest, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<C4f8RoOSWeb3HostnameComponentsSchemasSingleResponse>> {
            return Web3HostnameApiFp(configuration).web3HostnameCreateWeb3Hostname(body, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete IPFS Universal Path Gateway Content List Entry
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} contentListEntryIdentifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} identifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async web3HostnameDeleteIpfsUniversalPathGatewayContentListEntry(contentListEntryIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, identifier: C4f8RoOSCommonComponentsSchemasIdentifier, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<C4f8RoOSApiResponseSingleId>> {
            return Web3HostnameApiFp(configuration).web3HostnameDeleteIpfsUniversalPathGatewayContentListEntry(contentListEntryIdentifier, identifier, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Web3 Hostname
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} identifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async web3HostnameDeleteWeb3Hostname(identifier: C4f8RoOSCommonComponentsSchemasIdentifier, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<C4f8RoOSApiResponseSingleId>> {
            return Web3HostnameApiFp(configuration).web3HostnameDeleteWeb3Hostname(identifier, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edit IPFS Universal Path Gateway Content List Entry
         * @param {C4f8RoOSContentListEntryCreateRequest} body 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} contentListEntryIdentifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} identifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async web3HostnameEditIpfsUniversalPathGatewayContentListEntry(body: C4f8RoOSContentListEntryCreateRequest, contentListEntryIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, identifier: C4f8RoOSCommonComponentsSchemasIdentifier, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<C4f8RoOSContentListEntrySingleResponse>> {
            return Web3HostnameApiFp(configuration).web3HostnameEditIpfsUniversalPathGatewayContentListEntry(body, contentListEntryIdentifier, identifier, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edit Web3 Hostname
         * @param {C4f8RoOSModifyRequest} body 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} identifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async web3HostnameEditWeb3Hostname(body: C4f8RoOSModifyRequest, identifier: C4f8RoOSCommonComponentsSchemasIdentifier, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<C4f8RoOSWeb3HostnameComponentsSchemasSingleResponse>> {
            return Web3HostnameApiFp(configuration).web3HostnameEditWeb3Hostname(body, identifier, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary IPFS Universal Path Gateway Content List Details
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} identifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async web3HostnameIpfsUniversalPathGatewayContentListDetails(identifier: C4f8RoOSCommonComponentsSchemasIdentifier, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<C4f8RoOSContentListDetailsResponse>> {
            return Web3HostnameApiFp(configuration).web3HostnameIpfsUniversalPathGatewayContentListDetails(identifier, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary IPFS Universal Path Gateway Content List Entry Details
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} contentListEntryIdentifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} identifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async web3HostnameIpfsUniversalPathGatewayContentListEntryDetails(contentListEntryIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, identifier: C4f8RoOSCommonComponentsSchemasIdentifier, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<C4f8RoOSContentListEntrySingleResponse>> {
            return Web3HostnameApiFp(configuration).web3HostnameIpfsUniversalPathGatewayContentListEntryDetails(contentListEntryIdentifier, identifier, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List IPFS Universal Path Gateway Content List Entries
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} identifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async web3HostnameListIpfsUniversalPathGatewayContentListEntries(identifier: C4f8RoOSCommonComponentsSchemasIdentifier, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<C4f8RoOSContentListEntryCollectionResponse>> {
            return Web3HostnameApiFp(configuration).web3HostnameListIpfsUniversalPathGatewayContentListEntries(identifier, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Web3 Hostnames
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async web3HostnameListWeb3Hostnames(zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<C4f8RoOSComponentsSchemasCollectionResponse>> {
            return Web3HostnameApiFp(configuration).web3HostnameListWeb3Hostnames(zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update IPFS Universal Path Gateway Content List
         * @param {C4f8RoOSContentListUpdateRequest} body 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} identifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async web3HostnameUpdateIpfsUniversalPathGatewayContentList(body: C4f8RoOSContentListUpdateRequest, identifier: C4f8RoOSCommonComponentsSchemasIdentifier, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<C4f8RoOSContentListDetailsResponse>> {
            return Web3HostnameApiFp(configuration).web3HostnameUpdateIpfsUniversalPathGatewayContentList(body, identifier, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Web3 Hostname Details
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} identifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async web3HostnameWeb3HostnameDetails(identifier: C4f8RoOSCommonComponentsSchemasIdentifier, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<C4f8RoOSWeb3HostnameComponentsSchemasSingleResponse>> {
            return Web3HostnameApiFp(configuration).web3HostnameWeb3HostnameDetails(identifier, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Web3HostnameApi - object-oriented interface
 * @export
 * @class Web3HostnameApi
 * @extends {BaseAPI}
 */
export class Web3HostnameApi extends BaseAPI {
    /**
     * 
     * @summary Create IPFS Universal Path Gateway Content List Entry
     * @param {C4f8RoOSContentListEntryCreateRequest} body 
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} identifier 
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Web3HostnameApi
     */
    public async web3HostnameCreateIpfsUniversalPathGatewayContentListEntry(body: C4f8RoOSContentListEntryCreateRequest, identifier: C4f8RoOSCommonComponentsSchemasIdentifier, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<C4f8RoOSContentListEntrySingleResponse>> {
        return Web3HostnameApiFp(this.configuration).web3HostnameCreateIpfsUniversalPathGatewayContentListEntry(body, identifier, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Create Web3 Hostname
     * @param {C4f8RoOSCreateRequest} body 
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Web3HostnameApi
     */
    public async web3HostnameCreateWeb3Hostname(body: C4f8RoOSCreateRequest, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<C4f8RoOSWeb3HostnameComponentsSchemasSingleResponse>> {
        return Web3HostnameApiFp(this.configuration).web3HostnameCreateWeb3Hostname(body, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Delete IPFS Universal Path Gateway Content List Entry
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} contentListEntryIdentifier 
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} identifier 
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Web3HostnameApi
     */
    public async web3HostnameDeleteIpfsUniversalPathGatewayContentListEntry(contentListEntryIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, identifier: C4f8RoOSCommonComponentsSchemasIdentifier, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<C4f8RoOSApiResponseSingleId>> {
        return Web3HostnameApiFp(this.configuration).web3HostnameDeleteIpfsUniversalPathGatewayContentListEntry(contentListEntryIdentifier, identifier, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Delete Web3 Hostname
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} identifier 
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Web3HostnameApi
     */
    public async web3HostnameDeleteWeb3Hostname(identifier: C4f8RoOSCommonComponentsSchemasIdentifier, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<C4f8RoOSApiResponseSingleId>> {
        return Web3HostnameApiFp(this.configuration).web3HostnameDeleteWeb3Hostname(identifier, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Edit IPFS Universal Path Gateway Content List Entry
     * @param {C4f8RoOSContentListEntryCreateRequest} body 
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} contentListEntryIdentifier 
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} identifier 
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Web3HostnameApi
     */
    public async web3HostnameEditIpfsUniversalPathGatewayContentListEntry(body: C4f8RoOSContentListEntryCreateRequest, contentListEntryIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, identifier: C4f8RoOSCommonComponentsSchemasIdentifier, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<C4f8RoOSContentListEntrySingleResponse>> {
        return Web3HostnameApiFp(this.configuration).web3HostnameEditIpfsUniversalPathGatewayContentListEntry(body, contentListEntryIdentifier, identifier, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Edit Web3 Hostname
     * @param {C4f8RoOSModifyRequest} body 
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} identifier 
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Web3HostnameApi
     */
    public async web3HostnameEditWeb3Hostname(body: C4f8RoOSModifyRequest, identifier: C4f8RoOSCommonComponentsSchemasIdentifier, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<C4f8RoOSWeb3HostnameComponentsSchemasSingleResponse>> {
        return Web3HostnameApiFp(this.configuration).web3HostnameEditWeb3Hostname(body, identifier, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary IPFS Universal Path Gateway Content List Details
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} identifier 
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Web3HostnameApi
     */
    public async web3HostnameIpfsUniversalPathGatewayContentListDetails(identifier: C4f8RoOSCommonComponentsSchemasIdentifier, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<C4f8RoOSContentListDetailsResponse>> {
        return Web3HostnameApiFp(this.configuration).web3HostnameIpfsUniversalPathGatewayContentListDetails(identifier, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary IPFS Universal Path Gateway Content List Entry Details
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} contentListEntryIdentifier 
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} identifier 
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Web3HostnameApi
     */
    public async web3HostnameIpfsUniversalPathGatewayContentListEntryDetails(contentListEntryIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, identifier: C4f8RoOSCommonComponentsSchemasIdentifier, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<C4f8RoOSContentListEntrySingleResponse>> {
        return Web3HostnameApiFp(this.configuration).web3HostnameIpfsUniversalPathGatewayContentListEntryDetails(contentListEntryIdentifier, identifier, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary List IPFS Universal Path Gateway Content List Entries
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} identifier 
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Web3HostnameApi
     */
    public async web3HostnameListIpfsUniversalPathGatewayContentListEntries(identifier: C4f8RoOSCommonComponentsSchemasIdentifier, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<C4f8RoOSContentListEntryCollectionResponse>> {
        return Web3HostnameApiFp(this.configuration).web3HostnameListIpfsUniversalPathGatewayContentListEntries(identifier, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary List Web3 Hostnames
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Web3HostnameApi
     */
    public async web3HostnameListWeb3Hostnames(zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<C4f8RoOSComponentsSchemasCollectionResponse>> {
        return Web3HostnameApiFp(this.configuration).web3HostnameListWeb3Hostnames(zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Update IPFS Universal Path Gateway Content List
     * @param {C4f8RoOSContentListUpdateRequest} body 
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} identifier 
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Web3HostnameApi
     */
    public async web3HostnameUpdateIpfsUniversalPathGatewayContentList(body: C4f8RoOSContentListUpdateRequest, identifier: C4f8RoOSCommonComponentsSchemasIdentifier, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<C4f8RoOSContentListDetailsResponse>> {
        return Web3HostnameApiFp(this.configuration).web3HostnameUpdateIpfsUniversalPathGatewayContentList(body, identifier, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Web3 Hostname Details
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} identifier 
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Web3HostnameApi
     */
    public async web3HostnameWeb3HostnameDetails(identifier: C4f8RoOSCommonComponentsSchemasIdentifier, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<C4f8RoOSWeb3HostnameComponentsSchemasSingleResponse>> {
        return Web3HostnameApiFp(this.configuration).web3HostnameWeb3HostnameDetails(identifier, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
}
