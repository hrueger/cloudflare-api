/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { HrcAXqolBefore } from '../models';
import { HrcAXqolHistoryComponentsSchemasResponseCollection } from '../models';
import { HrcAXqolIdentifier } from '../models';
import { HrcAXqolPerPage } from '../models';
import { InlineResponse4XX218 } from '../models';
/**
 * NotificationHistoryApi - axios parameter creator
 * @export
 */
export const NotificationHistoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Gets a list of history records for notifications sent to an account. The records are displayed for last `x` number of days based on the zone plan (free = 30, pro = 30, biz = 30, ent = 90).
         * @summary List History
         * @param {HrcAXqolIdentifier} identifier 
         * @param {HrcAXqolPerPage} [perPage] 
         * @param {HrcAXqolBefore} [before] 
         * @param {number} [page] 
         * @param {Date} [since] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationHistoryListHistory: async (identifier: HrcAXqolIdentifier, perPage?: HrcAXqolPerPage, before?: HrcAXqolBefore, page?: number, since?: Date, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling notificationHistoryListHistory.');
            }
            const localVarPath = `/accounts/{identifier}/alerting/v3/history`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (before !== undefined) {
                localVarQueryParameter['before'] = before;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (since !== undefined) {
                localVarQueryParameter['since'] = (since as any instanceof Date) ?
                    (since as any).toISOString() :
                    since;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationHistoryApi - functional programming interface
 * @export
 */
export const NotificationHistoryApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Gets a list of history records for notifications sent to an account. The records are displayed for last `x` number of days based on the zone plan (free = 30, pro = 30, biz = 30, ent = 90).
         * @summary List History
         * @param {HrcAXqolIdentifier} identifier 
         * @param {HrcAXqolPerPage} [perPage] 
         * @param {HrcAXqolBefore} [before] 
         * @param {number} [page] 
         * @param {Date} [since] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationHistoryListHistory(identifier: HrcAXqolIdentifier, perPage?: HrcAXqolPerPage, before?: HrcAXqolBefore, page?: number, since?: Date, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<HrcAXqolHistoryComponentsSchemasResponseCollection>>> {
            const localVarAxiosArgs = await NotificationHistoryApiAxiosParamCreator(configuration).notificationHistoryListHistory(identifier, perPage, before, page, since, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * NotificationHistoryApi - factory interface
 * @export
 */
export const NotificationHistoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Gets a list of history records for notifications sent to an account. The records are displayed for last `x` number of days based on the zone plan (free = 30, pro = 30, biz = 30, ent = 90).
         * @summary List History
         * @param {HrcAXqolIdentifier} identifier 
         * @param {HrcAXqolPerPage} [perPage] 
         * @param {HrcAXqolBefore} [before] 
         * @param {number} [page] 
         * @param {Date} [since] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationHistoryListHistory(identifier: HrcAXqolIdentifier, perPage?: HrcAXqolPerPage, before?: HrcAXqolBefore, page?: number, since?: Date, options?: AxiosRequestConfig): Promise<AxiosResponse<HrcAXqolHistoryComponentsSchemasResponseCollection>> {
            return NotificationHistoryApiFp(configuration).notificationHistoryListHistory(identifier, perPage, before, page, since, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NotificationHistoryApi - object-oriented interface
 * @export
 * @class NotificationHistoryApi
 * @extends {BaseAPI}
 */
export class NotificationHistoryApi extends BaseAPI {
    /**
     * Gets a list of history records for notifications sent to an account. The records are displayed for last `x` number of days based on the zone plan (free = 30, pro = 30, biz = 30, ent = 90).
     * @summary List History
     * @param {HrcAXqolIdentifier} identifier 
     * @param {HrcAXqolPerPage} [perPage] 
     * @param {HrcAXqolBefore} [before] 
     * @param {number} [page] 
     * @param {Date} [since] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationHistoryApi
     */
    public async notificationHistoryListHistory(identifier: HrcAXqolIdentifier, perPage?: HrcAXqolPerPage, before?: HrcAXqolBefore, page?: number, since?: Date, options?: AxiosRequestConfig) : Promise<AxiosResponse<HrcAXqolHistoryComponentsSchemasResponseCollection>> {
        return NotificationHistoryApiFp(this.configuration).notificationHistoryListHistory(identifier, perPage, before, page, since, options).then((request) => request(this.axios, this.basePath));
    }
}
