/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse200162 } from '../models';
import { JOh1h9zQAccountIdentifier } from '../models';
import { JOh1h9zQApiResponseCommonFailure } from '../models';
import { JOh1h9zQName } from '../models';
import { JOh1h9zQOpacity } from '../models';
import { JOh1h9zQPadding } from '../models';
import { JOh1h9zQPosition } from '../models';
import { JOh1h9zQScale } from '../models';
import { JOh1h9zQWatermarkIdentifier } from '../models';
import { JOh1h9zQWatermarkResponseCollection } from '../models';
import { JOh1h9zQWatermarkResponseSingle } from '../models';
/**
 * StreamWatermarkProfileApi - axios parameter creator
 * @export
 */
export const StreamWatermarkProfileApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates watermark profiles using a single `HTTP POST multipart/form-data` request.
         * @summary Create watermark profiles via basic upload
         * @param {string} file 
         * @param {JOh1h9zQName} name 
         * @param {JOh1h9zQOpacity} opacity 
         * @param {JOh1h9zQPadding} padding 
         * @param {JOh1h9zQPosition} position 
         * @param {JOh1h9zQScale} scale 
         * @param {JOh1h9zQAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamWatermarkProfileCreateWatermarkProfilesViaBasicUploadForm: async (file: string, name: JOh1h9zQName, opacity: JOh1h9zQOpacity, padding: JOh1h9zQPadding, position: JOh1h9zQPosition, scale: JOh1h9zQScale, accountIdentifier: JOh1h9zQAccountIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            if (file === null || file === undefined) {
                throw new RequiredError('file','Required parameter file was null or undefined when calling streamWatermarkProfileCreateWatermarkProfilesViaBasicUploadForm.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling streamWatermarkProfileCreateWatermarkProfilesViaBasicUploadForm.');
            }
            // verify required parameter 'opacity' is not null or undefined
            if (opacity === null || opacity === undefined) {
                throw new RequiredError('opacity','Required parameter opacity was null or undefined when calling streamWatermarkProfileCreateWatermarkProfilesViaBasicUploadForm.');
            }
            // verify required parameter 'padding' is not null or undefined
            if (padding === null || padding === undefined) {
                throw new RequiredError('padding','Required parameter padding was null or undefined when calling streamWatermarkProfileCreateWatermarkProfilesViaBasicUploadForm.');
            }
            // verify required parameter 'position' is not null or undefined
            if (position === null || position === undefined) {
                throw new RequiredError('position','Required parameter position was null or undefined when calling streamWatermarkProfileCreateWatermarkProfilesViaBasicUploadForm.');
            }
            // verify required parameter 'scale' is not null or undefined
            if (scale === null || scale === undefined) {
                throw new RequiredError('scale','Required parameter scale was null or undefined when calling streamWatermarkProfileCreateWatermarkProfilesViaBasicUploadForm.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling streamWatermarkProfileCreateWatermarkProfilesViaBasicUploadForm.');
            }
            const localVarPath = `/accounts/{account_identifier}/stream/watermarks`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }

            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }

            if (opacity !== undefined) { 
                localVarFormParams.append('opacity', opacity as any);
            }

            if (padding !== undefined) { 
                localVarFormParams.append('padding', padding as any);
            }

            if (position !== undefined) { 
                localVarFormParams.append('position', position as any);
            }

            if (scale !== undefined) { 
                localVarFormParams.append('scale', scale as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a watermark profile.
         * @summary Delete watermark profiles
         * @param {JOh1h9zQWatermarkIdentifier} identifier 
         * @param {JOh1h9zQAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamWatermarkProfileDeleteWatermarkProfiles: async (identifier: JOh1h9zQWatermarkIdentifier, accountIdentifier: JOh1h9zQAccountIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling streamWatermarkProfileDeleteWatermarkProfiles.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling streamWatermarkProfileDeleteWatermarkProfiles.');
            }
            const localVarPath = `/accounts/{account_identifier}/stream/watermarks/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all watermark profiles for an account.
         * @summary List watermark profiles
         * @param {JOh1h9zQAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamWatermarkProfileListWatermarkProfiles: async (accountIdentifier: JOh1h9zQAccountIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling streamWatermarkProfileListWatermarkProfiles.');
            }
            const localVarPath = `/accounts/{account_identifier}/stream/watermarks`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves details for a single watermark profile.
         * @summary Watermark profile details
         * @param {JOh1h9zQWatermarkIdentifier} identifier 
         * @param {JOh1h9zQAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamWatermarkProfileWatermarkProfileDetails: async (identifier: JOh1h9zQWatermarkIdentifier, accountIdentifier: JOh1h9zQAccountIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling streamWatermarkProfileWatermarkProfileDetails.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling streamWatermarkProfileWatermarkProfileDetails.');
            }
            const localVarPath = `/accounts/{account_identifier}/stream/watermarks/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StreamWatermarkProfileApi - functional programming interface
 * @export
 */
export const StreamWatermarkProfileApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates watermark profiles using a single `HTTP POST multipart/form-data` request.
         * @summary Create watermark profiles via basic upload
         * @param {string} file 
         * @param {JOh1h9zQName} name 
         * @param {JOh1h9zQOpacity} opacity 
         * @param {JOh1h9zQPadding} padding 
         * @param {JOh1h9zQPosition} position 
         * @param {JOh1h9zQScale} scale 
         * @param {JOh1h9zQAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamWatermarkProfileCreateWatermarkProfilesViaBasicUploadForm(file: string, name: JOh1h9zQName, opacity: JOh1h9zQOpacity, padding: JOh1h9zQPadding, position: JOh1h9zQPosition, scale: JOh1h9zQScale, accountIdentifier: JOh1h9zQAccountIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<JOh1h9zQWatermarkResponseSingle>>> {
            const localVarAxiosArgs = await StreamWatermarkProfileApiAxiosParamCreator(configuration).streamWatermarkProfileCreateWatermarkProfilesViaBasicUploadForm(file, name, opacity, padding, position, scale, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes a watermark profile.
         * @summary Delete watermark profiles
         * @param {JOh1h9zQWatermarkIdentifier} identifier 
         * @param {JOh1h9zQAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamWatermarkProfileDeleteWatermarkProfiles(identifier: JOh1h9zQWatermarkIdentifier, accountIdentifier: JOh1h9zQAccountIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200162>>> {
            const localVarAxiosArgs = await StreamWatermarkProfileApiAxiosParamCreator(configuration).streamWatermarkProfileDeleteWatermarkProfiles(identifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Lists all watermark profiles for an account.
         * @summary List watermark profiles
         * @param {JOh1h9zQAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamWatermarkProfileListWatermarkProfiles(accountIdentifier: JOh1h9zQAccountIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<JOh1h9zQWatermarkResponseCollection>>> {
            const localVarAxiosArgs = await StreamWatermarkProfileApiAxiosParamCreator(configuration).streamWatermarkProfileListWatermarkProfiles(accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves details for a single watermark profile.
         * @summary Watermark profile details
         * @param {JOh1h9zQWatermarkIdentifier} identifier 
         * @param {JOh1h9zQAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamWatermarkProfileWatermarkProfileDetails(identifier: JOh1h9zQWatermarkIdentifier, accountIdentifier: JOh1h9zQAccountIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<JOh1h9zQWatermarkResponseSingle>>> {
            const localVarAxiosArgs = await StreamWatermarkProfileApiAxiosParamCreator(configuration).streamWatermarkProfileWatermarkProfileDetails(identifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * StreamWatermarkProfileApi - factory interface
 * @export
 */
export const StreamWatermarkProfileApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Creates watermark profiles using a single `HTTP POST multipart/form-data` request.
         * @summary Create watermark profiles via basic upload
         * @param {string} file 
         * @param {JOh1h9zQName} name 
         * @param {JOh1h9zQOpacity} opacity 
         * @param {JOh1h9zQPadding} padding 
         * @param {JOh1h9zQPosition} position 
         * @param {JOh1h9zQScale} scale 
         * @param {JOh1h9zQAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamWatermarkProfileCreateWatermarkProfilesViaBasicUploadForm(file: string, name: JOh1h9zQName, opacity: JOh1h9zQOpacity, padding: JOh1h9zQPadding, position: JOh1h9zQPosition, scale: JOh1h9zQScale, accountIdentifier: JOh1h9zQAccountIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<JOh1h9zQWatermarkResponseSingle>> {
            return StreamWatermarkProfileApiFp(configuration).streamWatermarkProfileCreateWatermarkProfilesViaBasicUploadForm(file, name, opacity, padding, position, scale, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a watermark profile.
         * @summary Delete watermark profiles
         * @param {JOh1h9zQWatermarkIdentifier} identifier 
         * @param {JOh1h9zQAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamWatermarkProfileDeleteWatermarkProfiles(identifier: JOh1h9zQWatermarkIdentifier, accountIdentifier: JOh1h9zQAccountIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200162>> {
            return StreamWatermarkProfileApiFp(configuration).streamWatermarkProfileDeleteWatermarkProfiles(identifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists all watermark profiles for an account.
         * @summary List watermark profiles
         * @param {JOh1h9zQAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamWatermarkProfileListWatermarkProfiles(accountIdentifier: JOh1h9zQAccountIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<JOh1h9zQWatermarkResponseCollection>> {
            return StreamWatermarkProfileApiFp(configuration).streamWatermarkProfileListWatermarkProfiles(accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves details for a single watermark profile.
         * @summary Watermark profile details
         * @param {JOh1h9zQWatermarkIdentifier} identifier 
         * @param {JOh1h9zQAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamWatermarkProfileWatermarkProfileDetails(identifier: JOh1h9zQWatermarkIdentifier, accountIdentifier: JOh1h9zQAccountIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<JOh1h9zQWatermarkResponseSingle>> {
            return StreamWatermarkProfileApiFp(configuration).streamWatermarkProfileWatermarkProfileDetails(identifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StreamWatermarkProfileApi - object-oriented interface
 * @export
 * @class StreamWatermarkProfileApi
 * @extends {BaseAPI}
 */
export class StreamWatermarkProfileApi extends BaseAPI {
    /**
     * Creates watermark profiles using a single `HTTP POST multipart/form-data` request.
     * @summary Create watermark profiles via basic upload
     * @param {string} file 
     * @param {JOh1h9zQName} name 
     * @param {JOh1h9zQOpacity} opacity 
     * @param {JOh1h9zQPadding} padding 
     * @param {JOh1h9zQPosition} position 
     * @param {JOh1h9zQScale} scale 
     * @param {JOh1h9zQAccountIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamWatermarkProfileApi
     */
    public async streamWatermarkProfileCreateWatermarkProfilesViaBasicUploadForm(file: string, name: JOh1h9zQName, opacity: JOh1h9zQOpacity, padding: JOh1h9zQPadding, position: JOh1h9zQPosition, scale: JOh1h9zQScale, accountIdentifier: JOh1h9zQAccountIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<JOh1h9zQWatermarkResponseSingle>> {
        return StreamWatermarkProfileApiFp(this.configuration).streamWatermarkProfileCreateWatermarkProfilesViaBasicUploadForm(file, name, opacity, padding, position, scale, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes a watermark profile.
     * @summary Delete watermark profiles
     * @param {JOh1h9zQWatermarkIdentifier} identifier 
     * @param {JOh1h9zQAccountIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamWatermarkProfileApi
     */
    public async streamWatermarkProfileDeleteWatermarkProfiles(identifier: JOh1h9zQWatermarkIdentifier, accountIdentifier: JOh1h9zQAccountIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200162>> {
        return StreamWatermarkProfileApiFp(this.configuration).streamWatermarkProfileDeleteWatermarkProfiles(identifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists all watermark profiles for an account.
     * @summary List watermark profiles
     * @param {JOh1h9zQAccountIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamWatermarkProfileApi
     */
    public async streamWatermarkProfileListWatermarkProfiles(accountIdentifier: JOh1h9zQAccountIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<JOh1h9zQWatermarkResponseCollection>> {
        return StreamWatermarkProfileApiFp(this.configuration).streamWatermarkProfileListWatermarkProfiles(accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves details for a single watermark profile.
     * @summary Watermark profile details
     * @param {JOh1h9zQWatermarkIdentifier} identifier 
     * @param {JOh1h9zQAccountIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamWatermarkProfileApi
     */
    public async streamWatermarkProfileWatermarkProfileDetails(identifier: JOh1h9zQWatermarkIdentifier, accountIdentifier: JOh1h9zQAccountIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<JOh1h9zQWatermarkResponseSingle>> {
        return StreamWatermarkProfileApiFp(this.configuration).streamWatermarkProfileWatermarkProfileDetails(identifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
}
