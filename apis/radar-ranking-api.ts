/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse200150 } from '../models';
import { InlineResponse200151 } from '../models';
import { InlineResponse200152 } from '../models';
import { InlineResponse400 } from '../models';
/**
 * RadarRankingApi - axios parameter creator
 * @export
 */
export const RadarRankingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Gets Domains Rank details.      Cloudflare provides an ordered rank for the top 100 domains, but for the remainder it only provides ranking buckets     like top 200 thousand, top one million, etc.. These are available through Radar datasets endpoints.
         * @summary Get Domains Rank details
         * @param {string} domain 
         * @param {number} [limit] 
         * @param {string} [rankingType] 
         * @param {Array<string>} [name] 
         * @param {Array<string>} [date] 
         * @param {string} [format] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        radarGetRankingDomainDetails: async (domain: string, limit?: number, rankingType?: string, name?: Array<string>, date?: Array<string>, format?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'domain' is not null or undefined
            if (domain === null || domain === undefined) {
                throw new RequiredError('domain','Required parameter domain was null or undefined when calling radarGetRankingDomainDetails.');
            }
            const localVarPath = `/radar/ranking/domain/{domain}`
                .replace(`{${"domain"}}`, encodeURIComponent(String(domain)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (rankingType !== undefined) {
                localVarQueryParameter['rankingType'] = rankingType;
            }

            if (name) {
                localVarQueryParameter['name'] = name;
            }

            if (date) {
                localVarQueryParameter['date'] = date;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets Domains Rank updates change over time. Raw values are returned.
         * @summary Get Domains Rank time series
         * @param {number} [limit] 
         * @param {string} [rankingType] 
         * @param {Array<string>} [name] 
         * @param {Array<string>} [location] 
         * @param {Array<string>} [domains] 
         * @param {Array<string>} [dateRange] 
         * @param {Array<Date>} [dateStart] 
         * @param {Array<Date>} [dateEnd] 
         * @param {string} [format] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        radarGetRankingDomainTimeseries: async (limit?: number, rankingType?: string, name?: Array<string>, location?: Array<string>, domains?: Array<string>, dateRange?: Array<string>, dateStart?: Array<Date>, dateEnd?: Array<Date>, format?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/radar/ranking/timeseries_groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (rankingType !== undefined) {
                localVarQueryParameter['rankingType'] = rankingType;
            }

            if (name) {
                localVarQueryParameter['name'] = name;
            }

            if (location) {
                localVarQueryParameter['location'] = location;
            }

            if (domains) {
                localVarQueryParameter['domains'] = domains;
            }

            if (dateRange) {
                localVarQueryParameter['dateRange'] = dateRange;
            }

            if (dateStart) {
                localVarQueryParameter['dateStart'] = dateStart;
            }

            if (dateEnd) {
                localVarQueryParameter['dateEnd'] = dateEnd;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get top or trending domains based on their rank. Popular domains are domains of broad appeal based on how people use the Internet. Trending domains are domains that are generating a surge in interest. For more information on top domains, see https://blog.cloudflare.com/radar-domain-rankings/.
         * @summary Get Top or Trending Domains
         * @param {number} [limit] 
         * @param {Array<string>} [name] 
         * @param {Array<string>} [location] 
         * @param {Array<string>} [date] 
         * @param {string} [rankingType] 
         * @param {string} [format] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        radarGetRankingTopDomains: async (limit?: number, name?: Array<string>, location?: Array<string>, date?: Array<string>, rankingType?: string, format?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/radar/ranking/top`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (name) {
                localVarQueryParameter['name'] = name;
            }

            if (location) {
                localVarQueryParameter['location'] = location;
            }

            if (date) {
                localVarQueryParameter['date'] = date;
            }

            if (rankingType !== undefined) {
                localVarQueryParameter['rankingType'] = rankingType;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RadarRankingApi - functional programming interface
 * @export
 */
export const RadarRankingApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Gets Domains Rank details.      Cloudflare provides an ordered rank for the top 100 domains, but for the remainder it only provides ranking buckets     like top 200 thousand, top one million, etc.. These are available through Radar datasets endpoints.
         * @summary Get Domains Rank details
         * @param {string} domain 
         * @param {number} [limit] 
         * @param {string} [rankingType] 
         * @param {Array<string>} [name] 
         * @param {Array<string>} [date] 
         * @param {string} [format] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async radarGetRankingDomainDetails(domain: string, limit?: number, rankingType?: string, name?: Array<string>, date?: Array<string>, format?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200150>>> {
            const localVarAxiosArgs = await RadarRankingApiAxiosParamCreator(configuration).radarGetRankingDomainDetails(domain, limit, rankingType, name, date, format, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets Domains Rank updates change over time. Raw values are returned.
         * @summary Get Domains Rank time series
         * @param {number} [limit] 
         * @param {string} [rankingType] 
         * @param {Array<string>} [name] 
         * @param {Array<string>} [location] 
         * @param {Array<string>} [domains] 
         * @param {Array<string>} [dateRange] 
         * @param {Array<Date>} [dateStart] 
         * @param {Array<Date>} [dateEnd] 
         * @param {string} [format] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async radarGetRankingDomainTimeseries(limit?: number, rankingType?: string, name?: Array<string>, location?: Array<string>, domains?: Array<string>, dateRange?: Array<string>, dateStart?: Array<Date>, dateEnd?: Array<Date>, format?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200151>>> {
            const localVarAxiosArgs = await RadarRankingApiAxiosParamCreator(configuration).radarGetRankingDomainTimeseries(limit, rankingType, name, location, domains, dateRange, dateStart, dateEnd, format, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get top or trending domains based on their rank. Popular domains are domains of broad appeal based on how people use the Internet. Trending domains are domains that are generating a surge in interest. For more information on top domains, see https://blog.cloudflare.com/radar-domain-rankings/.
         * @summary Get Top or Trending Domains
         * @param {number} [limit] 
         * @param {Array<string>} [name] 
         * @param {Array<string>} [location] 
         * @param {Array<string>} [date] 
         * @param {string} [rankingType] 
         * @param {string} [format] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async radarGetRankingTopDomains(limit?: number, name?: Array<string>, location?: Array<string>, date?: Array<string>, rankingType?: string, format?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200152>>> {
            const localVarAxiosArgs = await RadarRankingApiAxiosParamCreator(configuration).radarGetRankingTopDomains(limit, name, location, date, rankingType, format, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * RadarRankingApi - factory interface
 * @export
 */
export const RadarRankingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Gets Domains Rank details.      Cloudflare provides an ordered rank for the top 100 domains, but for the remainder it only provides ranking buckets     like top 200 thousand, top one million, etc.. These are available through Radar datasets endpoints.
         * @summary Get Domains Rank details
         * @param {string} domain 
         * @param {number} [limit] 
         * @param {string} [rankingType] 
         * @param {Array<string>} [name] 
         * @param {Array<string>} [date] 
         * @param {string} [format] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async radarGetRankingDomainDetails(domain: string, limit?: number, rankingType?: string, name?: Array<string>, date?: Array<string>, format?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200150>> {
            return RadarRankingApiFp(configuration).radarGetRankingDomainDetails(domain, limit, rankingType, name, date, format, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets Domains Rank updates change over time. Raw values are returned.
         * @summary Get Domains Rank time series
         * @param {number} [limit] 
         * @param {string} [rankingType] 
         * @param {Array<string>} [name] 
         * @param {Array<string>} [location] 
         * @param {Array<string>} [domains] 
         * @param {Array<string>} [dateRange] 
         * @param {Array<Date>} [dateStart] 
         * @param {Array<Date>} [dateEnd] 
         * @param {string} [format] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async radarGetRankingDomainTimeseries(limit?: number, rankingType?: string, name?: Array<string>, location?: Array<string>, domains?: Array<string>, dateRange?: Array<string>, dateStart?: Array<Date>, dateEnd?: Array<Date>, format?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200151>> {
            return RadarRankingApiFp(configuration).radarGetRankingDomainTimeseries(limit, rankingType, name, location, domains, dateRange, dateStart, dateEnd, format, options).then((request) => request(axios, basePath));
        },
        /**
         * Get top or trending domains based on their rank. Popular domains are domains of broad appeal based on how people use the Internet. Trending domains are domains that are generating a surge in interest. For more information on top domains, see https://blog.cloudflare.com/radar-domain-rankings/.
         * @summary Get Top or Trending Domains
         * @param {number} [limit] 
         * @param {Array<string>} [name] 
         * @param {Array<string>} [location] 
         * @param {Array<string>} [date] 
         * @param {string} [rankingType] 
         * @param {string} [format] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async radarGetRankingTopDomains(limit?: number, name?: Array<string>, location?: Array<string>, date?: Array<string>, rankingType?: string, format?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200152>> {
            return RadarRankingApiFp(configuration).radarGetRankingTopDomains(limit, name, location, date, rankingType, format, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RadarRankingApi - object-oriented interface
 * @export
 * @class RadarRankingApi
 * @extends {BaseAPI}
 */
export class RadarRankingApi extends BaseAPI {
    /**
     * Gets Domains Rank details.      Cloudflare provides an ordered rank for the top 100 domains, but for the remainder it only provides ranking buckets     like top 200 thousand, top one million, etc.. These are available through Radar datasets endpoints.
     * @summary Get Domains Rank details
     * @param {string} domain 
     * @param {number} [limit] 
     * @param {string} [rankingType] 
     * @param {Array<string>} [name] 
     * @param {Array<string>} [date] 
     * @param {string} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RadarRankingApi
     */
    public async radarGetRankingDomainDetails(domain: string, limit?: number, rankingType?: string, name?: Array<string>, date?: Array<string>, format?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200150>> {
        return RadarRankingApiFp(this.configuration).radarGetRankingDomainDetails(domain, limit, rankingType, name, date, format, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets Domains Rank updates change over time. Raw values are returned.
     * @summary Get Domains Rank time series
     * @param {number} [limit] 
     * @param {string} [rankingType] 
     * @param {Array<string>} [name] 
     * @param {Array<string>} [location] 
     * @param {Array<string>} [domains] 
     * @param {Array<string>} [dateRange] 
     * @param {Array<Date>} [dateStart] 
     * @param {Array<Date>} [dateEnd] 
     * @param {string} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RadarRankingApi
     */
    public async radarGetRankingDomainTimeseries(limit?: number, rankingType?: string, name?: Array<string>, location?: Array<string>, domains?: Array<string>, dateRange?: Array<string>, dateStart?: Array<Date>, dateEnd?: Array<Date>, format?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200151>> {
        return RadarRankingApiFp(this.configuration).radarGetRankingDomainTimeseries(limit, rankingType, name, location, domains, dateRange, dateStart, dateEnd, format, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get top or trending domains based on their rank. Popular domains are domains of broad appeal based on how people use the Internet. Trending domains are domains that are generating a surge in interest. For more information on top domains, see https://blog.cloudflare.com/radar-domain-rankings/.
     * @summary Get Top or Trending Domains
     * @param {number} [limit] 
     * @param {Array<string>} [name] 
     * @param {Array<string>} [location] 
     * @param {Array<string>} [date] 
     * @param {string} [rankingType] 
     * @param {string} [format] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RadarRankingApi
     */
    public async radarGetRankingTopDomains(limit?: number, name?: Array<string>, location?: Array<string>, date?: Array<string>, rankingType?: string, format?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200152>> {
        return RadarRankingApiFp(this.configuration).radarGetRankingTopDomains(limit, name, location, date, rankingType, format, options).then((request) => request(this.axios, this.basePath));
    }
}
