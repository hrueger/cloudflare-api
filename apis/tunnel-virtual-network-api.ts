/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse4XX288 } from '../models';
import { InlineResponse4XX289 } from '../models';
import { T2xGLLqvCfAccountId } from '../models';
import { T2xGLLqvVnetId } from '../models';
import { T2xGLLqvVnetName } from '../models';
import { T2xGLLqvVnetResponseCollection } from '../models';
import { T2xGLLqvVnetResponseSingle } from '../models';
import { TeamnetVirtualNetworksBody } from '../models';
import { VirtualNetworksVnetIdBody } from '../models';
/**
 * TunnelVirtualNetworkApi - axios parameter creator
 * @export
 */
export const TunnelVirtualNetworkApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds a new virtual network to an account.
         * @summary Create a virtual network
         * @param {TeamnetVirtualNetworksBody} body 
         * @param {T2xGLLqvCfAccountId} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tunnelVirtualNetworkCreateAVirtualNetwork: async (body: TeamnetVirtualNetworksBody, accountIdentifier: T2xGLLqvCfAccountId, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling tunnelVirtualNetworkCreateAVirtualNetwork.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling tunnelVirtualNetworkCreateAVirtualNetwork.');
            }
            const localVarPath = `/accounts/{account_identifier}/teamnet/virtual_networks`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an existing virtual network.
         * @summary Delete a virtual network
         * @param {T2xGLLqvVnetId} vnetId 
         * @param {T2xGLLqvCfAccountId} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tunnelVirtualNetworkDeleteAVirtualNetwork: async (vnetId: T2xGLLqvVnetId, accountIdentifier: T2xGLLqvCfAccountId, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vnetId' is not null or undefined
            if (vnetId === null || vnetId === undefined) {
                throw new RequiredError('vnetId','Required parameter vnetId was null or undefined when calling tunnelVirtualNetworkDeleteAVirtualNetwork.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling tunnelVirtualNetworkDeleteAVirtualNetwork.');
            }
            const localVarPath = `/accounts/{account_identifier}/teamnet/virtual_networks/{vnet_id}`
                .replace(`{${"vnet_id"}}`, encodeURIComponent(String(vnetId)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists and filters virtual networks in an account.
         * @summary List virtual networks
         * @param {T2xGLLqvCfAccountId} accountIdentifier 
         * @param {T2xGLLqvVnetName} [name] 
         * @param {any} [isDefault] 
         * @param {any} [isDeleted] 
         * @param {T2xGLLqvVnetName} [vnetName] 
         * @param {string} [vnetId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tunnelVirtualNetworkListVirtualNetworks: async (accountIdentifier: T2xGLLqvCfAccountId, name?: T2xGLLqvVnetName, isDefault?: any, isDeleted?: any, vnetName?: T2xGLLqvVnetName, vnetId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling tunnelVirtualNetworkListVirtualNetworks.');
            }
            const localVarPath = `/accounts/{account_identifier}/teamnet/virtual_networks`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (isDefault !== undefined) {
                localVarQueryParameter['is_default'] = isDefault;
            }

            if (isDeleted !== undefined) {
                localVarQueryParameter['is_deleted'] = isDeleted;
            }

            if (vnetName !== undefined) {
                localVarQueryParameter['vnet_name'] = vnetName;
            }

            if (vnetId !== undefined) {
                localVarQueryParameter['vnet_id'] = vnetId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an existing virtual network.
         * @summary Update a virtual network
         * @param {VirtualNetworksVnetIdBody} body 
         * @param {T2xGLLqvVnetId} vnetId 
         * @param {T2xGLLqvCfAccountId} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tunnelVirtualNetworkUpdateAVirtualNetwork: async (body: VirtualNetworksVnetIdBody, vnetId: T2xGLLqvVnetId, accountIdentifier: T2xGLLqvCfAccountId, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling tunnelVirtualNetworkUpdateAVirtualNetwork.');
            }
            // verify required parameter 'vnetId' is not null or undefined
            if (vnetId === null || vnetId === undefined) {
                throw new RequiredError('vnetId','Required parameter vnetId was null or undefined when calling tunnelVirtualNetworkUpdateAVirtualNetwork.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling tunnelVirtualNetworkUpdateAVirtualNetwork.');
            }
            const localVarPath = `/accounts/{account_identifier}/teamnet/virtual_networks/{vnet_id}`
                .replace(`{${"vnet_id"}}`, encodeURIComponent(String(vnetId)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TunnelVirtualNetworkApi - functional programming interface
 * @export
 */
export const TunnelVirtualNetworkApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Adds a new virtual network to an account.
         * @summary Create a virtual network
         * @param {TeamnetVirtualNetworksBody} body 
         * @param {T2xGLLqvCfAccountId} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tunnelVirtualNetworkCreateAVirtualNetwork(body: TeamnetVirtualNetworksBody, accountIdentifier: T2xGLLqvCfAccountId, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<T2xGLLqvVnetResponseSingle>>> {
            const localVarAxiosArgs = await TunnelVirtualNetworkApiAxiosParamCreator(configuration).tunnelVirtualNetworkCreateAVirtualNetwork(body, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes an existing virtual network.
         * @summary Delete a virtual network
         * @param {T2xGLLqvVnetId} vnetId 
         * @param {T2xGLLqvCfAccountId} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tunnelVirtualNetworkDeleteAVirtualNetwork(vnetId: T2xGLLqvVnetId, accountIdentifier: T2xGLLqvCfAccountId, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<T2xGLLqvVnetResponseSingle>>> {
            const localVarAxiosArgs = await TunnelVirtualNetworkApiAxiosParamCreator(configuration).tunnelVirtualNetworkDeleteAVirtualNetwork(vnetId, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Lists and filters virtual networks in an account.
         * @summary List virtual networks
         * @param {T2xGLLqvCfAccountId} accountIdentifier 
         * @param {T2xGLLqvVnetName} [name] 
         * @param {any} [isDefault] 
         * @param {any} [isDeleted] 
         * @param {T2xGLLqvVnetName} [vnetName] 
         * @param {string} [vnetId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tunnelVirtualNetworkListVirtualNetworks(accountIdentifier: T2xGLLqvCfAccountId, name?: T2xGLLqvVnetName, isDefault?: any, isDeleted?: any, vnetName?: T2xGLLqvVnetName, vnetId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<T2xGLLqvVnetResponseCollection>>> {
            const localVarAxiosArgs = await TunnelVirtualNetworkApiAxiosParamCreator(configuration).tunnelVirtualNetworkListVirtualNetworks(accountIdentifier, name, isDefault, isDeleted, vnetName, vnetId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates an existing virtual network.
         * @summary Update a virtual network
         * @param {VirtualNetworksVnetIdBody} body 
         * @param {T2xGLLqvVnetId} vnetId 
         * @param {T2xGLLqvCfAccountId} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tunnelVirtualNetworkUpdateAVirtualNetwork(body: VirtualNetworksVnetIdBody, vnetId: T2xGLLqvVnetId, accountIdentifier: T2xGLLqvCfAccountId, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<T2xGLLqvVnetResponseSingle>>> {
            const localVarAxiosArgs = await TunnelVirtualNetworkApiAxiosParamCreator(configuration).tunnelVirtualNetworkUpdateAVirtualNetwork(body, vnetId, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TunnelVirtualNetworkApi - factory interface
 * @export
 */
export const TunnelVirtualNetworkApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Adds a new virtual network to an account.
         * @summary Create a virtual network
         * @param {TeamnetVirtualNetworksBody} body 
         * @param {T2xGLLqvCfAccountId} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tunnelVirtualNetworkCreateAVirtualNetwork(body: TeamnetVirtualNetworksBody, accountIdentifier: T2xGLLqvCfAccountId, options?: AxiosRequestConfig): Promise<AxiosResponse<T2xGLLqvVnetResponseSingle>> {
            return TunnelVirtualNetworkApiFp(configuration).tunnelVirtualNetworkCreateAVirtualNetwork(body, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes an existing virtual network.
         * @summary Delete a virtual network
         * @param {T2xGLLqvVnetId} vnetId 
         * @param {T2xGLLqvCfAccountId} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tunnelVirtualNetworkDeleteAVirtualNetwork(vnetId: T2xGLLqvVnetId, accountIdentifier: T2xGLLqvCfAccountId, options?: AxiosRequestConfig): Promise<AxiosResponse<T2xGLLqvVnetResponseSingle>> {
            return TunnelVirtualNetworkApiFp(configuration).tunnelVirtualNetworkDeleteAVirtualNetwork(vnetId, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists and filters virtual networks in an account.
         * @summary List virtual networks
         * @param {T2xGLLqvCfAccountId} accountIdentifier 
         * @param {T2xGLLqvVnetName} [name] 
         * @param {any} [isDefault] 
         * @param {any} [isDeleted] 
         * @param {T2xGLLqvVnetName} [vnetName] 
         * @param {string} [vnetId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tunnelVirtualNetworkListVirtualNetworks(accountIdentifier: T2xGLLqvCfAccountId, name?: T2xGLLqvVnetName, isDefault?: any, isDeleted?: any, vnetName?: T2xGLLqvVnetName, vnetId?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<T2xGLLqvVnetResponseCollection>> {
            return TunnelVirtualNetworkApiFp(configuration).tunnelVirtualNetworkListVirtualNetworks(accountIdentifier, name, isDefault, isDeleted, vnetName, vnetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an existing virtual network.
         * @summary Update a virtual network
         * @param {VirtualNetworksVnetIdBody} body 
         * @param {T2xGLLqvVnetId} vnetId 
         * @param {T2xGLLqvCfAccountId} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tunnelVirtualNetworkUpdateAVirtualNetwork(body: VirtualNetworksVnetIdBody, vnetId: T2xGLLqvVnetId, accountIdentifier: T2xGLLqvCfAccountId, options?: AxiosRequestConfig): Promise<AxiosResponse<T2xGLLqvVnetResponseSingle>> {
            return TunnelVirtualNetworkApiFp(configuration).tunnelVirtualNetworkUpdateAVirtualNetwork(body, vnetId, accountIdentifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TunnelVirtualNetworkApi - object-oriented interface
 * @export
 * @class TunnelVirtualNetworkApi
 * @extends {BaseAPI}
 */
export class TunnelVirtualNetworkApi extends BaseAPI {
    /**
     * Adds a new virtual network to an account.
     * @summary Create a virtual network
     * @param {TeamnetVirtualNetworksBody} body 
     * @param {T2xGLLqvCfAccountId} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TunnelVirtualNetworkApi
     */
    public async tunnelVirtualNetworkCreateAVirtualNetwork(body: TeamnetVirtualNetworksBody, accountIdentifier: T2xGLLqvCfAccountId, options?: AxiosRequestConfig) : Promise<AxiosResponse<T2xGLLqvVnetResponseSingle>> {
        return TunnelVirtualNetworkApiFp(this.configuration).tunnelVirtualNetworkCreateAVirtualNetwork(body, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes an existing virtual network.
     * @summary Delete a virtual network
     * @param {T2xGLLqvVnetId} vnetId 
     * @param {T2xGLLqvCfAccountId} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TunnelVirtualNetworkApi
     */
    public async tunnelVirtualNetworkDeleteAVirtualNetwork(vnetId: T2xGLLqvVnetId, accountIdentifier: T2xGLLqvCfAccountId, options?: AxiosRequestConfig) : Promise<AxiosResponse<T2xGLLqvVnetResponseSingle>> {
        return TunnelVirtualNetworkApiFp(this.configuration).tunnelVirtualNetworkDeleteAVirtualNetwork(vnetId, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists and filters virtual networks in an account.
     * @summary List virtual networks
     * @param {T2xGLLqvCfAccountId} accountIdentifier 
     * @param {T2xGLLqvVnetName} [name] 
     * @param {any} [isDefault] 
     * @param {any} [isDeleted] 
     * @param {T2xGLLqvVnetName} [vnetName] 
     * @param {string} [vnetId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TunnelVirtualNetworkApi
     */
    public async tunnelVirtualNetworkListVirtualNetworks(accountIdentifier: T2xGLLqvCfAccountId, name?: T2xGLLqvVnetName, isDefault?: any, isDeleted?: any, vnetName?: T2xGLLqvVnetName, vnetId?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<T2xGLLqvVnetResponseCollection>> {
        return TunnelVirtualNetworkApiFp(this.configuration).tunnelVirtualNetworkListVirtualNetworks(accountIdentifier, name, isDefault, isDeleted, vnetName, vnetId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates an existing virtual network.
     * @summary Update a virtual network
     * @param {VirtualNetworksVnetIdBody} body 
     * @param {T2xGLLqvVnetId} vnetId 
     * @param {T2xGLLqvCfAccountId} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TunnelVirtualNetworkApi
     */
    public async tunnelVirtualNetworkUpdateAVirtualNetwork(body: VirtualNetworksVnetIdBody, vnetId: T2xGLLqvVnetId, accountIdentifier: T2xGLLqvCfAccountId, options?: AxiosRequestConfig) : Promise<AxiosResponse<T2xGLLqvVnetResponseSingle>> {
        return TunnelVirtualNetworkApiFp(this.configuration).tunnelVirtualNetworkUpdateAVirtualNetwork(body, vnetId, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
}
