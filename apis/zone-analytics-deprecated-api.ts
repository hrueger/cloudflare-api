/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse4XX364 } from '../models';
import { InlineResponse4XX365 } from '../models';
import { Since } from '../models';
import { Since1 } from '../models';
import { Vtu2C1rMColoResponse } from '../models';
import { Vtu2C1rMDashboardResponse } from '../models';
import { Vtu2C1rMIdentifier } from '../models';
import { Vtu2C1rMUntil } from '../models';
/**
 * ZoneAnalyticsDeprecatedApi - axios parameter creator
 * @export
 */
export const ZoneAnalyticsDeprecatedApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This view provides a breakdown of analytics data by datacenter. Note: This is available to Enterprise customers only.
         * @summary Get analytics by Co-locations
         * @param {Vtu2C1rMIdentifier} zoneIdentifier 
         * @param {Vtu2C1rMUntil} [until] 
         * @param {Since} [since] 
         * @param {boolean} [continuous] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zoneAnalyticsDeprecatedGetAnalyticsByCoLocations: async (zoneIdentifier: Vtu2C1rMIdentifier, until?: Vtu2C1rMUntil, since?: Since, continuous?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling zoneAnalyticsDeprecatedGetAnalyticsByCoLocations.');
            }
            const localVarPath = `/zones/{zone_identifier}/analytics/colos`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            if (until !== undefined) {
                localVarQueryParameter['until'] = until;
            }

            if (since !== undefined) {
                localVarQueryParameter['since'] = since;
            }

            if (continuous !== undefined) {
                localVarQueryParameter['continuous'] = continuous;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * The dashboard view provides both totals and timeseries data for the given zone and time period across the entire Cloudflare network.
         * @summary Get dashboard
         * @param {Vtu2C1rMIdentifier} zoneIdentifier 
         * @param {Vtu2C1rMUntil} [until] 
         * @param {Since1} [since] 
         * @param {boolean} [continuous] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zoneAnalyticsDeprecatedGetDashboard: async (zoneIdentifier: Vtu2C1rMIdentifier, until?: Vtu2C1rMUntil, since?: Since1, continuous?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling zoneAnalyticsDeprecatedGetDashboard.');
            }
            const localVarPath = `/zones/{zone_identifier}/analytics/dashboard`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            if (until !== undefined) {
                localVarQueryParameter['until'] = until;
            }

            if (since !== undefined) {
                localVarQueryParameter['since'] = since;
            }

            if (continuous !== undefined) {
                localVarQueryParameter['continuous'] = continuous;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ZoneAnalyticsDeprecatedApi - functional programming interface
 * @export
 */
export const ZoneAnalyticsDeprecatedApiFp = function(configuration?: Configuration) {
    return {
        /**
         * This view provides a breakdown of analytics data by datacenter. Note: This is available to Enterprise customers only.
         * @summary Get analytics by Co-locations
         * @param {Vtu2C1rMIdentifier} zoneIdentifier 
         * @param {Vtu2C1rMUntil} [until] 
         * @param {Since} [since] 
         * @param {boolean} [continuous] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zoneAnalyticsDeprecatedGetAnalyticsByCoLocations(zoneIdentifier: Vtu2C1rMIdentifier, until?: Vtu2C1rMUntil, since?: Since, continuous?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Vtu2C1rMColoResponse>>> {
            const localVarAxiosArgs = await ZoneAnalyticsDeprecatedApiAxiosParamCreator(configuration).zoneAnalyticsDeprecatedGetAnalyticsByCoLocations(zoneIdentifier, until, since, continuous, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * The dashboard view provides both totals and timeseries data for the given zone and time period across the entire Cloudflare network.
         * @summary Get dashboard
         * @param {Vtu2C1rMIdentifier} zoneIdentifier 
         * @param {Vtu2C1rMUntil} [until] 
         * @param {Since1} [since] 
         * @param {boolean} [continuous] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zoneAnalyticsDeprecatedGetDashboard(zoneIdentifier: Vtu2C1rMIdentifier, until?: Vtu2C1rMUntil, since?: Since1, continuous?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Vtu2C1rMDashboardResponse>>> {
            const localVarAxiosArgs = await ZoneAnalyticsDeprecatedApiAxiosParamCreator(configuration).zoneAnalyticsDeprecatedGetDashboard(zoneIdentifier, until, since, continuous, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ZoneAnalyticsDeprecatedApi - factory interface
 * @export
 */
export const ZoneAnalyticsDeprecatedApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * This view provides a breakdown of analytics data by datacenter. Note: This is available to Enterprise customers only.
         * @summary Get analytics by Co-locations
         * @param {Vtu2C1rMIdentifier} zoneIdentifier 
         * @param {Vtu2C1rMUntil} [until] 
         * @param {Since} [since] 
         * @param {boolean} [continuous] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zoneAnalyticsDeprecatedGetAnalyticsByCoLocations(zoneIdentifier: Vtu2C1rMIdentifier, until?: Vtu2C1rMUntil, since?: Since, continuous?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<Vtu2C1rMColoResponse>> {
            return ZoneAnalyticsDeprecatedApiFp(configuration).zoneAnalyticsDeprecatedGetAnalyticsByCoLocations(zoneIdentifier, until, since, continuous, options).then((request) => request(axios, basePath));
        },
        /**
         * The dashboard view provides both totals and timeseries data for the given zone and time period across the entire Cloudflare network.
         * @summary Get dashboard
         * @param {Vtu2C1rMIdentifier} zoneIdentifier 
         * @param {Vtu2C1rMUntil} [until] 
         * @param {Since1} [since] 
         * @param {boolean} [continuous] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zoneAnalyticsDeprecatedGetDashboard(zoneIdentifier: Vtu2C1rMIdentifier, until?: Vtu2C1rMUntil, since?: Since1, continuous?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<Vtu2C1rMDashboardResponse>> {
            return ZoneAnalyticsDeprecatedApiFp(configuration).zoneAnalyticsDeprecatedGetDashboard(zoneIdentifier, until, since, continuous, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ZoneAnalyticsDeprecatedApi - object-oriented interface
 * @export
 * @class ZoneAnalyticsDeprecatedApi
 * @extends {BaseAPI}
 */
export class ZoneAnalyticsDeprecatedApi extends BaseAPI {
    /**
     * This view provides a breakdown of analytics data by datacenter. Note: This is available to Enterprise customers only.
     * @summary Get analytics by Co-locations
     * @param {Vtu2C1rMIdentifier} zoneIdentifier 
     * @param {Vtu2C1rMUntil} [until] 
     * @param {Since} [since] 
     * @param {boolean} [continuous] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZoneAnalyticsDeprecatedApi
     */
    public async zoneAnalyticsDeprecatedGetAnalyticsByCoLocations(zoneIdentifier: Vtu2C1rMIdentifier, until?: Vtu2C1rMUntil, since?: Since, continuous?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<Vtu2C1rMColoResponse>> {
        return ZoneAnalyticsDeprecatedApiFp(this.configuration).zoneAnalyticsDeprecatedGetAnalyticsByCoLocations(zoneIdentifier, until, since, continuous, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * The dashboard view provides both totals and timeseries data for the given zone and time period across the entire Cloudflare network.
     * @summary Get dashboard
     * @param {Vtu2C1rMIdentifier} zoneIdentifier 
     * @param {Vtu2C1rMUntil} [until] 
     * @param {Since1} [since] 
     * @param {boolean} [continuous] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZoneAnalyticsDeprecatedApi
     */
    public async zoneAnalyticsDeprecatedGetDashboard(zoneIdentifier: Vtu2C1rMIdentifier, until?: Vtu2C1rMUntil, since?: Since1, continuous?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<Vtu2C1rMDashboardResponse>> {
        return ZoneAnalyticsDeprecatedApiFp(this.configuration).zoneAnalyticsDeprecatedGetDashboard(zoneIdentifier, until, since, continuous, options).then((request) => request(this.axios, this.basePath));
    }
}
