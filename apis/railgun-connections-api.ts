/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { C4f8RoOSCommonComponentsSchemasIdentifier } from '../models';
import { C4f8RoOSConnection } from '../models';
import { C4f8RoOSConnectionCollectionResponse } from '../models';
import { C4f8RoOSConnectionComponentsSchemasEnabled } from '../models';
import { C4f8RoOSConnectionComponentsSchemasIdentifier } from '../models';
import { C4f8RoOSConnectionSingleIdResponse } from '../models';
import { C4f8RoOSConnectionSingleRequest } from '../models';
import { C4f8RoOSConnectionSingleResponse } from '../models';
import { C4f8RoOSRailgunComponentsSchemasIdentifier } from '../models';
import { InlineResponse4xx66 } from '../models';
import { InlineResponse4xx67 } from '../models';
import { InlineResponse4xx68 } from '../models';
/**
 * RailgunConnectionsApi - axios parameter creator
 * @export
 */
export const RailgunConnectionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get a connection by ID.
         * @summary Connection details
         * @param {C4f8RoOSConnectionComponentsSchemasIdentifier} identifier 
         * @param {C4f8RoOSRailgunComponentsSchemasIdentifier} railgunIdentifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        railgunConnectionsConnectionDetails: async (identifier: C4f8RoOSConnectionComponentsSchemasIdentifier, railgunIdentifier: C4f8RoOSRailgunComponentsSchemasIdentifier, accountIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling railgunConnectionsConnectionDetails.');
            }
            // verify required parameter 'railgunIdentifier' is not null or undefined
            if (railgunIdentifier === null || railgunIdentifier === undefined) {
                throw new RequiredError('railgunIdentifier','Required parameter railgunIdentifier was null or undefined when calling railgunConnectionsConnectionDetails.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling railgunConnectionsConnectionDetails.');
            }
            const localVarPath = `/accounts/{account_identifier}/railguns/{railgun_identifier}/connections/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"railgun_identifier"}}`, encodeURIComponent(String(railgunIdentifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Associates a zone to the Railgun.
         * @summary Create connection
         * @param {C4f8RoOSConnectionSingleRequest} body 
         * @param {C4f8RoOSRailgunComponentsSchemasIdentifier} railgunIdentifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        railgunConnectionsCreateConnection: async (body: C4f8RoOSConnectionSingleRequest, railgunIdentifier: C4f8RoOSRailgunComponentsSchemasIdentifier, accountIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling railgunConnectionsCreateConnection.');
            }
            // verify required parameter 'railgunIdentifier' is not null or undefined
            if (railgunIdentifier === null || railgunIdentifier === undefined) {
                throw new RequiredError('railgunIdentifier','Required parameter railgunIdentifier was null or undefined when calling railgunConnectionsCreateConnection.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling railgunConnectionsCreateConnection.');
            }
            const localVarPath = `/accounts/{account_identifier}/railguns/{railgun_identifier}/connections`
                .replace(`{${"railgun_identifier"}}`, encodeURIComponent(String(railgunIdentifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Disable and remove the connection to a zone.
         * @summary Delete connection
         * @param {C4f8RoOSConnectionComponentsSchemasIdentifier} identifier 
         * @param {C4f8RoOSRailgunComponentsSchemasIdentifier} railgunIdentifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        railgunConnectionsDeleteConnection: async (identifier: C4f8RoOSConnectionComponentsSchemasIdentifier, railgunIdentifier: C4f8RoOSRailgunComponentsSchemasIdentifier, accountIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling railgunConnectionsDeleteConnection.');
            }
            // verify required parameter 'railgunIdentifier' is not null or undefined
            if (railgunIdentifier === null || railgunIdentifier === undefined) {
                throw new RequiredError('railgunIdentifier','Required parameter railgunIdentifier was null or undefined when calling railgunConnectionsDeleteConnection.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling railgunConnectionsDeleteConnection.');
            }
            const localVarPath = `/accounts/{account_identifier}/railguns/{railgun_identifier}/connections/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"railgun_identifier"}}`, encodeURIComponent(String(railgunIdentifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List connections associated with the Railgun.
         * @summary List Connections
         * @param {C4f8RoOSRailgunComponentsSchemasIdentifier} railgunIdentifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} accountIdentifier 
         * @param {C4f8RoOSConnectionComponentsSchemasEnabled} [enabled] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        railgunConnectionsListConnections: async (railgunIdentifier: C4f8RoOSRailgunComponentsSchemasIdentifier, accountIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, enabled?: C4f8RoOSConnectionComponentsSchemasEnabled, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'railgunIdentifier' is not null or undefined
            if (railgunIdentifier === null || railgunIdentifier === undefined) {
                throw new RequiredError('railgunIdentifier','Required parameter railgunIdentifier was null or undefined when calling railgunConnectionsListConnections.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling railgunConnectionsListConnections.');
            }
            const localVarPath = `/accounts/{account_identifier}/railguns/{railgun_identifier}/connections`
                .replace(`{${"railgun_identifier"}}`, encodeURIComponent(String(railgunIdentifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (enabled !== undefined) {
                localVarQueryParameter['enabled'] = enabled;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Enable or disable a connection.
         * @summary Update connection
         * @param {C4f8RoOSConnection} body 
         * @param {C4f8RoOSConnectionComponentsSchemasIdentifier} identifier 
         * @param {C4f8RoOSRailgunComponentsSchemasIdentifier} railgunIdentifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        railgunConnectionsUpdateConnection: async (body: C4f8RoOSConnection, identifier: C4f8RoOSConnectionComponentsSchemasIdentifier, railgunIdentifier: C4f8RoOSRailgunComponentsSchemasIdentifier, accountIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling railgunConnectionsUpdateConnection.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling railgunConnectionsUpdateConnection.');
            }
            // verify required parameter 'railgunIdentifier' is not null or undefined
            if (railgunIdentifier === null || railgunIdentifier === undefined) {
                throw new RequiredError('railgunIdentifier','Required parameter railgunIdentifier was null or undefined when calling railgunConnectionsUpdateConnection.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling railgunConnectionsUpdateConnection.');
            }
            const localVarPath = `/accounts/{account_identifier}/railguns/{railgun_identifier}/connections/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"railgun_identifier"}}`, encodeURIComponent(String(railgunIdentifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RailgunConnectionsApi - functional programming interface
 * @export
 */
export const RailgunConnectionsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get a connection by ID.
         * @summary Connection details
         * @param {C4f8RoOSConnectionComponentsSchemasIdentifier} identifier 
         * @param {C4f8RoOSRailgunComponentsSchemasIdentifier} railgunIdentifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async railgunConnectionsConnectionDetails(identifier: C4f8RoOSConnectionComponentsSchemasIdentifier, railgunIdentifier: C4f8RoOSRailgunComponentsSchemasIdentifier, accountIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<C4f8RoOSConnectionSingleResponse>>> {
            const localVarAxiosArgs = await RailgunConnectionsApiAxiosParamCreator(configuration).railgunConnectionsConnectionDetails(identifier, railgunIdentifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Associates a zone to the Railgun.
         * @summary Create connection
         * @param {C4f8RoOSConnectionSingleRequest} body 
         * @param {C4f8RoOSRailgunComponentsSchemasIdentifier} railgunIdentifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async railgunConnectionsCreateConnection(body: C4f8RoOSConnectionSingleRequest, railgunIdentifier: C4f8RoOSRailgunComponentsSchemasIdentifier, accountIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<C4f8RoOSConnectionSingleResponse>>> {
            const localVarAxiosArgs = await RailgunConnectionsApiAxiosParamCreator(configuration).railgunConnectionsCreateConnection(body, railgunIdentifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Disable and remove the connection to a zone.
         * @summary Delete connection
         * @param {C4f8RoOSConnectionComponentsSchemasIdentifier} identifier 
         * @param {C4f8RoOSRailgunComponentsSchemasIdentifier} railgunIdentifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async railgunConnectionsDeleteConnection(identifier: C4f8RoOSConnectionComponentsSchemasIdentifier, railgunIdentifier: C4f8RoOSRailgunComponentsSchemasIdentifier, accountIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<C4f8RoOSConnectionSingleIdResponse>>> {
            const localVarAxiosArgs = await RailgunConnectionsApiAxiosParamCreator(configuration).railgunConnectionsDeleteConnection(identifier, railgunIdentifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List connections associated with the Railgun.
         * @summary List Connections
         * @param {C4f8RoOSRailgunComponentsSchemasIdentifier} railgunIdentifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} accountIdentifier 
         * @param {C4f8RoOSConnectionComponentsSchemasEnabled} [enabled] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async railgunConnectionsListConnections(railgunIdentifier: C4f8RoOSRailgunComponentsSchemasIdentifier, accountIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, enabled?: C4f8RoOSConnectionComponentsSchemasEnabled, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<C4f8RoOSConnectionCollectionResponse>>> {
            const localVarAxiosArgs = await RailgunConnectionsApiAxiosParamCreator(configuration).railgunConnectionsListConnections(railgunIdentifier, accountIdentifier, enabled, page, perPage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Enable or disable a connection.
         * @summary Update connection
         * @param {C4f8RoOSConnection} body 
         * @param {C4f8RoOSConnectionComponentsSchemasIdentifier} identifier 
         * @param {C4f8RoOSRailgunComponentsSchemasIdentifier} railgunIdentifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async railgunConnectionsUpdateConnection(body: C4f8RoOSConnection, identifier: C4f8RoOSConnectionComponentsSchemasIdentifier, railgunIdentifier: C4f8RoOSRailgunComponentsSchemasIdentifier, accountIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<C4f8RoOSConnectionSingleResponse>>> {
            const localVarAxiosArgs = await RailgunConnectionsApiAxiosParamCreator(configuration).railgunConnectionsUpdateConnection(body, identifier, railgunIdentifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * RailgunConnectionsApi - factory interface
 * @export
 */
export const RailgunConnectionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Get a connection by ID.
         * @summary Connection details
         * @param {C4f8RoOSConnectionComponentsSchemasIdentifier} identifier 
         * @param {C4f8RoOSRailgunComponentsSchemasIdentifier} railgunIdentifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async railgunConnectionsConnectionDetails(identifier: C4f8RoOSConnectionComponentsSchemasIdentifier, railgunIdentifier: C4f8RoOSRailgunComponentsSchemasIdentifier, accountIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<C4f8RoOSConnectionSingleResponse>> {
            return RailgunConnectionsApiFp(configuration).railgunConnectionsConnectionDetails(identifier, railgunIdentifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Associates a zone to the Railgun.
         * @summary Create connection
         * @param {C4f8RoOSConnectionSingleRequest} body 
         * @param {C4f8RoOSRailgunComponentsSchemasIdentifier} railgunIdentifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async railgunConnectionsCreateConnection(body: C4f8RoOSConnectionSingleRequest, railgunIdentifier: C4f8RoOSRailgunComponentsSchemasIdentifier, accountIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<C4f8RoOSConnectionSingleResponse>> {
            return RailgunConnectionsApiFp(configuration).railgunConnectionsCreateConnection(body, railgunIdentifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Disable and remove the connection to a zone.
         * @summary Delete connection
         * @param {C4f8RoOSConnectionComponentsSchemasIdentifier} identifier 
         * @param {C4f8RoOSRailgunComponentsSchemasIdentifier} railgunIdentifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async railgunConnectionsDeleteConnection(identifier: C4f8RoOSConnectionComponentsSchemasIdentifier, railgunIdentifier: C4f8RoOSRailgunComponentsSchemasIdentifier, accountIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<C4f8RoOSConnectionSingleIdResponse>> {
            return RailgunConnectionsApiFp(configuration).railgunConnectionsDeleteConnection(identifier, railgunIdentifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * List connections associated with the Railgun.
         * @summary List Connections
         * @param {C4f8RoOSRailgunComponentsSchemasIdentifier} railgunIdentifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} accountIdentifier 
         * @param {C4f8RoOSConnectionComponentsSchemasEnabled} [enabled] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async railgunConnectionsListConnections(railgunIdentifier: C4f8RoOSRailgunComponentsSchemasIdentifier, accountIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, enabled?: C4f8RoOSConnectionComponentsSchemasEnabled, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<C4f8RoOSConnectionCollectionResponse>> {
            return RailgunConnectionsApiFp(configuration).railgunConnectionsListConnections(railgunIdentifier, accountIdentifier, enabled, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Enable or disable a connection.
         * @summary Update connection
         * @param {C4f8RoOSConnection} body 
         * @param {C4f8RoOSConnectionComponentsSchemasIdentifier} identifier 
         * @param {C4f8RoOSRailgunComponentsSchemasIdentifier} railgunIdentifier 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async railgunConnectionsUpdateConnection(body: C4f8RoOSConnection, identifier: C4f8RoOSConnectionComponentsSchemasIdentifier, railgunIdentifier: C4f8RoOSRailgunComponentsSchemasIdentifier, accountIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<C4f8RoOSConnectionSingleResponse>> {
            return RailgunConnectionsApiFp(configuration).railgunConnectionsUpdateConnection(body, identifier, railgunIdentifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RailgunConnectionsApi - object-oriented interface
 * @export
 * @class RailgunConnectionsApi
 * @extends {BaseAPI}
 */
export class RailgunConnectionsApi extends BaseAPI {
    /**
     * Get a connection by ID.
     * @summary Connection details
     * @param {C4f8RoOSConnectionComponentsSchemasIdentifier} identifier 
     * @param {C4f8RoOSRailgunComponentsSchemasIdentifier} railgunIdentifier 
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RailgunConnectionsApi
     */
    public async railgunConnectionsConnectionDetails(identifier: C4f8RoOSConnectionComponentsSchemasIdentifier, railgunIdentifier: C4f8RoOSRailgunComponentsSchemasIdentifier, accountIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<C4f8RoOSConnectionSingleResponse>> {
        return RailgunConnectionsApiFp(this.configuration).railgunConnectionsConnectionDetails(identifier, railgunIdentifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Associates a zone to the Railgun.
     * @summary Create connection
     * @param {C4f8RoOSConnectionSingleRequest} body 
     * @param {C4f8RoOSRailgunComponentsSchemasIdentifier} railgunIdentifier 
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RailgunConnectionsApi
     */
    public async railgunConnectionsCreateConnection(body: C4f8RoOSConnectionSingleRequest, railgunIdentifier: C4f8RoOSRailgunComponentsSchemasIdentifier, accountIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<C4f8RoOSConnectionSingleResponse>> {
        return RailgunConnectionsApiFp(this.configuration).railgunConnectionsCreateConnection(body, railgunIdentifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Disable and remove the connection to a zone.
     * @summary Delete connection
     * @param {C4f8RoOSConnectionComponentsSchemasIdentifier} identifier 
     * @param {C4f8RoOSRailgunComponentsSchemasIdentifier} railgunIdentifier 
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RailgunConnectionsApi
     */
    public async railgunConnectionsDeleteConnection(identifier: C4f8RoOSConnectionComponentsSchemasIdentifier, railgunIdentifier: C4f8RoOSRailgunComponentsSchemasIdentifier, accountIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<C4f8RoOSConnectionSingleIdResponse>> {
        return RailgunConnectionsApiFp(this.configuration).railgunConnectionsDeleteConnection(identifier, railgunIdentifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List connections associated with the Railgun.
     * @summary List Connections
     * @param {C4f8RoOSRailgunComponentsSchemasIdentifier} railgunIdentifier 
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} accountIdentifier 
     * @param {C4f8RoOSConnectionComponentsSchemasEnabled} [enabled] 
     * @param {number} [page] 
     * @param {number} [perPage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RailgunConnectionsApi
     */
    public async railgunConnectionsListConnections(railgunIdentifier: C4f8RoOSRailgunComponentsSchemasIdentifier, accountIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, enabled?: C4f8RoOSConnectionComponentsSchemasEnabled, page?: number, perPage?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<C4f8RoOSConnectionCollectionResponse>> {
        return RailgunConnectionsApiFp(this.configuration).railgunConnectionsListConnections(railgunIdentifier, accountIdentifier, enabled, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Enable or disable a connection.
     * @summary Update connection
     * @param {C4f8RoOSConnection} body 
     * @param {C4f8RoOSConnectionComponentsSchemasIdentifier} identifier 
     * @param {C4f8RoOSRailgunComponentsSchemasIdentifier} railgunIdentifier 
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RailgunConnectionsApi
     */
    public async railgunConnectionsUpdateConnection(body: C4f8RoOSConnection, identifier: C4f8RoOSConnectionComponentsSchemasIdentifier, railgunIdentifier: C4f8RoOSRailgunComponentsSchemasIdentifier, accountIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<C4f8RoOSConnectionSingleResponse>> {
        return RailgunConnectionsApiFp(this.configuration).railgunConnectionsUpdateConnection(body, identifier, railgunIdentifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
}
