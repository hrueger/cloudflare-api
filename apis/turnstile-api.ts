/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ChallengesWidgetsBody } from '../models';
import { InlineResponse200163 } from '../models';
import { InlineResponse200164 } from '../models';
import { InlineResponse200165 } from '../models';
import { Jds9UiCvApiResponseCommonFailure } from '../models';
import { Jds9UiCvIdentifier } from '../models';
import { Jds9UiCvSitekey } from '../models';
import { SitekeyRotateSecretBody } from '../models';
import { WidgetsSitekeyBody } from '../models';
/**
 * TurnstileApi - axios parameter creator
 * @export
 */
export const TurnstileApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Lists challenge widgets.
         * @summary Create a Turnstile Widget
         * @param {ChallengesWidgetsBody} body 
         * @param {Jds9UiCvIdentifier} accountIdentifier 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {string} [order] 
         * @param {string} [direction] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsTurnstileWidgetCreate: async (body: ChallengesWidgetsBody, accountIdentifier: Jds9UiCvIdentifier, page?: number, perPage?: number, order?: string, direction?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling accountsTurnstileWidgetCreate.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling accountsTurnstileWidgetCreate.');
            }
            const localVarPath = `/accounts/{account_identifier}/challenges/widgets`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Destroy a Turnstile Widget.
         * @summary Delete a Turnstile Widget
         * @param {Jds9UiCvIdentifier} accountIdentifier 
         * @param {Jds9UiCvSitekey} sitekey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsTurnstileWidgetDelete: async (accountIdentifier: Jds9UiCvIdentifier, sitekey: Jds9UiCvSitekey, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling accountsTurnstileWidgetDelete.');
            }
            // verify required parameter 'sitekey' is not null or undefined
            if (sitekey === null || sitekey === undefined) {
                throw new RequiredError('sitekey','Required parameter sitekey was null or undefined when calling accountsTurnstileWidgetDelete.');
            }
            const localVarPath = `/accounts/{account_identifier}/challenges/widgets/{sitekey}`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)))
                .replace(`{${"sitekey"}}`, encodeURIComponent(String(sitekey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Show a single challenge widget configuration.
         * @summary Turnstile Widget Details
         * @param {Jds9UiCvIdentifier} accountIdentifier 
         * @param {Jds9UiCvSitekey} sitekey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsTurnstileWidgetGet: async (accountIdentifier: Jds9UiCvIdentifier, sitekey: Jds9UiCvSitekey, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling accountsTurnstileWidgetGet.');
            }
            // verify required parameter 'sitekey' is not null or undefined
            if (sitekey === null || sitekey === undefined) {
                throw new RequiredError('sitekey','Required parameter sitekey was null or undefined when calling accountsTurnstileWidgetGet.');
            }
            const localVarPath = `/accounts/{account_identifier}/challenges/widgets/{sitekey}`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)))
                .replace(`{${"sitekey"}}`, encodeURIComponent(String(sitekey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate a new secret key for this widget. If `invalidate_immediately` is set to `false`, the previous secret remains valid for 2 hours.  Note that secrets cannot be rotated again during the grace period. 
         * @summary Rotate Secret for a Turnstile Widget
         * @param {SitekeyRotateSecretBody} body 
         * @param {Jds9UiCvIdentifier} accountIdentifier 
         * @param {Jds9UiCvSitekey} sitekey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsTurnstileWidgetRotateSecret: async (body: SitekeyRotateSecretBody, accountIdentifier: Jds9UiCvIdentifier, sitekey: Jds9UiCvSitekey, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling accountsTurnstileWidgetRotateSecret.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling accountsTurnstileWidgetRotateSecret.');
            }
            // verify required parameter 'sitekey' is not null or undefined
            if (sitekey === null || sitekey === undefined) {
                throw new RequiredError('sitekey','Required parameter sitekey was null or undefined when calling accountsTurnstileWidgetRotateSecret.');
            }
            const localVarPath = `/accounts/{account_identifier}/challenges/widgets/{sitekey}/rotate_secret`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)))
                .replace(`{${"sitekey"}}`, encodeURIComponent(String(sitekey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the configuration of a widget.
         * @summary Update a Turnstile Widget
         * @param {WidgetsSitekeyBody} body 
         * @param {Jds9UiCvIdentifier} accountIdentifier 
         * @param {Jds9UiCvSitekey} sitekey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsTurnstileWidgetUpdate: async (body: WidgetsSitekeyBody, accountIdentifier: Jds9UiCvIdentifier, sitekey: Jds9UiCvSitekey, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling accountsTurnstileWidgetUpdate.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling accountsTurnstileWidgetUpdate.');
            }
            // verify required parameter 'sitekey' is not null or undefined
            if (sitekey === null || sitekey === undefined) {
                throw new RequiredError('sitekey','Required parameter sitekey was null or undefined when calling accountsTurnstileWidgetUpdate.');
            }
            const localVarPath = `/accounts/{account_identifier}/challenges/widgets/{sitekey}`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)))
                .replace(`{${"sitekey"}}`, encodeURIComponent(String(sitekey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all turnstile widgets of an account.
         * @summary List Turnstile Widgets
         * @param {Jds9UiCvIdentifier} accountIdentifier 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {string} [order] 
         * @param {string} [direction] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsTurnstileWidgetsList: async (accountIdentifier: Jds9UiCvIdentifier, page?: number, perPage?: number, order?: string, direction?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling accountsTurnstileWidgetsList.');
            }
            const localVarPath = `/accounts/{account_identifier}/challenges/widgets`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TurnstileApi - functional programming interface
 * @export
 */
export const TurnstileApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Lists challenge widgets.
         * @summary Create a Turnstile Widget
         * @param {ChallengesWidgetsBody} body 
         * @param {Jds9UiCvIdentifier} accountIdentifier 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {string} [order] 
         * @param {string} [direction] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsTurnstileWidgetCreate(body: ChallengesWidgetsBody, accountIdentifier: Jds9UiCvIdentifier, page?: number, perPage?: number, order?: string, direction?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200164>>> {
            const localVarAxiosArgs = await TurnstileApiAxiosParamCreator(configuration).accountsTurnstileWidgetCreate(body, accountIdentifier, page, perPage, order, direction, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Destroy a Turnstile Widget.
         * @summary Delete a Turnstile Widget
         * @param {Jds9UiCvIdentifier} accountIdentifier 
         * @param {Jds9UiCvSitekey} sitekey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsTurnstileWidgetDelete(accountIdentifier: Jds9UiCvIdentifier, sitekey: Jds9UiCvSitekey, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200165>>> {
            const localVarAxiosArgs = await TurnstileApiAxiosParamCreator(configuration).accountsTurnstileWidgetDelete(accountIdentifier, sitekey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Show a single challenge widget configuration.
         * @summary Turnstile Widget Details
         * @param {Jds9UiCvIdentifier} accountIdentifier 
         * @param {Jds9UiCvSitekey} sitekey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsTurnstileWidgetGet(accountIdentifier: Jds9UiCvIdentifier, sitekey: Jds9UiCvSitekey, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200165>>> {
            const localVarAxiosArgs = await TurnstileApiAxiosParamCreator(configuration).accountsTurnstileWidgetGet(accountIdentifier, sitekey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Generate a new secret key for this widget. If `invalidate_immediately` is set to `false`, the previous secret remains valid for 2 hours.  Note that secrets cannot be rotated again during the grace period. 
         * @summary Rotate Secret for a Turnstile Widget
         * @param {SitekeyRotateSecretBody} body 
         * @param {Jds9UiCvIdentifier} accountIdentifier 
         * @param {Jds9UiCvSitekey} sitekey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsTurnstileWidgetRotateSecret(body: SitekeyRotateSecretBody, accountIdentifier: Jds9UiCvIdentifier, sitekey: Jds9UiCvSitekey, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200165>>> {
            const localVarAxiosArgs = await TurnstileApiAxiosParamCreator(configuration).accountsTurnstileWidgetRotateSecret(body, accountIdentifier, sitekey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update the configuration of a widget.
         * @summary Update a Turnstile Widget
         * @param {WidgetsSitekeyBody} body 
         * @param {Jds9UiCvIdentifier} accountIdentifier 
         * @param {Jds9UiCvSitekey} sitekey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsTurnstileWidgetUpdate(body: WidgetsSitekeyBody, accountIdentifier: Jds9UiCvIdentifier, sitekey: Jds9UiCvSitekey, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200165>>> {
            const localVarAxiosArgs = await TurnstileApiAxiosParamCreator(configuration).accountsTurnstileWidgetUpdate(body, accountIdentifier, sitekey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Lists all turnstile widgets of an account.
         * @summary List Turnstile Widgets
         * @param {Jds9UiCvIdentifier} accountIdentifier 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {string} [order] 
         * @param {string} [direction] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsTurnstileWidgetsList(accountIdentifier: Jds9UiCvIdentifier, page?: number, perPage?: number, order?: string, direction?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200163>>> {
            const localVarAxiosArgs = await TurnstileApiAxiosParamCreator(configuration).accountsTurnstileWidgetsList(accountIdentifier, page, perPage, order, direction, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TurnstileApi - factory interface
 * @export
 */
export const TurnstileApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Lists challenge widgets.
         * @summary Create a Turnstile Widget
         * @param {ChallengesWidgetsBody} body 
         * @param {Jds9UiCvIdentifier} accountIdentifier 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {string} [order] 
         * @param {string} [direction] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsTurnstileWidgetCreate(body: ChallengesWidgetsBody, accountIdentifier: Jds9UiCvIdentifier, page?: number, perPage?: number, order?: string, direction?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200164>> {
            return TurnstileApiFp(configuration).accountsTurnstileWidgetCreate(body, accountIdentifier, page, perPage, order, direction, options).then((request) => request(axios, basePath));
        },
        /**
         * Destroy a Turnstile Widget.
         * @summary Delete a Turnstile Widget
         * @param {Jds9UiCvIdentifier} accountIdentifier 
         * @param {Jds9UiCvSitekey} sitekey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsTurnstileWidgetDelete(accountIdentifier: Jds9UiCvIdentifier, sitekey: Jds9UiCvSitekey, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200165>> {
            return TurnstileApiFp(configuration).accountsTurnstileWidgetDelete(accountIdentifier, sitekey, options).then((request) => request(axios, basePath));
        },
        /**
         * Show a single challenge widget configuration.
         * @summary Turnstile Widget Details
         * @param {Jds9UiCvIdentifier} accountIdentifier 
         * @param {Jds9UiCvSitekey} sitekey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsTurnstileWidgetGet(accountIdentifier: Jds9UiCvIdentifier, sitekey: Jds9UiCvSitekey, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200165>> {
            return TurnstileApiFp(configuration).accountsTurnstileWidgetGet(accountIdentifier, sitekey, options).then((request) => request(axios, basePath));
        },
        /**
         * Generate a new secret key for this widget. If `invalidate_immediately` is set to `false`, the previous secret remains valid for 2 hours.  Note that secrets cannot be rotated again during the grace period. 
         * @summary Rotate Secret for a Turnstile Widget
         * @param {SitekeyRotateSecretBody} body 
         * @param {Jds9UiCvIdentifier} accountIdentifier 
         * @param {Jds9UiCvSitekey} sitekey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsTurnstileWidgetRotateSecret(body: SitekeyRotateSecretBody, accountIdentifier: Jds9UiCvIdentifier, sitekey: Jds9UiCvSitekey, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200165>> {
            return TurnstileApiFp(configuration).accountsTurnstileWidgetRotateSecret(body, accountIdentifier, sitekey, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the configuration of a widget.
         * @summary Update a Turnstile Widget
         * @param {WidgetsSitekeyBody} body 
         * @param {Jds9UiCvIdentifier} accountIdentifier 
         * @param {Jds9UiCvSitekey} sitekey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsTurnstileWidgetUpdate(body: WidgetsSitekeyBody, accountIdentifier: Jds9UiCvIdentifier, sitekey: Jds9UiCvSitekey, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200165>> {
            return TurnstileApiFp(configuration).accountsTurnstileWidgetUpdate(body, accountIdentifier, sitekey, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists all turnstile widgets of an account.
         * @summary List Turnstile Widgets
         * @param {Jds9UiCvIdentifier} accountIdentifier 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {string} [order] 
         * @param {string} [direction] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsTurnstileWidgetsList(accountIdentifier: Jds9UiCvIdentifier, page?: number, perPage?: number, order?: string, direction?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200163>> {
            return TurnstileApiFp(configuration).accountsTurnstileWidgetsList(accountIdentifier, page, perPage, order, direction, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TurnstileApi - object-oriented interface
 * @export
 * @class TurnstileApi
 * @extends {BaseAPI}
 */
export class TurnstileApi extends BaseAPI {
    /**
     * Lists challenge widgets.
     * @summary Create a Turnstile Widget
     * @param {ChallengesWidgetsBody} body 
     * @param {Jds9UiCvIdentifier} accountIdentifier 
     * @param {number} [page] 
     * @param {number} [perPage] 
     * @param {string} [order] 
     * @param {string} [direction] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TurnstileApi
     */
    public async accountsTurnstileWidgetCreate(body: ChallengesWidgetsBody, accountIdentifier: Jds9UiCvIdentifier, page?: number, perPage?: number, order?: string, direction?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200164>> {
        return TurnstileApiFp(this.configuration).accountsTurnstileWidgetCreate(body, accountIdentifier, page, perPage, order, direction, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Destroy a Turnstile Widget.
     * @summary Delete a Turnstile Widget
     * @param {Jds9UiCvIdentifier} accountIdentifier 
     * @param {Jds9UiCvSitekey} sitekey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TurnstileApi
     */
    public async accountsTurnstileWidgetDelete(accountIdentifier: Jds9UiCvIdentifier, sitekey: Jds9UiCvSitekey, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200165>> {
        return TurnstileApiFp(this.configuration).accountsTurnstileWidgetDelete(accountIdentifier, sitekey, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Show a single challenge widget configuration.
     * @summary Turnstile Widget Details
     * @param {Jds9UiCvIdentifier} accountIdentifier 
     * @param {Jds9UiCvSitekey} sitekey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TurnstileApi
     */
    public async accountsTurnstileWidgetGet(accountIdentifier: Jds9UiCvIdentifier, sitekey: Jds9UiCvSitekey, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200165>> {
        return TurnstileApiFp(this.configuration).accountsTurnstileWidgetGet(accountIdentifier, sitekey, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Generate a new secret key for this widget. If `invalidate_immediately` is set to `false`, the previous secret remains valid for 2 hours.  Note that secrets cannot be rotated again during the grace period. 
     * @summary Rotate Secret for a Turnstile Widget
     * @param {SitekeyRotateSecretBody} body 
     * @param {Jds9UiCvIdentifier} accountIdentifier 
     * @param {Jds9UiCvSitekey} sitekey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TurnstileApi
     */
    public async accountsTurnstileWidgetRotateSecret(body: SitekeyRotateSecretBody, accountIdentifier: Jds9UiCvIdentifier, sitekey: Jds9UiCvSitekey, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200165>> {
        return TurnstileApiFp(this.configuration).accountsTurnstileWidgetRotateSecret(body, accountIdentifier, sitekey, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update the configuration of a widget.
     * @summary Update a Turnstile Widget
     * @param {WidgetsSitekeyBody} body 
     * @param {Jds9UiCvIdentifier} accountIdentifier 
     * @param {Jds9UiCvSitekey} sitekey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TurnstileApi
     */
    public async accountsTurnstileWidgetUpdate(body: WidgetsSitekeyBody, accountIdentifier: Jds9UiCvIdentifier, sitekey: Jds9UiCvSitekey, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200165>> {
        return TurnstileApiFp(this.configuration).accountsTurnstileWidgetUpdate(body, accountIdentifier, sitekey, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists all turnstile widgets of an account.
     * @summary List Turnstile Widgets
     * @param {Jds9UiCvIdentifier} accountIdentifier 
     * @param {number} [page] 
     * @param {number} [perPage] 
     * @param {string} [order] 
     * @param {string} [direction] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TurnstileApi
     */
    public async accountsTurnstileWidgetsList(accountIdentifier: Jds9UiCvIdentifier, page?: number, perPage?: number, order?: string, direction?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200163>> {
        return TurnstileApiFp(this.configuration).accountsTurnstileWidgetsList(accountIdentifier, page, perPage, order, direction, options).then((request) => request(this.axios, this.basePath));
    }
}
