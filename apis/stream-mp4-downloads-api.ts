/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { JOh1h9zQApiResponseCommonFailure } from '../models';
import { JOh1h9zQDeletedResponse } from '../models';
import { JOh1h9zQDownloadsResponse } from '../models';
import { JOh1h9zQIdentifier } from '../models';
import { JOh1h9zQSchemasIdentifier } from '../models';
/**
 * StreamMP4DownloadsApi - axios parameter creator
 * @export
 */
export const StreamMP4DownloadsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a download for a video when a video is ready to view.
         * @summary Create downloads
         * @param {JOh1h9zQIdentifier} identifier 
         * @param {JOh1h9zQSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamMP4DownloadsCreateDownloads: async (identifier: JOh1h9zQIdentifier, accountIdentifier: JOh1h9zQSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling streamMP4DownloadsCreateDownloads.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling streamMP4DownloadsCreateDownloads.');
            }
            const localVarPath = `/accounts/{account_identifier}/stream/{identifier}/downloads`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete the downloads for a video.
         * @summary Delete downloads
         * @param {JOh1h9zQIdentifier} identifier 
         * @param {JOh1h9zQSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamMP4DownloadsDeleteDownloads: async (identifier: JOh1h9zQIdentifier, accountIdentifier: JOh1h9zQSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling streamMP4DownloadsDeleteDownloads.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling streamMP4DownloadsDeleteDownloads.');
            }
            const localVarPath = `/accounts/{account_identifier}/stream/{identifier}/downloads`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists the downloads created for a video.
         * @summary List downloads
         * @param {JOh1h9zQIdentifier} identifier 
         * @param {JOh1h9zQSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamMP4DownloadsListDownloads: async (identifier: JOh1h9zQIdentifier, accountIdentifier: JOh1h9zQSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling streamMP4DownloadsListDownloads.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling streamMP4DownloadsListDownloads.');
            }
            const localVarPath = `/accounts/{account_identifier}/stream/{identifier}/downloads`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StreamMP4DownloadsApi - functional programming interface
 * @export
 */
export const StreamMP4DownloadsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates a download for a video when a video is ready to view.
         * @summary Create downloads
         * @param {JOh1h9zQIdentifier} identifier 
         * @param {JOh1h9zQSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamMP4DownloadsCreateDownloads(identifier: JOh1h9zQIdentifier, accountIdentifier: JOh1h9zQSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<JOh1h9zQDownloadsResponse>>> {
            const localVarAxiosArgs = await StreamMP4DownloadsApiAxiosParamCreator(configuration).streamMP4DownloadsCreateDownloads(identifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete the downloads for a video.
         * @summary Delete downloads
         * @param {JOh1h9zQIdentifier} identifier 
         * @param {JOh1h9zQSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamMP4DownloadsDeleteDownloads(identifier: JOh1h9zQIdentifier, accountIdentifier: JOh1h9zQSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<JOh1h9zQDeletedResponse>>> {
            const localVarAxiosArgs = await StreamMP4DownloadsApiAxiosParamCreator(configuration).streamMP4DownloadsDeleteDownloads(identifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Lists the downloads created for a video.
         * @summary List downloads
         * @param {JOh1h9zQIdentifier} identifier 
         * @param {JOh1h9zQSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamMP4DownloadsListDownloads(identifier: JOh1h9zQIdentifier, accountIdentifier: JOh1h9zQSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<JOh1h9zQDownloadsResponse>>> {
            const localVarAxiosArgs = await StreamMP4DownloadsApiAxiosParamCreator(configuration).streamMP4DownloadsListDownloads(identifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * StreamMP4DownloadsApi - factory interface
 * @export
 */
export const StreamMP4DownloadsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Creates a download for a video when a video is ready to view.
         * @summary Create downloads
         * @param {JOh1h9zQIdentifier} identifier 
         * @param {JOh1h9zQSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamMP4DownloadsCreateDownloads(identifier: JOh1h9zQIdentifier, accountIdentifier: JOh1h9zQSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<JOh1h9zQDownloadsResponse>> {
            return StreamMP4DownloadsApiFp(configuration).streamMP4DownloadsCreateDownloads(identifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete the downloads for a video.
         * @summary Delete downloads
         * @param {JOh1h9zQIdentifier} identifier 
         * @param {JOh1h9zQSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamMP4DownloadsDeleteDownloads(identifier: JOh1h9zQIdentifier, accountIdentifier: JOh1h9zQSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<JOh1h9zQDeletedResponse>> {
            return StreamMP4DownloadsApiFp(configuration).streamMP4DownloadsDeleteDownloads(identifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists the downloads created for a video.
         * @summary List downloads
         * @param {JOh1h9zQIdentifier} identifier 
         * @param {JOh1h9zQSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamMP4DownloadsListDownloads(identifier: JOh1h9zQIdentifier, accountIdentifier: JOh1h9zQSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<JOh1h9zQDownloadsResponse>> {
            return StreamMP4DownloadsApiFp(configuration).streamMP4DownloadsListDownloads(identifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StreamMP4DownloadsApi - object-oriented interface
 * @export
 * @class StreamMP4DownloadsApi
 * @extends {BaseAPI}
 */
export class StreamMP4DownloadsApi extends BaseAPI {
    /**
     * Creates a download for a video when a video is ready to view.
     * @summary Create downloads
     * @param {JOh1h9zQIdentifier} identifier 
     * @param {JOh1h9zQSchemasIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamMP4DownloadsApi
     */
    public async streamMP4DownloadsCreateDownloads(identifier: JOh1h9zQIdentifier, accountIdentifier: JOh1h9zQSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<JOh1h9zQDownloadsResponse>> {
        return StreamMP4DownloadsApiFp(this.configuration).streamMP4DownloadsCreateDownloads(identifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete the downloads for a video.
     * @summary Delete downloads
     * @param {JOh1h9zQIdentifier} identifier 
     * @param {JOh1h9zQSchemasIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamMP4DownloadsApi
     */
    public async streamMP4DownloadsDeleteDownloads(identifier: JOh1h9zQIdentifier, accountIdentifier: JOh1h9zQSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<JOh1h9zQDeletedResponse>> {
        return StreamMP4DownloadsApiFp(this.configuration).streamMP4DownloadsDeleteDownloads(identifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists the downloads created for a video.
     * @summary List downloads
     * @param {JOh1h9zQIdentifier} identifier 
     * @param {JOh1h9zQSchemasIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamMP4DownloadsApi
     */
    public async streamMP4DownloadsListDownloads(identifier: JOh1h9zQIdentifier, accountIdentifier: JOh1h9zQSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<JOh1h9zQDownloadsResponse>> {
        return StreamMP4DownloadsApiFp(this.configuration).streamMP4DownloadsListDownloads(identifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
}
