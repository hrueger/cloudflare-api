/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse4XX150 } from '../models';
import { Model5gqLs0vOIdentifier } from '../models';
import { Model5gqLs0vOResponse } from '../models';
/**
 * DomainHistoryApi - axios parameter creator
 * @export
 */
export const DomainHistoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get Domain History
         * @param {Model5gqLs0vOIdentifier} accountIdentifier 
         * @param {any} [domain] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainHistoryGetDomainHistory: async (accountIdentifier: Model5gqLs0vOIdentifier, domain?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling domainHistoryGetDomainHistory.');
            }
            const localVarPath = `/accounts/{account_identifier}/intel/domain-history`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (domain !== undefined) {
                localVarQueryParameter['domain'] = domain;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DomainHistoryApi - functional programming interface
 * @export
 */
export const DomainHistoryApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get Domain History
         * @param {Model5gqLs0vOIdentifier} accountIdentifier 
         * @param {any} [domain] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async domainHistoryGetDomainHistory(accountIdentifier: Model5gqLs0vOIdentifier, domain?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model5gqLs0vOResponse>>> {
            const localVarAxiosArgs = await DomainHistoryApiAxiosParamCreator(configuration).domainHistoryGetDomainHistory(accountIdentifier, domain, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DomainHistoryApi - factory interface
 * @export
 */
export const DomainHistoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Get Domain History
         * @param {Model5gqLs0vOIdentifier} accountIdentifier 
         * @param {any} [domain] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async domainHistoryGetDomainHistory(accountIdentifier: Model5gqLs0vOIdentifier, domain?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<Model5gqLs0vOResponse>> {
            return DomainHistoryApiFp(configuration).domainHistoryGetDomainHistory(accountIdentifier, domain, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DomainHistoryApi - object-oriented interface
 * @export
 * @class DomainHistoryApi
 * @extends {BaseAPI}
 */
export class DomainHistoryApi extends BaseAPI {
    /**
     * 
     * @summary Get Domain History
     * @param {Model5gqLs0vOIdentifier} accountIdentifier 
     * @param {any} [domain] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainHistoryApi
     */
    public async domainHistoryGetDomainHistory(accountIdentifier: Model5gqLs0vOIdentifier, domain?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model5gqLs0vOResponse>> {
        return DomainHistoryApiFp(this.configuration).domainHistoryGetDomainHistory(accountIdentifier, domain, options).then((request) => request(this.axios, this.basePath));
    }
}
