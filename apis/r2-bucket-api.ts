/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse20056 } from '../models';
import { InlineResponse20057 } from '../models';
import { R2BucketsBody } from '../models';
import { UfVMGOZzAccountIdentifier } from '../models';
import { UfVMGOZzBucketName } from '../models';
import { UfVMGOZzV4Response } from '../models';
import { UfVMGOZzV4ResponseFailure } from '../models';
/**
 * R2BucketApi - axios parameter creator
 * @export
 */
export const R2BucketApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new R2 bucket.
         * @summary Create Bucket
         * @param {R2BucketsBody} body 
         * @param {UfVMGOZzAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        r2CreateBucket: async (body: R2BucketsBody, accountIdentifier: UfVMGOZzAccountIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling r2CreateBucket.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling r2CreateBucket.');
            }
            const localVarPath = `/accounts/{account_identifier}/r2/buckets`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an existing R2 bucket.
         * @summary Delete Bucket
         * @param {UfVMGOZzBucketName} bucketName 
         * @param {UfVMGOZzAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        r2DeleteBucket: async (bucketName: UfVMGOZzBucketName, accountIdentifier: UfVMGOZzAccountIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bucketName' is not null or undefined
            if (bucketName === null || bucketName === undefined) {
                throw new RequiredError('bucketName','Required parameter bucketName was null or undefined when calling r2DeleteBucket.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling r2DeleteBucket.');
            }
            const localVarPath = `/accounts/{account_identifier}/r2/buckets/{bucket_name}`
                .replace(`{${"bucket_name"}}`, encodeURIComponent(String(bucketName)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets metadata for an existing R2 bucket.
         * @summary Get Bucket
         * @param {UfVMGOZzAccountIdentifier} accountIdentifier 
         * @param {UfVMGOZzBucketName} bucketName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        r2GetBucket: async (accountIdentifier: UfVMGOZzAccountIdentifier, bucketName: UfVMGOZzBucketName, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling r2GetBucket.');
            }
            // verify required parameter 'bucketName' is not null or undefined
            if (bucketName === null || bucketName === undefined) {
                throw new RequiredError('bucketName','Required parameter bucketName was null or undefined when calling r2GetBucket.');
            }
            const localVarPath = `/accounts/{account_identifier}/r2/buckets/{bucket_name}`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)))
                .replace(`{${"bucket_name"}}`, encodeURIComponent(String(bucketName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all R2 buckets on your account
         * @summary List Buckets
         * @param {UfVMGOZzAccountIdentifier} accountIdentifier 
         * @param {string} [nameContains] 
         * @param {string} [startAfter] 
         * @param {number} [perPage] 
         * @param {string} [order] 
         * @param {string} [direction] 
         * @param {string} [cursor] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        r2ListBuckets: async (accountIdentifier: UfVMGOZzAccountIdentifier, nameContains?: string, startAfter?: string, perPage?: number, order?: string, direction?: string, cursor?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling r2ListBuckets.');
            }
            const localVarPath = `/accounts/{account_identifier}/r2/buckets`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (nameContains !== undefined) {
                localVarQueryParameter['name_contains'] = nameContains;
            }

            if (startAfter !== undefined) {
                localVarQueryParameter['start_after'] = startAfter;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * R2BucketApi - functional programming interface
 * @export
 */
export const R2BucketApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates a new R2 bucket.
         * @summary Create Bucket
         * @param {R2BucketsBody} body 
         * @param {UfVMGOZzAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async r2CreateBucket(body: R2BucketsBody, accountIdentifier: UfVMGOZzAccountIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20057>>> {
            const localVarAxiosArgs = await R2BucketApiAxiosParamCreator(configuration).r2CreateBucket(body, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes an existing R2 bucket.
         * @summary Delete Bucket
         * @param {UfVMGOZzBucketName} bucketName 
         * @param {UfVMGOZzAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async r2DeleteBucket(bucketName: UfVMGOZzBucketName, accountIdentifier: UfVMGOZzAccountIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<UfVMGOZzV4Response>>> {
            const localVarAxiosArgs = await R2BucketApiAxiosParamCreator(configuration).r2DeleteBucket(bucketName, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets metadata for an existing R2 bucket.
         * @summary Get Bucket
         * @param {UfVMGOZzAccountIdentifier} accountIdentifier 
         * @param {UfVMGOZzBucketName} bucketName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async r2GetBucket(accountIdentifier: UfVMGOZzAccountIdentifier, bucketName: UfVMGOZzBucketName, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20057>>> {
            const localVarAxiosArgs = await R2BucketApiAxiosParamCreator(configuration).r2GetBucket(accountIdentifier, bucketName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Lists all R2 buckets on your account
         * @summary List Buckets
         * @param {UfVMGOZzAccountIdentifier} accountIdentifier 
         * @param {string} [nameContains] 
         * @param {string} [startAfter] 
         * @param {number} [perPage] 
         * @param {string} [order] 
         * @param {string} [direction] 
         * @param {string} [cursor] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async r2ListBuckets(accountIdentifier: UfVMGOZzAccountIdentifier, nameContains?: string, startAfter?: string, perPage?: number, order?: string, direction?: string, cursor?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20056>>> {
            const localVarAxiosArgs = await R2BucketApiAxiosParamCreator(configuration).r2ListBuckets(accountIdentifier, nameContains, startAfter, perPage, order, direction, cursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * R2BucketApi - factory interface
 * @export
 */
export const R2BucketApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Creates a new R2 bucket.
         * @summary Create Bucket
         * @param {R2BucketsBody} body 
         * @param {UfVMGOZzAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async r2CreateBucket(body: R2BucketsBody, accountIdentifier: UfVMGOZzAccountIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20057>> {
            return R2BucketApiFp(configuration).r2CreateBucket(body, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes an existing R2 bucket.
         * @summary Delete Bucket
         * @param {UfVMGOZzBucketName} bucketName 
         * @param {UfVMGOZzAccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async r2DeleteBucket(bucketName: UfVMGOZzBucketName, accountIdentifier: UfVMGOZzAccountIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<UfVMGOZzV4Response>> {
            return R2BucketApiFp(configuration).r2DeleteBucket(bucketName, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets metadata for an existing R2 bucket.
         * @summary Get Bucket
         * @param {UfVMGOZzAccountIdentifier} accountIdentifier 
         * @param {UfVMGOZzBucketName} bucketName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async r2GetBucket(accountIdentifier: UfVMGOZzAccountIdentifier, bucketName: UfVMGOZzBucketName, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20057>> {
            return R2BucketApiFp(configuration).r2GetBucket(accountIdentifier, bucketName, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists all R2 buckets on your account
         * @summary List Buckets
         * @param {UfVMGOZzAccountIdentifier} accountIdentifier 
         * @param {string} [nameContains] 
         * @param {string} [startAfter] 
         * @param {number} [perPage] 
         * @param {string} [order] 
         * @param {string} [direction] 
         * @param {string} [cursor] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async r2ListBuckets(accountIdentifier: UfVMGOZzAccountIdentifier, nameContains?: string, startAfter?: string, perPage?: number, order?: string, direction?: string, cursor?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20056>> {
            return R2BucketApiFp(configuration).r2ListBuckets(accountIdentifier, nameContains, startAfter, perPage, order, direction, cursor, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * R2BucketApi - object-oriented interface
 * @export
 * @class R2BucketApi
 * @extends {BaseAPI}
 */
export class R2BucketApi extends BaseAPI {
    /**
     * Creates a new R2 bucket.
     * @summary Create Bucket
     * @param {R2BucketsBody} body 
     * @param {UfVMGOZzAccountIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof R2BucketApi
     */
    public async r2CreateBucket(body: R2BucketsBody, accountIdentifier: UfVMGOZzAccountIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20057>> {
        return R2BucketApiFp(this.configuration).r2CreateBucket(body, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes an existing R2 bucket.
     * @summary Delete Bucket
     * @param {UfVMGOZzBucketName} bucketName 
     * @param {UfVMGOZzAccountIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof R2BucketApi
     */
    public async r2DeleteBucket(bucketName: UfVMGOZzBucketName, accountIdentifier: UfVMGOZzAccountIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<UfVMGOZzV4Response>> {
        return R2BucketApiFp(this.configuration).r2DeleteBucket(bucketName, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets metadata for an existing R2 bucket.
     * @summary Get Bucket
     * @param {UfVMGOZzAccountIdentifier} accountIdentifier 
     * @param {UfVMGOZzBucketName} bucketName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof R2BucketApi
     */
    public async r2GetBucket(accountIdentifier: UfVMGOZzAccountIdentifier, bucketName: UfVMGOZzBucketName, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20057>> {
        return R2BucketApiFp(this.configuration).r2GetBucket(accountIdentifier, bucketName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists all R2 buckets on your account
     * @summary List Buckets
     * @param {UfVMGOZzAccountIdentifier} accountIdentifier 
     * @param {string} [nameContains] 
     * @param {string} [startAfter] 
     * @param {number} [perPage] 
     * @param {string} [order] 
     * @param {string} [direction] 
     * @param {string} [cursor] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof R2BucketApi
     */
    public async r2ListBuckets(accountIdentifier: UfVMGOZzAccountIdentifier, nameContains?: string, startAfter?: string, perPage?: number, order?: string, direction?: string, cursor?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20056>> {
        return R2BucketApiFp(this.configuration).r2ListBuckets(accountIdentifier, nameContains, startAfter, perPage, order, direction, cursor, options).then((request) => request(this.axios, this.basePath));
    }
}
