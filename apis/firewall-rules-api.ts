/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { C4f8RoOSCommonComponentsSchemasIdentifier } from '../models';
import { C4f8RoOSFilterRulesResponseCollection } from '../models';
import { C4f8RoOSFilterRulesResponseCollectionDelete } from '../models';
import { C4f8RoOSFilterRulesSingleResponse } from '../models';
import { C4f8RoOSFilterRulesSingleResponseDelete } from '../models';
import { C4f8RoOSFirewallRulesComponentsSchemasId } from '../models';
import { FirewallRulesBody } from '../models';
import { InlineResponse4xx26 } from '../models';
import { InlineResponse4xx27 } from '../models';
import { InlineResponse4xx28 } from '../models';
import { InlineResponse4xx29 } from '../models';
import { RulesIdBody } from '../models';
/**
 * FirewallRulesApi - axios parameter creator
 * @export
 */
export const FirewallRulesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create one or more firewall rules.
         * @summary Create firewall rules
         * @param {any} body 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        firewallRulesCreateFirewallRules: async (body: any, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling firewallRulesCreateFirewallRules.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling firewallRulesCreateFirewallRules.');
            }
            const localVarPath = `/zones/{zone_identifier}/firewall/rules`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an existing firewall rule.
         * @summary Delete a firewall rule
         * @param {RulesIdBody} body 
         * @param {C4f8RoOSFirewallRulesComponentsSchemasId} id 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        firewallRulesDeleteAFirewallRule: async (body: RulesIdBody, id: C4f8RoOSFirewallRulesComponentsSchemasId, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling firewallRulesDeleteAFirewallRule.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling firewallRulesDeleteAFirewallRule.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling firewallRulesDeleteAFirewallRule.');
            }
            const localVarPath = `/zones/{zone_identifier}/firewall/rules/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes existing firewall rules.
         * @summary Delete firewall rules
         * @param {FirewallRulesBody} body 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        firewallRulesDeleteFirewallRules: async (body: FirewallRulesBody, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling firewallRulesDeleteFirewallRules.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling firewallRulesDeleteFirewallRules.');
            }
            const localVarPath = `/zones/{zone_identifier}/firewall/rules`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches the details of a firewall rule.
         * @summary Get a firewall rule
         * @param {C4f8RoOSFirewallRulesComponentsSchemasId} id 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {C4f8RoOSFirewallRulesComponentsSchemasId} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        firewallRulesGetAFirewallRule: async (id: C4f8RoOSFirewallRulesComponentsSchemasId, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, id?: C4f8RoOSFirewallRulesComponentsSchemasId, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling firewallRulesGetAFirewallRule.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling firewallRulesGetAFirewallRule.');
            }
            const localVarPath = `/zones/{zone_identifier}/firewall/rules/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches firewall rules in a zone. You can filter the results using several optional parameters.
         * @summary List firewall rules
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {string} [description] 
         * @param {string} [action] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {string} [id] 
         * @param {boolean} [paused] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        firewallRulesListFirewallRules: async (zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, description?: string, action?: string, page?: number, perPage?: number, id?: string, paused?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling firewallRulesListFirewallRules.');
            }
            const localVarPath = `/zones/{zone_identifier}/firewall/rules`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }

            if (action !== undefined) {
                localVarQueryParameter['action'] = action;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (paused !== undefined) {
                localVarQueryParameter['paused'] = paused;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an existing firewall rule.
         * @summary Update a firewall rule
         * @param {any} body 
         * @param {C4f8RoOSFirewallRulesComponentsSchemasId} id 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        firewallRulesUpdateAFirewallRule: async (body: any, id: C4f8RoOSFirewallRulesComponentsSchemasId, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling firewallRulesUpdateAFirewallRule.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling firewallRulesUpdateAFirewallRule.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling firewallRulesUpdateAFirewallRule.');
            }
            const localVarPath = `/zones/{zone_identifier}/firewall/rules/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates one or more existing firewall rules.
         * @summary Update firewall rules
         * @param {any} body 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        firewallRulesUpdateFirewallRules: async (body: any, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling firewallRulesUpdateFirewallRules.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling firewallRulesUpdateFirewallRules.');
            }
            const localVarPath = `/zones/{zone_identifier}/firewall/rules`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the priority of an existing firewall rule.
         * @summary Update priority of a firewall rule
         * @param {any} body 
         * @param {C4f8RoOSFirewallRulesComponentsSchemasId} id 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        firewallRulesUpdatePriorityOfAFirewallRule: async (body: any, id: C4f8RoOSFirewallRulesComponentsSchemasId, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling firewallRulesUpdatePriorityOfAFirewallRule.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling firewallRulesUpdatePriorityOfAFirewallRule.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling firewallRulesUpdatePriorityOfAFirewallRule.');
            }
            const localVarPath = `/zones/{zone_identifier}/firewall/rules/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the priority of existing firewall rules.
         * @summary Update priority of firewall rules
         * @param {any} body 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        firewallRulesUpdatePriorityOfFirewallRules: async (body: any, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling firewallRulesUpdatePriorityOfFirewallRules.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling firewallRulesUpdatePriorityOfFirewallRules.');
            }
            const localVarPath = `/zones/{zone_identifier}/firewall/rules`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FirewallRulesApi - functional programming interface
 * @export
 */
export const FirewallRulesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create one or more firewall rules.
         * @summary Create firewall rules
         * @param {any} body 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async firewallRulesCreateFirewallRules(body: any, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<C4f8RoOSFilterRulesResponseCollection>>> {
            const localVarAxiosArgs = await FirewallRulesApiAxiosParamCreator(configuration).firewallRulesCreateFirewallRules(body, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes an existing firewall rule.
         * @summary Delete a firewall rule
         * @param {RulesIdBody} body 
         * @param {C4f8RoOSFirewallRulesComponentsSchemasId} id 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async firewallRulesDeleteAFirewallRule(body: RulesIdBody, id: C4f8RoOSFirewallRulesComponentsSchemasId, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<C4f8RoOSFilterRulesSingleResponseDelete>>> {
            const localVarAxiosArgs = await FirewallRulesApiAxiosParamCreator(configuration).firewallRulesDeleteAFirewallRule(body, id, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes existing firewall rules.
         * @summary Delete firewall rules
         * @param {FirewallRulesBody} body 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async firewallRulesDeleteFirewallRules(body: FirewallRulesBody, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<C4f8RoOSFilterRulesResponseCollectionDelete>>> {
            const localVarAxiosArgs = await FirewallRulesApiAxiosParamCreator(configuration).firewallRulesDeleteFirewallRules(body, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetches the details of a firewall rule.
         * @summary Get a firewall rule
         * @param {C4f8RoOSFirewallRulesComponentsSchemasId} id 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {C4f8RoOSFirewallRulesComponentsSchemasId} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async firewallRulesGetAFirewallRule(id: C4f8RoOSFirewallRulesComponentsSchemasId, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, id?: C4f8RoOSFirewallRulesComponentsSchemasId, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<C4f8RoOSFilterRulesSingleResponse>>> {
            const localVarAxiosArgs = await FirewallRulesApiAxiosParamCreator(configuration).firewallRulesGetAFirewallRule(id, zoneIdentifier, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetches firewall rules in a zone. You can filter the results using several optional parameters.
         * @summary List firewall rules
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {string} [description] 
         * @param {string} [action] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {string} [id] 
         * @param {boolean} [paused] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async firewallRulesListFirewallRules(zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, description?: string, action?: string, page?: number, perPage?: number, id?: string, paused?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<C4f8RoOSFilterRulesResponseCollection>>> {
            const localVarAxiosArgs = await FirewallRulesApiAxiosParamCreator(configuration).firewallRulesListFirewallRules(zoneIdentifier, description, action, page, perPage, id, paused, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates an existing firewall rule.
         * @summary Update a firewall rule
         * @param {any} body 
         * @param {C4f8RoOSFirewallRulesComponentsSchemasId} id 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async firewallRulesUpdateAFirewallRule(body: any, id: C4f8RoOSFirewallRulesComponentsSchemasId, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<C4f8RoOSFilterRulesSingleResponse>>> {
            const localVarAxiosArgs = await FirewallRulesApiAxiosParamCreator(configuration).firewallRulesUpdateAFirewallRule(body, id, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates one or more existing firewall rules.
         * @summary Update firewall rules
         * @param {any} body 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async firewallRulesUpdateFirewallRules(body: any, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<C4f8RoOSFilterRulesResponseCollection>>> {
            const localVarAxiosArgs = await FirewallRulesApiAxiosParamCreator(configuration).firewallRulesUpdateFirewallRules(body, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates the priority of an existing firewall rule.
         * @summary Update priority of a firewall rule
         * @param {any} body 
         * @param {C4f8RoOSFirewallRulesComponentsSchemasId} id 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async firewallRulesUpdatePriorityOfAFirewallRule(body: any, id: C4f8RoOSFirewallRulesComponentsSchemasId, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<C4f8RoOSFilterRulesResponseCollection>>> {
            const localVarAxiosArgs = await FirewallRulesApiAxiosParamCreator(configuration).firewallRulesUpdatePriorityOfAFirewallRule(body, id, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates the priority of existing firewall rules.
         * @summary Update priority of firewall rules
         * @param {any} body 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async firewallRulesUpdatePriorityOfFirewallRules(body: any, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<C4f8RoOSFilterRulesResponseCollection>>> {
            const localVarAxiosArgs = await FirewallRulesApiAxiosParamCreator(configuration).firewallRulesUpdatePriorityOfFirewallRules(body, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * FirewallRulesApi - factory interface
 * @export
 */
export const FirewallRulesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create one or more firewall rules.
         * @summary Create firewall rules
         * @param {any} body 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async firewallRulesCreateFirewallRules(body: any, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<C4f8RoOSFilterRulesResponseCollection>> {
            return FirewallRulesApiFp(configuration).firewallRulesCreateFirewallRules(body, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes an existing firewall rule.
         * @summary Delete a firewall rule
         * @param {RulesIdBody} body 
         * @param {C4f8RoOSFirewallRulesComponentsSchemasId} id 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async firewallRulesDeleteAFirewallRule(body: RulesIdBody, id: C4f8RoOSFirewallRulesComponentsSchemasId, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<C4f8RoOSFilterRulesSingleResponseDelete>> {
            return FirewallRulesApiFp(configuration).firewallRulesDeleteAFirewallRule(body, id, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes existing firewall rules.
         * @summary Delete firewall rules
         * @param {FirewallRulesBody} body 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async firewallRulesDeleteFirewallRules(body: FirewallRulesBody, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<C4f8RoOSFilterRulesResponseCollectionDelete>> {
            return FirewallRulesApiFp(configuration).firewallRulesDeleteFirewallRules(body, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches the details of a firewall rule.
         * @summary Get a firewall rule
         * @param {C4f8RoOSFirewallRulesComponentsSchemasId} id 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {C4f8RoOSFirewallRulesComponentsSchemasId} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async firewallRulesGetAFirewallRule(id: C4f8RoOSFirewallRulesComponentsSchemasId, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, id?: C4f8RoOSFirewallRulesComponentsSchemasId, options?: AxiosRequestConfig): Promise<AxiosResponse<C4f8RoOSFilterRulesSingleResponse>> {
            return FirewallRulesApiFp(configuration).firewallRulesGetAFirewallRule(id, zoneIdentifier, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches firewall rules in a zone. You can filter the results using several optional parameters.
         * @summary List firewall rules
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {string} [description] 
         * @param {string} [action] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {string} [id] 
         * @param {boolean} [paused] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async firewallRulesListFirewallRules(zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, description?: string, action?: string, page?: number, perPage?: number, id?: string, paused?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<C4f8RoOSFilterRulesResponseCollection>> {
            return FirewallRulesApiFp(configuration).firewallRulesListFirewallRules(zoneIdentifier, description, action, page, perPage, id, paused, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an existing firewall rule.
         * @summary Update a firewall rule
         * @param {any} body 
         * @param {C4f8RoOSFirewallRulesComponentsSchemasId} id 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async firewallRulesUpdateAFirewallRule(body: any, id: C4f8RoOSFirewallRulesComponentsSchemasId, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<C4f8RoOSFilterRulesSingleResponse>> {
            return FirewallRulesApiFp(configuration).firewallRulesUpdateAFirewallRule(body, id, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates one or more existing firewall rules.
         * @summary Update firewall rules
         * @param {any} body 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async firewallRulesUpdateFirewallRules(body: any, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<C4f8RoOSFilterRulesResponseCollection>> {
            return FirewallRulesApiFp(configuration).firewallRulesUpdateFirewallRules(body, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the priority of an existing firewall rule.
         * @summary Update priority of a firewall rule
         * @param {any} body 
         * @param {C4f8RoOSFirewallRulesComponentsSchemasId} id 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async firewallRulesUpdatePriorityOfAFirewallRule(body: any, id: C4f8RoOSFirewallRulesComponentsSchemasId, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<C4f8RoOSFilterRulesResponseCollection>> {
            return FirewallRulesApiFp(configuration).firewallRulesUpdatePriorityOfAFirewallRule(body, id, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the priority of existing firewall rules.
         * @summary Update priority of firewall rules
         * @param {any} body 
         * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async firewallRulesUpdatePriorityOfFirewallRules(body: any, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<C4f8RoOSFilterRulesResponseCollection>> {
            return FirewallRulesApiFp(configuration).firewallRulesUpdatePriorityOfFirewallRules(body, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FirewallRulesApi - object-oriented interface
 * @export
 * @class FirewallRulesApi
 * @extends {BaseAPI}
 */
export class FirewallRulesApi extends BaseAPI {
    /**
     * Create one or more firewall rules.
     * @summary Create firewall rules
     * @param {any} body 
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FirewallRulesApi
     */
    public async firewallRulesCreateFirewallRules(body: any, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<C4f8RoOSFilterRulesResponseCollection>> {
        return FirewallRulesApiFp(this.configuration).firewallRulesCreateFirewallRules(body, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes an existing firewall rule.
     * @summary Delete a firewall rule
     * @param {RulesIdBody} body 
     * @param {C4f8RoOSFirewallRulesComponentsSchemasId} id 
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FirewallRulesApi
     */
    public async firewallRulesDeleteAFirewallRule(body: RulesIdBody, id: C4f8RoOSFirewallRulesComponentsSchemasId, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<C4f8RoOSFilterRulesSingleResponseDelete>> {
        return FirewallRulesApiFp(this.configuration).firewallRulesDeleteAFirewallRule(body, id, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes existing firewall rules.
     * @summary Delete firewall rules
     * @param {FirewallRulesBody} body 
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FirewallRulesApi
     */
    public async firewallRulesDeleteFirewallRules(body: FirewallRulesBody, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<C4f8RoOSFilterRulesResponseCollectionDelete>> {
        return FirewallRulesApiFp(this.configuration).firewallRulesDeleteFirewallRules(body, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches the details of a firewall rule.
     * @summary Get a firewall rule
     * @param {C4f8RoOSFirewallRulesComponentsSchemasId} id 
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
     * @param {C4f8RoOSFirewallRulesComponentsSchemasId} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FirewallRulesApi
     */
    public async firewallRulesGetAFirewallRule(id: C4f8RoOSFirewallRulesComponentsSchemasId, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, id?: C4f8RoOSFirewallRulesComponentsSchemasId, options?: AxiosRequestConfig) : Promise<AxiosResponse<C4f8RoOSFilterRulesSingleResponse>> {
        return FirewallRulesApiFp(this.configuration).firewallRulesGetAFirewallRule(id, zoneIdentifier, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches firewall rules in a zone. You can filter the results using several optional parameters.
     * @summary List firewall rules
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
     * @param {string} [description] 
     * @param {string} [action] 
     * @param {number} [page] 
     * @param {number} [perPage] 
     * @param {string} [id] 
     * @param {boolean} [paused] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FirewallRulesApi
     */
    public async firewallRulesListFirewallRules(zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, description?: string, action?: string, page?: number, perPage?: number, id?: string, paused?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<C4f8RoOSFilterRulesResponseCollection>> {
        return FirewallRulesApiFp(this.configuration).firewallRulesListFirewallRules(zoneIdentifier, description, action, page, perPage, id, paused, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates an existing firewall rule.
     * @summary Update a firewall rule
     * @param {any} body 
     * @param {C4f8RoOSFirewallRulesComponentsSchemasId} id 
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FirewallRulesApi
     */
    public async firewallRulesUpdateAFirewallRule(body: any, id: C4f8RoOSFirewallRulesComponentsSchemasId, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<C4f8RoOSFilterRulesSingleResponse>> {
        return FirewallRulesApiFp(this.configuration).firewallRulesUpdateAFirewallRule(body, id, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates one or more existing firewall rules.
     * @summary Update firewall rules
     * @param {any} body 
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FirewallRulesApi
     */
    public async firewallRulesUpdateFirewallRules(body: any, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<C4f8RoOSFilterRulesResponseCollection>> {
        return FirewallRulesApiFp(this.configuration).firewallRulesUpdateFirewallRules(body, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates the priority of an existing firewall rule.
     * @summary Update priority of a firewall rule
     * @param {any} body 
     * @param {C4f8RoOSFirewallRulesComponentsSchemasId} id 
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FirewallRulesApi
     */
    public async firewallRulesUpdatePriorityOfAFirewallRule(body: any, id: C4f8RoOSFirewallRulesComponentsSchemasId, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<C4f8RoOSFilterRulesResponseCollection>> {
        return FirewallRulesApiFp(this.configuration).firewallRulesUpdatePriorityOfAFirewallRule(body, id, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates the priority of existing firewall rules.
     * @summary Update priority of firewall rules
     * @param {any} body 
     * @param {C4f8RoOSCommonComponentsSchemasIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FirewallRulesApi
     */
    public async firewallRulesUpdatePriorityOfFirewallRules(body: any, zoneIdentifier: C4f8RoOSCommonComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<C4f8RoOSFilterRulesResponseCollection>> {
        return FirewallRulesApiFp(this.configuration).firewallRulesUpdatePriorityOfFirewallRules(body, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
}
