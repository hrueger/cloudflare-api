/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse200196 } from '../models';
import { InlineResponse200197 } from '../models';
import { InlineResponse200198 } from '../models';
import { InlineResponse4XX370 } from '../models';
import { Model4tKvLQ4cSchemasIdentifier } from '../models';
/**
 * ZoneHoldsApi - axios parameter creator
 * @export
 */
export const ZoneHoldsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Stop enforcement of a zone hold on the zone, permanently or temporarily, allowing the creation and activation of zones with this zone's hostname.
         * @summary Remove Zone Hold
         * @param {Model4tKvLQ4cSchemasIdentifier} zoneId Zone ID
         * @param {string} [holdAfter] If &#x60;hold_after&#x60; is provided, the hold will be temporarily disabled, then automatically re-enabled by the system at the time specified in this RFC3339-formatted timestamp. Otherwise, the hold will be disabled indefinitely.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zones0HoldDelete: async (zoneId: Model4tKvLQ4cSchemasIdentifier, holdAfter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneId' is not null or undefined
            if (zoneId === null || zoneId === undefined) {
                throw new RequiredError('zoneId','Required parameter zoneId was null or undefined when calling zones0HoldDelete.');
            }
            const localVarPath = `/zones/{zone_id}/hold`
                .replace(`{${"zone_id"}}`, encodeURIComponent(String(zoneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            if (holdAfter !== undefined) {
                localVarQueryParameter['hold_after'] = holdAfter;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve whether the zone is subject to a zone hold, and metadata about the hold.
         * @summary Get Zone Hold
         * @param {Model4tKvLQ4cSchemasIdentifier} zoneId Zone ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zones0HoldGet: async (zoneId: Model4tKvLQ4cSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneId' is not null or undefined
            if (zoneId === null || zoneId === undefined) {
                throw new RequiredError('zoneId','Required parameter zoneId was null or undefined when calling zones0HoldGet.');
            }
            const localVarPath = `/zones/{zone_id}/hold`
                .replace(`{${"zone_id"}}`, encodeURIComponent(String(zoneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Enforce a zone hold on the zone, blocking the creation and activation of zones with this zone's hostname.
         * @summary Create Zone Hold
         * @param {Model4tKvLQ4cSchemasIdentifier} zoneId Zone ID
         * @param {boolean} [includeSubdomains] If provided, the zone hold will extend to block any subdomain of the given zone, as well as SSL4SaaS Custom Hostnames. For example, a zone hold on a zone with the hostname &#x27;example.com&#x27; and include_subdomains&#x3D;true will block &#x27;example.com&#x27;, &#x27;staging.example.com&#x27;, &#x27;api.staging.example.com&#x27;, etc.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zones0HoldPost: async (zoneId: Model4tKvLQ4cSchemasIdentifier, includeSubdomains?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneId' is not null or undefined
            if (zoneId === null || zoneId === undefined) {
                throw new RequiredError('zoneId','Required parameter zoneId was null or undefined when calling zones0HoldPost.');
            }
            const localVarPath = `/zones/{zone_id}/hold`
                .replace(`{${"zone_id"}}`, encodeURIComponent(String(zoneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            if (includeSubdomains !== undefined) {
                localVarQueryParameter['include_subdomains'] = includeSubdomains;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ZoneHoldsApi - functional programming interface
 * @export
 */
export const ZoneHoldsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Stop enforcement of a zone hold on the zone, permanently or temporarily, allowing the creation and activation of zones with this zone's hostname.
         * @summary Remove Zone Hold
         * @param {Model4tKvLQ4cSchemasIdentifier} zoneId Zone ID
         * @param {string} [holdAfter] If &#x60;hold_after&#x60; is provided, the hold will be temporarily disabled, then automatically re-enabled by the system at the time specified in this RFC3339-formatted timestamp. Otherwise, the hold will be disabled indefinitely.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zones0HoldDelete(zoneId: Model4tKvLQ4cSchemasIdentifier, holdAfter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200198>>> {
            const localVarAxiosArgs = await ZoneHoldsApiAxiosParamCreator(configuration).zones0HoldDelete(zoneId, holdAfter, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve whether the zone is subject to a zone hold, and metadata about the hold.
         * @summary Get Zone Hold
         * @param {Model4tKvLQ4cSchemasIdentifier} zoneId Zone ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zones0HoldGet(zoneId: Model4tKvLQ4cSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200196>>> {
            const localVarAxiosArgs = await ZoneHoldsApiAxiosParamCreator(configuration).zones0HoldGet(zoneId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Enforce a zone hold on the zone, blocking the creation and activation of zones with this zone's hostname.
         * @summary Create Zone Hold
         * @param {Model4tKvLQ4cSchemasIdentifier} zoneId Zone ID
         * @param {boolean} [includeSubdomains] If provided, the zone hold will extend to block any subdomain of the given zone, as well as SSL4SaaS Custom Hostnames. For example, a zone hold on a zone with the hostname &#x27;example.com&#x27; and include_subdomains&#x3D;true will block &#x27;example.com&#x27;, &#x27;staging.example.com&#x27;, &#x27;api.staging.example.com&#x27;, etc.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zones0HoldPost(zoneId: Model4tKvLQ4cSchemasIdentifier, includeSubdomains?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200197>>> {
            const localVarAxiosArgs = await ZoneHoldsApiAxiosParamCreator(configuration).zones0HoldPost(zoneId, includeSubdomains, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ZoneHoldsApi - factory interface
 * @export
 */
export const ZoneHoldsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Stop enforcement of a zone hold on the zone, permanently or temporarily, allowing the creation and activation of zones with this zone's hostname.
         * @summary Remove Zone Hold
         * @param {Model4tKvLQ4cSchemasIdentifier} zoneId Zone ID
         * @param {string} [holdAfter] If &#x60;hold_after&#x60; is provided, the hold will be temporarily disabled, then automatically re-enabled by the system at the time specified in this RFC3339-formatted timestamp. Otherwise, the hold will be disabled indefinitely.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zones0HoldDelete(zoneId: Model4tKvLQ4cSchemasIdentifier, holdAfter?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200198>> {
            return ZoneHoldsApiFp(configuration).zones0HoldDelete(zoneId, holdAfter, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve whether the zone is subject to a zone hold, and metadata about the hold.
         * @summary Get Zone Hold
         * @param {Model4tKvLQ4cSchemasIdentifier} zoneId Zone ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zones0HoldGet(zoneId: Model4tKvLQ4cSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200196>> {
            return ZoneHoldsApiFp(configuration).zones0HoldGet(zoneId, options).then((request) => request(axios, basePath));
        },
        /**
         * Enforce a zone hold on the zone, blocking the creation and activation of zones with this zone's hostname.
         * @summary Create Zone Hold
         * @param {Model4tKvLQ4cSchemasIdentifier} zoneId Zone ID
         * @param {boolean} [includeSubdomains] If provided, the zone hold will extend to block any subdomain of the given zone, as well as SSL4SaaS Custom Hostnames. For example, a zone hold on a zone with the hostname &#x27;example.com&#x27; and include_subdomains&#x3D;true will block &#x27;example.com&#x27;, &#x27;staging.example.com&#x27;, &#x27;api.staging.example.com&#x27;, etc.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zones0HoldPost(zoneId: Model4tKvLQ4cSchemasIdentifier, includeSubdomains?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200197>> {
            return ZoneHoldsApiFp(configuration).zones0HoldPost(zoneId, includeSubdomains, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ZoneHoldsApi - object-oriented interface
 * @export
 * @class ZoneHoldsApi
 * @extends {BaseAPI}
 */
export class ZoneHoldsApi extends BaseAPI {
    /**
     * Stop enforcement of a zone hold on the zone, permanently or temporarily, allowing the creation and activation of zones with this zone's hostname.
     * @summary Remove Zone Hold
     * @param {Model4tKvLQ4cSchemasIdentifier} zoneId Zone ID
     * @param {string} [holdAfter] If &#x60;hold_after&#x60; is provided, the hold will be temporarily disabled, then automatically re-enabled by the system at the time specified in this RFC3339-formatted timestamp. Otherwise, the hold will be disabled indefinitely.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZoneHoldsApi
     */
    public async zones0HoldDelete(zoneId: Model4tKvLQ4cSchemasIdentifier, holdAfter?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200198>> {
        return ZoneHoldsApiFp(this.configuration).zones0HoldDelete(zoneId, holdAfter, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve whether the zone is subject to a zone hold, and metadata about the hold.
     * @summary Get Zone Hold
     * @param {Model4tKvLQ4cSchemasIdentifier} zoneId Zone ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZoneHoldsApi
     */
    public async zones0HoldGet(zoneId: Model4tKvLQ4cSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200196>> {
        return ZoneHoldsApiFp(this.configuration).zones0HoldGet(zoneId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Enforce a zone hold on the zone, blocking the creation and activation of zones with this zone's hostname.
     * @summary Create Zone Hold
     * @param {Model4tKvLQ4cSchemasIdentifier} zoneId Zone ID
     * @param {boolean} [includeSubdomains] If provided, the zone hold will extend to block any subdomain of the given zone, as well as SSL4SaaS Custom Hostnames. For example, a zone hold on a zone with the hostname &#x27;example.com&#x27; and include_subdomains&#x3D;true will block &#x27;example.com&#x27;, &#x27;staging.example.com&#x27;, &#x27;api.staging.example.com&#x27;, etc.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZoneHoldsApi
     */
    public async zones0HoldPost(zoneId: Model4tKvLQ4cSchemasIdentifier, includeSubdomains?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200197>> {
        return ZoneHoldsApiFp(this.configuration).zones0HoldPost(zoneId, includeSubdomains, options).then((request) => request(this.axios, this.basePath));
    }
}
