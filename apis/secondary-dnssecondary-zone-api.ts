/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse4XX277 } from '../models';
import { InlineResponse4XX281 } from '../models';
import { InlineResponse4XX282 } from '../models';
import { Model2UOufITZDnsSecondarySecondaryZone } from '../models';
import { Model2UOufITZForceResponse } from '../models';
import { Model2UOufITZIdResponse } from '../models';
import { Model2UOufITZIdentifier } from '../models';
import { Model2UOufITZSingleResponseIncoming } from '../models';
/**
 * SecondaryDNSSecondaryZoneApi - axios parameter creator
 * @export
 */
export const SecondaryDNSSecondaryZoneApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create secondary zone configuration for incoming zone transfers.
         * @summary Create Secondary Zone Configuration
         * @param {Model2UOufITZDnsSecondarySecondaryZone} body 
         * @param {Model2UOufITZIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secondaryDnsSecondaryZoneCreateSecondaryZoneConfiguration: async (body: Model2UOufITZDnsSecondarySecondaryZone, zoneIdentifier: Model2UOufITZIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling secondaryDnsSecondaryZoneCreateSecondaryZoneConfiguration.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling secondaryDnsSecondaryZoneCreateSecondaryZoneConfiguration.');
            }
            const localVarPath = `/zones/{zone_identifier}/secondary_dns/incoming`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete secondary zone configuration for incoming zone transfers.
         * @summary Delete Secondary Zone Configuration
         * @param {Model2UOufITZIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secondaryDnsSecondaryZoneDeleteSecondaryZoneConfiguration: async (zoneIdentifier: Model2UOufITZIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling secondaryDnsSecondaryZoneDeleteSecondaryZoneConfiguration.');
            }
            const localVarPath = `/zones/{zone_identifier}/secondary_dns/incoming`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Sends AXFR zone transfer request to primary nameserver(s).
         * @summary Force AXFR
         * @param {Model2UOufITZIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secondaryDnsSecondaryZoneForceAxfr: async (zoneIdentifier: Model2UOufITZIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling secondaryDnsSecondaryZoneForceAxfr.');
            }
            const localVarPath = `/zones/{zone_identifier}/secondary_dns/force_axfr`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get secondary zone configuration for incoming zone transfers.
         * @summary Secondary Zone Configuration Details
         * @param {Model2UOufITZIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secondaryDnsSecondaryZoneSecondaryZoneConfigurationDetails: async (zoneIdentifier: Model2UOufITZIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling secondaryDnsSecondaryZoneSecondaryZoneConfigurationDetails.');
            }
            const localVarPath = `/zones/{zone_identifier}/secondary_dns/incoming`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update secondary zone configuration for incoming zone transfers.
         * @summary Update Secondary Zone Configuration
         * @param {Model2UOufITZDnsSecondarySecondaryZone} body 
         * @param {Model2UOufITZIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secondaryDnsSecondaryZoneUpdateSecondaryZoneConfiguration: async (body: Model2UOufITZDnsSecondarySecondaryZone, zoneIdentifier: Model2UOufITZIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling secondaryDnsSecondaryZoneUpdateSecondaryZoneConfiguration.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling secondaryDnsSecondaryZoneUpdateSecondaryZoneConfiguration.');
            }
            const localVarPath = `/zones/{zone_identifier}/secondary_dns/incoming`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SecondaryDNSSecondaryZoneApi - functional programming interface
 * @export
 */
export const SecondaryDNSSecondaryZoneApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create secondary zone configuration for incoming zone transfers.
         * @summary Create Secondary Zone Configuration
         * @param {Model2UOufITZDnsSecondarySecondaryZone} body 
         * @param {Model2UOufITZIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secondaryDnsSecondaryZoneCreateSecondaryZoneConfiguration(body: Model2UOufITZDnsSecondarySecondaryZone, zoneIdentifier: Model2UOufITZIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model2UOufITZSingleResponseIncoming>>> {
            const localVarAxiosArgs = await SecondaryDNSSecondaryZoneApiAxiosParamCreator(configuration).secondaryDnsSecondaryZoneCreateSecondaryZoneConfiguration(body, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete secondary zone configuration for incoming zone transfers.
         * @summary Delete Secondary Zone Configuration
         * @param {Model2UOufITZIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secondaryDnsSecondaryZoneDeleteSecondaryZoneConfiguration(zoneIdentifier: Model2UOufITZIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model2UOufITZIdResponse>>> {
            const localVarAxiosArgs = await SecondaryDNSSecondaryZoneApiAxiosParamCreator(configuration).secondaryDnsSecondaryZoneDeleteSecondaryZoneConfiguration(zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sends AXFR zone transfer request to primary nameserver(s).
         * @summary Force AXFR
         * @param {Model2UOufITZIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secondaryDnsSecondaryZoneForceAxfr(zoneIdentifier: Model2UOufITZIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model2UOufITZForceResponse>>> {
            const localVarAxiosArgs = await SecondaryDNSSecondaryZoneApiAxiosParamCreator(configuration).secondaryDnsSecondaryZoneForceAxfr(zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get secondary zone configuration for incoming zone transfers.
         * @summary Secondary Zone Configuration Details
         * @param {Model2UOufITZIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secondaryDnsSecondaryZoneSecondaryZoneConfigurationDetails(zoneIdentifier: Model2UOufITZIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model2UOufITZSingleResponseIncoming>>> {
            const localVarAxiosArgs = await SecondaryDNSSecondaryZoneApiAxiosParamCreator(configuration).secondaryDnsSecondaryZoneSecondaryZoneConfigurationDetails(zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update secondary zone configuration for incoming zone transfers.
         * @summary Update Secondary Zone Configuration
         * @param {Model2UOufITZDnsSecondarySecondaryZone} body 
         * @param {Model2UOufITZIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secondaryDnsSecondaryZoneUpdateSecondaryZoneConfiguration(body: Model2UOufITZDnsSecondarySecondaryZone, zoneIdentifier: Model2UOufITZIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model2UOufITZSingleResponseIncoming>>> {
            const localVarAxiosArgs = await SecondaryDNSSecondaryZoneApiAxiosParamCreator(configuration).secondaryDnsSecondaryZoneUpdateSecondaryZoneConfiguration(body, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SecondaryDNSSecondaryZoneApi - factory interface
 * @export
 */
export const SecondaryDNSSecondaryZoneApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create secondary zone configuration for incoming zone transfers.
         * @summary Create Secondary Zone Configuration
         * @param {Model2UOufITZDnsSecondarySecondaryZone} body 
         * @param {Model2UOufITZIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secondaryDnsSecondaryZoneCreateSecondaryZoneConfiguration(body: Model2UOufITZDnsSecondarySecondaryZone, zoneIdentifier: Model2UOufITZIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model2UOufITZSingleResponseIncoming>> {
            return SecondaryDNSSecondaryZoneApiFp(configuration).secondaryDnsSecondaryZoneCreateSecondaryZoneConfiguration(body, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete secondary zone configuration for incoming zone transfers.
         * @summary Delete Secondary Zone Configuration
         * @param {Model2UOufITZIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secondaryDnsSecondaryZoneDeleteSecondaryZoneConfiguration(zoneIdentifier: Model2UOufITZIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model2UOufITZIdResponse>> {
            return SecondaryDNSSecondaryZoneApiFp(configuration).secondaryDnsSecondaryZoneDeleteSecondaryZoneConfiguration(zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Sends AXFR zone transfer request to primary nameserver(s).
         * @summary Force AXFR
         * @param {Model2UOufITZIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secondaryDnsSecondaryZoneForceAxfr(zoneIdentifier: Model2UOufITZIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model2UOufITZForceResponse>> {
            return SecondaryDNSSecondaryZoneApiFp(configuration).secondaryDnsSecondaryZoneForceAxfr(zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Get secondary zone configuration for incoming zone transfers.
         * @summary Secondary Zone Configuration Details
         * @param {Model2UOufITZIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secondaryDnsSecondaryZoneSecondaryZoneConfigurationDetails(zoneIdentifier: Model2UOufITZIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model2UOufITZSingleResponseIncoming>> {
            return SecondaryDNSSecondaryZoneApiFp(configuration).secondaryDnsSecondaryZoneSecondaryZoneConfigurationDetails(zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Update secondary zone configuration for incoming zone transfers.
         * @summary Update Secondary Zone Configuration
         * @param {Model2UOufITZDnsSecondarySecondaryZone} body 
         * @param {Model2UOufITZIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secondaryDnsSecondaryZoneUpdateSecondaryZoneConfiguration(body: Model2UOufITZDnsSecondarySecondaryZone, zoneIdentifier: Model2UOufITZIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model2UOufITZSingleResponseIncoming>> {
            return SecondaryDNSSecondaryZoneApiFp(configuration).secondaryDnsSecondaryZoneUpdateSecondaryZoneConfiguration(body, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SecondaryDNSSecondaryZoneApi - object-oriented interface
 * @export
 * @class SecondaryDNSSecondaryZoneApi
 * @extends {BaseAPI}
 */
export class SecondaryDNSSecondaryZoneApi extends BaseAPI {
    /**
     * Create secondary zone configuration for incoming zone transfers.
     * @summary Create Secondary Zone Configuration
     * @param {Model2UOufITZDnsSecondarySecondaryZone} body 
     * @param {Model2UOufITZIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecondaryDNSSecondaryZoneApi
     */
    public async secondaryDnsSecondaryZoneCreateSecondaryZoneConfiguration(body: Model2UOufITZDnsSecondarySecondaryZone, zoneIdentifier: Model2UOufITZIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model2UOufITZSingleResponseIncoming>> {
        return SecondaryDNSSecondaryZoneApiFp(this.configuration).secondaryDnsSecondaryZoneCreateSecondaryZoneConfiguration(body, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete secondary zone configuration for incoming zone transfers.
     * @summary Delete Secondary Zone Configuration
     * @param {Model2UOufITZIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecondaryDNSSecondaryZoneApi
     */
    public async secondaryDnsSecondaryZoneDeleteSecondaryZoneConfiguration(zoneIdentifier: Model2UOufITZIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model2UOufITZIdResponse>> {
        return SecondaryDNSSecondaryZoneApiFp(this.configuration).secondaryDnsSecondaryZoneDeleteSecondaryZoneConfiguration(zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Sends AXFR zone transfer request to primary nameserver(s).
     * @summary Force AXFR
     * @param {Model2UOufITZIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecondaryDNSSecondaryZoneApi
     */
    public async secondaryDnsSecondaryZoneForceAxfr(zoneIdentifier: Model2UOufITZIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model2UOufITZForceResponse>> {
        return SecondaryDNSSecondaryZoneApiFp(this.configuration).secondaryDnsSecondaryZoneForceAxfr(zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get secondary zone configuration for incoming zone transfers.
     * @summary Secondary Zone Configuration Details
     * @param {Model2UOufITZIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecondaryDNSSecondaryZoneApi
     */
    public async secondaryDnsSecondaryZoneSecondaryZoneConfigurationDetails(zoneIdentifier: Model2UOufITZIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model2UOufITZSingleResponseIncoming>> {
        return SecondaryDNSSecondaryZoneApiFp(this.configuration).secondaryDnsSecondaryZoneSecondaryZoneConfigurationDetails(zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update secondary zone configuration for incoming zone transfers.
     * @summary Update Secondary Zone Configuration
     * @param {Model2UOufITZDnsSecondarySecondaryZone} body 
     * @param {Model2UOufITZIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecondaryDNSSecondaryZoneApi
     */
    public async secondaryDnsSecondaryZoneUpdateSecondaryZoneConfiguration(body: Model2UOufITZDnsSecondarySecondaryZone, zoneIdentifier: Model2UOufITZIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model2UOufITZSingleResponseIncoming>> {
        return SecondaryDNSSecondaryZoneApiFp(this.configuration).secondaryDnsSecondaryZoneUpdateSecondaryZoneConfiguration(body, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
}
