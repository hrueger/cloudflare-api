/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { GatewayLocationsBody } from '../models';
import { InlineResponse4XX342 } from '../models';
import { InlineResponse4XX343 } from '../models';
import { InlineResponse4XX344 } from '../models';
import { Ir4bTFI2EmptyResponse } from '../models';
import { Ir4bTFI2Identifier } from '../models';
import { Ir4bTFI2SchemasResponseCollection } from '../models';
import { Ir4bTFI2SchemasSingleResponse } from '../models';
import { Ir4bTFI2SchemasUuid } from '../models';
import { LocationsUuidBody } from '../models';
/**
 * ZeroTrustGatewayLocationsApi - axios parameter creator
 * @export
 */
export const ZeroTrustGatewayLocationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new Zero Trust Gateway location.
         * @summary Create a Zero Trust Gateway location
         * @param {GatewayLocationsBody} body 
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zeroTrustGatewayLocationsCreateZeroTrustGatewayLocation: async (body: GatewayLocationsBody, identifier: Ir4bTFI2Identifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling zeroTrustGatewayLocationsCreateZeroTrustGatewayLocation.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling zeroTrustGatewayLocationsCreateZeroTrustGatewayLocation.');
            }
            const localVarPath = `/accounts/{identifier}/gateway/locations`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a configured Zero Trust Gateway location.
         * @summary Delete a Zero Trust Gateway location
         * @param {Ir4bTFI2SchemasUuid} uuid 
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zeroTrustGatewayLocationsDeleteZeroTrustGatewayLocation: async (uuid: Ir4bTFI2SchemasUuid, identifier: Ir4bTFI2Identifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling zeroTrustGatewayLocationsDeleteZeroTrustGatewayLocation.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling zeroTrustGatewayLocationsDeleteZeroTrustGatewayLocation.');
            }
            const localVarPath = `/accounts/{identifier}/gateway/locations/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)))
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches Zero Trust Gateway locations for an account.
         * @summary List Zero Trust Gateway locations
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zeroTrustGatewayLocationsListZeroTrustGatewayLocations: async (identifier: Ir4bTFI2Identifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling zeroTrustGatewayLocationsListZeroTrustGatewayLocations.');
            }
            const localVarPath = `/accounts/{identifier}/gateway/locations`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a configured Zero Trust Gateway location.
         * @summary Update a Zero Trust Gateway location
         * @param {LocationsUuidBody} body 
         * @param {Ir4bTFI2SchemasUuid} uuid 
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zeroTrustGatewayLocationsUpdateZeroTrustGatewayLocation: async (body: LocationsUuidBody, uuid: Ir4bTFI2SchemasUuid, identifier: Ir4bTFI2Identifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling zeroTrustGatewayLocationsUpdateZeroTrustGatewayLocation.');
            }
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling zeroTrustGatewayLocationsUpdateZeroTrustGatewayLocation.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling zeroTrustGatewayLocationsUpdateZeroTrustGatewayLocation.');
            }
            const localVarPath = `/accounts/{identifier}/gateway/locations/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)))
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches a single Zero Trust Gateway location.
         * @summary Get Zero Trust Gateway location details
         * @param {Ir4bTFI2SchemasUuid} uuid 
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zeroTrustGatewayLocationsZeroTrustGatewayLocationDetails: async (uuid: Ir4bTFI2SchemasUuid, identifier: Ir4bTFI2Identifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling zeroTrustGatewayLocationsZeroTrustGatewayLocationDetails.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling zeroTrustGatewayLocationsZeroTrustGatewayLocationDetails.');
            }
            const localVarPath = `/accounts/{identifier}/gateway/locations/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)))
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ZeroTrustGatewayLocationsApi - functional programming interface
 * @export
 */
export const ZeroTrustGatewayLocationsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates a new Zero Trust Gateway location.
         * @summary Create a Zero Trust Gateway location
         * @param {GatewayLocationsBody} body 
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zeroTrustGatewayLocationsCreateZeroTrustGatewayLocation(body: GatewayLocationsBody, identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Ir4bTFI2SchemasSingleResponse>>> {
            const localVarAxiosArgs = await ZeroTrustGatewayLocationsApiAxiosParamCreator(configuration).zeroTrustGatewayLocationsCreateZeroTrustGatewayLocation(body, identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes a configured Zero Trust Gateway location.
         * @summary Delete a Zero Trust Gateway location
         * @param {Ir4bTFI2SchemasUuid} uuid 
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zeroTrustGatewayLocationsDeleteZeroTrustGatewayLocation(uuid: Ir4bTFI2SchemasUuid, identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Ir4bTFI2EmptyResponse>>> {
            const localVarAxiosArgs = await ZeroTrustGatewayLocationsApiAxiosParamCreator(configuration).zeroTrustGatewayLocationsDeleteZeroTrustGatewayLocation(uuid, identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetches Zero Trust Gateway locations for an account.
         * @summary List Zero Trust Gateway locations
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zeroTrustGatewayLocationsListZeroTrustGatewayLocations(identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Ir4bTFI2SchemasResponseCollection>>> {
            const localVarAxiosArgs = await ZeroTrustGatewayLocationsApiAxiosParamCreator(configuration).zeroTrustGatewayLocationsListZeroTrustGatewayLocations(identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates a configured Zero Trust Gateway location.
         * @summary Update a Zero Trust Gateway location
         * @param {LocationsUuidBody} body 
         * @param {Ir4bTFI2SchemasUuid} uuid 
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zeroTrustGatewayLocationsUpdateZeroTrustGatewayLocation(body: LocationsUuidBody, uuid: Ir4bTFI2SchemasUuid, identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Ir4bTFI2SchemasSingleResponse>>> {
            const localVarAxiosArgs = await ZeroTrustGatewayLocationsApiAxiosParamCreator(configuration).zeroTrustGatewayLocationsUpdateZeroTrustGatewayLocation(body, uuid, identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetches a single Zero Trust Gateway location.
         * @summary Get Zero Trust Gateway location details
         * @param {Ir4bTFI2SchemasUuid} uuid 
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zeroTrustGatewayLocationsZeroTrustGatewayLocationDetails(uuid: Ir4bTFI2SchemasUuid, identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Ir4bTFI2SchemasSingleResponse>>> {
            const localVarAxiosArgs = await ZeroTrustGatewayLocationsApiAxiosParamCreator(configuration).zeroTrustGatewayLocationsZeroTrustGatewayLocationDetails(uuid, identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ZeroTrustGatewayLocationsApi - factory interface
 * @export
 */
export const ZeroTrustGatewayLocationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Creates a new Zero Trust Gateway location.
         * @summary Create a Zero Trust Gateway location
         * @param {GatewayLocationsBody} body 
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zeroTrustGatewayLocationsCreateZeroTrustGatewayLocation(body: GatewayLocationsBody, identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Ir4bTFI2SchemasSingleResponse>> {
            return ZeroTrustGatewayLocationsApiFp(configuration).zeroTrustGatewayLocationsCreateZeroTrustGatewayLocation(body, identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a configured Zero Trust Gateway location.
         * @summary Delete a Zero Trust Gateway location
         * @param {Ir4bTFI2SchemasUuid} uuid 
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zeroTrustGatewayLocationsDeleteZeroTrustGatewayLocation(uuid: Ir4bTFI2SchemasUuid, identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Ir4bTFI2EmptyResponse>> {
            return ZeroTrustGatewayLocationsApiFp(configuration).zeroTrustGatewayLocationsDeleteZeroTrustGatewayLocation(uuid, identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches Zero Trust Gateway locations for an account.
         * @summary List Zero Trust Gateway locations
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zeroTrustGatewayLocationsListZeroTrustGatewayLocations(identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Ir4bTFI2SchemasResponseCollection>> {
            return ZeroTrustGatewayLocationsApiFp(configuration).zeroTrustGatewayLocationsListZeroTrustGatewayLocations(identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a configured Zero Trust Gateway location.
         * @summary Update a Zero Trust Gateway location
         * @param {LocationsUuidBody} body 
         * @param {Ir4bTFI2SchemasUuid} uuid 
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zeroTrustGatewayLocationsUpdateZeroTrustGatewayLocation(body: LocationsUuidBody, uuid: Ir4bTFI2SchemasUuid, identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Ir4bTFI2SchemasSingleResponse>> {
            return ZeroTrustGatewayLocationsApiFp(configuration).zeroTrustGatewayLocationsUpdateZeroTrustGatewayLocation(body, uuid, identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches a single Zero Trust Gateway location.
         * @summary Get Zero Trust Gateway location details
         * @param {Ir4bTFI2SchemasUuid} uuid 
         * @param {Ir4bTFI2Identifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zeroTrustGatewayLocationsZeroTrustGatewayLocationDetails(uuid: Ir4bTFI2SchemasUuid, identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Ir4bTFI2SchemasSingleResponse>> {
            return ZeroTrustGatewayLocationsApiFp(configuration).zeroTrustGatewayLocationsZeroTrustGatewayLocationDetails(uuid, identifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ZeroTrustGatewayLocationsApi - object-oriented interface
 * @export
 * @class ZeroTrustGatewayLocationsApi
 * @extends {BaseAPI}
 */
export class ZeroTrustGatewayLocationsApi extends BaseAPI {
    /**
     * Creates a new Zero Trust Gateway location.
     * @summary Create a Zero Trust Gateway location
     * @param {GatewayLocationsBody} body 
     * @param {Ir4bTFI2Identifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZeroTrustGatewayLocationsApi
     */
    public async zeroTrustGatewayLocationsCreateZeroTrustGatewayLocation(body: GatewayLocationsBody, identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Ir4bTFI2SchemasSingleResponse>> {
        return ZeroTrustGatewayLocationsApiFp(this.configuration).zeroTrustGatewayLocationsCreateZeroTrustGatewayLocation(body, identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes a configured Zero Trust Gateway location.
     * @summary Delete a Zero Trust Gateway location
     * @param {Ir4bTFI2SchemasUuid} uuid 
     * @param {Ir4bTFI2Identifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZeroTrustGatewayLocationsApi
     */
    public async zeroTrustGatewayLocationsDeleteZeroTrustGatewayLocation(uuid: Ir4bTFI2SchemasUuid, identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Ir4bTFI2EmptyResponse>> {
        return ZeroTrustGatewayLocationsApiFp(this.configuration).zeroTrustGatewayLocationsDeleteZeroTrustGatewayLocation(uuid, identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches Zero Trust Gateway locations for an account.
     * @summary List Zero Trust Gateway locations
     * @param {Ir4bTFI2Identifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZeroTrustGatewayLocationsApi
     */
    public async zeroTrustGatewayLocationsListZeroTrustGatewayLocations(identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Ir4bTFI2SchemasResponseCollection>> {
        return ZeroTrustGatewayLocationsApiFp(this.configuration).zeroTrustGatewayLocationsListZeroTrustGatewayLocations(identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates a configured Zero Trust Gateway location.
     * @summary Update a Zero Trust Gateway location
     * @param {LocationsUuidBody} body 
     * @param {Ir4bTFI2SchemasUuid} uuid 
     * @param {Ir4bTFI2Identifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZeroTrustGatewayLocationsApi
     */
    public async zeroTrustGatewayLocationsUpdateZeroTrustGatewayLocation(body: LocationsUuidBody, uuid: Ir4bTFI2SchemasUuid, identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Ir4bTFI2SchemasSingleResponse>> {
        return ZeroTrustGatewayLocationsApiFp(this.configuration).zeroTrustGatewayLocationsUpdateZeroTrustGatewayLocation(body, uuid, identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches a single Zero Trust Gateway location.
     * @summary Get Zero Trust Gateway location details
     * @param {Ir4bTFI2SchemasUuid} uuid 
     * @param {Ir4bTFI2Identifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZeroTrustGatewayLocationsApi
     */
    public async zeroTrustGatewayLocationsZeroTrustGatewayLocationDetails(uuid: Ir4bTFI2SchemasUuid, identifier: Ir4bTFI2Identifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Ir4bTFI2SchemasSingleResponse>> {
        return ZeroTrustGatewayLocationsApiFp(this.configuration).zeroTrustGatewayLocationsZeroTrustGatewayLocationDetails(uuid, identifier, options).then((request) => request(this.axios, this.basePath));
    }
}
