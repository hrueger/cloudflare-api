/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse4XX39 } from '../models';
import { InlineResponse4XX40 } from '../models';
import { Tm1HTKEcNameResponse } from '../models';
import { Tm1HTKEcSchemasIdentifier } from '../models';
import { Tm1HTKEcTagWithoutAppCount } from '../models';
import { Tm1HTKEcTagsComponentsSchemasName } from '../models';
import { Tm1HTKEcTagsComponentsSchemasResponseCollection } from '../models';
import { Tm1HTKEcTagsComponentsSchemasSingleResponse } from '../models';
/**
 * AccessTagsApi - axios parameter creator
 * @export
 */
export const AccessTagsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a tag
         * @summary Create a tag
         * @param {Tm1HTKEcSchemasIdentifier} identifier 
         * @param {Tm1HTKEcTagWithoutAppCount} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accessTagsCreateTag: async (identifier: Tm1HTKEcSchemasIdentifier, body?: Tm1HTKEcTagWithoutAppCount, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling accessTagsCreateTag.');
            }
            const localVarPath = `/accounts/{identifier}/access/tags`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a tag
         * @summary Delete a tag
         * @param {Tm1HTKEcSchemasIdentifier} identifier 
         * @param {Tm1HTKEcTagsComponentsSchemasName} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accessTagsDeleteATag: async (identifier: Tm1HTKEcSchemasIdentifier, name: Tm1HTKEcTagsComponentsSchemasName, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling accessTagsDeleteATag.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling accessTagsDeleteATag.');
            }
            const localVarPath = `/accounts/{identifier}/access/tags/{name}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a tag
         * @summary Get a tag
         * @param {Tm1HTKEcSchemasIdentifier} identifier 
         * @param {Tm1HTKEcTagsComponentsSchemasName} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accessTagsGetATag: async (identifier: Tm1HTKEcSchemasIdentifier, name: Tm1HTKEcTagsComponentsSchemasName, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling accessTagsGetATag.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling accessTagsGetATag.');
            }
            const localVarPath = `/accounts/{identifier}/access/tags/{name}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List tags
         * @summary List tags
         * @param {Tm1HTKEcSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accessTagsListTags: async (identifier: Tm1HTKEcSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling accessTagsListTags.');
            }
            const localVarPath = `/accounts/{identifier}/access/tags`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a tag
         * @summary Update a tag
         * @param {Tm1HTKEcSchemasIdentifier} identifier 
         * @param {Tm1HTKEcTagsComponentsSchemasName} name 
         * @param {Tm1HTKEcTagWithoutAppCount} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accessTagsUpdateATag: async (identifier: Tm1HTKEcSchemasIdentifier, name: Tm1HTKEcTagsComponentsSchemasName, body?: Tm1HTKEcTagWithoutAppCount, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling accessTagsUpdateATag.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling accessTagsUpdateATag.');
            }
            const localVarPath = `/accounts/{identifier}/access/tags/{name}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccessTagsApi - functional programming interface
 * @export
 */
export const AccessTagsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create a tag
         * @summary Create a tag
         * @param {Tm1HTKEcSchemasIdentifier} identifier 
         * @param {Tm1HTKEcTagWithoutAppCount} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accessTagsCreateTag(identifier: Tm1HTKEcSchemasIdentifier, body?: Tm1HTKEcTagWithoutAppCount, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Tm1HTKEcTagsComponentsSchemasSingleResponse>>> {
            const localVarAxiosArgs = await AccessTagsApiAxiosParamCreator(configuration).accessTagsCreateTag(identifier, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a tag
         * @summary Delete a tag
         * @param {Tm1HTKEcSchemasIdentifier} identifier 
         * @param {Tm1HTKEcTagsComponentsSchemasName} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accessTagsDeleteATag(identifier: Tm1HTKEcSchemasIdentifier, name: Tm1HTKEcTagsComponentsSchemasName, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Tm1HTKEcNameResponse>>> {
            const localVarAxiosArgs = await AccessTagsApiAxiosParamCreator(configuration).accessTagsDeleteATag(identifier, name, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a tag
         * @summary Get a tag
         * @param {Tm1HTKEcSchemasIdentifier} identifier 
         * @param {Tm1HTKEcTagsComponentsSchemasName} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accessTagsGetATag(identifier: Tm1HTKEcSchemasIdentifier, name: Tm1HTKEcTagsComponentsSchemasName, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Tm1HTKEcTagsComponentsSchemasSingleResponse>>> {
            const localVarAxiosArgs = await AccessTagsApiAxiosParamCreator(configuration).accessTagsGetATag(identifier, name, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List tags
         * @summary List tags
         * @param {Tm1HTKEcSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accessTagsListTags(identifier: Tm1HTKEcSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Tm1HTKEcTagsComponentsSchemasResponseCollection>>> {
            const localVarAxiosArgs = await AccessTagsApiAxiosParamCreator(configuration).accessTagsListTags(identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a tag
         * @summary Update a tag
         * @param {Tm1HTKEcSchemasIdentifier} identifier 
         * @param {Tm1HTKEcTagsComponentsSchemasName} name 
         * @param {Tm1HTKEcTagWithoutAppCount} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accessTagsUpdateATag(identifier: Tm1HTKEcSchemasIdentifier, name: Tm1HTKEcTagsComponentsSchemasName, body?: Tm1HTKEcTagWithoutAppCount, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Tm1HTKEcTagsComponentsSchemasSingleResponse>>> {
            const localVarAxiosArgs = await AccessTagsApiAxiosParamCreator(configuration).accessTagsUpdateATag(identifier, name, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AccessTagsApi - factory interface
 * @export
 */
export const AccessTagsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create a tag
         * @summary Create a tag
         * @param {Tm1HTKEcSchemasIdentifier} identifier 
         * @param {Tm1HTKEcTagWithoutAppCount} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accessTagsCreateTag(identifier: Tm1HTKEcSchemasIdentifier, body?: Tm1HTKEcTagWithoutAppCount, options?: AxiosRequestConfig): Promise<AxiosResponse<Tm1HTKEcTagsComponentsSchemasSingleResponse>> {
            return AccessTagsApiFp(configuration).accessTagsCreateTag(identifier, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a tag
         * @summary Delete a tag
         * @param {Tm1HTKEcSchemasIdentifier} identifier 
         * @param {Tm1HTKEcTagsComponentsSchemasName} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accessTagsDeleteATag(identifier: Tm1HTKEcSchemasIdentifier, name: Tm1HTKEcTagsComponentsSchemasName, options?: AxiosRequestConfig): Promise<AxiosResponse<Tm1HTKEcNameResponse>> {
            return AccessTagsApiFp(configuration).accessTagsDeleteATag(identifier, name, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a tag
         * @summary Get a tag
         * @param {Tm1HTKEcSchemasIdentifier} identifier 
         * @param {Tm1HTKEcTagsComponentsSchemasName} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accessTagsGetATag(identifier: Tm1HTKEcSchemasIdentifier, name: Tm1HTKEcTagsComponentsSchemasName, options?: AxiosRequestConfig): Promise<AxiosResponse<Tm1HTKEcTagsComponentsSchemasSingleResponse>> {
            return AccessTagsApiFp(configuration).accessTagsGetATag(identifier, name, options).then((request) => request(axios, basePath));
        },
        /**
         * List tags
         * @summary List tags
         * @param {Tm1HTKEcSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accessTagsListTags(identifier: Tm1HTKEcSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Tm1HTKEcTagsComponentsSchemasResponseCollection>> {
            return AccessTagsApiFp(configuration).accessTagsListTags(identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a tag
         * @summary Update a tag
         * @param {Tm1HTKEcSchemasIdentifier} identifier 
         * @param {Tm1HTKEcTagsComponentsSchemasName} name 
         * @param {Tm1HTKEcTagWithoutAppCount} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accessTagsUpdateATag(identifier: Tm1HTKEcSchemasIdentifier, name: Tm1HTKEcTagsComponentsSchemasName, body?: Tm1HTKEcTagWithoutAppCount, options?: AxiosRequestConfig): Promise<AxiosResponse<Tm1HTKEcTagsComponentsSchemasSingleResponse>> {
            return AccessTagsApiFp(configuration).accessTagsUpdateATag(identifier, name, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccessTagsApi - object-oriented interface
 * @export
 * @class AccessTagsApi
 * @extends {BaseAPI}
 */
export class AccessTagsApi extends BaseAPI {
    /**
     * Create a tag
     * @summary Create a tag
     * @param {Tm1HTKEcSchemasIdentifier} identifier 
     * @param {Tm1HTKEcTagWithoutAppCount} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessTagsApi
     */
    public async accessTagsCreateTag(identifier: Tm1HTKEcSchemasIdentifier, body?: Tm1HTKEcTagWithoutAppCount, options?: AxiosRequestConfig) : Promise<AxiosResponse<Tm1HTKEcTagsComponentsSchemasSingleResponse>> {
        return AccessTagsApiFp(this.configuration).accessTagsCreateTag(identifier, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a tag
     * @summary Delete a tag
     * @param {Tm1HTKEcSchemasIdentifier} identifier 
     * @param {Tm1HTKEcTagsComponentsSchemasName} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessTagsApi
     */
    public async accessTagsDeleteATag(identifier: Tm1HTKEcSchemasIdentifier, name: Tm1HTKEcTagsComponentsSchemasName, options?: AxiosRequestConfig) : Promise<AxiosResponse<Tm1HTKEcNameResponse>> {
        return AccessTagsApiFp(this.configuration).accessTagsDeleteATag(identifier, name, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a tag
     * @summary Get a tag
     * @param {Tm1HTKEcSchemasIdentifier} identifier 
     * @param {Tm1HTKEcTagsComponentsSchemasName} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessTagsApi
     */
    public async accessTagsGetATag(identifier: Tm1HTKEcSchemasIdentifier, name: Tm1HTKEcTagsComponentsSchemasName, options?: AxiosRequestConfig) : Promise<AxiosResponse<Tm1HTKEcTagsComponentsSchemasSingleResponse>> {
        return AccessTagsApiFp(this.configuration).accessTagsGetATag(identifier, name, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List tags
     * @summary List tags
     * @param {Tm1HTKEcSchemasIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessTagsApi
     */
    public async accessTagsListTags(identifier: Tm1HTKEcSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Tm1HTKEcTagsComponentsSchemasResponseCollection>> {
        return AccessTagsApiFp(this.configuration).accessTagsListTags(identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update a tag
     * @summary Update a tag
     * @param {Tm1HTKEcSchemasIdentifier} identifier 
     * @param {Tm1HTKEcTagsComponentsSchemasName} name 
     * @param {Tm1HTKEcTagWithoutAppCount} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessTagsApi
     */
    public async accessTagsUpdateATag(identifier: Tm1HTKEcSchemasIdentifier, name: Tm1HTKEcTagsComponentsSchemasName, body?: Tm1HTKEcTagWithoutAppCount, options?: AxiosRequestConfig) : Promise<AxiosResponse<Tm1HTKEcTagsComponentsSchemasSingleResponse>> {
        return AccessTagsApiFp(this.configuration).accessTagsUpdateATag(identifier, name, body, options).then((request) => request(this.axios, this.basePath));
    }
}
