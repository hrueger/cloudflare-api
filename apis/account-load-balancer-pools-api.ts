/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { IdentifierPreviewBody1 } from '../models';
import { InlineResponse4XX45 } from '../models';
import { InlineResponse4XX48 } from '../models';
import { InlineResponse4XX49 } from '../models';
import { InlineResponse4XX50 } from '../models';
import { InlineResponse4XX51 } from '../models';
import { InlineResponse4XX52 } from '../models';
import { LoadBalancersPoolsBody } from '../models';
import { LoadBalancersPoolsBody1 } from '../models';
import { PoolsIdentifierBody } from '../models';
import { PoolsIdentifierBody1 } from '../models';
import { VXFDQCwXComponentsSchemasIdentifier } from '../models';
import { VXFDQCwXHealthDetails } from '../models';
import { VXFDQCwXPreviewResponse } from '../models';
import { VXFDQCwXSchemasIdResponse } from '../models';
import { VXFDQCwXSchemasIdentifier } from '../models';
import { VXFDQCwXSchemasReferencesResponse } from '../models';
import { VXFDQCwXSchemasResponseCollection } from '../models';
import { VXFDQCwXSchemasSingleResponse } from '../models';
/**
 * AccountLoadBalancerPoolsApi - axios parameter creator
 * @export
 */
export const AccountLoadBalancerPoolsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new pool.
         * @summary Create Pool
         * @param {LoadBalancersPoolsBody} body 
         * @param {VXFDQCwXComponentsSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountLoadBalancerPoolsCreatePool: async (body: LoadBalancersPoolsBody, accountIdentifier: VXFDQCwXComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling accountLoadBalancerPoolsCreatePool.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling accountLoadBalancerPoolsCreatePool.');
            }
            const localVarPath = `/accounts/{account_identifier}/load_balancers/pools`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a configured pool.
         * @summary Delete Pool
         * @param {VXFDQCwXSchemasIdentifier} identifier 
         * @param {VXFDQCwXComponentsSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountLoadBalancerPoolsDeletePool: async (identifier: VXFDQCwXSchemasIdentifier, accountIdentifier: VXFDQCwXComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling accountLoadBalancerPoolsDeletePool.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling accountLoadBalancerPoolsDeletePool.');
            }
            const localVarPath = `/accounts/{account_identifier}/load_balancers/pools/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the list of resources that reference the provided pool.
         * @summary List Pool References
         * @param {VXFDQCwXSchemasIdentifier} identifier 
         * @param {VXFDQCwXComponentsSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountLoadBalancerPoolsListPoolReferences: async (identifier: VXFDQCwXSchemasIdentifier, accountIdentifier: VXFDQCwXComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling accountLoadBalancerPoolsListPoolReferences.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling accountLoadBalancerPoolsListPoolReferences.');
            }
            const localVarPath = `/accounts/{account_identifier}/load_balancers/pools/{identifier}/references`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List configured pools.
         * @summary List Pools
         * @param {VXFDQCwXComponentsSchemasIdentifier} accountIdentifier 
         * @param {any} [monitor] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountLoadBalancerPoolsListPools: async (accountIdentifier: VXFDQCwXComponentsSchemasIdentifier, monitor?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling accountLoadBalancerPoolsListPools.');
            }
            const localVarPath = `/accounts/{account_identifier}/load_balancers/pools`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            if (monitor !== undefined) {
                localVarQueryParameter['monitor'] = monitor;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Apply changes to an existing pool, overwriting the supplied properties.
         * @summary Patch Pool
         * @param {PoolsIdentifierBody1} body 
         * @param {VXFDQCwXSchemasIdentifier} identifier 
         * @param {VXFDQCwXComponentsSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountLoadBalancerPoolsPatchPool: async (body: PoolsIdentifierBody1, identifier: VXFDQCwXSchemasIdentifier, accountIdentifier: VXFDQCwXComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling accountLoadBalancerPoolsPatchPool.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling accountLoadBalancerPoolsPatchPool.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling accountLoadBalancerPoolsPatchPool.');
            }
            const localVarPath = `/accounts/{account_identifier}/load_balancers/pools/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Apply changes to a number of existing pools, overwriting the supplied properties. Pools are ordered by ascending `name`. Returns the list of affected pools. Supports the standard pagination query parameters, either `limit`/`offset` or `per_page`/`page`.
         * @summary Patch Pools
         * @param {LoadBalancersPoolsBody1} body 
         * @param {VXFDQCwXComponentsSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountLoadBalancerPoolsPatchPools: async (body: LoadBalancersPoolsBody1, accountIdentifier: VXFDQCwXComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling accountLoadBalancerPoolsPatchPools.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling accountLoadBalancerPoolsPatchPools.');
            }
            const localVarPath = `/accounts/{account_identifier}/load_balancers/pools`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch a single configured pool.
         * @summary Pool Details
         * @param {VXFDQCwXSchemasIdentifier} identifier 
         * @param {VXFDQCwXComponentsSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountLoadBalancerPoolsPoolDetails: async (identifier: VXFDQCwXSchemasIdentifier, accountIdentifier: VXFDQCwXComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling accountLoadBalancerPoolsPoolDetails.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling accountLoadBalancerPoolsPoolDetails.');
            }
            const localVarPath = `/accounts/{account_identifier}/load_balancers/pools/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch the latest pool health status for a single pool.
         * @summary Pool Health Details
         * @param {VXFDQCwXSchemasIdentifier} identifier 
         * @param {VXFDQCwXComponentsSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountLoadBalancerPoolsPoolHealthDetails: async (identifier: VXFDQCwXSchemasIdentifier, accountIdentifier: VXFDQCwXComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling accountLoadBalancerPoolsPoolHealthDetails.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling accountLoadBalancerPoolsPoolHealthDetails.');
            }
            const localVarPath = `/accounts/{account_identifier}/load_balancers/pools/{identifier}/health`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Preview pool health using provided monitor details. The returned preview_id can be used in the preview endpoint to retrieve the results.
         * @summary Preview Pool
         * @param {IdentifierPreviewBody1} body 
         * @param {VXFDQCwXSchemasIdentifier} identifier 
         * @param {VXFDQCwXComponentsSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountLoadBalancerPoolsPreviewPool: async (body: IdentifierPreviewBody1, identifier: VXFDQCwXSchemasIdentifier, accountIdentifier: VXFDQCwXComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling accountLoadBalancerPoolsPreviewPool.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling accountLoadBalancerPoolsPreviewPool.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling accountLoadBalancerPoolsPreviewPool.');
            }
            const localVarPath = `/accounts/{account_identifier}/load_balancers/pools/{identifier}/preview`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify a configured pool.
         * @summary Update Pool
         * @param {PoolsIdentifierBody} body 
         * @param {VXFDQCwXSchemasIdentifier} identifier 
         * @param {VXFDQCwXComponentsSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountLoadBalancerPoolsUpdatePool: async (body: PoolsIdentifierBody, identifier: VXFDQCwXSchemasIdentifier, accountIdentifier: VXFDQCwXComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling accountLoadBalancerPoolsUpdatePool.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling accountLoadBalancerPoolsUpdatePool.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling accountLoadBalancerPoolsUpdatePool.');
            }
            const localVarPath = `/accounts/{account_identifier}/load_balancers/pools/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountLoadBalancerPoolsApi - functional programming interface
 * @export
 */
export const AccountLoadBalancerPoolsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create a new pool.
         * @summary Create Pool
         * @param {LoadBalancersPoolsBody} body 
         * @param {VXFDQCwXComponentsSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountLoadBalancerPoolsCreatePool(body: LoadBalancersPoolsBody, accountIdentifier: VXFDQCwXComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<VXFDQCwXSchemasSingleResponse>>> {
            const localVarAxiosArgs = await AccountLoadBalancerPoolsApiAxiosParamCreator(configuration).accountLoadBalancerPoolsCreatePool(body, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a configured pool.
         * @summary Delete Pool
         * @param {VXFDQCwXSchemasIdentifier} identifier 
         * @param {VXFDQCwXComponentsSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountLoadBalancerPoolsDeletePool(identifier: VXFDQCwXSchemasIdentifier, accountIdentifier: VXFDQCwXComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<VXFDQCwXSchemasIdResponse>>> {
            const localVarAxiosArgs = await AccountLoadBalancerPoolsApiAxiosParamCreator(configuration).accountLoadBalancerPoolsDeletePool(identifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the list of resources that reference the provided pool.
         * @summary List Pool References
         * @param {VXFDQCwXSchemasIdentifier} identifier 
         * @param {VXFDQCwXComponentsSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountLoadBalancerPoolsListPoolReferences(identifier: VXFDQCwXSchemasIdentifier, accountIdentifier: VXFDQCwXComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<VXFDQCwXSchemasReferencesResponse>>> {
            const localVarAxiosArgs = await AccountLoadBalancerPoolsApiAxiosParamCreator(configuration).accountLoadBalancerPoolsListPoolReferences(identifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List configured pools.
         * @summary List Pools
         * @param {VXFDQCwXComponentsSchemasIdentifier} accountIdentifier 
         * @param {any} [monitor] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountLoadBalancerPoolsListPools(accountIdentifier: VXFDQCwXComponentsSchemasIdentifier, monitor?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<VXFDQCwXSchemasResponseCollection>>> {
            const localVarAxiosArgs = await AccountLoadBalancerPoolsApiAxiosParamCreator(configuration).accountLoadBalancerPoolsListPools(accountIdentifier, monitor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Apply changes to an existing pool, overwriting the supplied properties.
         * @summary Patch Pool
         * @param {PoolsIdentifierBody1} body 
         * @param {VXFDQCwXSchemasIdentifier} identifier 
         * @param {VXFDQCwXComponentsSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountLoadBalancerPoolsPatchPool(body: PoolsIdentifierBody1, identifier: VXFDQCwXSchemasIdentifier, accountIdentifier: VXFDQCwXComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<VXFDQCwXSchemasSingleResponse>>> {
            const localVarAxiosArgs = await AccountLoadBalancerPoolsApiAxiosParamCreator(configuration).accountLoadBalancerPoolsPatchPool(body, identifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Apply changes to a number of existing pools, overwriting the supplied properties. Pools are ordered by ascending `name`. Returns the list of affected pools. Supports the standard pagination query parameters, either `limit`/`offset` or `per_page`/`page`.
         * @summary Patch Pools
         * @param {LoadBalancersPoolsBody1} body 
         * @param {VXFDQCwXComponentsSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountLoadBalancerPoolsPatchPools(body: LoadBalancersPoolsBody1, accountIdentifier: VXFDQCwXComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<VXFDQCwXSchemasResponseCollection>>> {
            const localVarAxiosArgs = await AccountLoadBalancerPoolsApiAxiosParamCreator(configuration).accountLoadBalancerPoolsPatchPools(body, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetch a single configured pool.
         * @summary Pool Details
         * @param {VXFDQCwXSchemasIdentifier} identifier 
         * @param {VXFDQCwXComponentsSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountLoadBalancerPoolsPoolDetails(identifier: VXFDQCwXSchemasIdentifier, accountIdentifier: VXFDQCwXComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<VXFDQCwXSchemasSingleResponse>>> {
            const localVarAxiosArgs = await AccountLoadBalancerPoolsApiAxiosParamCreator(configuration).accountLoadBalancerPoolsPoolDetails(identifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetch the latest pool health status for a single pool.
         * @summary Pool Health Details
         * @param {VXFDQCwXSchemasIdentifier} identifier 
         * @param {VXFDQCwXComponentsSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountLoadBalancerPoolsPoolHealthDetails(identifier: VXFDQCwXSchemasIdentifier, accountIdentifier: VXFDQCwXComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<VXFDQCwXHealthDetails>>> {
            const localVarAxiosArgs = await AccountLoadBalancerPoolsApiAxiosParamCreator(configuration).accountLoadBalancerPoolsPoolHealthDetails(identifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Preview pool health using provided monitor details. The returned preview_id can be used in the preview endpoint to retrieve the results.
         * @summary Preview Pool
         * @param {IdentifierPreviewBody1} body 
         * @param {VXFDQCwXSchemasIdentifier} identifier 
         * @param {VXFDQCwXComponentsSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountLoadBalancerPoolsPreviewPool(body: IdentifierPreviewBody1, identifier: VXFDQCwXSchemasIdentifier, accountIdentifier: VXFDQCwXComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<VXFDQCwXPreviewResponse>>> {
            const localVarAxiosArgs = await AccountLoadBalancerPoolsApiAxiosParamCreator(configuration).accountLoadBalancerPoolsPreviewPool(body, identifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Modify a configured pool.
         * @summary Update Pool
         * @param {PoolsIdentifierBody} body 
         * @param {VXFDQCwXSchemasIdentifier} identifier 
         * @param {VXFDQCwXComponentsSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountLoadBalancerPoolsUpdatePool(body: PoolsIdentifierBody, identifier: VXFDQCwXSchemasIdentifier, accountIdentifier: VXFDQCwXComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<VXFDQCwXSchemasSingleResponse>>> {
            const localVarAxiosArgs = await AccountLoadBalancerPoolsApiAxiosParamCreator(configuration).accountLoadBalancerPoolsUpdatePool(body, identifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AccountLoadBalancerPoolsApi - factory interface
 * @export
 */
export const AccountLoadBalancerPoolsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create a new pool.
         * @summary Create Pool
         * @param {LoadBalancersPoolsBody} body 
         * @param {VXFDQCwXComponentsSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountLoadBalancerPoolsCreatePool(body: LoadBalancersPoolsBody, accountIdentifier: VXFDQCwXComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<VXFDQCwXSchemasSingleResponse>> {
            return AccountLoadBalancerPoolsApiFp(configuration).accountLoadBalancerPoolsCreatePool(body, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a configured pool.
         * @summary Delete Pool
         * @param {VXFDQCwXSchemasIdentifier} identifier 
         * @param {VXFDQCwXComponentsSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountLoadBalancerPoolsDeletePool(identifier: VXFDQCwXSchemasIdentifier, accountIdentifier: VXFDQCwXComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<VXFDQCwXSchemasIdResponse>> {
            return AccountLoadBalancerPoolsApiFp(configuration).accountLoadBalancerPoolsDeletePool(identifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the list of resources that reference the provided pool.
         * @summary List Pool References
         * @param {VXFDQCwXSchemasIdentifier} identifier 
         * @param {VXFDQCwXComponentsSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountLoadBalancerPoolsListPoolReferences(identifier: VXFDQCwXSchemasIdentifier, accountIdentifier: VXFDQCwXComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<VXFDQCwXSchemasReferencesResponse>> {
            return AccountLoadBalancerPoolsApiFp(configuration).accountLoadBalancerPoolsListPoolReferences(identifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * List configured pools.
         * @summary List Pools
         * @param {VXFDQCwXComponentsSchemasIdentifier} accountIdentifier 
         * @param {any} [monitor] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountLoadBalancerPoolsListPools(accountIdentifier: VXFDQCwXComponentsSchemasIdentifier, monitor?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<VXFDQCwXSchemasResponseCollection>> {
            return AccountLoadBalancerPoolsApiFp(configuration).accountLoadBalancerPoolsListPools(accountIdentifier, monitor, options).then((request) => request(axios, basePath));
        },
        /**
         * Apply changes to an existing pool, overwriting the supplied properties.
         * @summary Patch Pool
         * @param {PoolsIdentifierBody1} body 
         * @param {VXFDQCwXSchemasIdentifier} identifier 
         * @param {VXFDQCwXComponentsSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountLoadBalancerPoolsPatchPool(body: PoolsIdentifierBody1, identifier: VXFDQCwXSchemasIdentifier, accountIdentifier: VXFDQCwXComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<VXFDQCwXSchemasSingleResponse>> {
            return AccountLoadBalancerPoolsApiFp(configuration).accountLoadBalancerPoolsPatchPool(body, identifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Apply changes to a number of existing pools, overwriting the supplied properties. Pools are ordered by ascending `name`. Returns the list of affected pools. Supports the standard pagination query parameters, either `limit`/`offset` or `per_page`/`page`.
         * @summary Patch Pools
         * @param {LoadBalancersPoolsBody1} body 
         * @param {VXFDQCwXComponentsSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountLoadBalancerPoolsPatchPools(body: LoadBalancersPoolsBody1, accountIdentifier: VXFDQCwXComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<VXFDQCwXSchemasResponseCollection>> {
            return AccountLoadBalancerPoolsApiFp(configuration).accountLoadBalancerPoolsPatchPools(body, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a single configured pool.
         * @summary Pool Details
         * @param {VXFDQCwXSchemasIdentifier} identifier 
         * @param {VXFDQCwXComponentsSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountLoadBalancerPoolsPoolDetails(identifier: VXFDQCwXSchemasIdentifier, accountIdentifier: VXFDQCwXComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<VXFDQCwXSchemasSingleResponse>> {
            return AccountLoadBalancerPoolsApiFp(configuration).accountLoadBalancerPoolsPoolDetails(identifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch the latest pool health status for a single pool.
         * @summary Pool Health Details
         * @param {VXFDQCwXSchemasIdentifier} identifier 
         * @param {VXFDQCwXComponentsSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountLoadBalancerPoolsPoolHealthDetails(identifier: VXFDQCwXSchemasIdentifier, accountIdentifier: VXFDQCwXComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<VXFDQCwXHealthDetails>> {
            return AccountLoadBalancerPoolsApiFp(configuration).accountLoadBalancerPoolsPoolHealthDetails(identifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Preview pool health using provided monitor details. The returned preview_id can be used in the preview endpoint to retrieve the results.
         * @summary Preview Pool
         * @param {IdentifierPreviewBody1} body 
         * @param {VXFDQCwXSchemasIdentifier} identifier 
         * @param {VXFDQCwXComponentsSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountLoadBalancerPoolsPreviewPool(body: IdentifierPreviewBody1, identifier: VXFDQCwXSchemasIdentifier, accountIdentifier: VXFDQCwXComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<VXFDQCwXPreviewResponse>> {
            return AccountLoadBalancerPoolsApiFp(configuration).accountLoadBalancerPoolsPreviewPool(body, identifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify a configured pool.
         * @summary Update Pool
         * @param {PoolsIdentifierBody} body 
         * @param {VXFDQCwXSchemasIdentifier} identifier 
         * @param {VXFDQCwXComponentsSchemasIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountLoadBalancerPoolsUpdatePool(body: PoolsIdentifierBody, identifier: VXFDQCwXSchemasIdentifier, accountIdentifier: VXFDQCwXComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<VXFDQCwXSchemasSingleResponse>> {
            return AccountLoadBalancerPoolsApiFp(configuration).accountLoadBalancerPoolsUpdatePool(body, identifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountLoadBalancerPoolsApi - object-oriented interface
 * @export
 * @class AccountLoadBalancerPoolsApi
 * @extends {BaseAPI}
 */
export class AccountLoadBalancerPoolsApi extends BaseAPI {
    /**
     * Create a new pool.
     * @summary Create Pool
     * @param {LoadBalancersPoolsBody} body 
     * @param {VXFDQCwXComponentsSchemasIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountLoadBalancerPoolsApi
     */
    public async accountLoadBalancerPoolsCreatePool(body: LoadBalancersPoolsBody, accountIdentifier: VXFDQCwXComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<VXFDQCwXSchemasSingleResponse>> {
        return AccountLoadBalancerPoolsApiFp(this.configuration).accountLoadBalancerPoolsCreatePool(body, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a configured pool.
     * @summary Delete Pool
     * @param {VXFDQCwXSchemasIdentifier} identifier 
     * @param {VXFDQCwXComponentsSchemasIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountLoadBalancerPoolsApi
     */
    public async accountLoadBalancerPoolsDeletePool(identifier: VXFDQCwXSchemasIdentifier, accountIdentifier: VXFDQCwXComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<VXFDQCwXSchemasIdResponse>> {
        return AccountLoadBalancerPoolsApiFp(this.configuration).accountLoadBalancerPoolsDeletePool(identifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the list of resources that reference the provided pool.
     * @summary List Pool References
     * @param {VXFDQCwXSchemasIdentifier} identifier 
     * @param {VXFDQCwXComponentsSchemasIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountLoadBalancerPoolsApi
     */
    public async accountLoadBalancerPoolsListPoolReferences(identifier: VXFDQCwXSchemasIdentifier, accountIdentifier: VXFDQCwXComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<VXFDQCwXSchemasReferencesResponse>> {
        return AccountLoadBalancerPoolsApiFp(this.configuration).accountLoadBalancerPoolsListPoolReferences(identifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List configured pools.
     * @summary List Pools
     * @param {VXFDQCwXComponentsSchemasIdentifier} accountIdentifier 
     * @param {any} [monitor] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountLoadBalancerPoolsApi
     */
    public async accountLoadBalancerPoolsListPools(accountIdentifier: VXFDQCwXComponentsSchemasIdentifier, monitor?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<VXFDQCwXSchemasResponseCollection>> {
        return AccountLoadBalancerPoolsApiFp(this.configuration).accountLoadBalancerPoolsListPools(accountIdentifier, monitor, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Apply changes to an existing pool, overwriting the supplied properties.
     * @summary Patch Pool
     * @param {PoolsIdentifierBody1} body 
     * @param {VXFDQCwXSchemasIdentifier} identifier 
     * @param {VXFDQCwXComponentsSchemasIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountLoadBalancerPoolsApi
     */
    public async accountLoadBalancerPoolsPatchPool(body: PoolsIdentifierBody1, identifier: VXFDQCwXSchemasIdentifier, accountIdentifier: VXFDQCwXComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<VXFDQCwXSchemasSingleResponse>> {
        return AccountLoadBalancerPoolsApiFp(this.configuration).accountLoadBalancerPoolsPatchPool(body, identifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Apply changes to a number of existing pools, overwriting the supplied properties. Pools are ordered by ascending `name`. Returns the list of affected pools. Supports the standard pagination query parameters, either `limit`/`offset` or `per_page`/`page`.
     * @summary Patch Pools
     * @param {LoadBalancersPoolsBody1} body 
     * @param {VXFDQCwXComponentsSchemasIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountLoadBalancerPoolsApi
     */
    public async accountLoadBalancerPoolsPatchPools(body: LoadBalancersPoolsBody1, accountIdentifier: VXFDQCwXComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<VXFDQCwXSchemasResponseCollection>> {
        return AccountLoadBalancerPoolsApiFp(this.configuration).accountLoadBalancerPoolsPatchPools(body, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch a single configured pool.
     * @summary Pool Details
     * @param {VXFDQCwXSchemasIdentifier} identifier 
     * @param {VXFDQCwXComponentsSchemasIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountLoadBalancerPoolsApi
     */
    public async accountLoadBalancerPoolsPoolDetails(identifier: VXFDQCwXSchemasIdentifier, accountIdentifier: VXFDQCwXComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<VXFDQCwXSchemasSingleResponse>> {
        return AccountLoadBalancerPoolsApiFp(this.configuration).accountLoadBalancerPoolsPoolDetails(identifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch the latest pool health status for a single pool.
     * @summary Pool Health Details
     * @param {VXFDQCwXSchemasIdentifier} identifier 
     * @param {VXFDQCwXComponentsSchemasIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountLoadBalancerPoolsApi
     */
    public async accountLoadBalancerPoolsPoolHealthDetails(identifier: VXFDQCwXSchemasIdentifier, accountIdentifier: VXFDQCwXComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<VXFDQCwXHealthDetails>> {
        return AccountLoadBalancerPoolsApiFp(this.configuration).accountLoadBalancerPoolsPoolHealthDetails(identifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Preview pool health using provided monitor details. The returned preview_id can be used in the preview endpoint to retrieve the results.
     * @summary Preview Pool
     * @param {IdentifierPreviewBody1} body 
     * @param {VXFDQCwXSchemasIdentifier} identifier 
     * @param {VXFDQCwXComponentsSchemasIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountLoadBalancerPoolsApi
     */
    public async accountLoadBalancerPoolsPreviewPool(body: IdentifierPreviewBody1, identifier: VXFDQCwXSchemasIdentifier, accountIdentifier: VXFDQCwXComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<VXFDQCwXPreviewResponse>> {
        return AccountLoadBalancerPoolsApiFp(this.configuration).accountLoadBalancerPoolsPreviewPool(body, identifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify a configured pool.
     * @summary Update Pool
     * @param {PoolsIdentifierBody} body 
     * @param {VXFDQCwXSchemasIdentifier} identifier 
     * @param {VXFDQCwXComponentsSchemasIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountLoadBalancerPoolsApi
     */
    public async accountLoadBalancerPoolsUpdatePool(body: PoolsIdentifierBody, identifier: VXFDQCwXSchemasIdentifier, accountIdentifier: VXFDQCwXComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<VXFDQCwXSchemasSingleResponse>> {
        return AccountLoadBalancerPoolsApiFp(this.configuration).accountLoadBalancerPoolsUpdatePool(body, identifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
}
