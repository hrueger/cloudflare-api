/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse4xx36 } from '../models';
import { InlineResponse4xx37 } from '../models';
import { VmrjA5DJBgpPrefixUpdateAdvertisement } from '../models';
import { VmrjA5DJIdentifier } from '../models';
import { VmrjA5DJResponseCollectionBgp } from '../models';
import { VmrjA5DJSingleResponseBgp } from '../models';
/**
 * IPAddressManagementBGPPrefixesApi - axios parameter creator
 * @export
 */
export const IPAddressManagementBGPPrefixesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve a single BGP Prefix according to its identifier
         * @summary Fetch BGP Prefix
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {VmrjA5DJIdentifier} prefixIdentifier 
         * @param {VmrjA5DJIdentifier} bgpPrefixIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipAddressManagementPrefixesFetchBgpPrefix: async (accountIdentifier: VmrjA5DJIdentifier, prefixIdentifier: VmrjA5DJIdentifier, bgpPrefixIdentifier: VmrjA5DJIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling ipAddressManagementPrefixesFetchBgpPrefix.');
            }
            // verify required parameter 'prefixIdentifier' is not null or undefined
            if (prefixIdentifier === null || prefixIdentifier === undefined) {
                throw new RequiredError('prefixIdentifier','Required parameter prefixIdentifier was null or undefined when calling ipAddressManagementPrefixesFetchBgpPrefix.');
            }
            // verify required parameter 'bgpPrefixIdentifier' is not null or undefined
            if (bgpPrefixIdentifier === null || bgpPrefixIdentifier === undefined) {
                throw new RequiredError('bgpPrefixIdentifier','Required parameter bgpPrefixIdentifier was null or undefined when calling ipAddressManagementPrefixesFetchBgpPrefix.');
            }
            const localVarPath = `/accounts/{account_identifier}/addressing/prefixes/{prefix_identifier}/bgp/prefixes/{bgp_prefix_identifier}`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)))
                .replace(`{${"prefix_identifier"}}`, encodeURIComponent(String(prefixIdentifier)))
                .replace(`{${"bgp_prefix_identifier"}}`, encodeURIComponent(String(bgpPrefixIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List all BGP Prefixes within the specified IP Prefix. BGP Prefixes are used to control which specific subnets are advertised to the Internet. It is possible to advertise subnets more specific than an IP Prefix by creating more specific BGP Prefixes.
         * @summary List BGP Prefixes
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {VmrjA5DJIdentifier} prefixIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipAddressManagementPrefixesListBgpPrefixes: async (accountIdentifier: VmrjA5DJIdentifier, prefixIdentifier: VmrjA5DJIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling ipAddressManagementPrefixesListBgpPrefixes.');
            }
            // verify required parameter 'prefixIdentifier' is not null or undefined
            if (prefixIdentifier === null || prefixIdentifier === undefined) {
                throw new RequiredError('prefixIdentifier','Required parameter prefixIdentifier was null or undefined when calling ipAddressManagementPrefixesListBgpPrefixes.');
            }
            const localVarPath = `/accounts/{account_identifier}/addressing/prefixes/{prefix_identifier}/bgp/prefixes`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)))
                .replace(`{${"prefix_identifier"}}`, encodeURIComponent(String(prefixIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the properties of a BGP Prefix, such as the on demand advertisement status (advertised or withdrawn).
         * @summary Update BGP Prefix
         * @param {VmrjA5DJBgpPrefixUpdateAdvertisement} body 
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {VmrjA5DJIdentifier} prefixIdentifier 
         * @param {VmrjA5DJIdentifier} bgpPrefixIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipAddressManagementPrefixesUpdateBgpPrefix: async (body: VmrjA5DJBgpPrefixUpdateAdvertisement, accountIdentifier: VmrjA5DJIdentifier, prefixIdentifier: VmrjA5DJIdentifier, bgpPrefixIdentifier: VmrjA5DJIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling ipAddressManagementPrefixesUpdateBgpPrefix.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling ipAddressManagementPrefixesUpdateBgpPrefix.');
            }
            // verify required parameter 'prefixIdentifier' is not null or undefined
            if (prefixIdentifier === null || prefixIdentifier === undefined) {
                throw new RequiredError('prefixIdentifier','Required parameter prefixIdentifier was null or undefined when calling ipAddressManagementPrefixesUpdateBgpPrefix.');
            }
            // verify required parameter 'bgpPrefixIdentifier' is not null or undefined
            if (bgpPrefixIdentifier === null || bgpPrefixIdentifier === undefined) {
                throw new RequiredError('bgpPrefixIdentifier','Required parameter bgpPrefixIdentifier was null or undefined when calling ipAddressManagementPrefixesUpdateBgpPrefix.');
            }
            const localVarPath = `/accounts/{account_identifier}/addressing/prefixes/{prefix_identifier}/bgp/prefixes/{bgp_prefix_identifier}`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)))
                .replace(`{${"prefix_identifier"}}`, encodeURIComponent(String(prefixIdentifier)))
                .replace(`{${"bgp_prefix_identifier"}}`, encodeURIComponent(String(bgpPrefixIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IPAddressManagementBGPPrefixesApi - functional programming interface
 * @export
 */
export const IPAddressManagementBGPPrefixesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Retrieve a single BGP Prefix according to its identifier
         * @summary Fetch BGP Prefix
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {VmrjA5DJIdentifier} prefixIdentifier 
         * @param {VmrjA5DJIdentifier} bgpPrefixIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAddressManagementPrefixesFetchBgpPrefix(accountIdentifier: VmrjA5DJIdentifier, prefixIdentifier: VmrjA5DJIdentifier, bgpPrefixIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<VmrjA5DJSingleResponseBgp>>> {
            const localVarAxiosArgs = await IPAddressManagementBGPPrefixesApiAxiosParamCreator(configuration).ipAddressManagementPrefixesFetchBgpPrefix(accountIdentifier, prefixIdentifier, bgpPrefixIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List all BGP Prefixes within the specified IP Prefix. BGP Prefixes are used to control which specific subnets are advertised to the Internet. It is possible to advertise subnets more specific than an IP Prefix by creating more specific BGP Prefixes.
         * @summary List BGP Prefixes
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {VmrjA5DJIdentifier} prefixIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAddressManagementPrefixesListBgpPrefixes(accountIdentifier: VmrjA5DJIdentifier, prefixIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<VmrjA5DJResponseCollectionBgp>>> {
            const localVarAxiosArgs = await IPAddressManagementBGPPrefixesApiAxiosParamCreator(configuration).ipAddressManagementPrefixesListBgpPrefixes(accountIdentifier, prefixIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update the properties of a BGP Prefix, such as the on demand advertisement status (advertised or withdrawn).
         * @summary Update BGP Prefix
         * @param {VmrjA5DJBgpPrefixUpdateAdvertisement} body 
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {VmrjA5DJIdentifier} prefixIdentifier 
         * @param {VmrjA5DJIdentifier} bgpPrefixIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAddressManagementPrefixesUpdateBgpPrefix(body: VmrjA5DJBgpPrefixUpdateAdvertisement, accountIdentifier: VmrjA5DJIdentifier, prefixIdentifier: VmrjA5DJIdentifier, bgpPrefixIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<VmrjA5DJSingleResponseBgp>>> {
            const localVarAxiosArgs = await IPAddressManagementBGPPrefixesApiAxiosParamCreator(configuration).ipAddressManagementPrefixesUpdateBgpPrefix(body, accountIdentifier, prefixIdentifier, bgpPrefixIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * IPAddressManagementBGPPrefixesApi - factory interface
 * @export
 */
export const IPAddressManagementBGPPrefixesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Retrieve a single BGP Prefix according to its identifier
         * @summary Fetch BGP Prefix
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {VmrjA5DJIdentifier} prefixIdentifier 
         * @param {VmrjA5DJIdentifier} bgpPrefixIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAddressManagementPrefixesFetchBgpPrefix(accountIdentifier: VmrjA5DJIdentifier, prefixIdentifier: VmrjA5DJIdentifier, bgpPrefixIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<VmrjA5DJSingleResponseBgp>> {
            return IPAddressManagementBGPPrefixesApiFp(configuration).ipAddressManagementPrefixesFetchBgpPrefix(accountIdentifier, prefixIdentifier, bgpPrefixIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * List all BGP Prefixes within the specified IP Prefix. BGP Prefixes are used to control which specific subnets are advertised to the Internet. It is possible to advertise subnets more specific than an IP Prefix by creating more specific BGP Prefixes.
         * @summary List BGP Prefixes
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {VmrjA5DJIdentifier} prefixIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAddressManagementPrefixesListBgpPrefixes(accountIdentifier: VmrjA5DJIdentifier, prefixIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<VmrjA5DJResponseCollectionBgp>> {
            return IPAddressManagementBGPPrefixesApiFp(configuration).ipAddressManagementPrefixesListBgpPrefixes(accountIdentifier, prefixIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the properties of a BGP Prefix, such as the on demand advertisement status (advertised or withdrawn).
         * @summary Update BGP Prefix
         * @param {VmrjA5DJBgpPrefixUpdateAdvertisement} body 
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {VmrjA5DJIdentifier} prefixIdentifier 
         * @param {VmrjA5DJIdentifier} bgpPrefixIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAddressManagementPrefixesUpdateBgpPrefix(body: VmrjA5DJBgpPrefixUpdateAdvertisement, accountIdentifier: VmrjA5DJIdentifier, prefixIdentifier: VmrjA5DJIdentifier, bgpPrefixIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<VmrjA5DJSingleResponseBgp>> {
            return IPAddressManagementBGPPrefixesApiFp(configuration).ipAddressManagementPrefixesUpdateBgpPrefix(body, accountIdentifier, prefixIdentifier, bgpPrefixIdentifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IPAddressManagementBGPPrefixesApi - object-oriented interface
 * @export
 * @class IPAddressManagementBGPPrefixesApi
 * @extends {BaseAPI}
 */
export class IPAddressManagementBGPPrefixesApi extends BaseAPI {
    /**
     * Retrieve a single BGP Prefix according to its identifier
     * @summary Fetch BGP Prefix
     * @param {VmrjA5DJIdentifier} accountIdentifier 
     * @param {VmrjA5DJIdentifier} prefixIdentifier 
     * @param {VmrjA5DJIdentifier} bgpPrefixIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IPAddressManagementBGPPrefixesApi
     */
    public async ipAddressManagementPrefixesFetchBgpPrefix(accountIdentifier: VmrjA5DJIdentifier, prefixIdentifier: VmrjA5DJIdentifier, bgpPrefixIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<VmrjA5DJSingleResponseBgp>> {
        return IPAddressManagementBGPPrefixesApiFp(this.configuration).ipAddressManagementPrefixesFetchBgpPrefix(accountIdentifier, prefixIdentifier, bgpPrefixIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List all BGP Prefixes within the specified IP Prefix. BGP Prefixes are used to control which specific subnets are advertised to the Internet. It is possible to advertise subnets more specific than an IP Prefix by creating more specific BGP Prefixes.
     * @summary List BGP Prefixes
     * @param {VmrjA5DJIdentifier} accountIdentifier 
     * @param {VmrjA5DJIdentifier} prefixIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IPAddressManagementBGPPrefixesApi
     */
    public async ipAddressManagementPrefixesListBgpPrefixes(accountIdentifier: VmrjA5DJIdentifier, prefixIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<VmrjA5DJResponseCollectionBgp>> {
        return IPAddressManagementBGPPrefixesApiFp(this.configuration).ipAddressManagementPrefixesListBgpPrefixes(accountIdentifier, prefixIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update the properties of a BGP Prefix, such as the on demand advertisement status (advertised or withdrawn).
     * @summary Update BGP Prefix
     * @param {VmrjA5DJBgpPrefixUpdateAdvertisement} body 
     * @param {VmrjA5DJIdentifier} accountIdentifier 
     * @param {VmrjA5DJIdentifier} prefixIdentifier 
     * @param {VmrjA5DJIdentifier} bgpPrefixIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IPAddressManagementBGPPrefixesApi
     */
    public async ipAddressManagementPrefixesUpdateBgpPrefix(body: VmrjA5DJBgpPrefixUpdateAdvertisement, accountIdentifier: VmrjA5DJIdentifier, prefixIdentifier: VmrjA5DJIdentifier, bgpPrefixIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<VmrjA5DJSingleResponseBgp>> {
        return IPAddressManagementBGPPrefixesApiFp(this.configuration).ipAddressManagementPrefixesUpdateBgpPrefix(body, accountIdentifier, prefixIdentifier, bgpPrefixIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
}
