/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { GroupsIdentifierBody } from '../models';
import { InlineResponse4XX310 } from '../models';
import { InlineResponse4XX311 } from '../models';
import { XhHksmrTIdentifier } from '../models';
import { XhHksmrTMode } from '../models';
import { XhHksmrTRuleGroupResponseCollection } from '../models';
import { XhHksmrTRuleGroupResponseSingle } from '../models';
import { XhHksmrTSchemasIdentifier } from '../models';
/**
 * WAFRuleGroupsApi - axios parameter creator
 * @export
 */
export const WAFRuleGroupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Fetches the details of a WAF rule group.  **Note:** Applies only to the [previous version of WAF managed rules](https://developers.cloudflare.com/support/firewall/managed-rules-web-application-firewall-waf/understanding-waf-managed-rules-web-application-firewall/).
         * @summary Get a WAF rule group
         * @param {XhHksmrTIdentifier} identifier 
         * @param {XhHksmrTIdentifier} packageIdentifier 
         * @param {XhHksmrTSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wafRuleGroupsGetAWafRuleGroup: async (identifier: XhHksmrTIdentifier, packageIdentifier: XhHksmrTIdentifier, zoneIdentifier: XhHksmrTSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling wafRuleGroupsGetAWafRuleGroup.');
            }
            // verify required parameter 'packageIdentifier' is not null or undefined
            if (packageIdentifier === null || packageIdentifier === undefined) {
                throw new RequiredError('packageIdentifier','Required parameter packageIdentifier was null or undefined when calling wafRuleGroupsGetAWafRuleGroup.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling wafRuleGroupsGetAWafRuleGroup.');
            }
            const localVarPath = `/zones/{zone_identifier}/firewall/waf/packages/{package_identifier}/groups/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"package_identifier"}}`, encodeURIComponent(String(packageIdentifier)))
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches the WAF rule groups in a WAF package.  **Note:** Applies only to the [previous version of WAF managed rules](https://developers.cloudflare.com/support/firewall/managed-rules-web-application-firewall-waf/understanding-waf-managed-rules-web-application-firewall/).
         * @summary List WAF rule groups
         * @param {XhHksmrTIdentifier} packageIdentifier 
         * @param {XhHksmrTSchemasIdentifier} zoneIdentifier 
         * @param {XhHksmrTMode} [mode] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {string} [order] 
         * @param {string} [direction] 
         * @param {string} [match] 
         * @param {string} [name] 
         * @param {number} [rulesCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wafRuleGroupsListWafRuleGroups: async (packageIdentifier: XhHksmrTIdentifier, zoneIdentifier: XhHksmrTSchemasIdentifier, mode?: XhHksmrTMode, page?: number, perPage?: number, order?: string, direction?: string, match?: string, name?: string, rulesCount?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'packageIdentifier' is not null or undefined
            if (packageIdentifier === null || packageIdentifier === undefined) {
                throw new RequiredError('packageIdentifier','Required parameter packageIdentifier was null or undefined when calling wafRuleGroupsListWafRuleGroups.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling wafRuleGroupsListWafRuleGroups.');
            }
            const localVarPath = `/zones/{zone_identifier}/firewall/waf/packages/{package_identifier}/groups`
                .replace(`{${"package_identifier"}}`, encodeURIComponent(String(packageIdentifier)))
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            if (mode !== undefined) {
                localVarQueryParameter['mode'] = mode;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (match !== undefined) {
                localVarQueryParameter['match'] = match;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (rulesCount !== undefined) {
                localVarQueryParameter['rules_count'] = rulesCount;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a WAF rule group. You can update the state (`mode` parameter) of a rule group.  **Note:** Applies only to the [previous version of WAF managed rules](https://developers.cloudflare.com/support/firewall/managed-rules-web-application-firewall-waf/understanding-waf-managed-rules-web-application-firewall/).
         * @summary Update a WAF rule group
         * @param {GroupsIdentifierBody} body 
         * @param {XhHksmrTIdentifier} identifier 
         * @param {XhHksmrTIdentifier} packageIdentifier 
         * @param {XhHksmrTSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wafRuleGroupsUpdateAWafRuleGroup: async (body: GroupsIdentifierBody, identifier: XhHksmrTIdentifier, packageIdentifier: XhHksmrTIdentifier, zoneIdentifier: XhHksmrTSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling wafRuleGroupsUpdateAWafRuleGroup.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling wafRuleGroupsUpdateAWafRuleGroup.');
            }
            // verify required parameter 'packageIdentifier' is not null or undefined
            if (packageIdentifier === null || packageIdentifier === undefined) {
                throw new RequiredError('packageIdentifier','Required parameter packageIdentifier was null or undefined when calling wafRuleGroupsUpdateAWafRuleGroup.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling wafRuleGroupsUpdateAWafRuleGroup.');
            }
            const localVarPath = `/zones/{zone_identifier}/firewall/waf/packages/{package_identifier}/groups/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"package_identifier"}}`, encodeURIComponent(String(packageIdentifier)))
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WAFRuleGroupsApi - functional programming interface
 * @export
 */
export const WAFRuleGroupsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Fetches the details of a WAF rule group.  **Note:** Applies only to the [previous version of WAF managed rules](https://developers.cloudflare.com/support/firewall/managed-rules-web-application-firewall-waf/understanding-waf-managed-rules-web-application-firewall/).
         * @summary Get a WAF rule group
         * @param {XhHksmrTIdentifier} identifier 
         * @param {XhHksmrTIdentifier} packageIdentifier 
         * @param {XhHksmrTSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async wafRuleGroupsGetAWafRuleGroup(identifier: XhHksmrTIdentifier, packageIdentifier: XhHksmrTIdentifier, zoneIdentifier: XhHksmrTSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<XhHksmrTRuleGroupResponseSingle>>> {
            const localVarAxiosArgs = await WAFRuleGroupsApiAxiosParamCreator(configuration).wafRuleGroupsGetAWafRuleGroup(identifier, packageIdentifier, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetches the WAF rule groups in a WAF package.  **Note:** Applies only to the [previous version of WAF managed rules](https://developers.cloudflare.com/support/firewall/managed-rules-web-application-firewall-waf/understanding-waf-managed-rules-web-application-firewall/).
         * @summary List WAF rule groups
         * @param {XhHksmrTIdentifier} packageIdentifier 
         * @param {XhHksmrTSchemasIdentifier} zoneIdentifier 
         * @param {XhHksmrTMode} [mode] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {string} [order] 
         * @param {string} [direction] 
         * @param {string} [match] 
         * @param {string} [name] 
         * @param {number} [rulesCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async wafRuleGroupsListWafRuleGroups(packageIdentifier: XhHksmrTIdentifier, zoneIdentifier: XhHksmrTSchemasIdentifier, mode?: XhHksmrTMode, page?: number, perPage?: number, order?: string, direction?: string, match?: string, name?: string, rulesCount?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<XhHksmrTRuleGroupResponseCollection>>> {
            const localVarAxiosArgs = await WAFRuleGroupsApiAxiosParamCreator(configuration).wafRuleGroupsListWafRuleGroups(packageIdentifier, zoneIdentifier, mode, page, perPage, order, direction, match, name, rulesCount, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates a WAF rule group. You can update the state (`mode` parameter) of a rule group.  **Note:** Applies only to the [previous version of WAF managed rules](https://developers.cloudflare.com/support/firewall/managed-rules-web-application-firewall-waf/understanding-waf-managed-rules-web-application-firewall/).
         * @summary Update a WAF rule group
         * @param {GroupsIdentifierBody} body 
         * @param {XhHksmrTIdentifier} identifier 
         * @param {XhHksmrTIdentifier} packageIdentifier 
         * @param {XhHksmrTSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async wafRuleGroupsUpdateAWafRuleGroup(body: GroupsIdentifierBody, identifier: XhHksmrTIdentifier, packageIdentifier: XhHksmrTIdentifier, zoneIdentifier: XhHksmrTSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<XhHksmrTRuleGroupResponseSingle>>> {
            const localVarAxiosArgs = await WAFRuleGroupsApiAxiosParamCreator(configuration).wafRuleGroupsUpdateAWafRuleGroup(body, identifier, packageIdentifier, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * WAFRuleGroupsApi - factory interface
 * @export
 */
export const WAFRuleGroupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Fetches the details of a WAF rule group.  **Note:** Applies only to the [previous version of WAF managed rules](https://developers.cloudflare.com/support/firewall/managed-rules-web-application-firewall-waf/understanding-waf-managed-rules-web-application-firewall/).
         * @summary Get a WAF rule group
         * @param {XhHksmrTIdentifier} identifier 
         * @param {XhHksmrTIdentifier} packageIdentifier 
         * @param {XhHksmrTSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async wafRuleGroupsGetAWafRuleGroup(identifier: XhHksmrTIdentifier, packageIdentifier: XhHksmrTIdentifier, zoneIdentifier: XhHksmrTSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<XhHksmrTRuleGroupResponseSingle>> {
            return WAFRuleGroupsApiFp(configuration).wafRuleGroupsGetAWafRuleGroup(identifier, packageIdentifier, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches the WAF rule groups in a WAF package.  **Note:** Applies only to the [previous version of WAF managed rules](https://developers.cloudflare.com/support/firewall/managed-rules-web-application-firewall-waf/understanding-waf-managed-rules-web-application-firewall/).
         * @summary List WAF rule groups
         * @param {XhHksmrTIdentifier} packageIdentifier 
         * @param {XhHksmrTSchemasIdentifier} zoneIdentifier 
         * @param {XhHksmrTMode} [mode] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {string} [order] 
         * @param {string} [direction] 
         * @param {string} [match] 
         * @param {string} [name] 
         * @param {number} [rulesCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async wafRuleGroupsListWafRuleGroups(packageIdentifier: XhHksmrTIdentifier, zoneIdentifier: XhHksmrTSchemasIdentifier, mode?: XhHksmrTMode, page?: number, perPage?: number, order?: string, direction?: string, match?: string, name?: string, rulesCount?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<XhHksmrTRuleGroupResponseCollection>> {
            return WAFRuleGroupsApiFp(configuration).wafRuleGroupsListWafRuleGroups(packageIdentifier, zoneIdentifier, mode, page, perPage, order, direction, match, name, rulesCount, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a WAF rule group. You can update the state (`mode` parameter) of a rule group.  **Note:** Applies only to the [previous version of WAF managed rules](https://developers.cloudflare.com/support/firewall/managed-rules-web-application-firewall-waf/understanding-waf-managed-rules-web-application-firewall/).
         * @summary Update a WAF rule group
         * @param {GroupsIdentifierBody} body 
         * @param {XhHksmrTIdentifier} identifier 
         * @param {XhHksmrTIdentifier} packageIdentifier 
         * @param {XhHksmrTSchemasIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async wafRuleGroupsUpdateAWafRuleGroup(body: GroupsIdentifierBody, identifier: XhHksmrTIdentifier, packageIdentifier: XhHksmrTIdentifier, zoneIdentifier: XhHksmrTSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<XhHksmrTRuleGroupResponseSingle>> {
            return WAFRuleGroupsApiFp(configuration).wafRuleGroupsUpdateAWafRuleGroup(body, identifier, packageIdentifier, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WAFRuleGroupsApi - object-oriented interface
 * @export
 * @class WAFRuleGroupsApi
 * @extends {BaseAPI}
 */
export class WAFRuleGroupsApi extends BaseAPI {
    /**
     * Fetches the details of a WAF rule group.  **Note:** Applies only to the [previous version of WAF managed rules](https://developers.cloudflare.com/support/firewall/managed-rules-web-application-firewall-waf/understanding-waf-managed-rules-web-application-firewall/).
     * @summary Get a WAF rule group
     * @param {XhHksmrTIdentifier} identifier 
     * @param {XhHksmrTIdentifier} packageIdentifier 
     * @param {XhHksmrTSchemasIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WAFRuleGroupsApi
     */
    public async wafRuleGroupsGetAWafRuleGroup(identifier: XhHksmrTIdentifier, packageIdentifier: XhHksmrTIdentifier, zoneIdentifier: XhHksmrTSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<XhHksmrTRuleGroupResponseSingle>> {
        return WAFRuleGroupsApiFp(this.configuration).wafRuleGroupsGetAWafRuleGroup(identifier, packageIdentifier, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches the WAF rule groups in a WAF package.  **Note:** Applies only to the [previous version of WAF managed rules](https://developers.cloudflare.com/support/firewall/managed-rules-web-application-firewall-waf/understanding-waf-managed-rules-web-application-firewall/).
     * @summary List WAF rule groups
     * @param {XhHksmrTIdentifier} packageIdentifier 
     * @param {XhHksmrTSchemasIdentifier} zoneIdentifier 
     * @param {XhHksmrTMode} [mode] 
     * @param {number} [page] 
     * @param {number} [perPage] 
     * @param {string} [order] 
     * @param {string} [direction] 
     * @param {string} [match] 
     * @param {string} [name] 
     * @param {number} [rulesCount] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WAFRuleGroupsApi
     */
    public async wafRuleGroupsListWafRuleGroups(packageIdentifier: XhHksmrTIdentifier, zoneIdentifier: XhHksmrTSchemasIdentifier, mode?: XhHksmrTMode, page?: number, perPage?: number, order?: string, direction?: string, match?: string, name?: string, rulesCount?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<XhHksmrTRuleGroupResponseCollection>> {
        return WAFRuleGroupsApiFp(this.configuration).wafRuleGroupsListWafRuleGroups(packageIdentifier, zoneIdentifier, mode, page, perPage, order, direction, match, name, rulesCount, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates a WAF rule group. You can update the state (`mode` parameter) of a rule group.  **Note:** Applies only to the [previous version of WAF managed rules](https://developers.cloudflare.com/support/firewall/managed-rules-web-application-firewall-waf/understanding-waf-managed-rules-web-application-firewall/).
     * @summary Update a WAF rule group
     * @param {GroupsIdentifierBody} body 
     * @param {XhHksmrTIdentifier} identifier 
     * @param {XhHksmrTIdentifier} packageIdentifier 
     * @param {XhHksmrTSchemasIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WAFRuleGroupsApi
     */
    public async wafRuleGroupsUpdateAWafRuleGroup(body: GroupsIdentifierBody, identifier: XhHksmrTIdentifier, packageIdentifier: XhHksmrTIdentifier, zoneIdentifier: XhHksmrTSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<XhHksmrTRuleGroupResponseSingle>> {
        return WAFRuleGroupsApiFp(this.configuration).wafRuleGroupsUpdateAWafRuleGroup(body, identifier, packageIdentifier, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
}
