/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AccessRulesRulesBody } from '../models';
import { C4f8RoOSEgsPagination } from '../models';
import { C4f8RoOSRuleCollectionResponse } from '../models';
import { C4f8RoOSRuleComponentsSchemasIdentifier } from '../models';
import { C4f8RoOSRuleSingleIdResponse } from '../models';
import { C4f8RoOSRuleSingleResponse } from '../models';
import { C4f8RoOSSchemasFilters } from '../models';
import { InlineResponse4xx30 } from '../models';
import { InlineResponse4xx31 } from '../models';
import { InlineResponse4xx32 } from '../models';
import { RulesIdentifierBody } from '../models';
/**
 * IPAccessRulesForAUserApi - axios parameter creator
 * @export
 */
export const IPAccessRulesForAUserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new IP Access rule for all zones owned by the current user.  Note: To create an IP Access rule that applies to a specific zone, refer to the [IP Access rules for a zone](#ip-access-rules-for-a-zone) endpoints.
         * @summary Create an IP Access rule
         * @param {AccessRulesRulesBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipAccessRulesForAUserCreateAnIpAccessRule: async (body: AccessRulesRulesBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling ipAccessRulesForAUserCreateAnIpAccessRule.');
            }
            const localVarPath = `/user/firewall/access_rules/rules`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an IP Access rule at the user level.  Note: Deleting a user-level rule will affect all zones owned by the user.
         * @summary Delete an IP Access rule
         * @param {C4f8RoOSRuleComponentsSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipAccessRulesForAUserDeleteAnIpAccessRule: async (identifier: C4f8RoOSRuleComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling ipAccessRulesForAUserDeleteAnIpAccessRule.');
            }
            const localVarPath = `/user/firewall/access_rules/rules/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches IP Access rules of the user. You can filter the results using several optional parameters.
         * @summary List IP Access rules
         * @param {C4f8RoOSSchemasFilters} [filters] 
         * @param {C4f8RoOSEgsPagination} [egsPaginationJson] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {string} [order] 
         * @param {string} [direction] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipAccessRulesForAUserListIpAccessRules: async (filters?: C4f8RoOSSchemasFilters, egsPaginationJson?: C4f8RoOSEgsPagination, page?: number, perPage?: number, order?: string, direction?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/firewall/access_rules/rules`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (egsPaginationJson !== undefined) {
                localVarQueryParameter['egs-pagination.json'] = egsPaginationJson;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an IP Access rule defined at the user level. You can only update the rule action (`mode` parameter) and notes.
         * @summary Update an IP Access rule
         * @param {RulesIdentifierBody} body 
         * @param {C4f8RoOSRuleComponentsSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipAccessRulesForAUserUpdateAnIpAccessRule: async (body: RulesIdentifierBody, identifier: C4f8RoOSRuleComponentsSchemasIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling ipAccessRulesForAUserUpdateAnIpAccessRule.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling ipAccessRulesForAUserUpdateAnIpAccessRule.');
            }
            const localVarPath = `/user/firewall/access_rules/rules/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IPAccessRulesForAUserApi - functional programming interface
 * @export
 */
export const IPAccessRulesForAUserApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates a new IP Access rule for all zones owned by the current user.  Note: To create an IP Access rule that applies to a specific zone, refer to the [IP Access rules for a zone](#ip-access-rules-for-a-zone) endpoints.
         * @summary Create an IP Access rule
         * @param {AccessRulesRulesBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAccessRulesForAUserCreateAnIpAccessRule(body: AccessRulesRulesBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<C4f8RoOSRuleSingleResponse>>> {
            const localVarAxiosArgs = await IPAccessRulesForAUserApiAxiosParamCreator(configuration).ipAccessRulesForAUserCreateAnIpAccessRule(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes an IP Access rule at the user level.  Note: Deleting a user-level rule will affect all zones owned by the user.
         * @summary Delete an IP Access rule
         * @param {C4f8RoOSRuleComponentsSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAccessRulesForAUserDeleteAnIpAccessRule(identifier: C4f8RoOSRuleComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<C4f8RoOSRuleSingleIdResponse>>> {
            const localVarAxiosArgs = await IPAccessRulesForAUserApiAxiosParamCreator(configuration).ipAccessRulesForAUserDeleteAnIpAccessRule(identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetches IP Access rules of the user. You can filter the results using several optional parameters.
         * @summary List IP Access rules
         * @param {C4f8RoOSSchemasFilters} [filters] 
         * @param {C4f8RoOSEgsPagination} [egsPaginationJson] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {string} [order] 
         * @param {string} [direction] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAccessRulesForAUserListIpAccessRules(filters?: C4f8RoOSSchemasFilters, egsPaginationJson?: C4f8RoOSEgsPagination, page?: number, perPage?: number, order?: string, direction?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<C4f8RoOSRuleCollectionResponse>>> {
            const localVarAxiosArgs = await IPAccessRulesForAUserApiAxiosParamCreator(configuration).ipAccessRulesForAUserListIpAccessRules(filters, egsPaginationJson, page, perPage, order, direction, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates an IP Access rule defined at the user level. You can only update the rule action (`mode` parameter) and notes.
         * @summary Update an IP Access rule
         * @param {RulesIdentifierBody} body 
         * @param {C4f8RoOSRuleComponentsSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAccessRulesForAUserUpdateAnIpAccessRule(body: RulesIdentifierBody, identifier: C4f8RoOSRuleComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<C4f8RoOSRuleSingleResponse>>> {
            const localVarAxiosArgs = await IPAccessRulesForAUserApiAxiosParamCreator(configuration).ipAccessRulesForAUserUpdateAnIpAccessRule(body, identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * IPAccessRulesForAUserApi - factory interface
 * @export
 */
export const IPAccessRulesForAUserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Creates a new IP Access rule for all zones owned by the current user.  Note: To create an IP Access rule that applies to a specific zone, refer to the [IP Access rules for a zone](#ip-access-rules-for-a-zone) endpoints.
         * @summary Create an IP Access rule
         * @param {AccessRulesRulesBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAccessRulesForAUserCreateAnIpAccessRule(body: AccessRulesRulesBody, options?: AxiosRequestConfig): Promise<AxiosResponse<C4f8RoOSRuleSingleResponse>> {
            return IPAccessRulesForAUserApiFp(configuration).ipAccessRulesForAUserCreateAnIpAccessRule(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes an IP Access rule at the user level.  Note: Deleting a user-level rule will affect all zones owned by the user.
         * @summary Delete an IP Access rule
         * @param {C4f8RoOSRuleComponentsSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAccessRulesForAUserDeleteAnIpAccessRule(identifier: C4f8RoOSRuleComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<C4f8RoOSRuleSingleIdResponse>> {
            return IPAccessRulesForAUserApiFp(configuration).ipAccessRulesForAUserDeleteAnIpAccessRule(identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches IP Access rules of the user. You can filter the results using several optional parameters.
         * @summary List IP Access rules
         * @param {C4f8RoOSSchemasFilters} [filters] 
         * @param {C4f8RoOSEgsPagination} [egsPaginationJson] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {string} [order] 
         * @param {string} [direction] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAccessRulesForAUserListIpAccessRules(filters?: C4f8RoOSSchemasFilters, egsPaginationJson?: C4f8RoOSEgsPagination, page?: number, perPage?: number, order?: string, direction?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<C4f8RoOSRuleCollectionResponse>> {
            return IPAccessRulesForAUserApiFp(configuration).ipAccessRulesForAUserListIpAccessRules(filters, egsPaginationJson, page, perPage, order, direction, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an IP Access rule defined at the user level. You can only update the rule action (`mode` parameter) and notes.
         * @summary Update an IP Access rule
         * @param {RulesIdentifierBody} body 
         * @param {C4f8RoOSRuleComponentsSchemasIdentifier} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAccessRulesForAUserUpdateAnIpAccessRule(body: RulesIdentifierBody, identifier: C4f8RoOSRuleComponentsSchemasIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<C4f8RoOSRuleSingleResponse>> {
            return IPAccessRulesForAUserApiFp(configuration).ipAccessRulesForAUserUpdateAnIpAccessRule(body, identifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IPAccessRulesForAUserApi - object-oriented interface
 * @export
 * @class IPAccessRulesForAUserApi
 * @extends {BaseAPI}
 */
export class IPAccessRulesForAUserApi extends BaseAPI {
    /**
     * Creates a new IP Access rule for all zones owned by the current user.  Note: To create an IP Access rule that applies to a specific zone, refer to the [IP Access rules for a zone](#ip-access-rules-for-a-zone) endpoints.
     * @summary Create an IP Access rule
     * @param {AccessRulesRulesBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IPAccessRulesForAUserApi
     */
    public async ipAccessRulesForAUserCreateAnIpAccessRule(body: AccessRulesRulesBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<C4f8RoOSRuleSingleResponse>> {
        return IPAccessRulesForAUserApiFp(this.configuration).ipAccessRulesForAUserCreateAnIpAccessRule(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes an IP Access rule at the user level.  Note: Deleting a user-level rule will affect all zones owned by the user.
     * @summary Delete an IP Access rule
     * @param {C4f8RoOSRuleComponentsSchemasIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IPAccessRulesForAUserApi
     */
    public async ipAccessRulesForAUserDeleteAnIpAccessRule(identifier: C4f8RoOSRuleComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<C4f8RoOSRuleSingleIdResponse>> {
        return IPAccessRulesForAUserApiFp(this.configuration).ipAccessRulesForAUserDeleteAnIpAccessRule(identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches IP Access rules of the user. You can filter the results using several optional parameters.
     * @summary List IP Access rules
     * @param {C4f8RoOSSchemasFilters} [filters] 
     * @param {C4f8RoOSEgsPagination} [egsPaginationJson] 
     * @param {number} [page] 
     * @param {number} [perPage] 
     * @param {string} [order] 
     * @param {string} [direction] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IPAccessRulesForAUserApi
     */
    public async ipAccessRulesForAUserListIpAccessRules(filters?: C4f8RoOSSchemasFilters, egsPaginationJson?: C4f8RoOSEgsPagination, page?: number, perPage?: number, order?: string, direction?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<C4f8RoOSRuleCollectionResponse>> {
        return IPAccessRulesForAUserApiFp(this.configuration).ipAccessRulesForAUserListIpAccessRules(filters, egsPaginationJson, page, perPage, order, direction, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates an IP Access rule defined at the user level. You can only update the rule action (`mode` parameter) and notes.
     * @summary Update an IP Access rule
     * @param {RulesIdentifierBody} body 
     * @param {C4f8RoOSRuleComponentsSchemasIdentifier} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IPAccessRulesForAUserApi
     */
    public async ipAccessRulesForAUserUpdateAnIpAccessRule(body: RulesIdentifierBody, identifier: C4f8RoOSRuleComponentsSchemasIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<C4f8RoOSRuleSingleResponse>> {
        return IPAccessRulesForAUserApiFp(this.configuration).ipAccessRulesForAUserUpdateAnIpAccessRule(body, identifier, options).then((request) => request(this.axios, this.basePath));
    }
}
