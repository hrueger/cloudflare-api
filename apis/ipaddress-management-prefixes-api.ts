/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AddressingPrefixesBody } from '../models';
import { InlineResponse4XX157 } from '../models';
import { InlineResponse4xx42 } from '../models';
import { InlineResponse4xx43 } from '../models';
import { InlineResponse4xx44 } from '../models';
import { InlineResponse4xx45 } from '../models';
import { PrefixesPrefixIdentifierBody } from '../models';
import { VmrjA5DJApiResponseCollection } from '../models';
import { VmrjA5DJIdentifier } from '../models';
import { VmrjA5DJLoaDocumentIdentifier } from '../models';
import { VmrjA5DJLoaUploadResponse } from '../models';
import { VmrjA5DJResponseCollection } from '../models';
import { VmrjA5DJSingleResponse } from '../models';
/**
 * IPAddressManagementPrefixesApi - axios parameter creator
 * @export
 */
export const IPAddressManagementPrefixesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a new prefix under the account.
         * @summary Add Prefix
         * @param {AddressingPrefixesBody} body 
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipAddressManagementPrefixesAddPrefix: async (body: AddressingPrefixesBody, accountIdentifier: VmrjA5DJIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling ipAddressManagementPrefixesAddPrefix.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling ipAddressManagementPrefixesAddPrefix.');
            }
            const localVarPath = `/accounts/{account_identifier}/addressing/prefixes`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an unapproved prefix owned by the account.
         * @summary Delete Prefix
         * @param {VmrjA5DJIdentifier} prefixIdentifier 
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipAddressManagementPrefixesDeletePrefix: async (prefixIdentifier: VmrjA5DJIdentifier, accountIdentifier: VmrjA5DJIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'prefixIdentifier' is not null or undefined
            if (prefixIdentifier === null || prefixIdentifier === undefined) {
                throw new RequiredError('prefixIdentifier','Required parameter prefixIdentifier was null or undefined when calling ipAddressManagementPrefixesDeletePrefix.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling ipAddressManagementPrefixesDeletePrefix.');
            }
            const localVarPath = `/accounts/{account_identifier}/addressing/prefixes/{prefix_identifier}`
                .replace(`{${"prefix_identifier"}}`, encodeURIComponent(String(prefixIdentifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Download specified LOA document under the account.
         * @summary Download LOA Document
         * @param {VmrjA5DJLoaDocumentIdentifier} loaDocumentIdentifier 
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipAddressManagementPrefixesDownloadLoaDocument: async (loaDocumentIdentifier: VmrjA5DJLoaDocumentIdentifier, accountIdentifier: VmrjA5DJIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loaDocumentIdentifier' is not null or undefined
            if (loaDocumentIdentifier === null || loaDocumentIdentifier === undefined) {
                throw new RequiredError('loaDocumentIdentifier','Required parameter loaDocumentIdentifier was null or undefined when calling ipAddressManagementPrefixesDownloadLoaDocument.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling ipAddressManagementPrefixesDownloadLoaDocument.');
            }
            const localVarPath = `/accounts/{account_identifier}/addressing/loa_documents/{loa_document_identifier}/download`
                .replace(`{${"loa_document_identifier"}}`, encodeURIComponent(String(loaDocumentIdentifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List all prefixes owned by the account.
         * @summary List Prefixes
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipAddressManagementPrefixesListPrefixes: async (accountIdentifier: VmrjA5DJIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling ipAddressManagementPrefixesListPrefixes.');
            }
            const localVarPath = `/accounts/{account_identifier}/addressing/prefixes`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List a particular prefix owned by the account.
         * @summary Prefix Details
         * @param {VmrjA5DJIdentifier} prefixIdentifier 
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipAddressManagementPrefixesPrefixDetails: async (prefixIdentifier: VmrjA5DJIdentifier, accountIdentifier: VmrjA5DJIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'prefixIdentifier' is not null or undefined
            if (prefixIdentifier === null || prefixIdentifier === undefined) {
                throw new RequiredError('prefixIdentifier','Required parameter prefixIdentifier was null or undefined when calling ipAddressManagementPrefixesPrefixDetails.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling ipAddressManagementPrefixesPrefixDetails.');
            }
            const localVarPath = `/accounts/{account_identifier}/addressing/prefixes/{prefix_identifier}`
                .replace(`{${"prefix_identifier"}}`, encodeURIComponent(String(prefixIdentifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify the description for a prefix owned by the account.
         * @summary Update Prefix Description
         * @param {PrefixesPrefixIdentifierBody} body 
         * @param {VmrjA5DJIdentifier} prefixIdentifier 
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipAddressManagementPrefixesUpdatePrefixDescription: async (body: PrefixesPrefixIdentifierBody, prefixIdentifier: VmrjA5DJIdentifier, accountIdentifier: VmrjA5DJIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling ipAddressManagementPrefixesUpdatePrefixDescription.');
            }
            // verify required parameter 'prefixIdentifier' is not null or undefined
            if (prefixIdentifier === null || prefixIdentifier === undefined) {
                throw new RequiredError('prefixIdentifier','Required parameter prefixIdentifier was null or undefined when calling ipAddressManagementPrefixesUpdatePrefixDescription.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling ipAddressManagementPrefixesUpdatePrefixDescription.');
            }
            const localVarPath = `/accounts/{account_identifier}/addressing/prefixes/{prefix_identifier}`
                .replace(`{${"prefix_identifier"}}`, encodeURIComponent(String(prefixIdentifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Submit LOA document (pdf format) under the account.
         * @summary Upload LOA Document
         * @param {string} loaDocument 
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipAddressManagementPrefixesUploadLoaDocumentForm: async (loaDocument: string, accountIdentifier: VmrjA5DJIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loaDocument' is not null or undefined
            if (loaDocument === null || loaDocument === undefined) {
                throw new RequiredError('loaDocument','Required parameter loaDocument was null or undefined when calling ipAddressManagementPrefixesUploadLoaDocumentForm.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling ipAddressManagementPrefixesUploadLoaDocumentForm.');
            }
            const localVarPath = `/accounts/{account_identifier}/addressing/loa_documents`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }


            if (loaDocument !== undefined) { 
                localVarFormParams.append('loa_document', loaDocument as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IPAddressManagementPrefixesApi - functional programming interface
 * @export
 */
export const IPAddressManagementPrefixesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Add a new prefix under the account.
         * @summary Add Prefix
         * @param {AddressingPrefixesBody} body 
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAddressManagementPrefixesAddPrefix(body: AddressingPrefixesBody, accountIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<VmrjA5DJSingleResponse>>> {
            const localVarAxiosArgs = await IPAddressManagementPrefixesApiAxiosParamCreator(configuration).ipAddressManagementPrefixesAddPrefix(body, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete an unapproved prefix owned by the account.
         * @summary Delete Prefix
         * @param {VmrjA5DJIdentifier} prefixIdentifier 
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAddressManagementPrefixesDeletePrefix(prefixIdentifier: VmrjA5DJIdentifier, accountIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<VmrjA5DJApiResponseCollection>>> {
            const localVarAxiosArgs = await IPAddressManagementPrefixesApiAxiosParamCreator(configuration).ipAddressManagementPrefixesDeletePrefix(prefixIdentifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Download specified LOA document under the account.
         * @summary Download LOA Document
         * @param {VmrjA5DJLoaDocumentIdentifier} loaDocumentIdentifier 
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAddressManagementPrefixesDownloadLoaDocument(loaDocumentIdentifier: VmrjA5DJLoaDocumentIdentifier, accountIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await IPAddressManagementPrefixesApiAxiosParamCreator(configuration).ipAddressManagementPrefixesDownloadLoaDocument(loaDocumentIdentifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List all prefixes owned by the account.
         * @summary List Prefixes
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAddressManagementPrefixesListPrefixes(accountIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<VmrjA5DJResponseCollection>>> {
            const localVarAxiosArgs = await IPAddressManagementPrefixesApiAxiosParamCreator(configuration).ipAddressManagementPrefixesListPrefixes(accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List a particular prefix owned by the account.
         * @summary Prefix Details
         * @param {VmrjA5DJIdentifier} prefixIdentifier 
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAddressManagementPrefixesPrefixDetails(prefixIdentifier: VmrjA5DJIdentifier, accountIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<VmrjA5DJSingleResponse>>> {
            const localVarAxiosArgs = await IPAddressManagementPrefixesApiAxiosParamCreator(configuration).ipAddressManagementPrefixesPrefixDetails(prefixIdentifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Modify the description for a prefix owned by the account.
         * @summary Update Prefix Description
         * @param {PrefixesPrefixIdentifierBody} body 
         * @param {VmrjA5DJIdentifier} prefixIdentifier 
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAddressManagementPrefixesUpdatePrefixDescription(body: PrefixesPrefixIdentifierBody, prefixIdentifier: VmrjA5DJIdentifier, accountIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<VmrjA5DJSingleResponse>>> {
            const localVarAxiosArgs = await IPAddressManagementPrefixesApiAxiosParamCreator(configuration).ipAddressManagementPrefixesUpdatePrefixDescription(body, prefixIdentifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Submit LOA document (pdf format) under the account.
         * @summary Upload LOA Document
         * @param {string} loaDocument 
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAddressManagementPrefixesUploadLoaDocumentForm(loaDocument: string, accountIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<VmrjA5DJLoaUploadResponse>>> {
            const localVarAxiosArgs = await IPAddressManagementPrefixesApiAxiosParamCreator(configuration).ipAddressManagementPrefixesUploadLoaDocumentForm(loaDocument, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * IPAddressManagementPrefixesApi - factory interface
 * @export
 */
export const IPAddressManagementPrefixesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Add a new prefix under the account.
         * @summary Add Prefix
         * @param {AddressingPrefixesBody} body 
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAddressManagementPrefixesAddPrefix(body: AddressingPrefixesBody, accountIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<VmrjA5DJSingleResponse>> {
            return IPAddressManagementPrefixesApiFp(configuration).ipAddressManagementPrefixesAddPrefix(body, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an unapproved prefix owned by the account.
         * @summary Delete Prefix
         * @param {VmrjA5DJIdentifier} prefixIdentifier 
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAddressManagementPrefixesDeletePrefix(prefixIdentifier: VmrjA5DJIdentifier, accountIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<VmrjA5DJApiResponseCollection>> {
            return IPAddressManagementPrefixesApiFp(configuration).ipAddressManagementPrefixesDeletePrefix(prefixIdentifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Download specified LOA document under the account.
         * @summary Download LOA Document
         * @param {VmrjA5DJLoaDocumentIdentifier} loaDocumentIdentifier 
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAddressManagementPrefixesDownloadLoaDocument(loaDocumentIdentifier: VmrjA5DJLoaDocumentIdentifier, accountIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return IPAddressManagementPrefixesApiFp(configuration).ipAddressManagementPrefixesDownloadLoaDocument(loaDocumentIdentifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * List all prefixes owned by the account.
         * @summary List Prefixes
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAddressManagementPrefixesListPrefixes(accountIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<VmrjA5DJResponseCollection>> {
            return IPAddressManagementPrefixesApiFp(configuration).ipAddressManagementPrefixesListPrefixes(accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * List a particular prefix owned by the account.
         * @summary Prefix Details
         * @param {VmrjA5DJIdentifier} prefixIdentifier 
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAddressManagementPrefixesPrefixDetails(prefixIdentifier: VmrjA5DJIdentifier, accountIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<VmrjA5DJSingleResponse>> {
            return IPAddressManagementPrefixesApiFp(configuration).ipAddressManagementPrefixesPrefixDetails(prefixIdentifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify the description for a prefix owned by the account.
         * @summary Update Prefix Description
         * @param {PrefixesPrefixIdentifierBody} body 
         * @param {VmrjA5DJIdentifier} prefixIdentifier 
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAddressManagementPrefixesUpdatePrefixDescription(body: PrefixesPrefixIdentifierBody, prefixIdentifier: VmrjA5DJIdentifier, accountIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<VmrjA5DJSingleResponse>> {
            return IPAddressManagementPrefixesApiFp(configuration).ipAddressManagementPrefixesUpdatePrefixDescription(body, prefixIdentifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Submit LOA document (pdf format) under the account.
         * @summary Upload LOA Document
         * @param {string} loaDocument 
         * @param {VmrjA5DJIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipAddressManagementPrefixesUploadLoaDocumentForm(loaDocument: string, accountIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<VmrjA5DJLoaUploadResponse>> {
            return IPAddressManagementPrefixesApiFp(configuration).ipAddressManagementPrefixesUploadLoaDocumentForm(loaDocument, accountIdentifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IPAddressManagementPrefixesApi - object-oriented interface
 * @export
 * @class IPAddressManagementPrefixesApi
 * @extends {BaseAPI}
 */
export class IPAddressManagementPrefixesApi extends BaseAPI {
    /**
     * Add a new prefix under the account.
     * @summary Add Prefix
     * @param {AddressingPrefixesBody} body 
     * @param {VmrjA5DJIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IPAddressManagementPrefixesApi
     */
    public async ipAddressManagementPrefixesAddPrefix(body: AddressingPrefixesBody, accountIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<VmrjA5DJSingleResponse>> {
        return IPAddressManagementPrefixesApiFp(this.configuration).ipAddressManagementPrefixesAddPrefix(body, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete an unapproved prefix owned by the account.
     * @summary Delete Prefix
     * @param {VmrjA5DJIdentifier} prefixIdentifier 
     * @param {VmrjA5DJIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IPAddressManagementPrefixesApi
     */
    public async ipAddressManagementPrefixesDeletePrefix(prefixIdentifier: VmrjA5DJIdentifier, accountIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<VmrjA5DJApiResponseCollection>> {
        return IPAddressManagementPrefixesApiFp(this.configuration).ipAddressManagementPrefixesDeletePrefix(prefixIdentifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Download specified LOA document under the account.
     * @summary Download LOA Document
     * @param {VmrjA5DJLoaDocumentIdentifier} loaDocumentIdentifier 
     * @param {VmrjA5DJIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IPAddressManagementPrefixesApi
     */
    public async ipAddressManagementPrefixesDownloadLoaDocument(loaDocumentIdentifier: VmrjA5DJLoaDocumentIdentifier, accountIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return IPAddressManagementPrefixesApiFp(this.configuration).ipAddressManagementPrefixesDownloadLoaDocument(loaDocumentIdentifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List all prefixes owned by the account.
     * @summary List Prefixes
     * @param {VmrjA5DJIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IPAddressManagementPrefixesApi
     */
    public async ipAddressManagementPrefixesListPrefixes(accountIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<VmrjA5DJResponseCollection>> {
        return IPAddressManagementPrefixesApiFp(this.configuration).ipAddressManagementPrefixesListPrefixes(accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a particular prefix owned by the account.
     * @summary Prefix Details
     * @param {VmrjA5DJIdentifier} prefixIdentifier 
     * @param {VmrjA5DJIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IPAddressManagementPrefixesApi
     */
    public async ipAddressManagementPrefixesPrefixDetails(prefixIdentifier: VmrjA5DJIdentifier, accountIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<VmrjA5DJSingleResponse>> {
        return IPAddressManagementPrefixesApiFp(this.configuration).ipAddressManagementPrefixesPrefixDetails(prefixIdentifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Modify the description for a prefix owned by the account.
     * @summary Update Prefix Description
     * @param {PrefixesPrefixIdentifierBody} body 
     * @param {VmrjA5DJIdentifier} prefixIdentifier 
     * @param {VmrjA5DJIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IPAddressManagementPrefixesApi
     */
    public async ipAddressManagementPrefixesUpdatePrefixDescription(body: PrefixesPrefixIdentifierBody, prefixIdentifier: VmrjA5DJIdentifier, accountIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<VmrjA5DJSingleResponse>> {
        return IPAddressManagementPrefixesApiFp(this.configuration).ipAddressManagementPrefixesUpdatePrefixDescription(body, prefixIdentifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Submit LOA document (pdf format) under the account.
     * @summary Upload LOA Document
     * @param {string} loaDocument 
     * @param {VmrjA5DJIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IPAddressManagementPrefixesApi
     */
    public async ipAddressManagementPrefixesUploadLoaDocumentForm(loaDocument: string, accountIdentifier: VmrjA5DJIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<VmrjA5DJLoaUploadResponse>> {
        return IPAddressManagementPrefixesApiFp(this.configuration).ipAddressManagementPrefixesUploadLoaDocumentForm(loaDocument, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
}
