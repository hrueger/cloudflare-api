/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { HealthchecksIdResponse } from '../models';
import { HealthchecksIdentifier } from '../models';
import { HealthchecksQueryHealthcheck } from '../models';
import { HealthchecksResponseCollection } from '../models';
import { HealthchecksSingleResponse } from '../models';
import { InlineResponse4XX153 } from '../models';
import { InlineResponse4XX154 } from '../models';
import { InlineResponse4XX155 } from '../models';
/**
 * HealthChecksApi - axios parameter creator
 * @export
 */
export const HealthChecksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new health check.
         * @summary Create Health Check
         * @param {HealthchecksQueryHealthcheck} body 
         * @param {HealthchecksIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthChecksCreateHealthCheck: async (body: HealthchecksQueryHealthcheck, zoneIdentifier: HealthchecksIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling healthChecksCreateHealthCheck.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling healthChecksCreateHealthCheck.');
            }
            const localVarPath = `/zones/{zone_identifier}/healthchecks`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new preview health check.
         * @summary Create Preview Health Check
         * @param {HealthchecksQueryHealthcheck} body 
         * @param {HealthchecksIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthChecksCreatePreviewHealthCheck: async (body: HealthchecksQueryHealthcheck, zoneIdentifier: HealthchecksIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling healthChecksCreatePreviewHealthCheck.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling healthChecksCreatePreviewHealthCheck.');
            }
            const localVarPath = `/zones/{zone_identifier}/healthchecks/preview`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a health check.
         * @summary Delete Health Check
         * @param {HealthchecksIdentifier} identifier 
         * @param {HealthchecksIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthChecksDeleteHealthCheck: async (identifier: HealthchecksIdentifier, zoneIdentifier: HealthchecksIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling healthChecksDeleteHealthCheck.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling healthChecksDeleteHealthCheck.');
            }
            const localVarPath = `/zones/{zone_identifier}/healthchecks/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a health check.
         * @summary Delete Preview Health Check
         * @param {HealthchecksIdentifier} identifier 
         * @param {HealthchecksIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthChecksDeletePreviewHealthCheck: async (identifier: HealthchecksIdentifier, zoneIdentifier: HealthchecksIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling healthChecksDeletePreviewHealthCheck.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling healthChecksDeletePreviewHealthCheck.');
            }
            const localVarPath = `/zones/{zone_identifier}/healthchecks/preview/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch a single configured health check.
         * @summary Health Check Details
         * @param {HealthchecksIdentifier} identifier 
         * @param {HealthchecksIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthChecksHealthCheckDetails: async (identifier: HealthchecksIdentifier, zoneIdentifier: HealthchecksIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling healthChecksHealthCheckDetails.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling healthChecksHealthCheckDetails.');
            }
            const localVarPath = `/zones/{zone_identifier}/healthchecks/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch a single configured health check preview.
         * @summary Health Check Preview Details
         * @param {HealthchecksIdentifier} identifier 
         * @param {HealthchecksIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthChecksHealthCheckPreviewDetails: async (identifier: HealthchecksIdentifier, zoneIdentifier: HealthchecksIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling healthChecksHealthCheckPreviewDetails.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling healthChecksHealthCheckPreviewDetails.');
            }
            const localVarPath = `/zones/{zone_identifier}/healthchecks/preview/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List configured health checks.
         * @summary List Health Checks
         * @param {HealthchecksIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthChecksListHealthChecks: async (zoneIdentifier: HealthchecksIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling healthChecksListHealthChecks.');
            }
            const localVarPath = `/zones/{zone_identifier}/healthchecks`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Patch a configured health check.
         * @summary Patch Health Check
         * @param {HealthchecksQueryHealthcheck} body 
         * @param {HealthchecksIdentifier} identifier 
         * @param {HealthchecksIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthChecksPatchHealthCheck: async (body: HealthchecksQueryHealthcheck, identifier: HealthchecksIdentifier, zoneIdentifier: HealthchecksIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling healthChecksPatchHealthCheck.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling healthChecksPatchHealthCheck.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling healthChecksPatchHealthCheck.');
            }
            const localVarPath = `/zones/{zone_identifier}/healthchecks/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a configured health check.
         * @summary Update Health Check
         * @param {HealthchecksQueryHealthcheck} body 
         * @param {HealthchecksIdentifier} identifier 
         * @param {HealthchecksIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthChecksUpdateHealthCheck: async (body: HealthchecksQueryHealthcheck, identifier: HealthchecksIdentifier, zoneIdentifier: HealthchecksIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling healthChecksUpdateHealthCheck.');
            }
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling healthChecksUpdateHealthCheck.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling healthChecksUpdateHealthCheck.');
            }
            const localVarPath = `/zones/{zone_identifier}/healthchecks/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)))
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            // authentication api_token required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HealthChecksApi - functional programming interface
 * @export
 */
export const HealthChecksApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create a new health check.
         * @summary Create Health Check
         * @param {HealthchecksQueryHealthcheck} body 
         * @param {HealthchecksIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthChecksCreateHealthCheck(body: HealthchecksQueryHealthcheck, zoneIdentifier: HealthchecksIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<HealthchecksSingleResponse>>> {
            const localVarAxiosArgs = await HealthChecksApiAxiosParamCreator(configuration).healthChecksCreateHealthCheck(body, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new preview health check.
         * @summary Create Preview Health Check
         * @param {HealthchecksQueryHealthcheck} body 
         * @param {HealthchecksIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthChecksCreatePreviewHealthCheck(body: HealthchecksQueryHealthcheck, zoneIdentifier: HealthchecksIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<HealthchecksSingleResponse>>> {
            const localVarAxiosArgs = await HealthChecksApiAxiosParamCreator(configuration).healthChecksCreatePreviewHealthCheck(body, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a health check.
         * @summary Delete Health Check
         * @param {HealthchecksIdentifier} identifier 
         * @param {HealthchecksIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthChecksDeleteHealthCheck(identifier: HealthchecksIdentifier, zoneIdentifier: HealthchecksIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<HealthchecksIdResponse>>> {
            const localVarAxiosArgs = await HealthChecksApiAxiosParamCreator(configuration).healthChecksDeleteHealthCheck(identifier, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a health check.
         * @summary Delete Preview Health Check
         * @param {HealthchecksIdentifier} identifier 
         * @param {HealthchecksIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthChecksDeletePreviewHealthCheck(identifier: HealthchecksIdentifier, zoneIdentifier: HealthchecksIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<HealthchecksIdResponse>>> {
            const localVarAxiosArgs = await HealthChecksApiAxiosParamCreator(configuration).healthChecksDeletePreviewHealthCheck(identifier, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetch a single configured health check.
         * @summary Health Check Details
         * @param {HealthchecksIdentifier} identifier 
         * @param {HealthchecksIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthChecksHealthCheckDetails(identifier: HealthchecksIdentifier, zoneIdentifier: HealthchecksIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<HealthchecksSingleResponse>>> {
            const localVarAxiosArgs = await HealthChecksApiAxiosParamCreator(configuration).healthChecksHealthCheckDetails(identifier, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetch a single configured health check preview.
         * @summary Health Check Preview Details
         * @param {HealthchecksIdentifier} identifier 
         * @param {HealthchecksIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthChecksHealthCheckPreviewDetails(identifier: HealthchecksIdentifier, zoneIdentifier: HealthchecksIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<HealthchecksSingleResponse>>> {
            const localVarAxiosArgs = await HealthChecksApiAxiosParamCreator(configuration).healthChecksHealthCheckPreviewDetails(identifier, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List configured health checks.
         * @summary List Health Checks
         * @param {HealthchecksIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthChecksListHealthChecks(zoneIdentifier: HealthchecksIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<HealthchecksResponseCollection>>> {
            const localVarAxiosArgs = await HealthChecksApiAxiosParamCreator(configuration).healthChecksListHealthChecks(zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Patch a configured health check.
         * @summary Patch Health Check
         * @param {HealthchecksQueryHealthcheck} body 
         * @param {HealthchecksIdentifier} identifier 
         * @param {HealthchecksIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthChecksPatchHealthCheck(body: HealthchecksQueryHealthcheck, identifier: HealthchecksIdentifier, zoneIdentifier: HealthchecksIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<HealthchecksSingleResponse>>> {
            const localVarAxiosArgs = await HealthChecksApiAxiosParamCreator(configuration).healthChecksPatchHealthCheck(body, identifier, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a configured health check.
         * @summary Update Health Check
         * @param {HealthchecksQueryHealthcheck} body 
         * @param {HealthchecksIdentifier} identifier 
         * @param {HealthchecksIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthChecksUpdateHealthCheck(body: HealthchecksQueryHealthcheck, identifier: HealthchecksIdentifier, zoneIdentifier: HealthchecksIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<HealthchecksSingleResponse>>> {
            const localVarAxiosArgs = await HealthChecksApiAxiosParamCreator(configuration).healthChecksUpdateHealthCheck(body, identifier, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * HealthChecksApi - factory interface
 * @export
 */
export const HealthChecksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create a new health check.
         * @summary Create Health Check
         * @param {HealthchecksQueryHealthcheck} body 
         * @param {HealthchecksIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthChecksCreateHealthCheck(body: HealthchecksQueryHealthcheck, zoneIdentifier: HealthchecksIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<HealthchecksSingleResponse>> {
            return HealthChecksApiFp(configuration).healthChecksCreateHealthCheck(body, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new preview health check.
         * @summary Create Preview Health Check
         * @param {HealthchecksQueryHealthcheck} body 
         * @param {HealthchecksIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthChecksCreatePreviewHealthCheck(body: HealthchecksQueryHealthcheck, zoneIdentifier: HealthchecksIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<HealthchecksSingleResponse>> {
            return HealthChecksApiFp(configuration).healthChecksCreatePreviewHealthCheck(body, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a health check.
         * @summary Delete Health Check
         * @param {HealthchecksIdentifier} identifier 
         * @param {HealthchecksIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthChecksDeleteHealthCheck(identifier: HealthchecksIdentifier, zoneIdentifier: HealthchecksIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<HealthchecksIdResponse>> {
            return HealthChecksApiFp(configuration).healthChecksDeleteHealthCheck(identifier, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a health check.
         * @summary Delete Preview Health Check
         * @param {HealthchecksIdentifier} identifier 
         * @param {HealthchecksIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthChecksDeletePreviewHealthCheck(identifier: HealthchecksIdentifier, zoneIdentifier: HealthchecksIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<HealthchecksIdResponse>> {
            return HealthChecksApiFp(configuration).healthChecksDeletePreviewHealthCheck(identifier, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a single configured health check.
         * @summary Health Check Details
         * @param {HealthchecksIdentifier} identifier 
         * @param {HealthchecksIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthChecksHealthCheckDetails(identifier: HealthchecksIdentifier, zoneIdentifier: HealthchecksIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<HealthchecksSingleResponse>> {
            return HealthChecksApiFp(configuration).healthChecksHealthCheckDetails(identifier, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a single configured health check preview.
         * @summary Health Check Preview Details
         * @param {HealthchecksIdentifier} identifier 
         * @param {HealthchecksIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthChecksHealthCheckPreviewDetails(identifier: HealthchecksIdentifier, zoneIdentifier: HealthchecksIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<HealthchecksSingleResponse>> {
            return HealthChecksApiFp(configuration).healthChecksHealthCheckPreviewDetails(identifier, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * List configured health checks.
         * @summary List Health Checks
         * @param {HealthchecksIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthChecksListHealthChecks(zoneIdentifier: HealthchecksIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<HealthchecksResponseCollection>> {
            return HealthChecksApiFp(configuration).healthChecksListHealthChecks(zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Patch a configured health check.
         * @summary Patch Health Check
         * @param {HealthchecksQueryHealthcheck} body 
         * @param {HealthchecksIdentifier} identifier 
         * @param {HealthchecksIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthChecksPatchHealthCheck(body: HealthchecksQueryHealthcheck, identifier: HealthchecksIdentifier, zoneIdentifier: HealthchecksIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<HealthchecksSingleResponse>> {
            return HealthChecksApiFp(configuration).healthChecksPatchHealthCheck(body, identifier, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a configured health check.
         * @summary Update Health Check
         * @param {HealthchecksQueryHealthcheck} body 
         * @param {HealthchecksIdentifier} identifier 
         * @param {HealthchecksIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthChecksUpdateHealthCheck(body: HealthchecksQueryHealthcheck, identifier: HealthchecksIdentifier, zoneIdentifier: HealthchecksIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<HealthchecksSingleResponse>> {
            return HealthChecksApiFp(configuration).healthChecksUpdateHealthCheck(body, identifier, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HealthChecksApi - object-oriented interface
 * @export
 * @class HealthChecksApi
 * @extends {BaseAPI}
 */
export class HealthChecksApi extends BaseAPI {
    /**
     * Create a new health check.
     * @summary Create Health Check
     * @param {HealthchecksQueryHealthcheck} body 
     * @param {HealthchecksIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthChecksApi
     */
    public async healthChecksCreateHealthCheck(body: HealthchecksQueryHealthcheck, zoneIdentifier: HealthchecksIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<HealthchecksSingleResponse>> {
        return HealthChecksApiFp(this.configuration).healthChecksCreateHealthCheck(body, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new preview health check.
     * @summary Create Preview Health Check
     * @param {HealthchecksQueryHealthcheck} body 
     * @param {HealthchecksIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthChecksApi
     */
    public async healthChecksCreatePreviewHealthCheck(body: HealthchecksQueryHealthcheck, zoneIdentifier: HealthchecksIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<HealthchecksSingleResponse>> {
        return HealthChecksApiFp(this.configuration).healthChecksCreatePreviewHealthCheck(body, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a health check.
     * @summary Delete Health Check
     * @param {HealthchecksIdentifier} identifier 
     * @param {HealthchecksIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthChecksApi
     */
    public async healthChecksDeleteHealthCheck(identifier: HealthchecksIdentifier, zoneIdentifier: HealthchecksIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<HealthchecksIdResponse>> {
        return HealthChecksApiFp(this.configuration).healthChecksDeleteHealthCheck(identifier, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a health check.
     * @summary Delete Preview Health Check
     * @param {HealthchecksIdentifier} identifier 
     * @param {HealthchecksIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthChecksApi
     */
    public async healthChecksDeletePreviewHealthCheck(identifier: HealthchecksIdentifier, zoneIdentifier: HealthchecksIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<HealthchecksIdResponse>> {
        return HealthChecksApiFp(this.configuration).healthChecksDeletePreviewHealthCheck(identifier, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch a single configured health check.
     * @summary Health Check Details
     * @param {HealthchecksIdentifier} identifier 
     * @param {HealthchecksIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthChecksApi
     */
    public async healthChecksHealthCheckDetails(identifier: HealthchecksIdentifier, zoneIdentifier: HealthchecksIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<HealthchecksSingleResponse>> {
        return HealthChecksApiFp(this.configuration).healthChecksHealthCheckDetails(identifier, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch a single configured health check preview.
     * @summary Health Check Preview Details
     * @param {HealthchecksIdentifier} identifier 
     * @param {HealthchecksIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthChecksApi
     */
    public async healthChecksHealthCheckPreviewDetails(identifier: HealthchecksIdentifier, zoneIdentifier: HealthchecksIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<HealthchecksSingleResponse>> {
        return HealthChecksApiFp(this.configuration).healthChecksHealthCheckPreviewDetails(identifier, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List configured health checks.
     * @summary List Health Checks
     * @param {HealthchecksIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthChecksApi
     */
    public async healthChecksListHealthChecks(zoneIdentifier: HealthchecksIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<HealthchecksResponseCollection>> {
        return HealthChecksApiFp(this.configuration).healthChecksListHealthChecks(zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Patch a configured health check.
     * @summary Patch Health Check
     * @param {HealthchecksQueryHealthcheck} body 
     * @param {HealthchecksIdentifier} identifier 
     * @param {HealthchecksIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthChecksApi
     */
    public async healthChecksPatchHealthCheck(body: HealthchecksQueryHealthcheck, identifier: HealthchecksIdentifier, zoneIdentifier: HealthchecksIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<HealthchecksSingleResponse>> {
        return HealthChecksApiFp(this.configuration).healthChecksPatchHealthCheck(body, identifier, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update a configured health check.
     * @summary Update Health Check
     * @param {HealthchecksQueryHealthcheck} body 
     * @param {HealthchecksIdentifier} identifier 
     * @param {HealthchecksIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthChecksApi
     */
    public async healthChecksUpdateHealthCheck(body: HealthchecksQueryHealthcheck, identifier: HealthchecksIdentifier, zoneIdentifier: HealthchecksIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<HealthchecksSingleResponse>> {
        return HealthChecksApiFp(this.configuration).healthChecksUpdateHealthCheck(body, identifier, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
}
