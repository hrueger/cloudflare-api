/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse4XX205 } from '../models';
import { InlineResponse4XX206 } from '../models';
import { InlineResponse4XX207 } from '../models';
import { Model6BbvEZS2AccountIdentifier } from '../models';
import { Model6BbvEZS2MnmRuleAdvertisementSingleResponse } from '../models';
import { Model6BbvEZS2MnmRulesCollectionResponse } from '../models';
import { Model6BbvEZS2MnmRulesSingleResponse } from '../models';
import { Model6BbvEZS2RuleIdentifier } from '../models';
/**
 * MagicNetworkMonitoringRulesApi - axios parameter creator
 * @export
 */
export const MagicNetworkMonitoringRulesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create network monitoring rules for account. Currently only supports creating a single rule per API request.
         * @summary Create rules
         * @param {Model6BbvEZS2AccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        magicNetworkMonitoringRulesCreateRules: async (accountIdentifier: Model6BbvEZS2AccountIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling magicNetworkMonitoringRulesCreateRules.');
            }
            const localVarPath = `/accounts/{account_identifier}/mnm/rules`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a network monitoring rule for account.
         * @summary Delete rule
         * @param {Model6BbvEZS2RuleIdentifier} ruleIdentifier 
         * @param {Model6BbvEZS2AccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        magicNetworkMonitoringRulesDeleteRule: async (ruleIdentifier: Model6BbvEZS2RuleIdentifier, accountIdentifier: Model6BbvEZS2AccountIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ruleIdentifier' is not null or undefined
            if (ruleIdentifier === null || ruleIdentifier === undefined) {
                throw new RequiredError('ruleIdentifier','Required parameter ruleIdentifier was null or undefined when calling magicNetworkMonitoringRulesDeleteRule.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling magicNetworkMonitoringRulesDeleteRule.');
            }
            const localVarPath = `/accounts/{account_identifier}/mnm/rules/{rule_identifier}`
                .replace(`{${"rule_identifier"}}`, encodeURIComponent(String(ruleIdentifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List a single network monitoring rule for account.
         * @summary Get rule
         * @param {Model6BbvEZS2RuleIdentifier} ruleIdentifier 
         * @param {Model6BbvEZS2AccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        magicNetworkMonitoringRulesGetRule: async (ruleIdentifier: Model6BbvEZS2RuleIdentifier, accountIdentifier: Model6BbvEZS2AccountIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ruleIdentifier' is not null or undefined
            if (ruleIdentifier === null || ruleIdentifier === undefined) {
                throw new RequiredError('ruleIdentifier','Required parameter ruleIdentifier was null or undefined when calling magicNetworkMonitoringRulesGetRule.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling magicNetworkMonitoringRulesGetRule.');
            }
            const localVarPath = `/accounts/{account_identifier}/mnm/rules/{rule_identifier}`
                .replace(`{${"rule_identifier"}}`, encodeURIComponent(String(ruleIdentifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists network monitoring rules for account.
         * @summary List rules
         * @param {Model6BbvEZS2AccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        magicNetworkMonitoringRulesListRules: async (accountIdentifier: Model6BbvEZS2AccountIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling magicNetworkMonitoringRulesListRules.');
            }
            const localVarPath = `/accounts/{account_identifier}/mnm/rules`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update advertisement for rule.
         * @summary Update advertisement for rule
         * @param {Model6BbvEZS2RuleIdentifier} ruleIdentifier 
         * @param {Model6BbvEZS2AccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        magicNetworkMonitoringRulesUpdateAdvertisementForRule: async (ruleIdentifier: Model6BbvEZS2RuleIdentifier, accountIdentifier: Model6BbvEZS2AccountIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ruleIdentifier' is not null or undefined
            if (ruleIdentifier === null || ruleIdentifier === undefined) {
                throw new RequiredError('ruleIdentifier','Required parameter ruleIdentifier was null or undefined when calling magicNetworkMonitoringRulesUpdateAdvertisementForRule.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling magicNetworkMonitoringRulesUpdateAdvertisementForRule.');
            }
            const localVarPath = `/accounts/{account_identifier}/mnm/rules/{rule_identifier}/advertisement`
                .replace(`{${"rule_identifier"}}`, encodeURIComponent(String(ruleIdentifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a network monitoring rule for account.
         * @summary Update rule
         * @param {Model6BbvEZS2RuleIdentifier} ruleIdentifier 
         * @param {Model6BbvEZS2AccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        magicNetworkMonitoringRulesUpdateRule: async (ruleIdentifier: Model6BbvEZS2RuleIdentifier, accountIdentifier: Model6BbvEZS2AccountIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ruleIdentifier' is not null or undefined
            if (ruleIdentifier === null || ruleIdentifier === undefined) {
                throw new RequiredError('ruleIdentifier','Required parameter ruleIdentifier was null or undefined when calling magicNetworkMonitoringRulesUpdateRule.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling magicNetworkMonitoringRulesUpdateRule.');
            }
            const localVarPath = `/accounts/{account_identifier}/mnm/rules/{rule_identifier}`
                .replace(`{${"rule_identifier"}}`, encodeURIComponent(String(ruleIdentifier)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update network monitoring rules for account.
         * @summary Update rules
         * @param {Model6BbvEZS2AccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        magicNetworkMonitoringRulesUpdateRules: async (accountIdentifier: Model6BbvEZS2AccountIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling magicNetworkMonitoringRulesUpdateRules.');
            }
            const localVarPath = `/accounts/{account_identifier}/mnm/rules`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MagicNetworkMonitoringRulesApi - functional programming interface
 * @export
 */
export const MagicNetworkMonitoringRulesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create network monitoring rules for account. Currently only supports creating a single rule per API request.
         * @summary Create rules
         * @param {Model6BbvEZS2AccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicNetworkMonitoringRulesCreateRules(accountIdentifier: Model6BbvEZS2AccountIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model6BbvEZS2MnmRulesSingleResponse>>> {
            const localVarAxiosArgs = await MagicNetworkMonitoringRulesApiAxiosParamCreator(configuration).magicNetworkMonitoringRulesCreateRules(accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a network monitoring rule for account.
         * @summary Delete rule
         * @param {Model6BbvEZS2RuleIdentifier} ruleIdentifier 
         * @param {Model6BbvEZS2AccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicNetworkMonitoringRulesDeleteRule(ruleIdentifier: Model6BbvEZS2RuleIdentifier, accountIdentifier: Model6BbvEZS2AccountIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model6BbvEZS2MnmRulesSingleResponse>>> {
            const localVarAxiosArgs = await MagicNetworkMonitoringRulesApiAxiosParamCreator(configuration).magicNetworkMonitoringRulesDeleteRule(ruleIdentifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List a single network monitoring rule for account.
         * @summary Get rule
         * @param {Model6BbvEZS2RuleIdentifier} ruleIdentifier 
         * @param {Model6BbvEZS2AccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicNetworkMonitoringRulesGetRule(ruleIdentifier: Model6BbvEZS2RuleIdentifier, accountIdentifier: Model6BbvEZS2AccountIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model6BbvEZS2MnmRulesSingleResponse>>> {
            const localVarAxiosArgs = await MagicNetworkMonitoringRulesApiAxiosParamCreator(configuration).magicNetworkMonitoringRulesGetRule(ruleIdentifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Lists network monitoring rules for account.
         * @summary List rules
         * @param {Model6BbvEZS2AccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicNetworkMonitoringRulesListRules(accountIdentifier: Model6BbvEZS2AccountIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model6BbvEZS2MnmRulesCollectionResponse>>> {
            const localVarAxiosArgs = await MagicNetworkMonitoringRulesApiAxiosParamCreator(configuration).magicNetworkMonitoringRulesListRules(accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update advertisement for rule.
         * @summary Update advertisement for rule
         * @param {Model6BbvEZS2RuleIdentifier} ruleIdentifier 
         * @param {Model6BbvEZS2AccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicNetworkMonitoringRulesUpdateAdvertisementForRule(ruleIdentifier: Model6BbvEZS2RuleIdentifier, accountIdentifier: Model6BbvEZS2AccountIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model6BbvEZS2MnmRuleAdvertisementSingleResponse>>> {
            const localVarAxiosArgs = await MagicNetworkMonitoringRulesApiAxiosParamCreator(configuration).magicNetworkMonitoringRulesUpdateAdvertisementForRule(ruleIdentifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a network monitoring rule for account.
         * @summary Update rule
         * @param {Model6BbvEZS2RuleIdentifier} ruleIdentifier 
         * @param {Model6BbvEZS2AccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicNetworkMonitoringRulesUpdateRule(ruleIdentifier: Model6BbvEZS2RuleIdentifier, accountIdentifier: Model6BbvEZS2AccountIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model6BbvEZS2MnmRulesSingleResponse>>> {
            const localVarAxiosArgs = await MagicNetworkMonitoringRulesApiAxiosParamCreator(configuration).magicNetworkMonitoringRulesUpdateRule(ruleIdentifier, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update network monitoring rules for account.
         * @summary Update rules
         * @param {Model6BbvEZS2AccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicNetworkMonitoringRulesUpdateRules(accountIdentifier: Model6BbvEZS2AccountIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Model6BbvEZS2MnmRulesSingleResponse>>> {
            const localVarAxiosArgs = await MagicNetworkMonitoringRulesApiAxiosParamCreator(configuration).magicNetworkMonitoringRulesUpdateRules(accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * MagicNetworkMonitoringRulesApi - factory interface
 * @export
 */
export const MagicNetworkMonitoringRulesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create network monitoring rules for account. Currently only supports creating a single rule per API request.
         * @summary Create rules
         * @param {Model6BbvEZS2AccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicNetworkMonitoringRulesCreateRules(accountIdentifier: Model6BbvEZS2AccountIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model6BbvEZS2MnmRulesSingleResponse>> {
            return MagicNetworkMonitoringRulesApiFp(configuration).magicNetworkMonitoringRulesCreateRules(accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a network monitoring rule for account.
         * @summary Delete rule
         * @param {Model6BbvEZS2RuleIdentifier} ruleIdentifier 
         * @param {Model6BbvEZS2AccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicNetworkMonitoringRulesDeleteRule(ruleIdentifier: Model6BbvEZS2RuleIdentifier, accountIdentifier: Model6BbvEZS2AccountIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model6BbvEZS2MnmRulesSingleResponse>> {
            return MagicNetworkMonitoringRulesApiFp(configuration).magicNetworkMonitoringRulesDeleteRule(ruleIdentifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * List a single network monitoring rule for account.
         * @summary Get rule
         * @param {Model6BbvEZS2RuleIdentifier} ruleIdentifier 
         * @param {Model6BbvEZS2AccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicNetworkMonitoringRulesGetRule(ruleIdentifier: Model6BbvEZS2RuleIdentifier, accountIdentifier: Model6BbvEZS2AccountIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model6BbvEZS2MnmRulesSingleResponse>> {
            return MagicNetworkMonitoringRulesApiFp(configuration).magicNetworkMonitoringRulesGetRule(ruleIdentifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists network monitoring rules for account.
         * @summary List rules
         * @param {Model6BbvEZS2AccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicNetworkMonitoringRulesListRules(accountIdentifier: Model6BbvEZS2AccountIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model6BbvEZS2MnmRulesCollectionResponse>> {
            return MagicNetworkMonitoringRulesApiFp(configuration).magicNetworkMonitoringRulesListRules(accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Update advertisement for rule.
         * @summary Update advertisement for rule
         * @param {Model6BbvEZS2RuleIdentifier} ruleIdentifier 
         * @param {Model6BbvEZS2AccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicNetworkMonitoringRulesUpdateAdvertisementForRule(ruleIdentifier: Model6BbvEZS2RuleIdentifier, accountIdentifier: Model6BbvEZS2AccountIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model6BbvEZS2MnmRuleAdvertisementSingleResponse>> {
            return MagicNetworkMonitoringRulesApiFp(configuration).magicNetworkMonitoringRulesUpdateAdvertisementForRule(ruleIdentifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a network monitoring rule for account.
         * @summary Update rule
         * @param {Model6BbvEZS2RuleIdentifier} ruleIdentifier 
         * @param {Model6BbvEZS2AccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicNetworkMonitoringRulesUpdateRule(ruleIdentifier: Model6BbvEZS2RuleIdentifier, accountIdentifier: Model6BbvEZS2AccountIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model6BbvEZS2MnmRulesSingleResponse>> {
            return MagicNetworkMonitoringRulesApiFp(configuration).magicNetworkMonitoringRulesUpdateRule(ruleIdentifier, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Update network monitoring rules for account.
         * @summary Update rules
         * @param {Model6BbvEZS2AccountIdentifier} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async magicNetworkMonitoringRulesUpdateRules(accountIdentifier: Model6BbvEZS2AccountIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<Model6BbvEZS2MnmRulesSingleResponse>> {
            return MagicNetworkMonitoringRulesApiFp(configuration).magicNetworkMonitoringRulesUpdateRules(accountIdentifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MagicNetworkMonitoringRulesApi - object-oriented interface
 * @export
 * @class MagicNetworkMonitoringRulesApi
 * @extends {BaseAPI}
 */
export class MagicNetworkMonitoringRulesApi extends BaseAPI {
    /**
     * Create network monitoring rules for account. Currently only supports creating a single rule per API request.
     * @summary Create rules
     * @param {Model6BbvEZS2AccountIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MagicNetworkMonitoringRulesApi
     */
    public async magicNetworkMonitoringRulesCreateRules(accountIdentifier: Model6BbvEZS2AccountIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model6BbvEZS2MnmRulesSingleResponse>> {
        return MagicNetworkMonitoringRulesApiFp(this.configuration).magicNetworkMonitoringRulesCreateRules(accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a network monitoring rule for account.
     * @summary Delete rule
     * @param {Model6BbvEZS2RuleIdentifier} ruleIdentifier 
     * @param {Model6BbvEZS2AccountIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MagicNetworkMonitoringRulesApi
     */
    public async magicNetworkMonitoringRulesDeleteRule(ruleIdentifier: Model6BbvEZS2RuleIdentifier, accountIdentifier: Model6BbvEZS2AccountIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model6BbvEZS2MnmRulesSingleResponse>> {
        return MagicNetworkMonitoringRulesApiFp(this.configuration).magicNetworkMonitoringRulesDeleteRule(ruleIdentifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List a single network monitoring rule for account.
     * @summary Get rule
     * @param {Model6BbvEZS2RuleIdentifier} ruleIdentifier 
     * @param {Model6BbvEZS2AccountIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MagicNetworkMonitoringRulesApi
     */
    public async magicNetworkMonitoringRulesGetRule(ruleIdentifier: Model6BbvEZS2RuleIdentifier, accountIdentifier: Model6BbvEZS2AccountIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model6BbvEZS2MnmRulesSingleResponse>> {
        return MagicNetworkMonitoringRulesApiFp(this.configuration).magicNetworkMonitoringRulesGetRule(ruleIdentifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists network monitoring rules for account.
     * @summary List rules
     * @param {Model6BbvEZS2AccountIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MagicNetworkMonitoringRulesApi
     */
    public async magicNetworkMonitoringRulesListRules(accountIdentifier: Model6BbvEZS2AccountIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model6BbvEZS2MnmRulesCollectionResponse>> {
        return MagicNetworkMonitoringRulesApiFp(this.configuration).magicNetworkMonitoringRulesListRules(accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update advertisement for rule.
     * @summary Update advertisement for rule
     * @param {Model6BbvEZS2RuleIdentifier} ruleIdentifier 
     * @param {Model6BbvEZS2AccountIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MagicNetworkMonitoringRulesApi
     */
    public async magicNetworkMonitoringRulesUpdateAdvertisementForRule(ruleIdentifier: Model6BbvEZS2RuleIdentifier, accountIdentifier: Model6BbvEZS2AccountIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model6BbvEZS2MnmRuleAdvertisementSingleResponse>> {
        return MagicNetworkMonitoringRulesApiFp(this.configuration).magicNetworkMonitoringRulesUpdateAdvertisementForRule(ruleIdentifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update a network monitoring rule for account.
     * @summary Update rule
     * @param {Model6BbvEZS2RuleIdentifier} ruleIdentifier 
     * @param {Model6BbvEZS2AccountIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MagicNetworkMonitoringRulesApi
     */
    public async magicNetworkMonitoringRulesUpdateRule(ruleIdentifier: Model6BbvEZS2RuleIdentifier, accountIdentifier: Model6BbvEZS2AccountIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model6BbvEZS2MnmRulesSingleResponse>> {
        return MagicNetworkMonitoringRulesApiFp(this.configuration).magicNetworkMonitoringRulesUpdateRule(ruleIdentifier, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update network monitoring rules for account.
     * @summary Update rules
     * @param {Model6BbvEZS2AccountIdentifier} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MagicNetworkMonitoringRulesApi
     */
    public async magicNetworkMonitoringRulesUpdateRules(accountIdentifier: Model6BbvEZS2AccountIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<Model6BbvEZS2MnmRulesSingleResponse>> {
        return MagicNetworkMonitoringRulesApiFp(this.configuration).magicNetworkMonitoringRulesUpdateRules(accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
}
