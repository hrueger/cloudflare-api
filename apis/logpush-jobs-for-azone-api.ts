/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { DestinationExistsBody } from '../models';
import { InlineResponse20039 } from '../models';
import { InlineResponse4XX183 } from '../models';
import { InlineResponse4XX184 } from '../models';
import { InlineResponse4XX185 } from '../models';
import { InlineResponse4XX186 } from '../models';
import { InlineResponse4XX187 } from '../models';
import { InlineResponse4XX188 } from '../models';
import { InlineResponse4XX189 } from '../models';
import { InlineResponse4XX190 } from '../models';
import { JobsJobIdentifierBody } from '../models';
import { K5aj3sh5Dataset } from '../models';
import { K5aj3sh5DestinationExistsResponse } from '../models';
import { K5aj3sh5GetOwnershipResponse } from '../models';
import { K5aj3sh5Id } from '../models';
import { K5aj3sh5Identifier } from '../models';
import { K5aj3sh5LogpushFieldResponseCollection } from '../models';
import { K5aj3sh5LogpushJobResponseCollection } from '../models';
import { K5aj3sh5LogpushJobResponseSingle } from '../models';
import { K5aj3sh5ValidateOwnershipResponse } from '../models';
import { K5aj3sh5ValidateResponse } from '../models';
import { LogpushJobsBody } from '../models';
import { LogpushOwnershipBody } from '../models';
import { OwnershipValidateBody } from '../models';
import { ValidateOriginBody } from '../models';
/**
 * LogpushJobsForAZoneApi - axios parameter creator
 * @export
 */
export const LogpushJobsForAZoneApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deletes a Logpush job.
         * @summary Delete Logpush job
         * @param {K5aj3sh5Id} jobIdentifier 
         * @param {K5aj3sh5Identifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteZonesZoneIdentifierLogpushJobsJobIdentifier: async (jobIdentifier: K5aj3sh5Id, zoneIdentifier: K5aj3sh5Identifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobIdentifier' is not null or undefined
            if (jobIdentifier === null || jobIdentifier === undefined) {
                throw new RequiredError('jobIdentifier','Required parameter jobIdentifier was null or undefined when calling deleteZonesZoneIdentifierLogpushJobsJobIdentifier.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling deleteZonesZoneIdentifierLogpushJobsJobIdentifier.');
            }
            const localVarPath = `/zones/{zone_identifier}/logpush/jobs/{job_identifier}`
                .replace(`{${"job_identifier"}}`, encodeURIComponent(String(jobIdentifier)))
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all fields available for a dataset. The response result is an object with key-value pairs, where keys are field names, and values are descriptions.
         * @summary List fields
         * @param {K5aj3sh5Dataset} dataset 
         * @param {K5aj3sh5Identifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getZonesZoneIdentifierLogpushDatasetsDatasetFields: async (dataset: K5aj3sh5Dataset, zoneIdentifier: K5aj3sh5Identifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataset' is not null or undefined
            if (dataset === null || dataset === undefined) {
                throw new RequiredError('dataset','Required parameter dataset was null or undefined when calling getZonesZoneIdentifierLogpushDatasetsDatasetFields.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling getZonesZoneIdentifierLogpushDatasetsDatasetFields.');
            }
            const localVarPath = `/zones/{zone_identifier}/logpush/datasets/{dataset}/fields`
                .replace(`{${"dataset"}}`, encodeURIComponent(String(dataset)))
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists Logpush jobs for a zone for a dataset.
         * @summary List Logpush jobs for a dataset
         * @param {K5aj3sh5Dataset} dataset 
         * @param {K5aj3sh5Identifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getZonesZoneIdentifierLogpushDatasetsDatasetJobs: async (dataset: K5aj3sh5Dataset, zoneIdentifier: K5aj3sh5Identifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataset' is not null or undefined
            if (dataset === null || dataset === undefined) {
                throw new RequiredError('dataset','Required parameter dataset was null or undefined when calling getZonesZoneIdentifierLogpushDatasetsDatasetJobs.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling getZonesZoneIdentifierLogpushDatasetsDatasetJobs.');
            }
            const localVarPath = `/zones/{zone_identifier}/logpush/datasets/{dataset}/jobs`
                .replace(`{${"dataset"}}`, encodeURIComponent(String(dataset)))
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists Logpush jobs for a zone.
         * @summary List Logpush jobs
         * @param {K5aj3sh5Identifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getZonesZoneIdentifierLogpushJobs: async (zoneIdentifier: K5aj3sh5Identifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling getZonesZoneIdentifierLogpushJobs.');
            }
            const localVarPath = `/zones/{zone_identifier}/logpush/jobs`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the details of a Logpush job.
         * @summary Get Logpush job details
         * @param {K5aj3sh5Id} jobIdentifier 
         * @param {K5aj3sh5Identifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getZonesZoneIdentifierLogpushJobsJobIdentifier: async (jobIdentifier: K5aj3sh5Id, zoneIdentifier: K5aj3sh5Identifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobIdentifier' is not null or undefined
            if (jobIdentifier === null || jobIdentifier === undefined) {
                throw new RequiredError('jobIdentifier','Required parameter jobIdentifier was null or undefined when calling getZonesZoneIdentifierLogpushJobsJobIdentifier.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling getZonesZoneIdentifierLogpushJobsJobIdentifier.');
            }
            const localVarPath = `/zones/{zone_identifier}/logpush/jobs/{job_identifier}`
                .replace(`{${"job_identifier"}}`, encodeURIComponent(String(jobIdentifier)))
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new Logpush job for a zone.
         * @summary Create Logpush job
         * @param {LogpushJobsBody} body 
         * @param {K5aj3sh5Identifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postZonesZoneIdentifierLogpushJobs: async (body: LogpushJobsBody, zoneIdentifier: K5aj3sh5Identifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postZonesZoneIdentifierLogpushJobs.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling postZonesZoneIdentifierLogpushJobs.');
            }
            const localVarPath = `/zones/{zone_identifier}/logpush/jobs`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a new ownership challenge sent to your destination.
         * @summary Get ownership challenge
         * @param {LogpushOwnershipBody} body 
         * @param {K5aj3sh5Identifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postZonesZoneIdentifierLogpushOwnership: async (body: LogpushOwnershipBody, zoneIdentifier: K5aj3sh5Identifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postZonesZoneIdentifierLogpushOwnership.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling postZonesZoneIdentifierLogpushOwnership.');
            }
            const localVarPath = `/zones/{zone_identifier}/logpush/ownership`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Validates ownership challenge of the destination.
         * @summary Validate ownership challenge
         * @param {OwnershipValidateBody} body 
         * @param {K5aj3sh5Identifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postZonesZoneIdentifierLogpushOwnershipValidate: async (body: OwnershipValidateBody, zoneIdentifier: K5aj3sh5Identifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postZonesZoneIdentifierLogpushOwnershipValidate.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling postZonesZoneIdentifierLogpushOwnershipValidate.');
            }
            const localVarPath = `/zones/{zone_identifier}/logpush/ownership/validate`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Checks if there is an existing job with a destination.
         * @summary Check destination exists
         * @param {DestinationExistsBody} body 
         * @param {K5aj3sh5Identifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postZonesZoneIdentifierLogpushValidateDestinationExists: async (body: DestinationExistsBody, zoneIdentifier: K5aj3sh5Identifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postZonesZoneIdentifierLogpushValidateDestinationExists.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling postZonesZoneIdentifierLogpushValidateDestinationExists.');
            }
            const localVarPath = `/zones/{zone_identifier}/logpush/validate/destination/exists`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Validates logpull origin with logpull_options.
         * @summary Validate origin
         * @param {ValidateOriginBody} body 
         * @param {K5aj3sh5Identifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postZonesZoneIdentifierLogpushValidateOrigin: async (body: ValidateOriginBody, zoneIdentifier: K5aj3sh5Identifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postZonesZoneIdentifierLogpushValidateOrigin.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling postZonesZoneIdentifierLogpushValidateOrigin.');
            }
            const localVarPath = `/zones/{zone_identifier}/logpush/validate/origin`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a Logpush job.
         * @summary Update Logpush job
         * @param {JobsJobIdentifierBody} body 
         * @param {K5aj3sh5Id} jobIdentifier 
         * @param {K5aj3sh5Identifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putZonesZoneIdentifierLogpushJobsJobIdentifier: async (body: JobsJobIdentifierBody, jobIdentifier: K5aj3sh5Id, zoneIdentifier: K5aj3sh5Identifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling putZonesZoneIdentifierLogpushJobsJobIdentifier.');
            }
            // verify required parameter 'jobIdentifier' is not null or undefined
            if (jobIdentifier === null || jobIdentifier === undefined) {
                throw new RequiredError('jobIdentifier','Required parameter jobIdentifier was null or undefined when calling putZonesZoneIdentifierLogpushJobsJobIdentifier.');
            }
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling putZonesZoneIdentifierLogpushJobsJobIdentifier.');
            }
            const localVarPath = `/zones/{zone_identifier}/logpush/jobs/{job_identifier}`
                .replace(`{${"job_identifier"}}`, encodeURIComponent(String(jobIdentifier)))
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LogpushJobsForAZoneApi - functional programming interface
 * @export
 */
export const LogpushJobsForAZoneApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Deletes a Logpush job.
         * @summary Delete Logpush job
         * @param {K5aj3sh5Id} jobIdentifier 
         * @param {K5aj3sh5Identifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteZonesZoneIdentifierLogpushJobsJobIdentifier(jobIdentifier: K5aj3sh5Id, zoneIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20039>>> {
            const localVarAxiosArgs = await LogpushJobsForAZoneApiAxiosParamCreator(configuration).deleteZonesZoneIdentifierLogpushJobsJobIdentifier(jobIdentifier, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Lists all fields available for a dataset. The response result is an object with key-value pairs, where keys are field names, and values are descriptions.
         * @summary List fields
         * @param {K5aj3sh5Dataset} dataset 
         * @param {K5aj3sh5Identifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getZonesZoneIdentifierLogpushDatasetsDatasetFields(dataset: K5aj3sh5Dataset, zoneIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<K5aj3sh5LogpushFieldResponseCollection>>> {
            const localVarAxiosArgs = await LogpushJobsForAZoneApiAxiosParamCreator(configuration).getZonesZoneIdentifierLogpushDatasetsDatasetFields(dataset, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Lists Logpush jobs for a zone for a dataset.
         * @summary List Logpush jobs for a dataset
         * @param {K5aj3sh5Dataset} dataset 
         * @param {K5aj3sh5Identifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getZonesZoneIdentifierLogpushDatasetsDatasetJobs(dataset: K5aj3sh5Dataset, zoneIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<K5aj3sh5LogpushJobResponseCollection>>> {
            const localVarAxiosArgs = await LogpushJobsForAZoneApiAxiosParamCreator(configuration).getZonesZoneIdentifierLogpushDatasetsDatasetJobs(dataset, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Lists Logpush jobs for a zone.
         * @summary List Logpush jobs
         * @param {K5aj3sh5Identifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getZonesZoneIdentifierLogpushJobs(zoneIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<K5aj3sh5LogpushJobResponseCollection>>> {
            const localVarAxiosArgs = await LogpushJobsForAZoneApiAxiosParamCreator(configuration).getZonesZoneIdentifierLogpushJobs(zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets the details of a Logpush job.
         * @summary Get Logpush job details
         * @param {K5aj3sh5Id} jobIdentifier 
         * @param {K5aj3sh5Identifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getZonesZoneIdentifierLogpushJobsJobIdentifier(jobIdentifier: K5aj3sh5Id, zoneIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<K5aj3sh5LogpushJobResponseSingle>>> {
            const localVarAxiosArgs = await LogpushJobsForAZoneApiAxiosParamCreator(configuration).getZonesZoneIdentifierLogpushJobsJobIdentifier(jobIdentifier, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a new Logpush job for a zone.
         * @summary Create Logpush job
         * @param {LogpushJobsBody} body 
         * @param {K5aj3sh5Identifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postZonesZoneIdentifierLogpushJobs(body: LogpushJobsBody, zoneIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<K5aj3sh5LogpushJobResponseSingle>>> {
            const localVarAxiosArgs = await LogpushJobsForAZoneApiAxiosParamCreator(configuration).postZonesZoneIdentifierLogpushJobs(body, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets a new ownership challenge sent to your destination.
         * @summary Get ownership challenge
         * @param {LogpushOwnershipBody} body 
         * @param {K5aj3sh5Identifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postZonesZoneIdentifierLogpushOwnership(body: LogpushOwnershipBody, zoneIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<K5aj3sh5GetOwnershipResponse>>> {
            const localVarAxiosArgs = await LogpushJobsForAZoneApiAxiosParamCreator(configuration).postZonesZoneIdentifierLogpushOwnership(body, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Validates ownership challenge of the destination.
         * @summary Validate ownership challenge
         * @param {OwnershipValidateBody} body 
         * @param {K5aj3sh5Identifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postZonesZoneIdentifierLogpushOwnershipValidate(body: OwnershipValidateBody, zoneIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<K5aj3sh5ValidateOwnershipResponse>>> {
            const localVarAxiosArgs = await LogpushJobsForAZoneApiAxiosParamCreator(configuration).postZonesZoneIdentifierLogpushOwnershipValidate(body, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Checks if there is an existing job with a destination.
         * @summary Check destination exists
         * @param {DestinationExistsBody} body 
         * @param {K5aj3sh5Identifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postZonesZoneIdentifierLogpushValidateDestinationExists(body: DestinationExistsBody, zoneIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<K5aj3sh5DestinationExistsResponse>>> {
            const localVarAxiosArgs = await LogpushJobsForAZoneApiAxiosParamCreator(configuration).postZonesZoneIdentifierLogpushValidateDestinationExists(body, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Validates logpull origin with logpull_options.
         * @summary Validate origin
         * @param {ValidateOriginBody} body 
         * @param {K5aj3sh5Identifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postZonesZoneIdentifierLogpushValidateOrigin(body: ValidateOriginBody, zoneIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<K5aj3sh5ValidateResponse>>> {
            const localVarAxiosArgs = await LogpushJobsForAZoneApiAxiosParamCreator(configuration).postZonesZoneIdentifierLogpushValidateOrigin(body, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates a Logpush job.
         * @summary Update Logpush job
         * @param {JobsJobIdentifierBody} body 
         * @param {K5aj3sh5Id} jobIdentifier 
         * @param {K5aj3sh5Identifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putZonesZoneIdentifierLogpushJobsJobIdentifier(body: JobsJobIdentifierBody, jobIdentifier: K5aj3sh5Id, zoneIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<K5aj3sh5LogpushJobResponseSingle>>> {
            const localVarAxiosArgs = await LogpushJobsForAZoneApiAxiosParamCreator(configuration).putZonesZoneIdentifierLogpushJobsJobIdentifier(body, jobIdentifier, zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * LogpushJobsForAZoneApi - factory interface
 * @export
 */
export const LogpushJobsForAZoneApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Deletes a Logpush job.
         * @summary Delete Logpush job
         * @param {K5aj3sh5Id} jobIdentifier 
         * @param {K5aj3sh5Identifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteZonesZoneIdentifierLogpushJobsJobIdentifier(jobIdentifier: K5aj3sh5Id, zoneIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20039>> {
            return LogpushJobsForAZoneApiFp(configuration).deleteZonesZoneIdentifierLogpushJobsJobIdentifier(jobIdentifier, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists all fields available for a dataset. The response result is an object with key-value pairs, where keys are field names, and values are descriptions.
         * @summary List fields
         * @param {K5aj3sh5Dataset} dataset 
         * @param {K5aj3sh5Identifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getZonesZoneIdentifierLogpushDatasetsDatasetFields(dataset: K5aj3sh5Dataset, zoneIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig): Promise<AxiosResponse<K5aj3sh5LogpushFieldResponseCollection>> {
            return LogpushJobsForAZoneApiFp(configuration).getZonesZoneIdentifierLogpushDatasetsDatasetFields(dataset, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists Logpush jobs for a zone for a dataset.
         * @summary List Logpush jobs for a dataset
         * @param {K5aj3sh5Dataset} dataset 
         * @param {K5aj3sh5Identifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getZonesZoneIdentifierLogpushDatasetsDatasetJobs(dataset: K5aj3sh5Dataset, zoneIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig): Promise<AxiosResponse<K5aj3sh5LogpushJobResponseCollection>> {
            return LogpushJobsForAZoneApiFp(configuration).getZonesZoneIdentifierLogpushDatasetsDatasetJobs(dataset, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists Logpush jobs for a zone.
         * @summary List Logpush jobs
         * @param {K5aj3sh5Identifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getZonesZoneIdentifierLogpushJobs(zoneIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig): Promise<AxiosResponse<K5aj3sh5LogpushJobResponseCollection>> {
            return LogpushJobsForAZoneApiFp(configuration).getZonesZoneIdentifierLogpushJobs(zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the details of a Logpush job.
         * @summary Get Logpush job details
         * @param {K5aj3sh5Id} jobIdentifier 
         * @param {K5aj3sh5Identifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getZonesZoneIdentifierLogpushJobsJobIdentifier(jobIdentifier: K5aj3sh5Id, zoneIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig): Promise<AxiosResponse<K5aj3sh5LogpushJobResponseSingle>> {
            return LogpushJobsForAZoneApiFp(configuration).getZonesZoneIdentifierLogpushJobsJobIdentifier(jobIdentifier, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new Logpush job for a zone.
         * @summary Create Logpush job
         * @param {LogpushJobsBody} body 
         * @param {K5aj3sh5Identifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postZonesZoneIdentifierLogpushJobs(body: LogpushJobsBody, zoneIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig): Promise<AxiosResponse<K5aj3sh5LogpushJobResponseSingle>> {
            return LogpushJobsForAZoneApiFp(configuration).postZonesZoneIdentifierLogpushJobs(body, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a new ownership challenge sent to your destination.
         * @summary Get ownership challenge
         * @param {LogpushOwnershipBody} body 
         * @param {K5aj3sh5Identifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postZonesZoneIdentifierLogpushOwnership(body: LogpushOwnershipBody, zoneIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig): Promise<AxiosResponse<K5aj3sh5GetOwnershipResponse>> {
            return LogpushJobsForAZoneApiFp(configuration).postZonesZoneIdentifierLogpushOwnership(body, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Validates ownership challenge of the destination.
         * @summary Validate ownership challenge
         * @param {OwnershipValidateBody} body 
         * @param {K5aj3sh5Identifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postZonesZoneIdentifierLogpushOwnershipValidate(body: OwnershipValidateBody, zoneIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig): Promise<AxiosResponse<K5aj3sh5ValidateOwnershipResponse>> {
            return LogpushJobsForAZoneApiFp(configuration).postZonesZoneIdentifierLogpushOwnershipValidate(body, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Checks if there is an existing job with a destination.
         * @summary Check destination exists
         * @param {DestinationExistsBody} body 
         * @param {K5aj3sh5Identifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postZonesZoneIdentifierLogpushValidateDestinationExists(body: DestinationExistsBody, zoneIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig): Promise<AxiosResponse<K5aj3sh5DestinationExistsResponse>> {
            return LogpushJobsForAZoneApiFp(configuration).postZonesZoneIdentifierLogpushValidateDestinationExists(body, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Validates logpull origin with logpull_options.
         * @summary Validate origin
         * @param {ValidateOriginBody} body 
         * @param {K5aj3sh5Identifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postZonesZoneIdentifierLogpushValidateOrigin(body: ValidateOriginBody, zoneIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig): Promise<AxiosResponse<K5aj3sh5ValidateResponse>> {
            return LogpushJobsForAZoneApiFp(configuration).postZonesZoneIdentifierLogpushValidateOrigin(body, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a Logpush job.
         * @summary Update Logpush job
         * @param {JobsJobIdentifierBody} body 
         * @param {K5aj3sh5Id} jobIdentifier 
         * @param {K5aj3sh5Identifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putZonesZoneIdentifierLogpushJobsJobIdentifier(body: JobsJobIdentifierBody, jobIdentifier: K5aj3sh5Id, zoneIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig): Promise<AxiosResponse<K5aj3sh5LogpushJobResponseSingle>> {
            return LogpushJobsForAZoneApiFp(configuration).putZonesZoneIdentifierLogpushJobsJobIdentifier(body, jobIdentifier, zoneIdentifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LogpushJobsForAZoneApi - object-oriented interface
 * @export
 * @class LogpushJobsForAZoneApi
 * @extends {BaseAPI}
 */
export class LogpushJobsForAZoneApi extends BaseAPI {
    /**
     * Deletes a Logpush job.
     * @summary Delete Logpush job
     * @param {K5aj3sh5Id} jobIdentifier 
     * @param {K5aj3sh5Identifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogpushJobsForAZoneApi
     */
    public async deleteZonesZoneIdentifierLogpushJobsJobIdentifier(jobIdentifier: K5aj3sh5Id, zoneIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20039>> {
        return LogpushJobsForAZoneApiFp(this.configuration).deleteZonesZoneIdentifierLogpushJobsJobIdentifier(jobIdentifier, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists all fields available for a dataset. The response result is an object with key-value pairs, where keys are field names, and values are descriptions.
     * @summary List fields
     * @param {K5aj3sh5Dataset} dataset 
     * @param {K5aj3sh5Identifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogpushJobsForAZoneApi
     */
    public async getZonesZoneIdentifierLogpushDatasetsDatasetFields(dataset: K5aj3sh5Dataset, zoneIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<K5aj3sh5LogpushFieldResponseCollection>> {
        return LogpushJobsForAZoneApiFp(this.configuration).getZonesZoneIdentifierLogpushDatasetsDatasetFields(dataset, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists Logpush jobs for a zone for a dataset.
     * @summary List Logpush jobs for a dataset
     * @param {K5aj3sh5Dataset} dataset 
     * @param {K5aj3sh5Identifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogpushJobsForAZoneApi
     */
    public async getZonesZoneIdentifierLogpushDatasetsDatasetJobs(dataset: K5aj3sh5Dataset, zoneIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<K5aj3sh5LogpushJobResponseCollection>> {
        return LogpushJobsForAZoneApiFp(this.configuration).getZonesZoneIdentifierLogpushDatasetsDatasetJobs(dataset, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists Logpush jobs for a zone.
     * @summary List Logpush jobs
     * @param {K5aj3sh5Identifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogpushJobsForAZoneApi
     */
    public async getZonesZoneIdentifierLogpushJobs(zoneIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<K5aj3sh5LogpushJobResponseCollection>> {
        return LogpushJobsForAZoneApiFp(this.configuration).getZonesZoneIdentifierLogpushJobs(zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets the details of a Logpush job.
     * @summary Get Logpush job details
     * @param {K5aj3sh5Id} jobIdentifier 
     * @param {K5aj3sh5Identifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogpushJobsForAZoneApi
     */
    public async getZonesZoneIdentifierLogpushJobsJobIdentifier(jobIdentifier: K5aj3sh5Id, zoneIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<K5aj3sh5LogpushJobResponseSingle>> {
        return LogpushJobsForAZoneApiFp(this.configuration).getZonesZoneIdentifierLogpushJobsJobIdentifier(jobIdentifier, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates a new Logpush job for a zone.
     * @summary Create Logpush job
     * @param {LogpushJobsBody} body 
     * @param {K5aj3sh5Identifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogpushJobsForAZoneApi
     */
    public async postZonesZoneIdentifierLogpushJobs(body: LogpushJobsBody, zoneIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<K5aj3sh5LogpushJobResponseSingle>> {
        return LogpushJobsForAZoneApiFp(this.configuration).postZonesZoneIdentifierLogpushJobs(body, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets a new ownership challenge sent to your destination.
     * @summary Get ownership challenge
     * @param {LogpushOwnershipBody} body 
     * @param {K5aj3sh5Identifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogpushJobsForAZoneApi
     */
    public async postZonesZoneIdentifierLogpushOwnership(body: LogpushOwnershipBody, zoneIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<K5aj3sh5GetOwnershipResponse>> {
        return LogpushJobsForAZoneApiFp(this.configuration).postZonesZoneIdentifierLogpushOwnership(body, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Validates ownership challenge of the destination.
     * @summary Validate ownership challenge
     * @param {OwnershipValidateBody} body 
     * @param {K5aj3sh5Identifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogpushJobsForAZoneApi
     */
    public async postZonesZoneIdentifierLogpushOwnershipValidate(body: OwnershipValidateBody, zoneIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<K5aj3sh5ValidateOwnershipResponse>> {
        return LogpushJobsForAZoneApiFp(this.configuration).postZonesZoneIdentifierLogpushOwnershipValidate(body, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Checks if there is an existing job with a destination.
     * @summary Check destination exists
     * @param {DestinationExistsBody} body 
     * @param {K5aj3sh5Identifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogpushJobsForAZoneApi
     */
    public async postZonesZoneIdentifierLogpushValidateDestinationExists(body: DestinationExistsBody, zoneIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<K5aj3sh5DestinationExistsResponse>> {
        return LogpushJobsForAZoneApiFp(this.configuration).postZonesZoneIdentifierLogpushValidateDestinationExists(body, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Validates logpull origin with logpull_options.
     * @summary Validate origin
     * @param {ValidateOriginBody} body 
     * @param {K5aj3sh5Identifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogpushJobsForAZoneApi
     */
    public async postZonesZoneIdentifierLogpushValidateOrigin(body: ValidateOriginBody, zoneIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<K5aj3sh5ValidateResponse>> {
        return LogpushJobsForAZoneApiFp(this.configuration).postZonesZoneIdentifierLogpushValidateOrigin(body, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates a Logpush job.
     * @summary Update Logpush job
     * @param {JobsJobIdentifierBody} body 
     * @param {K5aj3sh5Id} jobIdentifier 
     * @param {K5aj3sh5Identifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogpushJobsForAZoneApi
     */
    public async putZonesZoneIdentifierLogpushJobsJobIdentifier(body: JobsJobIdentifierBody, jobIdentifier: K5aj3sh5Id, zoneIdentifier: K5aj3sh5Identifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<K5aj3sh5LogpushJobResponseSingle>> {
        return LogpushJobsForAZoneApiFp(this.configuration).putZonesZoneIdentifierLogpushJobsJobIdentifier(body, jobIdentifier, zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
}
