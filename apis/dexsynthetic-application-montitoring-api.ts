/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse20020 } from '../models';
import { InlineResponse20021 } from '../models';
import { InlineResponse20022 } from '../models';
import { InlineResponse20023 } from '../models';
import { InlineResponse20024 } from '../models';
import { InlineResponse20025 } from '../models';
import { InlineResponse20026 } from '../models';
import { InlineResponse4XX103 } from '../models';
import { InlineResponse4XX104 } from '../models';
import { InlineResponse4XX105 } from '../models';
import { InlineResponse4XX106 } from '../models';
import { InlineResponse4XX107 } from '../models';
import { InlineResponse4XX108 } from '../models';
import { InlineResponse4XX109 } from '../models';
import { NAx036G7AccountIdentifier } from '../models';
import { NAx036G7Uuid } from '../models';
/**
 * DEXSyntheticApplicationMontitoringApi - axios parameter creator
 * @export
 */
export const DEXSyntheticApplicationMontitoringApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get test details and aggregate performance metrics for an http test for a given time period between 1 hour and 7 days.
         * @summary Get details and aggregate metrics for a test
         * @param {NAx036G7AccountIdentifier} accountIdentifier unique identifier linked to an account in the API request path.
         * @param {NAx036G7Uuid} testId unique identifier for a specific test
         * @param {string} timeStart Start time for aggregate metrics in ISO ms
         * @param {string} timeEnd End time for aggregate metrics in ISO ms
         * @param {string} interval Time interval for aggregate time slots.
         * @param {Array<string>} [deviceId] Optionally filter result stats to a specific device(s). Cannot be used in combination with colo param.
         * @param {string} [colo] Optionally filter result stats to a Cloudflare colo. Cannot be used in combination with deviceId param.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dexEndpointsHttpTestDetails: async (accountIdentifier: NAx036G7AccountIdentifier, testId: NAx036G7Uuid, timeStart: string, timeEnd: string, interval: string, deviceId?: Array<string>, colo?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling dexEndpointsHttpTestDetails.');
            }
            // verify required parameter 'testId' is not null or undefined
            if (testId === null || testId === undefined) {
                throw new RequiredError('testId','Required parameter testId was null or undefined when calling dexEndpointsHttpTestDetails.');
            }
            // verify required parameter 'timeStart' is not null or undefined
            if (timeStart === null || timeStart === undefined) {
                throw new RequiredError('timeStart','Required parameter timeStart was null or undefined when calling dexEndpointsHttpTestDetails.');
            }
            // verify required parameter 'timeEnd' is not null or undefined
            if (timeEnd === null || timeEnd === undefined) {
                throw new RequiredError('timeEnd','Required parameter timeEnd was null or undefined when calling dexEndpointsHttpTestDetails.');
            }
            // verify required parameter 'interval' is not null or undefined
            if (interval === null || interval === undefined) {
                throw new RequiredError('interval','Required parameter interval was null or undefined when calling dexEndpointsHttpTestDetails.');
            }
            const localVarPath = `/accounts/{account_identifier}/dex/http-tests/{test_id}`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)))
                .replace(`{${"test_id"}}`, encodeURIComponent(String(testId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            if (deviceId) {
                localVarQueryParameter['deviceId'] = deviceId;
            }

            if (timeStart !== undefined) {
                localVarQueryParameter['timeStart'] = timeStart;
            }

            if (timeEnd !== undefined) {
                localVarQueryParameter['timeEnd'] = timeEnd;
            }

            if (interval !== undefined) {
                localVarQueryParameter['interval'] = interval;
            }

            if (colo !== undefined) {
                localVarQueryParameter['colo'] = colo;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List Cloudflare colos that account's devices were connected to during a time period, sorted by usage starting from the most used colo. Colos without traffic are also returned and sorted alphabetically.
         * @summary List Cloudflare colos
         * @param {NAx036G7AccountIdentifier} accountIdentifier unique identifier linked to an account in the API request path.
         * @param {string} timeStart Start time for connection period in RFC3339 (ISO 8601) format.
         * @param {string} timeEnd End time for connection period in RFC3339 (ISO 8601) format.
         * @param {string} [sortBy] Type of usage that colos should be sorted by. If unspecified, returns all Cloudflare colos sorted alphabetically.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dexEndpointsListColos: async (accountIdentifier: NAx036G7AccountIdentifier, timeStart: string, timeEnd: string, sortBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling dexEndpointsListColos.');
            }
            // verify required parameter 'timeStart' is not null or undefined
            if (timeStart === null || timeStart === undefined) {
                throw new RequiredError('timeStart','Required parameter timeStart was null or undefined when calling dexEndpointsListColos.');
            }
            // verify required parameter 'timeEnd' is not null or undefined
            if (timeEnd === null || timeEnd === undefined) {
                throw new RequiredError('timeEnd','Required parameter timeEnd was null or undefined when calling dexEndpointsListColos.');
            }
            const localVarPath = `/accounts/{account_identifier}/dex/colos`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            if (timeStart !== undefined) {
                localVarQueryParameter['timeStart'] = timeStart;
            }

            if (timeEnd !== undefined) {
                localVarQueryParameter['timeEnd'] = timeEnd;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List DEX tests
         * @summary List DEX test analytics
         * @param {NAx036G7AccountIdentifier} accountIdentifier unique identifier linked to an account in the API request path.
         * @param {string} [colo] Optionally filter result stats to a Cloudflare colo. Cannot be used in combination with deviceId param.
         * @param {string} [testName] Optionally filter results by test name
         * @param {Array<string>} [deviceId] Optionally filter result stats to a specific device(s). Cannot be used in combination with colo param.
         * @param {number} [page] Page number of paginated results
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dexEndpointsListTests: async (accountIdentifier: NAx036G7AccountIdentifier, colo?: string, testName?: string, deviceId?: Array<string>, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling dexEndpointsListTests.');
            }
            const localVarPath = `/accounts/{account_identifier}/dex/tests`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            if (colo !== undefined) {
                localVarQueryParameter['colo'] = colo;
            }

            if (testName !== undefined) {
                localVarQueryParameter['testName'] = testName;
            }

            if (deviceId) {
                localVarQueryParameter['deviceId'] = deviceId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns unique count of devices that have run synthetic application monitoring tests in the past 7 days.
         * @summary Get count of devices targeted
         * @param {NAx036G7AccountIdentifier} accountIdentifier unique identifier linked to an account in the API request path.
         * @param {string} [testName] Optionally filter results by test name
         * @param {Array<string>} [deviceId] Optionally filter result stats to a specific device(s). Cannot be used in combination with colo param.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dexEndpointsTestsUniqueDevices: async (accountIdentifier: NAx036G7AccountIdentifier, testName?: string, deviceId?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling dexEndpointsTestsUniqueDevices.');
            }
            const localVarPath = `/accounts/{account_identifier}/dex/tests/unique-devices`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            if (testName !== undefined) {
                localVarQueryParameter['testName'] = testName;
            }

            if (deviceId) {
                localVarQueryParameter['deviceId'] = deviceId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get test details and aggregate performance metrics for an traceroute test for a given time period between 1 hour and 7 days.
         * @summary Get details and aggregate metrics for a traceroute test
         * @param {NAx036G7AccountIdentifier} accountIdentifier Unique identifier linked to an account
         * @param {NAx036G7Uuid} testId Unique identifier for a specific test
         * @param {string} timeStart Start time for aggregate metrics in ISO ms
         * @param {string} timeEnd End time for aggregate metrics in ISO ms
         * @param {string} interval Time interval for aggregate time slots.
         * @param {Array<string>} [deviceId] Optionally filter result stats to a specific device(s). Cannot be used in combination with colo param.
         * @param {string} [colo] Optionally filter result stats to a Cloudflare colo. Cannot be used in combination with deviceId param.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dexEndpointsTracerouteTestDetails: async (accountIdentifier: NAx036G7AccountIdentifier, testId: NAx036G7Uuid, timeStart: string, timeEnd: string, interval: string, deviceId?: Array<string>, colo?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling dexEndpointsTracerouteTestDetails.');
            }
            // verify required parameter 'testId' is not null or undefined
            if (testId === null || testId === undefined) {
                throw new RequiredError('testId','Required parameter testId was null or undefined when calling dexEndpointsTracerouteTestDetails.');
            }
            // verify required parameter 'timeStart' is not null or undefined
            if (timeStart === null || timeStart === undefined) {
                throw new RequiredError('timeStart','Required parameter timeStart was null or undefined when calling dexEndpointsTracerouteTestDetails.');
            }
            // verify required parameter 'timeEnd' is not null or undefined
            if (timeEnd === null || timeEnd === undefined) {
                throw new RequiredError('timeEnd','Required parameter timeEnd was null or undefined when calling dexEndpointsTracerouteTestDetails.');
            }
            // verify required parameter 'interval' is not null or undefined
            if (interval === null || interval === undefined) {
                throw new RequiredError('interval','Required parameter interval was null or undefined when calling dexEndpointsTracerouteTestDetails.');
            }
            const localVarPath = `/accounts/{account_identifier}/dex/traceroute-tests/{test_id}`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)))
                .replace(`{${"test_id"}}`, encodeURIComponent(String(testId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            if (deviceId) {
                localVarQueryParameter['deviceId'] = deviceId;
            }

            if (timeStart !== undefined) {
                localVarQueryParameter['timeStart'] = timeStart;
            }

            if (timeEnd !== undefined) {
                localVarQueryParameter['timeEnd'] = timeEnd;
            }

            if (interval !== undefined) {
                localVarQueryParameter['interval'] = interval;
            }

            if (colo !== undefined) {
                localVarQueryParameter['colo'] = colo;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a breakdown of metrics by hop for individual traceroute test runs
         * @summary Get network path breakdown for a traceroute test
         * @param {NAx036G7AccountIdentifier} accountIdentifier unique identifier linked to an account
         * @param {NAx036G7Uuid} testId unique identifier for a specific test
         * @param {string} deviceId Device to filter tracroute result runs to
         * @param {string} timeStart Start time for aggregate metrics in ISO ms
         * @param {string} timeEnd End time for aggregate metrics in ISO ms
         * @param {string} interval Time interval for aggregate time slots.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dexEndpointsTracerouteTestNetworkPath: async (accountIdentifier: NAx036G7AccountIdentifier, testId: NAx036G7Uuid, deviceId: string, timeStart: string, timeEnd: string, interval: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling dexEndpointsTracerouteTestNetworkPath.');
            }
            // verify required parameter 'testId' is not null or undefined
            if (testId === null || testId === undefined) {
                throw new RequiredError('testId','Required parameter testId was null or undefined when calling dexEndpointsTracerouteTestNetworkPath.');
            }
            // verify required parameter 'deviceId' is not null or undefined
            if (deviceId === null || deviceId === undefined) {
                throw new RequiredError('deviceId','Required parameter deviceId was null or undefined when calling dexEndpointsTracerouteTestNetworkPath.');
            }
            // verify required parameter 'timeStart' is not null or undefined
            if (timeStart === null || timeStart === undefined) {
                throw new RequiredError('timeStart','Required parameter timeStart was null or undefined when calling dexEndpointsTracerouteTestNetworkPath.');
            }
            // verify required parameter 'timeEnd' is not null or undefined
            if (timeEnd === null || timeEnd === undefined) {
                throw new RequiredError('timeEnd','Required parameter timeEnd was null or undefined when calling dexEndpointsTracerouteTestNetworkPath.');
            }
            // verify required parameter 'interval' is not null or undefined
            if (interval === null || interval === undefined) {
                throw new RequiredError('interval','Required parameter interval was null or undefined when calling dexEndpointsTracerouteTestNetworkPath.');
            }
            const localVarPath = `/accounts/{account_identifier}/dex/traceroute-tests/{test_id}/network-path`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)))
                .replace(`{${"test_id"}}`, encodeURIComponent(String(testId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            if (deviceId !== undefined) {
                localVarQueryParameter['deviceId'] = deviceId;
            }

            if (timeStart !== undefined) {
                localVarQueryParameter['timeStart'] = timeStart;
            }

            if (timeEnd !== undefined) {
                localVarQueryParameter['timeEnd'] = timeEnd;
            }

            if (interval !== undefined) {
                localVarQueryParameter['interval'] = interval;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a breakdown of hops and performance metrics for a specific traceroute test run
         * @summary Get details for a specific traceroute test run
         * @param {NAx036G7AccountIdentifier} accountIdentifier unique identifier linked to an account
         * @param {NAx036G7Uuid} testResultId unique identifier for a specific traceroute test
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dexEndpointsTracerouteTestResultNetworkPath: async (accountIdentifier: NAx036G7AccountIdentifier, testResultId: NAx036G7Uuid, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling dexEndpointsTracerouteTestResultNetworkPath.');
            }
            // verify required parameter 'testResultId' is not null or undefined
            if (testResultId === null || testResultId === undefined) {
                throw new RequiredError('testResultId','Required parameter testResultId was null or undefined when calling dexEndpointsTracerouteTestResultNetworkPath.');
            }
            const localVarPath = `/accounts/{account_identifier}/dex/traceroute-test-results/{test_result_id}/network-path`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)))
                .replace(`{${"test_result_id"}}`, encodeURIComponent(String(testResultId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DEXSyntheticApplicationMontitoringApi - functional programming interface
 * @export
 */
export const DEXSyntheticApplicationMontitoringApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get test details and aggregate performance metrics for an http test for a given time period between 1 hour and 7 days.
         * @summary Get details and aggregate metrics for a test
         * @param {NAx036G7AccountIdentifier} accountIdentifier unique identifier linked to an account in the API request path.
         * @param {NAx036G7Uuid} testId unique identifier for a specific test
         * @param {string} timeStart Start time for aggregate metrics in ISO ms
         * @param {string} timeEnd End time for aggregate metrics in ISO ms
         * @param {string} interval Time interval for aggregate time slots.
         * @param {Array<string>} [deviceId] Optionally filter result stats to a specific device(s). Cannot be used in combination with colo param.
         * @param {string} [colo] Optionally filter result stats to a Cloudflare colo. Cannot be used in combination with deviceId param.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dexEndpointsHttpTestDetails(accountIdentifier: NAx036G7AccountIdentifier, testId: NAx036G7Uuid, timeStart: string, timeEnd: string, interval: string, deviceId?: Array<string>, colo?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20021>>> {
            const localVarAxiosArgs = await DEXSyntheticApplicationMontitoringApiAxiosParamCreator(configuration).dexEndpointsHttpTestDetails(accountIdentifier, testId, timeStart, timeEnd, interval, deviceId, colo, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List Cloudflare colos that account's devices were connected to during a time period, sorted by usage starting from the most used colo. Colos without traffic are also returned and sorted alphabetically.
         * @summary List Cloudflare colos
         * @param {NAx036G7AccountIdentifier} accountIdentifier unique identifier linked to an account in the API request path.
         * @param {string} timeStart Start time for connection period in RFC3339 (ISO 8601) format.
         * @param {string} timeEnd End time for connection period in RFC3339 (ISO 8601) format.
         * @param {string} [sortBy] Type of usage that colos should be sorted by. If unspecified, returns all Cloudflare colos sorted alphabetically.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dexEndpointsListColos(accountIdentifier: NAx036G7AccountIdentifier, timeStart: string, timeEnd: string, sortBy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20020>>> {
            const localVarAxiosArgs = await DEXSyntheticApplicationMontitoringApiAxiosParamCreator(configuration).dexEndpointsListColos(accountIdentifier, timeStart, timeEnd, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List DEX tests
         * @summary List DEX test analytics
         * @param {NAx036G7AccountIdentifier} accountIdentifier unique identifier linked to an account in the API request path.
         * @param {string} [colo] Optionally filter result stats to a Cloudflare colo. Cannot be used in combination with deviceId param.
         * @param {string} [testName] Optionally filter results by test name
         * @param {Array<string>} [deviceId] Optionally filter result stats to a specific device(s). Cannot be used in combination with colo param.
         * @param {number} [page] Page number of paginated results
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dexEndpointsListTests(accountIdentifier: NAx036G7AccountIdentifier, colo?: string, testName?: string, deviceId?: Array<string>, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20022>>> {
            const localVarAxiosArgs = await DEXSyntheticApplicationMontitoringApiAxiosParamCreator(configuration).dexEndpointsListTests(accountIdentifier, colo, testName, deviceId, page, perPage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns unique count of devices that have run synthetic application monitoring tests in the past 7 days.
         * @summary Get count of devices targeted
         * @param {NAx036G7AccountIdentifier} accountIdentifier unique identifier linked to an account in the API request path.
         * @param {string} [testName] Optionally filter results by test name
         * @param {Array<string>} [deviceId] Optionally filter result stats to a specific device(s). Cannot be used in combination with colo param.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dexEndpointsTestsUniqueDevices(accountIdentifier: NAx036G7AccountIdentifier, testName?: string, deviceId?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20023>>> {
            const localVarAxiosArgs = await DEXSyntheticApplicationMontitoringApiAxiosParamCreator(configuration).dexEndpointsTestsUniqueDevices(accountIdentifier, testName, deviceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get test details and aggregate performance metrics for an traceroute test for a given time period between 1 hour and 7 days.
         * @summary Get details and aggregate metrics for a traceroute test
         * @param {NAx036G7AccountIdentifier} accountIdentifier Unique identifier linked to an account
         * @param {NAx036G7Uuid} testId Unique identifier for a specific test
         * @param {string} timeStart Start time for aggregate metrics in ISO ms
         * @param {string} timeEnd End time for aggregate metrics in ISO ms
         * @param {string} interval Time interval for aggregate time slots.
         * @param {Array<string>} [deviceId] Optionally filter result stats to a specific device(s). Cannot be used in combination with colo param.
         * @param {string} [colo] Optionally filter result stats to a Cloudflare colo. Cannot be used in combination with deviceId param.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dexEndpointsTracerouteTestDetails(accountIdentifier: NAx036G7AccountIdentifier, testId: NAx036G7Uuid, timeStart: string, timeEnd: string, interval: string, deviceId?: Array<string>, colo?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20025>>> {
            const localVarAxiosArgs = await DEXSyntheticApplicationMontitoringApiAxiosParamCreator(configuration).dexEndpointsTracerouteTestDetails(accountIdentifier, testId, timeStart, timeEnd, interval, deviceId, colo, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a breakdown of metrics by hop for individual traceroute test runs
         * @summary Get network path breakdown for a traceroute test
         * @param {NAx036G7AccountIdentifier} accountIdentifier unique identifier linked to an account
         * @param {NAx036G7Uuid} testId unique identifier for a specific test
         * @param {string} deviceId Device to filter tracroute result runs to
         * @param {string} timeStart Start time for aggregate metrics in ISO ms
         * @param {string} timeEnd End time for aggregate metrics in ISO ms
         * @param {string} interval Time interval for aggregate time slots.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dexEndpointsTracerouteTestNetworkPath(accountIdentifier: NAx036G7AccountIdentifier, testId: NAx036G7Uuid, deviceId: string, timeStart: string, timeEnd: string, interval: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20026>>> {
            const localVarAxiosArgs = await DEXSyntheticApplicationMontitoringApiAxiosParamCreator(configuration).dexEndpointsTracerouteTestNetworkPath(accountIdentifier, testId, deviceId, timeStart, timeEnd, interval, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a breakdown of hops and performance metrics for a specific traceroute test run
         * @summary Get details for a specific traceroute test run
         * @param {NAx036G7AccountIdentifier} accountIdentifier unique identifier linked to an account
         * @param {NAx036G7Uuid} testResultId unique identifier for a specific traceroute test
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dexEndpointsTracerouteTestResultNetworkPath(accountIdentifier: NAx036G7AccountIdentifier, testResultId: NAx036G7Uuid, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20024>>> {
            const localVarAxiosArgs = await DEXSyntheticApplicationMontitoringApiAxiosParamCreator(configuration).dexEndpointsTracerouteTestResultNetworkPath(accountIdentifier, testResultId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DEXSyntheticApplicationMontitoringApi - factory interface
 * @export
 */
export const DEXSyntheticApplicationMontitoringApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Get test details and aggregate performance metrics for an http test for a given time period between 1 hour and 7 days.
         * @summary Get details and aggregate metrics for a test
         * @param {NAx036G7AccountIdentifier} accountIdentifier unique identifier linked to an account in the API request path.
         * @param {NAx036G7Uuid} testId unique identifier for a specific test
         * @param {string} timeStart Start time for aggregate metrics in ISO ms
         * @param {string} timeEnd End time for aggregate metrics in ISO ms
         * @param {string} interval Time interval for aggregate time slots.
         * @param {Array<string>} [deviceId] Optionally filter result stats to a specific device(s). Cannot be used in combination with colo param.
         * @param {string} [colo] Optionally filter result stats to a Cloudflare colo. Cannot be used in combination with deviceId param.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dexEndpointsHttpTestDetails(accountIdentifier: NAx036G7AccountIdentifier, testId: NAx036G7Uuid, timeStart: string, timeEnd: string, interval: string, deviceId?: Array<string>, colo?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20021>> {
            return DEXSyntheticApplicationMontitoringApiFp(configuration).dexEndpointsHttpTestDetails(accountIdentifier, testId, timeStart, timeEnd, interval, deviceId, colo, options).then((request) => request(axios, basePath));
        },
        /**
         * List Cloudflare colos that account's devices were connected to during a time period, sorted by usage starting from the most used colo. Colos without traffic are also returned and sorted alphabetically.
         * @summary List Cloudflare colos
         * @param {NAx036G7AccountIdentifier} accountIdentifier unique identifier linked to an account in the API request path.
         * @param {string} timeStart Start time for connection period in RFC3339 (ISO 8601) format.
         * @param {string} timeEnd End time for connection period in RFC3339 (ISO 8601) format.
         * @param {string} [sortBy] Type of usage that colos should be sorted by. If unspecified, returns all Cloudflare colos sorted alphabetically.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dexEndpointsListColos(accountIdentifier: NAx036G7AccountIdentifier, timeStart: string, timeEnd: string, sortBy?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20020>> {
            return DEXSyntheticApplicationMontitoringApiFp(configuration).dexEndpointsListColos(accountIdentifier, timeStart, timeEnd, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * List DEX tests
         * @summary List DEX test analytics
         * @param {NAx036G7AccountIdentifier} accountIdentifier unique identifier linked to an account in the API request path.
         * @param {string} [colo] Optionally filter result stats to a Cloudflare colo. Cannot be used in combination with deviceId param.
         * @param {string} [testName] Optionally filter results by test name
         * @param {Array<string>} [deviceId] Optionally filter result stats to a specific device(s). Cannot be used in combination with colo param.
         * @param {number} [page] Page number of paginated results
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dexEndpointsListTests(accountIdentifier: NAx036G7AccountIdentifier, colo?: string, testName?: string, deviceId?: Array<string>, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20022>> {
            return DEXSyntheticApplicationMontitoringApiFp(configuration).dexEndpointsListTests(accountIdentifier, colo, testName, deviceId, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns unique count of devices that have run synthetic application monitoring tests in the past 7 days.
         * @summary Get count of devices targeted
         * @param {NAx036G7AccountIdentifier} accountIdentifier unique identifier linked to an account in the API request path.
         * @param {string} [testName] Optionally filter results by test name
         * @param {Array<string>} [deviceId] Optionally filter result stats to a specific device(s). Cannot be used in combination with colo param.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dexEndpointsTestsUniqueDevices(accountIdentifier: NAx036G7AccountIdentifier, testName?: string, deviceId?: Array<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20023>> {
            return DEXSyntheticApplicationMontitoringApiFp(configuration).dexEndpointsTestsUniqueDevices(accountIdentifier, testName, deviceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get test details and aggregate performance metrics for an traceroute test for a given time period between 1 hour and 7 days.
         * @summary Get details and aggregate metrics for a traceroute test
         * @param {NAx036G7AccountIdentifier} accountIdentifier Unique identifier linked to an account
         * @param {NAx036G7Uuid} testId Unique identifier for a specific test
         * @param {string} timeStart Start time for aggregate metrics in ISO ms
         * @param {string} timeEnd End time for aggregate metrics in ISO ms
         * @param {string} interval Time interval for aggregate time slots.
         * @param {Array<string>} [deviceId] Optionally filter result stats to a specific device(s). Cannot be used in combination with colo param.
         * @param {string} [colo] Optionally filter result stats to a Cloudflare colo. Cannot be used in combination with deviceId param.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dexEndpointsTracerouteTestDetails(accountIdentifier: NAx036G7AccountIdentifier, testId: NAx036G7Uuid, timeStart: string, timeEnd: string, interval: string, deviceId?: Array<string>, colo?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20025>> {
            return DEXSyntheticApplicationMontitoringApiFp(configuration).dexEndpointsTracerouteTestDetails(accountIdentifier, testId, timeStart, timeEnd, interval, deviceId, colo, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a breakdown of metrics by hop for individual traceroute test runs
         * @summary Get network path breakdown for a traceroute test
         * @param {NAx036G7AccountIdentifier} accountIdentifier unique identifier linked to an account
         * @param {NAx036G7Uuid} testId unique identifier for a specific test
         * @param {string} deviceId Device to filter tracroute result runs to
         * @param {string} timeStart Start time for aggregate metrics in ISO ms
         * @param {string} timeEnd End time for aggregate metrics in ISO ms
         * @param {string} interval Time interval for aggregate time slots.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dexEndpointsTracerouteTestNetworkPath(accountIdentifier: NAx036G7AccountIdentifier, testId: NAx036G7Uuid, deviceId: string, timeStart: string, timeEnd: string, interval: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20026>> {
            return DEXSyntheticApplicationMontitoringApiFp(configuration).dexEndpointsTracerouteTestNetworkPath(accountIdentifier, testId, deviceId, timeStart, timeEnd, interval, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a breakdown of hops and performance metrics for a specific traceroute test run
         * @summary Get details for a specific traceroute test run
         * @param {NAx036G7AccountIdentifier} accountIdentifier unique identifier linked to an account
         * @param {NAx036G7Uuid} testResultId unique identifier for a specific traceroute test
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dexEndpointsTracerouteTestResultNetworkPath(accountIdentifier: NAx036G7AccountIdentifier, testResultId: NAx036G7Uuid, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20024>> {
            return DEXSyntheticApplicationMontitoringApiFp(configuration).dexEndpointsTracerouteTestResultNetworkPath(accountIdentifier, testResultId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DEXSyntheticApplicationMontitoringApi - object-oriented interface
 * @export
 * @class DEXSyntheticApplicationMontitoringApi
 * @extends {BaseAPI}
 */
export class DEXSyntheticApplicationMontitoringApi extends BaseAPI {
    /**
     * Get test details and aggregate performance metrics for an http test for a given time period between 1 hour and 7 days.
     * @summary Get details and aggregate metrics for a test
     * @param {NAx036G7AccountIdentifier} accountIdentifier unique identifier linked to an account in the API request path.
     * @param {NAx036G7Uuid} testId unique identifier for a specific test
     * @param {string} timeStart Start time for aggregate metrics in ISO ms
     * @param {string} timeEnd End time for aggregate metrics in ISO ms
     * @param {string} interval Time interval for aggregate time slots.
     * @param {Array<string>} [deviceId] Optionally filter result stats to a specific device(s). Cannot be used in combination with colo param.
     * @param {string} [colo] Optionally filter result stats to a Cloudflare colo. Cannot be used in combination with deviceId param.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DEXSyntheticApplicationMontitoringApi
     */
    public async dexEndpointsHttpTestDetails(accountIdentifier: NAx036G7AccountIdentifier, testId: NAx036G7Uuid, timeStart: string, timeEnd: string, interval: string, deviceId?: Array<string>, colo?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20021>> {
        return DEXSyntheticApplicationMontitoringApiFp(this.configuration).dexEndpointsHttpTestDetails(accountIdentifier, testId, timeStart, timeEnd, interval, deviceId, colo, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Cloudflare colos that account's devices were connected to during a time period, sorted by usage starting from the most used colo. Colos without traffic are also returned and sorted alphabetically.
     * @summary List Cloudflare colos
     * @param {NAx036G7AccountIdentifier} accountIdentifier unique identifier linked to an account in the API request path.
     * @param {string} timeStart Start time for connection period in RFC3339 (ISO 8601) format.
     * @param {string} timeEnd End time for connection period in RFC3339 (ISO 8601) format.
     * @param {string} [sortBy] Type of usage that colos should be sorted by. If unspecified, returns all Cloudflare colos sorted alphabetically.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DEXSyntheticApplicationMontitoringApi
     */
    public async dexEndpointsListColos(accountIdentifier: NAx036G7AccountIdentifier, timeStart: string, timeEnd: string, sortBy?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20020>> {
        return DEXSyntheticApplicationMontitoringApiFp(this.configuration).dexEndpointsListColos(accountIdentifier, timeStart, timeEnd, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List DEX tests
     * @summary List DEX test analytics
     * @param {NAx036G7AccountIdentifier} accountIdentifier unique identifier linked to an account in the API request path.
     * @param {string} [colo] Optionally filter result stats to a Cloudflare colo. Cannot be used in combination with deviceId param.
     * @param {string} [testName] Optionally filter results by test name
     * @param {Array<string>} [deviceId] Optionally filter result stats to a specific device(s). Cannot be used in combination with colo param.
     * @param {number} [page] Page number of paginated results
     * @param {number} [perPage] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DEXSyntheticApplicationMontitoringApi
     */
    public async dexEndpointsListTests(accountIdentifier: NAx036G7AccountIdentifier, colo?: string, testName?: string, deviceId?: Array<string>, page?: number, perPage?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20022>> {
        return DEXSyntheticApplicationMontitoringApiFp(this.configuration).dexEndpointsListTests(accountIdentifier, colo, testName, deviceId, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns unique count of devices that have run synthetic application monitoring tests in the past 7 days.
     * @summary Get count of devices targeted
     * @param {NAx036G7AccountIdentifier} accountIdentifier unique identifier linked to an account in the API request path.
     * @param {string} [testName] Optionally filter results by test name
     * @param {Array<string>} [deviceId] Optionally filter result stats to a specific device(s). Cannot be used in combination with colo param.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DEXSyntheticApplicationMontitoringApi
     */
    public async dexEndpointsTestsUniqueDevices(accountIdentifier: NAx036G7AccountIdentifier, testName?: string, deviceId?: Array<string>, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20023>> {
        return DEXSyntheticApplicationMontitoringApiFp(this.configuration).dexEndpointsTestsUniqueDevices(accountIdentifier, testName, deviceId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get test details and aggregate performance metrics for an traceroute test for a given time period between 1 hour and 7 days.
     * @summary Get details and aggregate metrics for a traceroute test
     * @param {NAx036G7AccountIdentifier} accountIdentifier Unique identifier linked to an account
     * @param {NAx036G7Uuid} testId Unique identifier for a specific test
     * @param {string} timeStart Start time for aggregate metrics in ISO ms
     * @param {string} timeEnd End time for aggregate metrics in ISO ms
     * @param {string} interval Time interval for aggregate time slots.
     * @param {Array<string>} [deviceId] Optionally filter result stats to a specific device(s). Cannot be used in combination with colo param.
     * @param {string} [colo] Optionally filter result stats to a Cloudflare colo. Cannot be used in combination with deviceId param.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DEXSyntheticApplicationMontitoringApi
     */
    public async dexEndpointsTracerouteTestDetails(accountIdentifier: NAx036G7AccountIdentifier, testId: NAx036G7Uuid, timeStart: string, timeEnd: string, interval: string, deviceId?: Array<string>, colo?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20025>> {
        return DEXSyntheticApplicationMontitoringApiFp(this.configuration).dexEndpointsTracerouteTestDetails(accountIdentifier, testId, timeStart, timeEnd, interval, deviceId, colo, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a breakdown of metrics by hop for individual traceroute test runs
     * @summary Get network path breakdown for a traceroute test
     * @param {NAx036G7AccountIdentifier} accountIdentifier unique identifier linked to an account
     * @param {NAx036G7Uuid} testId unique identifier for a specific test
     * @param {string} deviceId Device to filter tracroute result runs to
     * @param {string} timeStart Start time for aggregate metrics in ISO ms
     * @param {string} timeEnd End time for aggregate metrics in ISO ms
     * @param {string} interval Time interval for aggregate time slots.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DEXSyntheticApplicationMontitoringApi
     */
    public async dexEndpointsTracerouteTestNetworkPath(accountIdentifier: NAx036G7AccountIdentifier, testId: NAx036G7Uuid, deviceId: string, timeStart: string, timeEnd: string, interval: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20026>> {
        return DEXSyntheticApplicationMontitoringApiFp(this.configuration).dexEndpointsTracerouteTestNetworkPath(accountIdentifier, testId, deviceId, timeStart, timeEnd, interval, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a breakdown of hops and performance metrics for a specific traceroute test run
     * @summary Get details for a specific traceroute test run
     * @param {NAx036G7AccountIdentifier} accountIdentifier unique identifier linked to an account
     * @param {NAx036G7Uuid} testResultId unique identifier for a specific traceroute test
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DEXSyntheticApplicationMontitoringApi
     */
    public async dexEndpointsTracerouteTestResultNetworkPath(accountIdentifier: NAx036G7AccountIdentifier, testResultId: NAx036G7Uuid, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20024>> {
        return DEXSyntheticApplicationMontitoringApiFp(this.configuration).dexEndpointsTracerouteTestResultNetworkPath(accountIdentifier, testResultId, options).then((request) => request(this.axios, this.basePath));
    }
}
