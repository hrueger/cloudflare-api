/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse200254 } from '../models';
import { InlineResponse200255 } from '../models';
import { InlineResponse200256 } from '../models';
import { InlineResponse200257 } from '../models';
import { InlineResponse200258 } from '../models';
import { InlineResponse4XX374 } from '../models';
import { Model0PHgGtUBIdentifier } from '../models';
import { Model0PHgGtUBSnippetName } from '../models';
import { SnippetsSnippetRulesBody } from '../models';
import { ZoneszoneIdentifiersnippetssnippetNameMetadata } from '../models';
/**
 * ZoneSnippetsApi - axios parameter creator
 * @export
 */
export const ZoneSnippetsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary All Snippets
         * @param {Model0PHgGtUBIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zoneSnippets: async (zoneIdentifier: Model0PHgGtUBIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling zoneSnippets.');
            }
            const localVarPath = `/zones/{zone_identifier}/snippets`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Snippet
         * @param {Model0PHgGtUBIdentifier} zoneIdentifier 
         * @param {Model0PHgGtUBSnippetName} snippetName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zoneSnippetsSnippet: async (zoneIdentifier: Model0PHgGtUBIdentifier, snippetName: Model0PHgGtUBSnippetName, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling zoneSnippetsSnippet.');
            }
            // verify required parameter 'snippetName' is not null or undefined
            if (snippetName === null || snippetName === undefined) {
                throw new RequiredError('snippetName','Required parameter snippetName was null or undefined when calling zoneSnippetsSnippet.');
            }
            const localVarPath = `/zones/{zone_identifier}/snippets/{snippet_name}`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)))
                .replace(`{${"snippet_name"}}`, encodeURIComponent(String(snippetName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Snippet Content
         * @param {Model0PHgGtUBIdentifier} zoneIdentifier 
         * @param {Model0PHgGtUBSnippetName} snippetName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zoneSnippetsSnippetContent: async (zoneIdentifier: Model0PHgGtUBIdentifier, snippetName: Model0PHgGtUBSnippetName, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling zoneSnippetsSnippetContent.');
            }
            // verify required parameter 'snippetName' is not null or undefined
            if (snippetName === null || snippetName === undefined) {
                throw new RequiredError('snippetName','Required parameter snippetName was null or undefined when calling zoneSnippetsSnippetContent.');
            }
            const localVarPath = `/zones/{zone_identifier}/snippets/{snippet_name}/content`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)))
                .replace(`{${"snippet_name"}}`, encodeURIComponent(String(snippetName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Snippet
         * @param {Model0PHgGtUBIdentifier} zoneIdentifier 
         * @param {Model0PHgGtUBSnippetName} snippetName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zoneSnippetsSnippetDelete: async (zoneIdentifier: Model0PHgGtUBIdentifier, snippetName: Model0PHgGtUBSnippetName, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling zoneSnippetsSnippetDelete.');
            }
            // verify required parameter 'snippetName' is not null or undefined
            if (snippetName === null || snippetName === undefined) {
                throw new RequiredError('snippetName','Required parameter snippetName was null or undefined when calling zoneSnippetsSnippetDelete.');
            }
            const localVarPath = `/zones/{zone_identifier}/snippets/{snippet_name}`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)))
                .replace(`{${"snippet_name"}}`, encodeURIComponent(String(snippetName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Put Snippet
         * @param {Model0PHgGtUBIdentifier} zoneIdentifier 
         * @param {Model0PHgGtUBSnippetName} snippetName 
         * @param {string} [files] 
         * @param {ZoneszoneIdentifiersnippetssnippetNameMetadata} [metadata] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zoneSnippetsSnippetPutForm: async (zoneIdentifier: Model0PHgGtUBIdentifier, snippetName: Model0PHgGtUBSnippetName, files?: string, metadata?: ZoneszoneIdentifiersnippetssnippetNameMetadata, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling zoneSnippetsSnippetPutForm.');
            }
            // verify required parameter 'snippetName' is not null or undefined
            if (snippetName === null || snippetName === undefined) {
                throw new RequiredError('snippetName','Required parameter snippetName was null or undefined when calling zoneSnippetsSnippetPutForm.');
            }
            const localVarPath = `/zones/{zone_identifier}/snippets/{snippet_name}`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)))
                .replace(`{${"snippet_name"}}`, encodeURIComponent(String(snippetName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }


            if (files !== undefined) { 
                localVarFormParams.append('files', files as any);
            }

            if (metadata !== undefined) { 
                localVarFormParams.append('metadata', metadata as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Rules
         * @param {Model0PHgGtUBIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zoneSnippetsSnippetRules: async (zoneIdentifier: Model0PHgGtUBIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling zoneSnippetsSnippetRules.');
            }
            const localVarPath = `/zones/{zone_identifier}/snippets/snippet_rules`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Put Rules
         * @param {Model0PHgGtUBIdentifier} zoneIdentifier 
         * @param {SnippetsSnippetRulesBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zoneSnippetsSnippetRulesPut: async (zoneIdentifier: Model0PHgGtUBIdentifier, body?: SnippetsSnippetRulesBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneIdentifier' is not null or undefined
            if (zoneIdentifier === null || zoneIdentifier === undefined) {
                throw new RequiredError('zoneIdentifier','Required parameter zoneIdentifier was null or undefined when calling zoneSnippetsSnippetRulesPut.');
            }
            const localVarPath = `/zones/{zone_identifier}/snippets/snippet_rules`
                .replace(`{${"zone_identifier"}}`, encodeURIComponent(String(zoneIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ZoneSnippetsApi - functional programming interface
 * @export
 */
export const ZoneSnippetsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary All Snippets
         * @param {Model0PHgGtUBIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zoneSnippets(zoneIdentifier: Model0PHgGtUBIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200254>>> {
            const localVarAxiosArgs = await ZoneSnippetsApiAxiosParamCreator(configuration).zoneSnippets(zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Snippet
         * @param {Model0PHgGtUBIdentifier} zoneIdentifier 
         * @param {Model0PHgGtUBSnippetName} snippetName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zoneSnippetsSnippet(zoneIdentifier: Model0PHgGtUBIdentifier, snippetName: Model0PHgGtUBSnippetName, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200256>>> {
            const localVarAxiosArgs = await ZoneSnippetsApiAxiosParamCreator(configuration).zoneSnippetsSnippet(zoneIdentifier, snippetName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Snippet Content
         * @param {Model0PHgGtUBIdentifier} zoneIdentifier 
         * @param {Model0PHgGtUBSnippetName} snippetName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zoneSnippetsSnippetContent(zoneIdentifier: Model0PHgGtUBIdentifier, snippetName: Model0PHgGtUBSnippetName, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200258>>> {
            const localVarAxiosArgs = await ZoneSnippetsApiAxiosParamCreator(configuration).zoneSnippetsSnippetContent(zoneIdentifier, snippetName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete Snippet
         * @param {Model0PHgGtUBIdentifier} zoneIdentifier 
         * @param {Model0PHgGtUBSnippetName} snippetName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zoneSnippetsSnippetDelete(zoneIdentifier: Model0PHgGtUBIdentifier, snippetName: Model0PHgGtUBSnippetName, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200257>>> {
            const localVarAxiosArgs = await ZoneSnippetsApiAxiosParamCreator(configuration).zoneSnippetsSnippetDelete(zoneIdentifier, snippetName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Put Snippet
         * @param {Model0PHgGtUBIdentifier} zoneIdentifier 
         * @param {Model0PHgGtUBSnippetName} snippetName 
         * @param {string} [files] 
         * @param {ZoneszoneIdentifiersnippetssnippetNameMetadata} [metadata] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zoneSnippetsSnippetPutForm(zoneIdentifier: Model0PHgGtUBIdentifier, snippetName: Model0PHgGtUBSnippetName, files?: string, metadata?: ZoneszoneIdentifiersnippetssnippetNameMetadata, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200256>>> {
            const localVarAxiosArgs = await ZoneSnippetsApiAxiosParamCreator(configuration).zoneSnippetsSnippetPutForm(zoneIdentifier, snippetName, files, metadata, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Rules
         * @param {Model0PHgGtUBIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zoneSnippetsSnippetRules(zoneIdentifier: Model0PHgGtUBIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200255>>> {
            const localVarAxiosArgs = await ZoneSnippetsApiAxiosParamCreator(configuration).zoneSnippetsSnippetRules(zoneIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Put Rules
         * @param {Model0PHgGtUBIdentifier} zoneIdentifier 
         * @param {SnippetsSnippetRulesBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zoneSnippetsSnippetRulesPut(zoneIdentifier: Model0PHgGtUBIdentifier, body?: SnippetsSnippetRulesBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200255>>> {
            const localVarAxiosArgs = await ZoneSnippetsApiAxiosParamCreator(configuration).zoneSnippetsSnippetRulesPut(zoneIdentifier, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ZoneSnippetsApi - factory interface
 * @export
 */
export const ZoneSnippetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary All Snippets
         * @param {Model0PHgGtUBIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zoneSnippets(zoneIdentifier: Model0PHgGtUBIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200254>> {
            return ZoneSnippetsApiFp(configuration).zoneSnippets(zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Snippet
         * @param {Model0PHgGtUBIdentifier} zoneIdentifier 
         * @param {Model0PHgGtUBSnippetName} snippetName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zoneSnippetsSnippet(zoneIdentifier: Model0PHgGtUBIdentifier, snippetName: Model0PHgGtUBSnippetName, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200256>> {
            return ZoneSnippetsApiFp(configuration).zoneSnippetsSnippet(zoneIdentifier, snippetName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Snippet Content
         * @param {Model0PHgGtUBIdentifier} zoneIdentifier 
         * @param {Model0PHgGtUBSnippetName} snippetName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zoneSnippetsSnippetContent(zoneIdentifier: Model0PHgGtUBIdentifier, snippetName: Model0PHgGtUBSnippetName, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200258>> {
            return ZoneSnippetsApiFp(configuration).zoneSnippetsSnippetContent(zoneIdentifier, snippetName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Snippet
         * @param {Model0PHgGtUBIdentifier} zoneIdentifier 
         * @param {Model0PHgGtUBSnippetName} snippetName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zoneSnippetsSnippetDelete(zoneIdentifier: Model0PHgGtUBIdentifier, snippetName: Model0PHgGtUBSnippetName, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200257>> {
            return ZoneSnippetsApiFp(configuration).zoneSnippetsSnippetDelete(zoneIdentifier, snippetName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Put Snippet
         * @param {Model0PHgGtUBIdentifier} zoneIdentifier 
         * @param {Model0PHgGtUBSnippetName} snippetName 
         * @param {string} [files] 
         * @param {ZoneszoneIdentifiersnippetssnippetNameMetadata} [metadata] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zoneSnippetsSnippetPutForm(zoneIdentifier: Model0PHgGtUBIdentifier, snippetName: Model0PHgGtUBSnippetName, files?: string, metadata?: ZoneszoneIdentifiersnippetssnippetNameMetadata, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200256>> {
            return ZoneSnippetsApiFp(configuration).zoneSnippetsSnippetPutForm(zoneIdentifier, snippetName, files, metadata, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Rules
         * @param {Model0PHgGtUBIdentifier} zoneIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zoneSnippetsSnippetRules(zoneIdentifier: Model0PHgGtUBIdentifier, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200255>> {
            return ZoneSnippetsApiFp(configuration).zoneSnippetsSnippetRules(zoneIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Put Rules
         * @param {Model0PHgGtUBIdentifier} zoneIdentifier 
         * @param {SnippetsSnippetRulesBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async zoneSnippetsSnippetRulesPut(zoneIdentifier: Model0PHgGtUBIdentifier, body?: SnippetsSnippetRulesBody, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200255>> {
            return ZoneSnippetsApiFp(configuration).zoneSnippetsSnippetRulesPut(zoneIdentifier, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ZoneSnippetsApi - object-oriented interface
 * @export
 * @class ZoneSnippetsApi
 * @extends {BaseAPI}
 */
export class ZoneSnippetsApi extends BaseAPI {
    /**
     * 
     * @summary All Snippets
     * @param {Model0PHgGtUBIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZoneSnippetsApi
     */
    public async zoneSnippets(zoneIdentifier: Model0PHgGtUBIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200254>> {
        return ZoneSnippetsApiFp(this.configuration).zoneSnippets(zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Snippet
     * @param {Model0PHgGtUBIdentifier} zoneIdentifier 
     * @param {Model0PHgGtUBSnippetName} snippetName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZoneSnippetsApi
     */
    public async zoneSnippetsSnippet(zoneIdentifier: Model0PHgGtUBIdentifier, snippetName: Model0PHgGtUBSnippetName, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200256>> {
        return ZoneSnippetsApiFp(this.configuration).zoneSnippetsSnippet(zoneIdentifier, snippetName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Snippet Content
     * @param {Model0PHgGtUBIdentifier} zoneIdentifier 
     * @param {Model0PHgGtUBSnippetName} snippetName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZoneSnippetsApi
     */
    public async zoneSnippetsSnippetContent(zoneIdentifier: Model0PHgGtUBIdentifier, snippetName: Model0PHgGtUBSnippetName, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200258>> {
        return ZoneSnippetsApiFp(this.configuration).zoneSnippetsSnippetContent(zoneIdentifier, snippetName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Delete Snippet
     * @param {Model0PHgGtUBIdentifier} zoneIdentifier 
     * @param {Model0PHgGtUBSnippetName} snippetName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZoneSnippetsApi
     */
    public async zoneSnippetsSnippetDelete(zoneIdentifier: Model0PHgGtUBIdentifier, snippetName: Model0PHgGtUBSnippetName, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200257>> {
        return ZoneSnippetsApiFp(this.configuration).zoneSnippetsSnippetDelete(zoneIdentifier, snippetName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Put Snippet
     * @param {Model0PHgGtUBIdentifier} zoneIdentifier 
     * @param {Model0PHgGtUBSnippetName} snippetName 
     * @param {string} [files] 
     * @param {ZoneszoneIdentifiersnippetssnippetNameMetadata} [metadata] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZoneSnippetsApi
     */
    public async zoneSnippetsSnippetPutForm(zoneIdentifier: Model0PHgGtUBIdentifier, snippetName: Model0PHgGtUBSnippetName, files?: string, metadata?: ZoneszoneIdentifiersnippetssnippetNameMetadata, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200256>> {
        return ZoneSnippetsApiFp(this.configuration).zoneSnippetsSnippetPutForm(zoneIdentifier, snippetName, files, metadata, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Rules
     * @param {Model0PHgGtUBIdentifier} zoneIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZoneSnippetsApi
     */
    public async zoneSnippetsSnippetRules(zoneIdentifier: Model0PHgGtUBIdentifier, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200255>> {
        return ZoneSnippetsApiFp(this.configuration).zoneSnippetsSnippetRules(zoneIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Put Rules
     * @param {Model0PHgGtUBIdentifier} zoneIdentifier 
     * @param {SnippetsSnippetRulesBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZoneSnippetsApi
     */
    public async zoneSnippetsSnippetRulesPut(zoneIdentifier: Model0PHgGtUBIdentifier, body?: SnippetsSnippetRulesBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200255>> {
        return ZoneSnippetsApiFp(this.configuration).zoneSnippetsSnippetRulesPut(zoneIdentifier, body, options).then((request) => request(this.axios, this.basePath));
    }
}
