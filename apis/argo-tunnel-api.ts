/* tslint:disable */
/* eslint-disable */
/**
 * Cloudflare API
 * Interact with Cloudflare's products and services via the Cloudflare API.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AccountIdentifierTunnelsBody } from '../models';
import { InlineResponse4XX63 } from '../models';
import { InlineResponse4XX64 } from '../models';
import { T2xGLLqvCfAccountId } from '../models';
import { T2xGLLqvEmptyResponse } from '../models';
import { T2xGLLqvLegacyTunnelResponseSingle } from '../models';
import { T2xGLLqvTunnelId } from '../models';
/**
 * ArgoTunnelApi - axios parameter creator
 * @export
 */
export const ArgoTunnelApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Removes connections that are in a disconnected or pending reconnect state. We recommend running this command after shutting down a tunnel.
         * @summary Clean up Argo Tunnel connections
         * @param {any} body 
         * @param {T2xGLLqvTunnelId} tunnelId 
         * @param {T2xGLLqvCfAccountId} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        argoTunnelCleanUpArgoTunnelConnections: async (body: any, tunnelId: T2xGLLqvTunnelId, accountIdentifier: T2xGLLqvCfAccountId, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling argoTunnelCleanUpArgoTunnelConnections.');
            }
            // verify required parameter 'tunnelId' is not null or undefined
            if (tunnelId === null || tunnelId === undefined) {
                throw new RequiredError('tunnelId','Required parameter tunnelId was null or undefined when calling argoTunnelCleanUpArgoTunnelConnections.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling argoTunnelCleanUpArgoTunnelConnections.');
            }
            const localVarPath = `/accounts/{account_identifier}/tunnels/{tunnel_id}/connections`
                .replace(`{${"tunnel_id"}}`, encodeURIComponent(String(tunnelId)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new Argo Tunnel in an account.
         * @summary Create an Argo Tunnel
         * @param {AccountIdentifierTunnelsBody} body 
         * @param {T2xGLLqvCfAccountId} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        argoTunnelCreateAnArgoTunnel: async (body: AccountIdentifierTunnelsBody, accountIdentifier: T2xGLLqvCfAccountId, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling argoTunnelCreateAnArgoTunnel.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling argoTunnelCreateAnArgoTunnel.');
            }
            const localVarPath = `/accounts/{account_identifier}/tunnels`
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an Argo Tunnel from an account.
         * @summary Delete an Argo Tunnel
         * @param {any} body 
         * @param {T2xGLLqvTunnelId} tunnelId 
         * @param {T2xGLLqvCfAccountId} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        argoTunnelDeleteAnArgoTunnel: async (body: any, tunnelId: T2xGLLqvTunnelId, accountIdentifier: T2xGLLqvCfAccountId, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling argoTunnelDeleteAnArgoTunnel.');
            }
            // verify required parameter 'tunnelId' is not null or undefined
            if (tunnelId === null || tunnelId === undefined) {
                throw new RequiredError('tunnelId','Required parameter tunnelId was null or undefined when calling argoTunnelDeleteAnArgoTunnel.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling argoTunnelDeleteAnArgoTunnel.');
            }
            const localVarPath = `/accounts/{account_identifier}/tunnels/{tunnel_id}`
                .replace(`{${"tunnel_id"}}`, encodeURIComponent(String(tunnelId)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches a single Argo Tunnel.
         * @summary Get an Argo Tunnel
         * @param {T2xGLLqvTunnelId} tunnelId 
         * @param {T2xGLLqvCfAccountId} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        argoTunnelGetAnArgoTunnel: async (tunnelId: T2xGLLqvTunnelId, accountIdentifier: T2xGLLqvCfAccountId, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tunnelId' is not null or undefined
            if (tunnelId === null || tunnelId === undefined) {
                throw new RequiredError('tunnelId','Required parameter tunnelId was null or undefined when calling argoTunnelGetAnArgoTunnel.');
            }
            // verify required parameter 'accountIdentifier' is not null or undefined
            if (accountIdentifier === null || accountIdentifier === undefined) {
                throw new RequiredError('accountIdentifier','Required parameter accountIdentifier was null or undefined when calling argoTunnelGetAnArgoTunnel.');
            }
            const localVarPath = `/accounts/{account_identifier}/tunnels/{tunnel_id}`
                .replace(`{${"tunnel_id"}}`, encodeURIComponent(String(tunnelId)))
                .replace(`{${"account_identifier"}}`, encodeURIComponent(String(accountIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_email required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Email")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Email"] = localVarApiKeyValue;
            }

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Auth-Key")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Auth-Key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ArgoTunnelApi - functional programming interface
 * @export
 */
export const ArgoTunnelApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Removes connections that are in a disconnected or pending reconnect state. We recommend running this command after shutting down a tunnel.
         * @summary Clean up Argo Tunnel connections
         * @param {any} body 
         * @param {T2xGLLqvTunnelId} tunnelId 
         * @param {T2xGLLqvCfAccountId} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async argoTunnelCleanUpArgoTunnelConnections(body: any, tunnelId: T2xGLLqvTunnelId, accountIdentifier: T2xGLLqvCfAccountId, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<T2xGLLqvEmptyResponse>>> {
            const localVarAxiosArgs = await ArgoTunnelApiAxiosParamCreator(configuration).argoTunnelCleanUpArgoTunnelConnections(body, tunnelId, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a new Argo Tunnel in an account.
         * @summary Create an Argo Tunnel
         * @param {AccountIdentifierTunnelsBody} body 
         * @param {T2xGLLqvCfAccountId} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async argoTunnelCreateAnArgoTunnel(body: AccountIdentifierTunnelsBody, accountIdentifier: T2xGLLqvCfAccountId, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<T2xGLLqvLegacyTunnelResponseSingle>>> {
            const localVarAxiosArgs = await ArgoTunnelApiAxiosParamCreator(configuration).argoTunnelCreateAnArgoTunnel(body, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes an Argo Tunnel from an account.
         * @summary Delete an Argo Tunnel
         * @param {any} body 
         * @param {T2xGLLqvTunnelId} tunnelId 
         * @param {T2xGLLqvCfAccountId} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async argoTunnelDeleteAnArgoTunnel(body: any, tunnelId: T2xGLLqvTunnelId, accountIdentifier: T2xGLLqvCfAccountId, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<T2xGLLqvLegacyTunnelResponseSingle>>> {
            const localVarAxiosArgs = await ArgoTunnelApiAxiosParamCreator(configuration).argoTunnelDeleteAnArgoTunnel(body, tunnelId, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetches a single Argo Tunnel.
         * @summary Get an Argo Tunnel
         * @param {T2xGLLqvTunnelId} tunnelId 
         * @param {T2xGLLqvCfAccountId} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async argoTunnelGetAnArgoTunnel(tunnelId: T2xGLLqvTunnelId, accountIdentifier: T2xGLLqvCfAccountId, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<T2xGLLqvLegacyTunnelResponseSingle>>> {
            const localVarAxiosArgs = await ArgoTunnelApiAxiosParamCreator(configuration).argoTunnelGetAnArgoTunnel(tunnelId, accountIdentifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ArgoTunnelApi - factory interface
 * @export
 */
export const ArgoTunnelApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Removes connections that are in a disconnected or pending reconnect state. We recommend running this command after shutting down a tunnel.
         * @summary Clean up Argo Tunnel connections
         * @param {any} body 
         * @param {T2xGLLqvTunnelId} tunnelId 
         * @param {T2xGLLqvCfAccountId} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async argoTunnelCleanUpArgoTunnelConnections(body: any, tunnelId: T2xGLLqvTunnelId, accountIdentifier: T2xGLLqvCfAccountId, options?: AxiosRequestConfig): Promise<AxiosResponse<T2xGLLqvEmptyResponse>> {
            return ArgoTunnelApiFp(configuration).argoTunnelCleanUpArgoTunnelConnections(body, tunnelId, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new Argo Tunnel in an account.
         * @summary Create an Argo Tunnel
         * @param {AccountIdentifierTunnelsBody} body 
         * @param {T2xGLLqvCfAccountId} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async argoTunnelCreateAnArgoTunnel(body: AccountIdentifierTunnelsBody, accountIdentifier: T2xGLLqvCfAccountId, options?: AxiosRequestConfig): Promise<AxiosResponse<T2xGLLqvLegacyTunnelResponseSingle>> {
            return ArgoTunnelApiFp(configuration).argoTunnelCreateAnArgoTunnel(body, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes an Argo Tunnel from an account.
         * @summary Delete an Argo Tunnel
         * @param {any} body 
         * @param {T2xGLLqvTunnelId} tunnelId 
         * @param {T2xGLLqvCfAccountId} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async argoTunnelDeleteAnArgoTunnel(body: any, tunnelId: T2xGLLqvTunnelId, accountIdentifier: T2xGLLqvCfAccountId, options?: AxiosRequestConfig): Promise<AxiosResponse<T2xGLLqvLegacyTunnelResponseSingle>> {
            return ArgoTunnelApiFp(configuration).argoTunnelDeleteAnArgoTunnel(body, tunnelId, accountIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches a single Argo Tunnel.
         * @summary Get an Argo Tunnel
         * @param {T2xGLLqvTunnelId} tunnelId 
         * @param {T2xGLLqvCfAccountId} accountIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async argoTunnelGetAnArgoTunnel(tunnelId: T2xGLLqvTunnelId, accountIdentifier: T2xGLLqvCfAccountId, options?: AxiosRequestConfig): Promise<AxiosResponse<T2xGLLqvLegacyTunnelResponseSingle>> {
            return ArgoTunnelApiFp(configuration).argoTunnelGetAnArgoTunnel(tunnelId, accountIdentifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ArgoTunnelApi - object-oriented interface
 * @export
 * @class ArgoTunnelApi
 * @extends {BaseAPI}
 */
export class ArgoTunnelApi extends BaseAPI {
    /**
     * Removes connections that are in a disconnected or pending reconnect state. We recommend running this command after shutting down a tunnel.
     * @summary Clean up Argo Tunnel connections
     * @param {any} body 
     * @param {T2xGLLqvTunnelId} tunnelId 
     * @param {T2xGLLqvCfAccountId} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArgoTunnelApi
     */
    public async argoTunnelCleanUpArgoTunnelConnections(body: any, tunnelId: T2xGLLqvTunnelId, accountIdentifier: T2xGLLqvCfAccountId, options?: AxiosRequestConfig) : Promise<AxiosResponse<T2xGLLqvEmptyResponse>> {
        return ArgoTunnelApiFp(this.configuration).argoTunnelCleanUpArgoTunnelConnections(body, tunnelId, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates a new Argo Tunnel in an account.
     * @summary Create an Argo Tunnel
     * @param {AccountIdentifierTunnelsBody} body 
     * @param {T2xGLLqvCfAccountId} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArgoTunnelApi
     */
    public async argoTunnelCreateAnArgoTunnel(body: AccountIdentifierTunnelsBody, accountIdentifier: T2xGLLqvCfAccountId, options?: AxiosRequestConfig) : Promise<AxiosResponse<T2xGLLqvLegacyTunnelResponseSingle>> {
        return ArgoTunnelApiFp(this.configuration).argoTunnelCreateAnArgoTunnel(body, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes an Argo Tunnel from an account.
     * @summary Delete an Argo Tunnel
     * @param {any} body 
     * @param {T2xGLLqvTunnelId} tunnelId 
     * @param {T2xGLLqvCfAccountId} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArgoTunnelApi
     */
    public async argoTunnelDeleteAnArgoTunnel(body: any, tunnelId: T2xGLLqvTunnelId, accountIdentifier: T2xGLLqvCfAccountId, options?: AxiosRequestConfig) : Promise<AxiosResponse<T2xGLLqvLegacyTunnelResponseSingle>> {
        return ArgoTunnelApiFp(this.configuration).argoTunnelDeleteAnArgoTunnel(body, tunnelId, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches a single Argo Tunnel.
     * @summary Get an Argo Tunnel
     * @param {T2xGLLqvTunnelId} tunnelId 
     * @param {T2xGLLqvCfAccountId} accountIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArgoTunnelApi
     */
    public async argoTunnelGetAnArgoTunnel(tunnelId: T2xGLLqvTunnelId, accountIdentifier: T2xGLLqvCfAccountId, options?: AxiosRequestConfig) : Promise<AxiosResponse<T2xGLLqvLegacyTunnelResponseSingle>> {
        return ArgoTunnelApiFp(this.configuration).argoTunnelGetAnArgoTunnel(tunnelId, accountIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
}
